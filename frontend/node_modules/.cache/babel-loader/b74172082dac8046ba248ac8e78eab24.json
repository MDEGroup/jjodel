{"ast":null,"code":"import Api from '../../data/api';\nimport Storage from '../../data/storage';\nimport { DUser, U } from '../../joiner';\nclass AuthApi {\n  static async login(email, password) {\n    Storage.write('offline', 'false');\n    return await Api.post(`${Api.persistance}/auth/login`, {\n      email,\n      password\n    });\n  }\n  static async register(name, surname, country, affiliation, newsLetter, nickname, email, password) {\n    Storage.write('offline', 'false');\n    return await Api.post(`${Api.persistance}/auth/register`, {\n      name,\n      surname,\n      country,\n      affiliation,\n      newsLetter,\n      nickname,\n      email,\n      password\n    });\n  }\n  static async logout() {\n    if (!U.isOffline()) await Api.delete(`${Api.persistance}/auth/logout`);\n    U.resetState();\n  }\n  static offline() {\n    Storage.write('offline', 'true');\n    const user = DUser.new('Offline', 'User', 'Unknown', 'Unknown', 'Unknown', false, 'Unknown', 'Unknown', `Pointer_OfflineUser`); //`Pointer${Date.now()}_OfflineUser`);\n    Storage.write('user', user);\n  }\n}\nexport { AuthApi };","map":{"version":3,"names":["Api","Storage","DUser","U","AuthApi","login","email","password","write","post","persistance","register","name","surname","country","affiliation","newsLetter","nickname","logout","isOffline","delete","resetState","offline","user","new"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/frontend/src/api/persistance/auth.ts"],"sourcesContent":["import Api, {Response} from '../../data/api';\r\nimport Storage from '../../data/storage';\r\nimport {DUser, U} from '../../joiner';\r\n\r\nclass AuthApi {\r\n    static async login(email: string, password: string): Promise<Response> {\r\n        Storage.write('offline', 'false');\r\n        return await Api.post(`${Api.persistance}/auth/login`, {email, password});\r\n    }\r\n    static async register(name: string, surname: string, country: string, affiliation: string, newsLetter: boolean, nickname: string, email: string, password: string): Promise<Response> {\r\n        Storage.write('offline', 'false');\r\n        return await Api.post(`${Api.persistance}/auth/register`, {name, surname, country, affiliation, newsLetter, nickname, email, password});\r\n    }\r\n    static async logout(): Promise<void> {\r\n        if(!U.isOffline()) await Api.delete(`${Api.persistance}/auth/logout`);\r\n        U.resetState();\r\n    }\r\n\r\n    static offline(): void {\r\n        Storage.write('offline', 'true');\r\n        const user = DUser.new('Offline', 'User', 'Unknown', 'Unknown', 'Unknown', false, 'Unknown', 'Unknown', `Pointer_OfflineUser`);//`Pointer${Date.now()}_OfflineUser`);\r\n        Storage.write('user', user);\r\n    }\r\n}\r\n\r\nexport {AuthApi};\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAkB,gBAAgB;AAC5C,OAAOC,OAAO,MAAM,oBAAoB;AACxC,SAAQC,KAAK,EAAEC,CAAC,QAAO,cAAc;AAErC,MAAMC,OAAO,CAAC;EACV,aAAaC,KAAKA,CAACC,KAAa,EAAEC,QAAgB,EAAqB;IACnEN,OAAO,CAACO,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC;IACjC,OAAO,MAAMR,GAAG,CAACS,IAAI,CAAC,GAAGT,GAAG,CAACU,WAAW,aAAa,EAAE;MAACJ,KAAK;MAAEC;IAAQ,CAAC,CAAC;EAC7E;EACA,aAAaI,QAAQA,CAACC,IAAY,EAAEC,OAAe,EAAEC,OAAe,EAAEC,WAAmB,EAAEC,UAAmB,EAAEC,QAAgB,EAAEX,KAAa,EAAEC,QAAgB,EAAqB;IAClLN,OAAO,CAACO,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC;IACjC,OAAO,MAAMR,GAAG,CAACS,IAAI,CAAC,GAAGT,GAAG,CAACU,WAAW,gBAAgB,EAAE;MAACE,IAAI;MAAEC,OAAO;MAAEC,OAAO;MAAEC,WAAW;MAAEC,UAAU;MAAEC,QAAQ;MAAEX,KAAK;MAAEC;IAAQ,CAAC,CAAC;EAC3I;EACA,aAAaW,MAAMA,CAAA,EAAkB;IACjC,IAAG,CAACf,CAAC,CAACgB,SAAS,CAAC,CAAC,EAAE,MAAMnB,GAAG,CAACoB,MAAM,CAAC,GAAGpB,GAAG,CAACU,WAAW,cAAc,CAAC;IACrEP,CAAC,CAACkB,UAAU,CAAC,CAAC;EAClB;EAEA,OAAOC,OAAOA,CAAA,EAAS;IACnBrB,OAAO,CAACO,KAAK,CAAC,SAAS,EAAE,MAAM,CAAC;IAChC,MAAMe,IAAI,GAAGrB,KAAK,CAACsB,GAAG,CAAC,SAAS,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE,qBAAqB,CAAC,CAAC;IAC/HvB,OAAO,CAACO,KAAK,CAAC,MAAM,EAAEe,IAAI,CAAC;EAC/B;AACJ;AAEA,SAAQnB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}