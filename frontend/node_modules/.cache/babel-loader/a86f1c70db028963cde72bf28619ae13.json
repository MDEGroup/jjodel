{"ast":null,"code":"import { CoordinateMode, DViewElement, EdgeBendingMode, EdgeGapMode, GraphPoint, GraphSize, Log, store, U } from \"../joiner\";\nexport class VersionFixer {\n  // automatically updated from function names\n\n  static help() {\n    let lastVerKey = VersionFixer.prefix + 'last';\n    let lastVerName = localStorage.getItem(VersionFixer.prefix + 'last');\n    if (lastVerName) lastVerName = VersionFixer.prefix + lastVerName;else lastVerName = 'undefined';\n    console.clear();\n    let i = 1;\n    console.log(`\nBefore deploying a new version you should:\n\n${i++}?) ONLY IF IT'S FIRST TIME;\n   run DState.registerFirstTimeOnly() in the deploy version and export the localStorage variables starting with ${VersionFixer.prefix} to the dev version.\n   or call it in dev version after having temporarly undone the pending updates if possible, otherwise next steps might fail.\n   \n${i++}?) ONLY IF there are entirely new kinds of D-objects or optional new sub-structures in D-objects (like View.palette), update buildVersionSignature() method\n \n\n${i++}) build a new empty versioning function with signature: private ['2.1 -> 2.3'](s: DState): DState\n\n${i++}) in DState update DState.version.n (leave date and conversionList unchanged)\n\n${i++}) open a new empty project (no models no metamodels)\n   to find out what changed in the state between version without risking human error, i made an automatic detection.\n   call VersionFixer.checkVersionChanges() in browser console to see what changed need conversion in the function (i would save the result as comment inside the func)\n\n${i++}) fill the empty function of step (1), in a way that translates from the state shape of the old version, to the state shape of the new one\n\n${i++}) only after the transition function is complete, call VersionFixer.registerNewVersion();\n   it will both validate the version update function and store the new version as baseline.\n   (needs to be done last because checkVersionChanges will stop working until a new version is ready)\n   \nBEWARE: this approach cannot detect changes of valid values where the type did not change. eg if view.appliableTo = 'string' change his valid string values but not his type;\neverytime you put hands into a D-Object shape or valid values, you should document them to be able to write a conversion function later on.\n        `);\n  }\n  static checkVersionChanges() {\n    let lastVerName = localStorage.getItem(VersionFixer.prefix + 'last');\n    let lastVerState = localStorage.getItem(VersionFixer.prefix + lastVerName);\n    let lastVersionSignature = JSON.parse(lastVerState || '{not:\"found\"}');\n    let newVersionSignature = this.buildVersionSignature();\n    return VersionFixer.checkVersionChanges_inner(lastVersionSignature, newVersionSignature);\n  }\n  static checkVersionChanges_inner(s1, s2) {\n    return U.objectDelta(s1, s2, true);\n  }\n  static registerFirstTimeOnly() {\n    let newVersionSignature = VersionFixer.buildVersionSignature();\n    localStorage.setItem(VersionFixer.prefix + 'last', '' + newVersionSignature.version.n);\n    localStorage.setItem(VersionFixer.prefix + '' + newVersionSignature.version.n, JSON.stringify(newVersionSignature));\n  }\n  static registerNewVersion() {\n    let lastVerName = localStorage.getItem(VersionFixer.prefix + 'last');\n    let prevVersionSignature = JSON.parse(localStorage.getItem(VersionFixer.prefix + lastVerName) || '{not:\"found\"}');\n    let newVersionSignature = VersionFixer.buildVersionSignature();\n    let updatedVersionSignature = this.update(prevVersionSignature);\n    let versionDiff = VersionFixer.checkVersionChanges_inner(updatedVersionSignature, newVersionSignature);\n    if (Object.keys(versionDiff).length !== 0) {\n      console.log(\"failed to save new version, the conversion function is not updating state properly.\", {\n        versionDiff,\n        prevVersionSignature,\n        newVersionSignature,\n        updatedVersionSignature\n      });\n      return false;\n    }\n    localStorage.setItem(VersionFixer.prefix + 'last', '' + newVersionSignature.version.n);\n    localStorage.setItem(VersionFixer.prefix + '' + newVersionSignature.version.n, JSON.stringify(newVersionSignature));\n    return true;\n  }\n  static buildVersionSignature() {\n    // purpose: save in state 1 of each D-objects with all the possible sub-objects in every possible structure shape\n    // values can be dummy but syntactical valid\n    //DState.new(); nope, i'm using current state, just call it from an empty project with no models.\n    DViewElement.new2(\"View\", \"jsx\", undefined, d => {\n      d.appliableTo = 'Any';\n      d.subViews = {\n        [\"Sample-fake-subView\"]: 3.5\n      };\n      d.oclUpdateCondition = '(view: LViewElement) => { return false; } <--- as a string';\n      d.defaultVSize = new GraphSize(5, 5, 5, 5);\n      d.palette = {\n        \"color\": {\n          type: 'color',\n          value: [{\n            r: 0,\n            g: 0,\n            b: 0,\n            a: 0\n          }]\n        },\n        \"number\": {\n          type: 'number',\n          value: 4,\n          unit: 'px'\n        },\n        \"text\": {\n          type: 'text',\n          value: 'stringa'\n        },\n        \"path\": {\n          type: 'path',\n          value: 'M 00 L 1 1 Z',\n          x: '5',\n          y: '10',\n          options: [{\n            k: 'optionnale',\n            v: 'option path M 0 0 L 5 5 Z'\n          }]\n        }\n      };\n      d.events = {\n        [\"function name\"]: \"function body\"\n      };\n      d.bendingMode = EdgeBendingMode.Bezier_QT;\n      d.edgeGapMode = EdgeGapMode.gap;\n      d.size = {\n        [\"node or model Pointer\"]: new GraphSize(5, 5, 5, 5)\n      };\n      d.edgeStartOffset = new GraphPoint(5, 5);\n      d.edgeEndOffset = new GraphPoint(5, 5);\n      d.edgePointCoordMode = CoordinateMode.relativePercent;\n      d.edgeHeadSize = new GraphPoint(5, 5);\n      d.edgeTailSize = new GraphPoint(5, 5);\n    }, true, 'DViewElement');\n    return store.getState();\n  }\n  static setup() {\n    VersionFixer.versionAdapters = {};\n    const errormsg = k => \"Version auto-updater have a updater registered incorrectly: \\\"\" + k + \"\\\", please notify the developers.\";\n    for (let k in VersionFixer) {\n      switch (k) {\n        case 'highestVersion':\n        case 'versionAdapters':\n        case 'setup':\n        case 'update':\n          break;\n      }\n      let [froms, tos] = k.split(' -> ');\n      Log.exDev(!froms.length || !tos.length, errormsg(k));\n      let from = +froms;\n      let to = +tos;\n      Log.exDev(isNaN(from) || isNaN(to), errormsg(k));\n      Log.exDev(!!VersionFixer.versionAdapters[from], \"duplicate version adapter from \\\"\" + from + \"\\\", please notify the developers.\");\n      VersionFixer.highestVersion = Math.max(VersionFixer.highestVersion, to);\n      VersionFixer.versionAdapters[from] = {\n        n: to,\n        f: VersionFixer[k]\n      };\n    }\n    return VersionFixer.versionAdapters;\n  }\n  static update(s) {\n    var _s$version;\n    if (!VersionFixer.versionAdapters) VersionFixer.setup();\n    let prevVer = ((_s$version = s.version) === null || _s$version === void 0 ? void 0 : _s$version.n) || 0;\n    let currVer = prevVer;\n    while (currVer !== VersionFixer.highestVersion) {\n      var _s$version2;\n      Log.exDev(!VersionFixer.versionAdapters[currVer], \"missing version adapter from \\\"\" + currVer + \"\\\", please notify the developers.\");\n      let {\n        n,\n        f\n      } = VersionFixer.versionAdapters[currVer];\n      s = f(s);\n      currVer = ((_s$version2 = s.version) === null || _s$version2 === void 0 ? void 0 : _s$version2.n) || 0; // the updater function also updetes the current version of new state\n      Log.exDev(currVer !== n, \"version updater updated to incorrect target versionn \\\"\" + prevVer + \"\\\" -> \\\"\" + n + \"\\\" , please notify the developers.\");\n      Log.exDev(currVer <= prevVer, \"version updater found loop at version \\\"\" + currVer + \"\\\", please notify the developers.\");\n      prevVer = currVer;\n    }\n    return s;\n  }\n  d(ptr, s) {\n    return s.idlookup[ptr];\n    // {n}\n  }\n  ['0 -> 2.1'](s) {\n    s.version = {\n      n: 2.1,\n      date: \"_reconverted\",\n      conversionList: [0]\n    };\n    return s;\n  }\n  ['2.1 -> 2.2'](s) {\n    s.version.conversionList = [...s.version.conversionList, s.version.n];\n    s.version.n = 2.2;\n    // let ls: LState = LPointerTargetable.from(s); nope, avoid L-ojects. actions would fire in present state instead of in parameter state\n    for (let c of s.classs.map(p => this.d(p, s))) {\n      c.isSingleton = !!c.isSingleton; // booleanize the undefined\n      c.sealed = [];\n      c.final = false;\n      c.rootable = undefined;\n    }\n    for (let c of Object.values(s.idlookup)) {\n      if ((c === null || c === void 0 ? void 0 : c.className) && c.id && c.isCrossReference === undefined) c.isCrossReference = false;\n    }\n    for (let c of s.viewelements.map(p => this.d(p, s))) {\n      c.father = c.viewpoint;\n    }\n    for (let c of s.viewpoints.map(p => this.d(p, s))) {\n      c.cssIsGlobal = true;\n    }\n    for (let c of s.projects.map(p => this.d(p, s))) {\n      c.favorite = {};\n      c.description = '';\n    }\n    for (let c of s.references.map(p => this.d(p, s))) {\n      if (c.composition === undefined) c.aggregation = !(c.composition = !!c.containment);\n    }\n    for (let c of s.models.map(p => this.d(p, s))) {\n      if (c.dependencies === undefined) c.dependencies = [];\n    }\n    for (let c of s.attributes.map(p => this.d(p, s))) {\n      c.derived = !!c.derived;\n      c.derived_write = undefined; // c.derived ? '' : undefined;\n      c.derived_read = undefined; // c.derived ? '' : undefined;\n    }\n    let d2 = null;\n    return s;\n  }\n}\nVersionFixer.versionAdapters = VersionFixer.setup();\nVersionFixer.highestVersion = 0;\nVersionFixer.prefix = '__jodel_versioning_';","map":{"version":3,"names":["CoordinateMode","DViewElement","EdgeBendingMode","EdgeGapMode","GraphPoint","GraphSize","Log","store","U","VersionFixer","help","lastVerKey","prefix","lastVerName","localStorage","getItem","console","clear","i","log","checkVersionChanges","lastVerState","lastVersionSignature","JSON","parse","newVersionSignature","buildVersionSignature","checkVersionChanges_inner","s1","s2","objectDelta","registerFirstTimeOnly","setItem","version","n","stringify","registerNewVersion","prevVersionSignature","updatedVersionSignature","update","versionDiff","Object","keys","length","new2","undefined","d","appliableTo","subViews","oclUpdateCondition","defaultVSize","palette","type","value","r","g","b","a","unit","x","y","options","k","v","events","bendingMode","Bezier_QT","edgeGapMode","gap","size","edgeStartOffset","edgeEndOffset","edgePointCoordMode","relativePercent","edgeHeadSize","edgeTailSize","getState","setup","versionAdapters","errormsg","froms","tos","split","exDev","from","to","isNaN","highestVersion","Math","max","f","s","_s$version","prevVer","currVer","_s$version2","ptr","idlookup","0 -> 2.1","date","conversionList","2.1 -> 2.2","c","classs","map","p","isSingleton","sealed","final","rootable","values","className","id","isCrossReference","viewelements","father","viewpoint","viewpoints","cssIsGlobal","projects","favorite","description","references","composition","aggregation","containment","models","dependencies","attributes","derived","derived_write","derived_read","d2"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/src/redux/VersionFixer.ts"],"sourcesContent":["import {\r\n    CoordinateMode,\r\n    Defaults,\r\n    Dictionary, DocString, DPointerTargetable, DReference,\r\n    DState, DStructuralFeature,\r\n    DViewElement,\r\n    EdgeBendingMode,\r\n    EdgeGapMode,\r\n    GObject,\r\n    GraphPoint,\r\n    GraphSize, LClass,\r\n    Log, LPointerTargetable, LState, Pointer, store,\r\n    U\r\n} from \"../joiner\";\r\nimport {NumberControl, PaletteControl, PathControl, StringControl} from \"../view/viewElement/view\";\r\n\r\n\r\nexport class VersionFixer {\r\n    private static versionAdapters: Dictionary<number/*version*/, {n: number, f:(s: DState)=>DState}> = VersionFixer.setup();\r\n    private static highestVersion: number = 0; // automatically updated from function names\r\n    private static prefix: string = '__jodel_versioning_';\r\n    public static help(){\r\n        let lastVerKey = VersionFixer.prefix+'last';\r\n        let lastVerName = localStorage.getItem( VersionFixer.prefix+'last');\r\n        if (lastVerName) lastVerName = VersionFixer.prefix+ lastVerName; else lastVerName = 'undefined';\r\n        console.clear();\r\n        let i: number  = 1;\r\n        console.log(`\r\nBefore deploying a new version you should:\r\n\r\n${i++}?) ONLY IF IT'S FIRST TIME;\r\n   run DState.registerFirstTimeOnly() in the deploy version and export the localStorage variables starting with ${VersionFixer.prefix} to the dev version.\r\n   or call it in dev version after having temporarly undone the pending updates if possible, otherwise next steps might fail.\r\n   \r\n${i++}?) ONLY IF there are entirely new kinds of D-objects or optional new sub-structures in D-objects (like View.palette), update buildVersionSignature() method\r\n \r\n\r\n${i++}) build a new empty versioning function with signature: private ['2.1 -> 2.3'](s: DState): DState\r\n\r\n${i++}) in DState update DState.version.n (leave date and conversionList unchanged)\r\n\r\n${i++}) open a new empty project (no models no metamodels)\r\n   to find out what changed in the state between version without risking human error, i made an automatic detection.\r\n   call VersionFixer.checkVersionChanges() in browser console to see what changed need conversion in the function (i would save the result as comment inside the func)\r\n\r\n${i++}) fill the empty function of step (1), in a way that translates from the state shape of the old version, to the state shape of the new one\r\n\r\n${i++}) only after the transition function is complete, call VersionFixer.registerNewVersion();\r\n   it will both validate the version update function and store the new version as baseline.\r\n   (needs to be done last because checkVersionChanges will stop working until a new version is ready)\r\n   \r\nBEWARE: this approach cannot detect changes of valid values where the type did not change. eg if view.appliableTo = 'string' change his valid string values but not his type;\r\neverytime you put hands into a D-Object shape or valid values, you should document them to be able to write a conversion function later on.\r\n        `);\r\n    }\r\n\r\n    public static checkVersionChanges(): GObject{\r\n        let lastVerName = localStorage.getItem(VersionFixer.prefix+'last');\r\n        let lastVerState = localStorage.getItem(VersionFixer.prefix+lastVerName);\r\n        let lastVersionSignature = JSON.parse(lastVerState || '{not:\"found\"}');\r\n        let newVersionSignature = this.buildVersionSignature();\r\n        return VersionFixer.checkVersionChanges_inner(lastVersionSignature, newVersionSignature);\r\n    }\r\n\r\n    public static checkVersionChanges_inner(s1: DState, s2:DState): GObject{ return U.objectDelta(s1, s2, true); }\r\n\r\n    public static registerFirstTimeOnly(): void {\r\n        let newVersionSignature = VersionFixer.buildVersionSignature();\r\n        localStorage.setItem(VersionFixer.prefix+'last', ''+newVersionSignature.version.n);\r\n        localStorage.setItem(VersionFixer.prefix+''+newVersionSignature.version.n, JSON.stringify(newVersionSignature));\r\n    }\r\n\r\n    public static registerNewVersion(): boolean {\r\n        let lastVerName = localStorage.getItem(VersionFixer.prefix+'last');\r\n        let prevVersionSignature: DState = JSON.parse(localStorage.getItem(VersionFixer.prefix+lastVerName) || '{not:\"found\"}') as any;\r\n        let newVersionSignature = VersionFixer.buildVersionSignature();\r\n        let updatedVersionSignature = this.update(prevVersionSignature);\r\n        let versionDiff: GObject = VersionFixer.checkVersionChanges_inner(updatedVersionSignature, newVersionSignature);\r\n        if (Object.keys(versionDiff).length !== 0) {\r\n            console.log(\"failed to save new version, the conversion function is not updating state properly.\",\r\n                {versionDiff, prevVersionSignature, newVersionSignature, updatedVersionSignature});\r\n            return false;\r\n        }\r\n        localStorage.setItem(VersionFixer.prefix+'last', ''+newVersionSignature.version.n);\r\n        localStorage.setItem(VersionFixer.prefix+''+newVersionSignature.version.n, JSON.stringify(newVersionSignature));\r\n        return true;\r\n    }\r\n    private static buildVersionSignature(): DState {\r\n        // purpose: save in state 1 of each D-objects with all the possible sub-objects in every possible structure shape\r\n        // values can be dummy but syntactical valid\r\n        //DState.new(); nope, i'm using current state, just call it from an empty project with no models.\r\n        DViewElement.new2(\"View\", \"jsx\", undefined,(d)=>{\r\n            d.appliableTo = 'Any';\r\n            d.subViews = {[\"Sample-fake-subView\"]: 3.5};\r\n            d.oclUpdateCondition = '(view: LViewElement) => { return false; } <--- as a string'\r\n            d.defaultVSize = new GraphSize(5,5,5,5);\r\n            d.palette = {\r\n                \"color\": {type:'color', value: [{r:0, g:0, b:0, a:0}]} as PaletteControl,\r\n                \"number\": {type:'number', value: 4, unit: 'px'} as NumberControl,\r\n                \"text\": {type:'text', value: 'stringa'} as StringControl,\r\n                \"path\": {type:'path', value: 'M 00 L 1 1 Z', x: '5', y: '10', options: [{k: 'optionnale', v:'option path M 0 0 L 5 5 Z'}]} as PathControl,\r\n            };\r\n            d.events = {[\"function name\"]: \"function body\"};\r\n            d.bendingMode = EdgeBendingMode.Bezier_QT;\r\n            d.edgeGapMode = EdgeGapMode.gap;\r\n            d.size = {[\"node or model Pointer\"]: new GraphSize(5,5,5,5)};\r\n            d.edgeStartOffset = new GraphPoint(5,5);\r\n            d.edgeEndOffset = new GraphPoint(5,5);\r\n            d.edgePointCoordMode = CoordinateMode.relativePercent;\r\n            d.edgeHeadSize = new GraphPoint(5,5);\r\n            d.edgeTailSize = new GraphPoint(5,5);\r\n        }, true, 'DViewElement');\r\n\r\n\r\n\r\n        return store.getState();\r\n    }\r\n\r\n\r\n    private static setup(): (typeof VersionFixer)[\"versionAdapters\"]{\r\n        VersionFixer.versionAdapters = {};\r\n        const errormsg = (k: string)=>\"Version auto-updater have a updater registered incorrectly: \\\"\" + k + \"\\\", please notify the developers.\"\r\n        for (let k in VersionFixer){\r\n            switch(k){\r\n                case 'highestVersion': case 'versionAdapters':\r\n                case 'setup': case 'update': break;\r\n            }\r\n            let [froms, tos] = k.split(' -> ');\r\n            Log.exDev(!froms.length || !tos.length, errormsg(k));\r\n            let from = +froms; let to = +tos;\r\n            Log.exDev(isNaN(from) || isNaN(to), errormsg(k));\r\n            Log.exDev(!!VersionFixer.versionAdapters[from], \"duplicate version adapter from \\\"\"+from+\"\\\", please notify the developers.\")\r\n            VersionFixer.highestVersion = Math.max(VersionFixer.highestVersion, to);\r\n            VersionFixer.versionAdapters[from] = {n:to, f: (VersionFixer as any)[k]}\r\n        }\r\n        return VersionFixer.versionAdapters;\r\n    }\r\n\r\n    public static update(s: DState): DState{\r\n        if (!VersionFixer.versionAdapters) VersionFixer.setup();\r\n        let prevVer = s.version?.n || 0;\r\n        let currVer = prevVer;\r\n        while(currVer !== VersionFixer.highestVersion) {\r\n            Log.exDev(!VersionFixer.versionAdapters[currVer], \"missing version adapter from \\\"\"+ currVer+\"\\\", please notify the developers.\");\r\n            let {n, f} = VersionFixer.versionAdapters[currVer];\r\n            s = f(s);\r\n            currVer = s.version?.n || 0; // the updater function also updetes the current version of new state\r\n            Log.exDev(currVer !== n, \"version updater updated to incorrect target versionn \\\"\"+prevVer+\"\\\" -> \\\"\"+n+\"\\\" , please notify the developers.\");\r\n            Log.exDev(currVer <= prevVer, \"version updater found loop at version \\\"\"+currVer+\"\\\", please notify the developers.\");\r\n            prevVer = currVer;\r\n        }\r\n        return s;\r\n    }\r\n\r\n\r\n    private d<D extends DPointerTargetable, L extends LPointerTargetable>(ptr: Pointer<D>, s: DState): D{\r\n        return s.idlookup[ptr] as any;\r\n        // {n}\r\n    }\r\n    private ['0 -> 2.1'](s: DState): DState {\r\n        s.version = {n: 2.1, date:\"_reconverted\", conversionList:[0]};\r\n        return s;\r\n    }\r\n    private ['2.1 -> 2.2'](s: DState): DState {\r\n        s.version.conversionList = [...s.version.conversionList, s.version.n];\r\n        s.version.n = 2.2;\r\n        // let ls: LState = LPointerTargetable.from(s); nope, avoid L-ojects. actions would fire in present state instead of in parameter state\r\n        for (let c of (s.classs).map(p=> this.d(p, s))) {\r\n            c.isSingleton = !!c.isSingleton; // booleanize the undefined\r\n            c.sealed = [];\r\n            c.final = false;\r\n            c.rootable = undefined;\r\n        }\r\n        for (let c of Object.values(s.idlookup) as any[]) { if (c?.className && c.id && c.isCrossReference === undefined) c.isCrossReference = false; }\r\n        for (let c of (s.viewelements).map(p=> this.d(p, s))) { c.father = c.viewpoint; }\r\n        for (let c of (s.viewpoints).map(p=> this.d(p, s))) { c.cssIsGlobal = true; }\r\n        for (let c of (s.projects).map(p=> this.d(p, s))) { c.favorite = {}; c.description = ''; }\r\n        for (let c of (s.references).map(p=> this.d(p, s))) { if (c.composition === undefined) c.aggregation = !(c.composition = !!(c as any).containment); }\r\n        for (let c of (s.models).map(p=> this.d(p, s))) { if (c.dependencies === undefined) c.dependencies = []; }\r\n        for (let c of (s.attributes).map(p=> this.d(p, s))) {\r\n            c.derived = !!c.derived;\r\n            c.derived_write = undefined; // c.derived ? '' : undefined;\r\n            c.derived_read = undefined; // c.derived ? '' : undefined;\r\n        }\r\n\r\n        let d2: DStructuralFeature = null as any as DReference;\r\n        return s;\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}