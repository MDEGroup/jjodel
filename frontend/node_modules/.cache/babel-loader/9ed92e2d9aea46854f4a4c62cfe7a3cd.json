{"ast":null,"code":"var _class, _class3;\nimport { CreateElementAction, DAttribute, DClass, DModel, DEnumerator, DEnumLiteral, DGraph, DObject, DOperation, DPackage, DPointerTargetable, DReference, DUser, DValue, DViewElement, RuntimeAccessible, SetRootFieldAction, ShortAttribETypes } from \"../joiner\";\nimport { DV } from \"../common/DV\";\nimport { DViewPoint } from \"../view/viewPoint/viewpoint\";\nconsole.warn('ts loading store');\n\n// @RuntimeAccessible\n// NB: le voci che iniziano con '_' sono personali e non condivise\n\n// export const statehistory_obsoleteidea: {past: IStore[], current: IStore, future: IStore[]} = { past:[], current: null, future:[] } as any;\nexport const statehistory = {\n  globalcanundostate: false\n};\nstatehistory[DUser.current] = {\n  undoable: [],\n  redoable: []\n}; // todo: make it able to combine last 2 changes with a keystroke. reapeat N times to combine N actions. let it \"redo\" multiple times, it's like recording a macro.\n\nwindow.statehistory = statehistory;\nexport class IStore {\n  // Pointer<DModel, 0, 'N'>[] = [];\n\n  // users: Dictionary<DocString<Pointer<DUser>>, UserState> = {};\n  // collaborators: UserState[];\n\n  //// DClass section to fill\n\n  //my addon\n\n  /// DClass section end\n\n  //dragging: {random: number, id: string} = { random: 0, id: \"\" }; fix\n  // delete\n\n  // private, non-shared fields\n\n  constructor() {\n    this.logs = [];\n    this.models = [];\n    this.currentUser = void 0;\n    this.viewelements = [];\n    this.stackViews = [];\n    this.idlookup = {};\n    this.graphs = [];\n    this.voidvertexs = [];\n    this.vertexs = [];\n    this.graphvertexs = [];\n    this.edgepoints = [];\n    this.extEdges = [];\n    this.refEdges = [];\n    this.classifiers = [];\n    this.enumerators = [];\n    this.packages = [];\n    this.primitiveTypes = [];\n    this.attributes = [];\n    this.enumliterals = [];\n    this.references = [];\n    this.classs = [];\n    this.operations = [];\n    this.parameters = [];\n    this.returnTypes = [];\n    this.isEdgePending = {\n      user: '',\n      source: ''\n    };\n    this.contextMenu = {\n      display: false,\n      x: 0,\n      y: 0\n    };\n    this.edges = [];\n    this.deleted = [];\n    this.objects = [];\n    this.values = [];\n    this._lastSelected = void 0;\n    this.users = void 0;\n    this._edgeSettings = {\n      strokeWidth: 1,\n      color: '#000000',\n      zIndex: 150,\n      path: 'smooth'\n    };\n    this._edgesDisplayed = {\n      extend: true,\n      referenceM2: true,\n      referenceM1: true\n    };\n    this.viewpoint = '';\n    this.viewpoints = [];\n    this.m2models = [];\n    this.m1models = [];\n    this.user = null;\n    // todo: this must become a pointer to idlookup and fire a CreateNewElementAction\n    this.currentUser = DUser.new(undefined, false);\n    this.users = [this.currentUser.id];\n    this.models = [];\n  }\n  static fakeinit(store) {\n    const graphDefaultViews = makeDefaultGraphViews();\n    for (let graphDefaultView of graphDefaultViews) {\n      CreateElementAction.new(graphDefaultView);\n    }\n    const viewpoint = DViewPoint.new('Default');\n    CreateElementAction.new(viewpoint);\n    SetRootFieldAction.new('viewpoint', viewpoint.id, '', true);\n    /*\r\n            const dMetaModel = DModel.new(\"Metamodel\", undefined, true, true);\r\n            // CreateElementAction.new(dMetaModel);\r\n            CreateElementAction.new(DGraph.new(dMetaModel.id));\r\n            SetRootFieldAction.new('metamodel', dMetaModel.id, '', true);\r\n    \r\n    */\n\n    for (let primitiveType of Object.values(ShortAttribETypes)) {\n      let dPrimitiveType;\n      if (primitiveType === ShortAttribETypes.void) continue; // or make void too without primitiveType = true, but with returnType = true?\n      else dPrimitiveType = DClass.new(primitiveType, false, false, true, false, '', undefined, true);\n      // CreateElementAction.new(dPrimitiveType);\n      SetRootFieldAction.new('primitiveTypes', dPrimitiveType.id, '+=', true);\n    }\n    /*\r\n            const returnTypes = [\"void\", \"undefined\", \"null\"]; // rimosso undefined dovrebbe essere come void (in ShortAttribEtypes, null Ã¨ ritornato solo dalle funzioni che normalmente ritornano qualche DObject, quindi tipizzato con quel DObject\r\n            for (let returnType of returnTypes) {\r\n                const dReturnType = DClass.new(returnType);\r\n                CreateElementAction.new(dReturnType);\r\n                SetRootFieldAction.new(\"returnTypes\", dReturnType.id, '+=', true);\r\n            }*/\n\n    /*\r\n    const dMetaModel = DModel.new(\"Metamodel\");\r\n    CreateElementAction.new(dMetaModel);\r\n    CreateElementAction.new(DGraph.new(dMetaModel.id));\r\n      const dModel: DModel = DModel.new('Model');\r\n    dModel.isMetamodel = false; dModel.father = dMetaModel.id;\r\n    CreateElementAction.new(dModel);\r\n    CreateElementAction.new(DGraph.new(dModel.id));\r\n    SetFieldAction.new(dMetaModel, 'models', dModel.id, '+=', true);\r\n    */\n  }\n  static makeM3Test() {\n    let fireAction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let outElemArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    const me = DClass.new('ModelElement', true);\n    const annotation = DClass.new('Annotation');\n    annotation.implements = [me.id];\n    const namedElement = DClass.new('NamedElement');\n    const attribname = DAttribute.new('name');\n    namedElement.implements = [me.id]; // , classifier.id, namedelement.id, modelelement.id]\n    namedElement.attributes = [attribname.id];\n\n    // todo: uncomment const pkg: DClass = new DClass('M3Package');\n    const pkg = DPackage.new('M3Package');\n    const attriburi = DAttribute.new('uri');\n    // todo: uncomment pkg.implements = [namedElement.id];\n    // todo: uncomment pkg.attributes = [attriburi.id];\n    const classifierref = DReference.new('classifiers');\n    // todo: uncomment pkg.references = [classifierref.id];\n\n    const model = DClass.new('M3');\n    const pkgref = DReference.new('package');\n    model.implements = [namedElement.id];\n    //pkgref.type = pkg.id;\n    const classe = DClass.new('Class', false, true);\n    classifierref.type = classe.id;\n    classe.implements = [namedElement.id]; // , classifier.id, namedelement.id, modelelement.id]\n    /// model itself outside of ecore\n    const m3 = DModel.new('M3');\n    m3.packages = [pkg.id];\n    // const m3graph: DGraph = DGraph.create(m3.id);\n    const m3graph = DGraph.new(m3.id);\n    // m3.modellingElements = [me.id, annotation.id, namedElement.id, attribname.id, pkg.id, attriburi.id, classifierref.id, pkgref.id, classe.id];\n    // dispatching actions\n\n    const editinput = \"<Input className={''} field={'name'} />\";\n    // let m3view: DViewElement = new DViewElement('m3View', '<p style={{display: \"flex\", flexFlow: \"wrap\"}}><h1>m3view {this.data.name + (this.data.id)}</h1><i>{JSON.stringify(Object.keys(this))}</i>' + editinput + '</p>');\n    // let editView: DViewElement = makeEditView();\n    let graphDefaultViews = makeDefaultGraphViews();\n    outElemArray.push.call(outElemArray, m3, m3graph, me, annotation, namedElement, attribname, pkg, attriburi, classifierref, pkgref, classe, ...graphDefaultViews);\n    return m3;\n  }\n}\nfunction makeDefaultGraphViews() {\n  let mview = DViewElement.new('ModelDefaultView', DV.modelView(), undefined, '', '', '', [DModel.name]);\n  mview.draggable = false;\n  mview.resizable = false; // mview.adaptWidth = true; mview.adaptHeight = true;\n  mview.adaptHeight = '-webkit-fill-available';\n  mview.adaptWidth = '-webkit-fill-available';\n  let pkgview = DViewElement.new('PackageDefaultView', DV.packageView(), undefined, '', '', '', [DPackage.name]);\n  pkgview.width = 500;\n  pkgview.height = 500;\n  pkgview.adaptHeight = false;\n  pkgview.adaptWidth = false;\n  let cview = DViewElement.new('ClassDefaultView', DV.classView(), undefined, '', '', '', [DClass.name]);\n  cview.adaptHeight = 'fit-content';\n  cview.adaptWidth = false;\n  let eview = DViewElement.new('EnumDefaultView', DV.enumeratorView(), undefined, '', '', '', [DEnumerator.name]);\n  eview.adaptHeight = 'fit-content';\n  eview.adaptWidth = false;\n  let aview = DViewElement.new('AttribDefaultView', DV.attributeView(), undefined, '', '', '', [DAttribute.name]);\n  aview.draggable = false;\n  aview.resizable = false;\n  aview.adaptWidth = true;\n  aview.display = 'contents';\n  aview.height = 0;\n  aview.adaptHeight = 'fit-content';\n  let rview = DViewElement.new('RefDefaultView', DV.referenceView(), undefined, '', '', '', [DReference.name]);\n  rview.draggable = false;\n  rview.resizable = false;\n  rview.adaptWidth = true;\n  rview.display = 'contents';\n  rview.height = 0;\n  rview.adaptHeight = 'fit-content';\n  let oview = DViewElement.new('OperationDefaultView', DV.operationView(), undefined, '', '', '', [DOperation.name]);\n  oview.draggable = false;\n  oview.resizable = false;\n  oview.adaptWidth = true;\n  oview.display = 'contents';\n  oview.height = 0;\n  oview.adaptHeight = 'fit-content';\n  let literalView = DViewElement.new('LiteralDefaultView', DV.literalView(), undefined, '', '', '', [DEnumLiteral.name]);\n  literalView.draggable = false;\n  literalView.resizable = false;\n  literalView.adaptWidth = true;\n  literalView.display = 'contents';\n  literalView.height = 0;\n  literalView.adaptHeight = 'fit-content';\n  let objectView = DViewElement.new('ObjectDefaultView', DV.objectView(), undefined, '', '', '', [DObject.name]);\n  objectView.adaptHeight = 'fit-content';\n  objectView.adaptWidth = false;\n  let valueView = DViewElement.new('ValueDefaultView', DV.valueView(), undefined, '', '', '', [DValue.name]);\n  valueView.draggable = false;\n  valueView.resizable = false;\n  valueView.adaptWidth = true;\n  valueView.display = 'contents';\n  valueView.height = 0;\n  valueView.adaptHeight = 'fit-content';\n  const defaultPackage = DViewElement.new('Default Package', DV.defaultPackage());\n  defaultPackage.draggable = false;\n  defaultPackage.resizable = false;\n  defaultPackage.adaptWidth = false;\n  defaultPackage.adaptHeight = false;\n  defaultPackage.query = `metamodel.packages.filter((pkg) => {return pkg.name === 'default'})`;\n  pkgview.subViews = [cview.id]; // childrens can use this view too todo: this is temporary\n\n  let alldefaultViews = [mview, pkgview, cview, eview, aview, rview, oview, literalView, objectView, valueView, defaultPackage];\n  mview.subViews = [mview.id, ...alldefaultViews.slice(1).map(e => e.id)]; // childrens can use this view too todo: this is temporary, should just be the sliced map of everything else.\n  return alldefaultViews;\n}\nfunction makeEditView() {\n  // let jsx = <p><h1>edit view of {this.data.name}</h1><Input className={'raw'} obj={this.view.id} field={((getPath as DViewElement).jsxString as any).$}/></p>;\n  let jsxstring = '<p style={{display: \"flex\", flexFlow: \"wrap\"}}><h1>edit view of {this.data.name}</h1><Textarea obj={this.views[1].id} field={((getPath).jsxString).$}/></p>;';\n  let view = DViewElement.new('EditView', jsxstring);\n  view.subViews = [view.id]; // childrens can use this view too, this is indented and likely definitive.\n  return view;\n}\n/*\r\nclass SynchStore{// shared on session\r\n\r\n}\r\nclass AsynchStore{ // user private\r\n    pendingUserAction: UserPendingAction[];\r\n}*/\n/*\r\n@RuntimeAccessible\r\nexport class DUserState extends DPointerTargetable {\r\n    pointerPosition?: GraphPoint;\r\n    // nope, la selezione Ã¨ vertex-wise, e il vertex Ã¨ graph-dependent. la view Ã¨ graph-indipendent. selection: Dictionary<Pointer<User, 1, 1>, Pointer<DGraphElement, 0, 'N'>[]> = {};\r\n    constructor() {\r\n        super(true);\r\n        this.className = this.constructor.name;\r\n    }\r\n}\r\n\r\n@RuntimeAccessible\r\nexport class LUserState extends MixOnlyFuncs(DUserState, LPointerTargetable) {\r\n    pointerPosition?: GraphPoint;\r\n    defaultView!: LViewElement;\r\n    // nope, la selezione Ã¨ vertex-wise, e il vertex Ã¨ graph-dependent. la view Ã¨ graph-indipendent. selection: Dictionary<Pointer<User, 1, 1>, Pointer<DGraphElement, 0, 'N'>[]> = {};\r\n\r\n}\r\nDPointerTargetable.subclasses.push(DUserState);*/\n\nexport let ViewPointState = RuntimeAccessible(_class = class ViewPointState extends DPointerTargetable {\n  constructor() {\n    super(...arguments);\n    this.name = '';\n  }\n}) || _class;\n\n// todo: ogni entitÃ  ha: dati (store), logica con operazioni, dati di presentazione, ...?\n\nexport let ModelStore = RuntimeAccessible(_class3 = class ModelStore {\n  constructor() {\n    this._meta = void 0;\n    this.instances = void 0;\n  } // todo: credo sia un Pointer? roba vecchia. oldcomment: // string memorizzata nello store, logicamente si comporta come una reference perchÃ¨ usi la stringa per recuperare un modelstore (il tipo modelstore Ã¨ di documentazione)\n  // todo: figata! getter e setter senza proxy??\n  get meta() {\n    return this._meta;\n  }\n  set meta(value) {\n    this._meta = value;\n  }\n}) || _class3;\n/*\r\ntype Cconnect = <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\r\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\r\n    mapDispatchToProps: MapDispatchToPropsNonObject<TDispatchProps, TOwnProps>\r\n): InferableComponentEnhancerWithProps<TStateProps & TDispatchProps, TOwnProps>;\r\n*/\n// export const initialState: IStore = new IStore();\n// console.info('ts loaded store');","map":{"version":3,"names":["CreateElementAction","DAttribute","DClass","DModel","DEnumerator","DEnumLiteral","DGraph","DObject","DOperation","DPackage","DPointerTargetable","DReference","DUser","DValue","DViewElement","RuntimeAccessible","SetRootFieldAction","ShortAttribETypes","DV","DViewPoint","console","warn","statehistory","globalcanundostate","current","undoable","redoable","window","IStore","constructor","logs","models","currentUser","viewelements","stackViews","idlookup","graphs","voidvertexs","vertexs","graphvertexs","edgepoints","extEdges","refEdges","classifiers","enumerators","packages","primitiveTypes","attributes","enumliterals","references","classs","operations","parameters","returnTypes","isEdgePending","user","source","contextMenu","display","x","y","edges","deleted","objects","values","_lastSelected","users","_edgeSettings","strokeWidth","color","zIndex","path","_edgesDisplayed","extend","referenceM2","referenceM1","viewpoint","viewpoints","m2models","m1models","new","undefined","id","fakeinit","store","graphDefaultViews","makeDefaultGraphViews","graphDefaultView","primitiveType","Object","dPrimitiveType","void","makeM3Test","fireAction","arguments","length","outElemArray","me","annotation","implements","namedElement","attribname","pkg","attriburi","classifierref","model","pkgref","classe","type","m3","m3graph","editinput","push","call","mview","modelView","name","draggable","resizable","adaptHeight","adaptWidth","pkgview","packageView","width","height","cview","classView","eview","enumeratorView","aview","attributeView","rview","referenceView","oview","operationView","literalView","objectView","valueView","defaultPackage","query","subViews","alldefaultViews","slice","map","e","makeEditView","jsxstring","view","ViewPointState","_class","ModelStore","_class3","_meta","instances","meta","value"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/src/redux/store.tsx"],"sourcesContent":["import type {\r\n    DClassifier,\r\n    DExtEdge,\r\n    DGraphElement,\r\n    DLog,\r\n    DModelElement,\r\n    DParameter,\r\n    DRefEdge, GObject,\r\n    LAttribute,\r\n    LClass,\r\n    LClassifier,\r\n    LEdgePoint,\r\n    LEnumerator,\r\n    LEnumLiteral,\r\n    LExtEdge,\r\n    LGraph,\r\n    LGraphVertex,\r\n    LLog,\r\n    LOperation,\r\n    LPackage,\r\n    LParameter,\r\n    LRefEdge,\r\n    LReference,\r\n    LVertex,\r\n    Pointer\r\n} from '../joiner';\r\nimport {\r\n    CreateElementAction,\r\n    DAttribute,\r\n    DClass,\r\n    DModel,\r\n    DEnumerator,\r\n    DEnumLiteral,\r\n    DGraph,\r\n    DObject,\r\n    DOperation,\r\n    DPackage,\r\n    DPointerTargetable,\r\n    DReference,\r\n    DUser,\r\n    DValue,\r\n    DViewElement,\r\n    getPath, LModel,\r\n    LObject,\r\n    LUser,\r\n    LValue, LViewElement,\r\n    RuntimeAccessible, SetFieldAction,\r\n    SetRootFieldAction, ShortAttribETypes,\r\n} from \"../joiner\";\r\nimport React from \"react\";\r\nimport { DV } from \"../common/DV\";\r\nimport LeaderLine from \"leader-line-new\";\r\nimport { DViewPoint, LViewPoint } from \"../view/viewPoint/viewpoint\";\r\n\r\nconsole.warn('ts loading store');\r\n\r\n// @RuntimeAccessible\r\n// NB: le voci che iniziano con '_' sono personali e non condivise\r\n\r\n\r\nexport interface EdgeOptions {\r\n    id: number,\r\n    options: LeaderLine.Options,\r\n    source: string,\r\n    target: string\r\n}\r\n\r\n// export const statehistory_obsoleteidea: {past: IStore[], current: IStore, future: IStore[]} = { past:[], current: null, future:[] } as any;\r\nexport const statehistory: {\r\n    [userpointer: Pointer<DUser>]: { undoable: GObject<\"delta\">[], redoable: GObject<\"delta\">[] }\r\n} & {\r\n    globalcanundostate: boolean // set to true at first user click }\r\n} = { globalcanundostate: false } as any;\r\nstatehistory[DUser.current] = { undoable: [], redoable: [] }; // todo: make it able to combine last 2 changes with a keystroke. reapeat N times to combine N actions. let it \"redo\" multiple times, it's like recording a macro.\r\n\r\n(window as any).statehistory = statehistory;\r\nexport class IStore {\r\n    logs: Pointer<DLog, 0, 'N', LLog> = [];\r\n    models: Pointer<DModel, 0, 'N'> = []; // Pointer<DModel, 0, 'N'>[] = [];\r\n    currentUser: DUser;\r\n\r\n    viewelements: Pointer<DViewElement, 0, 'N', LViewElement> = [];\r\n    stackViews: Pointer<DViewElement, 0, 'N', LViewElement> = [];\r\n\r\n    // users: Dictionary<DocString<Pointer<DUser>>, UserState> = {};\r\n    // collaborators: UserState[];\r\n    idlookup: Record<Pointer<DPointerTargetable, 1, 1>, DPointerTargetable> = {};\r\n\r\n    //// DClass section to fill\r\n    graphs: Pointer<DGraph, 0, 'N', LGraph> = [];\r\n    voidvertexs: Pointer<DGraph, 0, 'N', LGraphVertex> = [];\r\n    vertexs: Pointer<DGraph, 0, 'N', LVertex> = [];\r\n    graphvertexs: Pointer<DGraph, 0, 'N', LGraphVertex> = [];\r\n\r\n    edgepoints: Pointer<DGraph, 0, 'N', LEdgePoint> = [];\r\n    //my addon\r\n    extEdges: Pointer<DExtEdge, 0, \"N\", LExtEdge> = [];\r\n    refEdges: Pointer<DRefEdge, 0, \"N\", LRefEdge> = [];\r\n\r\n    classifiers: Pointer<DClassifier, 0, 'N', LClassifier> = [];\r\n    enumerators: Pointer<DEnumerator, 0, 'N', LEnumerator> = [];\r\n    packages: Pointer<DPackage, 0, 'N', LPackage> = [];\r\n    primitiveTypes: Pointer<DClass, 0, \"N\", LClass> = [];\r\n    attributes: Pointer<DAttribute, 0, \"N\", LAttribute> = [];\r\n    enumliterals: Pointer<DEnumLiteral, 0, \"N\", LEnumLiteral> = [];\r\n    references: Pointer<DReference, 0, \"N\", LReference> = [];\r\n    classs: Pointer<DClass, 0, \"N\", LClass> = [];\r\n    operations: Pointer<DOperation, 0, \"N\", LOperation> = [];\r\n    parameters: Pointer<DParameter, 0, \"N\", LParameter> = [];\r\n    returnTypes: Pointer<DClass, 0, \"N\", LClass> = [];\r\n    /// DClass section end\r\n\r\n    isEdgePending: { user: Pointer<DUser, 1, 1, LUser>, source: Pointer<DClass, 1, 1, LClass> } = { user: '', source: '' };\r\n\r\n    contextMenu: { display: boolean, x: number, y: number } = { display: false, x: 0, y: 0 };\r\n\r\n    //dragging: {random: number, id: string} = { random: 0, id: \"\" }; fix\r\n    edges: EdgeOptions[] = [];  // delete\r\n\r\n    deleted: string[] = [];\r\n\r\n    objects: Pointer<DObject, 0, 'N', LObject> = [];\r\n    values: Pointer<DValue, 0, 'N', LValue> = [];\r\n\r\n    // private, non-shared fields\r\n    _lastSelected?: {\r\n        node: Pointer<DGraphElement, 1, 1>,\r\n        view: Pointer<DViewElement, 1, 1>,\r\n        modelElement: Pointer<DModelElement, 0, 1> // if a node is clicked: a node and a view are present, a modelElement might be. a node can exist without a modelElement counterpart.\r\n    };\r\n    users: Pointer<DUser, 1, 'N', LUser>;\r\n    _edgeSettings = { strokeWidth: 1, color: '#000000', zIndex: 150, path: 'smooth' }\r\n    _edgesDisplayed = { extend: true, referenceM2: true, referenceM1: true }\r\n\r\n    viewpoint: Pointer<DViewPoint, 1, 1, LViewPoint> = '';\r\n    viewpoints: Pointer<DViewPoint, 0, 'N', LViewPoint> = [];\r\n\r\n    m2models: Pointer<DModel, 0, 'N', LModel> = [];\r\n    m1models: Pointer<DModel, 0, 'N', LModel> = [];\r\n\r\n    user: Pointer<DUser, 0, 1, LUser> = null;\r\n\r\n\r\n    constructor() {\r\n        // todo: this must become a pointer to idlookup and fire a CreateNewElementAction\r\n        this.currentUser = DUser.new(undefined, false);\r\n        this.users = [this.currentUser.id];\r\n        this.models = [];\r\n    }\r\n\r\n    static fakeinit(store?: IStore): void {\r\n        const graphDefaultViews: DViewElement[] = makeDefaultGraphViews();\r\n        for (let graphDefaultView of graphDefaultViews) { CreateElementAction.new(graphDefaultView); }\r\n\r\n        const viewpoint = DViewPoint.new('Default');\r\n        CreateElementAction.new(viewpoint);\r\n        SetRootFieldAction.new('viewpoint', viewpoint.id, '', true);\r\n        /*\r\n                const dMetaModel = DModel.new(\"Metamodel\", undefined, true, true);\r\n                // CreateElementAction.new(dMetaModel);\r\n                CreateElementAction.new(DGraph.new(dMetaModel.id));\r\n                SetRootFieldAction.new('metamodel', dMetaModel.id, '', true);\r\n        \r\n        */\r\n\r\n        for (let primitiveType of Object.values(ShortAttribETypes)) {\r\n            let dPrimitiveType;\r\n            if (primitiveType === ShortAttribETypes.void) continue; // or make void too without primitiveType = true, but with returnType = true?\r\n            else dPrimitiveType = DClass.new(primitiveType, false, false, true, false, '', undefined, true);\r\n            // CreateElementAction.new(dPrimitiveType);\r\n            SetRootFieldAction.new('primitiveTypes', dPrimitiveType.id, '+=', true);\r\n        }\r\n        /*\r\n                const returnTypes = [\"void\", \"undefined\", \"null\"]; // rimosso undefined dovrebbe essere come void (in ShortAttribEtypes, null Ã¨ ritornato solo dalle funzioni che normalmente ritornano qualche DObject, quindi tipizzato con quel DObject\r\n                for (let returnType of returnTypes) {\r\n                    const dReturnType = DClass.new(returnType);\r\n                    CreateElementAction.new(dReturnType);\r\n                    SetRootFieldAction.new(\"returnTypes\", dReturnType.id, '+=', true);\r\n                }*/\r\n\r\n        /*\r\n        const dMetaModel = DModel.new(\"Metamodel\");\r\n        CreateElementAction.new(dMetaModel);\r\n        CreateElementAction.new(DGraph.new(dMetaModel.id));\r\n\r\n        const dModel: DModel = DModel.new('Model');\r\n        dModel.isMetamodel = false; dModel.father = dMetaModel.id;\r\n        CreateElementAction.new(dModel);\r\n        CreateElementAction.new(DGraph.new(dModel.id));\r\n        SetFieldAction.new(dMetaModel, 'models', dModel.id, '+=', true);\r\n        */\r\n\r\n    }\r\n\r\n    static makeM3Test(fireAction: boolean = true, outElemArray: DPointerTargetable[] = []): DModel {\r\n        const me: DClass = DClass.new('ModelElement', true);\r\n        const annotation: DClass = DClass.new('Annotation');\r\n        annotation.implements = [me.id];\r\n        const namedElement: DClass = DClass.new('NamedElement');\r\n        const attribname: DAttribute = DAttribute.new('name');\r\n        namedElement.implements = [me.id]; // , classifier.id, namedelement.id, modelelement.id]\r\n        namedElement.attributes = [attribname.id];\r\n\r\n        // todo: uncomment const pkg: DClass = new DClass('M3Package');\r\n        const pkg: DPackage = DPackage.new('M3Package');\r\n        const attriburi: DAttribute = DAttribute.new('uri');\r\n        // todo: uncomment pkg.implements = [namedElement.id];\r\n        // todo: uncomment pkg.attributes = [attriburi.id];\r\n        const classifierref: DReference = DReference.new('classifiers');\r\n        // todo: uncomment pkg.references = [classifierref.id];\r\n\r\n        const model: DClass = DClass.new('M3');\r\n        const pkgref: DReference = DReference.new('package');\r\n        model.implements = [namedElement.id];\r\n        //pkgref.type = pkg.id;\r\n        const classe: DClass = DClass.new('Class', false, true);\r\n        classifierref.type = classe.id;\r\n        classe.implements = [namedElement.id]; // , classifier.id, namedelement.id, modelelement.id]\r\n        /// model itself outside of ecore\r\n        const m3: DModel = DModel.new('M3');\r\n        m3.packages = [pkg.id];\r\n        // const m3graph: DGraph = DGraph.create(m3.id);\r\n        const m3graph: DGraph = DGraph.new(m3.id);\r\n        // m3.modellingElements = [me.id, annotation.id, namedElement.id, attribname.id, pkg.id, attriburi.id, classifierref.id, pkgref.id, classe.id];\r\n        // dispatching actions\r\n\r\n\r\n        const editinput = \"<Input className={''} field={'name'} />\";\r\n        // let m3view: DViewElement = new DViewElement('m3View', '<p style={{display: \"flex\", flexFlow: \"wrap\"}}><h1>m3view {this.data.name + (this.data.id)}</h1><i>{JSON.stringify(Object.keys(this))}</i>' + editinput + '</p>');\r\n        // let editView: DViewElement = makeEditView();\r\n        let graphDefaultViews: DViewElement[] = makeDefaultGraphViews();\r\n        outElemArray.push.call(outElemArray, m3, m3graph, me, annotation, namedElement, attribname, pkg, attriburi, classifierref, pkgref, classe, ...graphDefaultViews);\r\n        return m3;\r\n    }\r\n}\r\nfunction makeDefaultGraphViews(): DViewElement[] {\r\n\r\n    let mview: DViewElement = DViewElement.new('ModelDefaultView', DV.modelView(), undefined, '', '', '', [DModel.name]);\r\n    mview.draggable = false; mview.resizable = false; // mview.adaptWidth = true; mview.adaptHeight = true;\r\n    mview.adaptHeight = '-webkit-fill-available';\r\n    mview.adaptWidth = '-webkit-fill-available';\r\n\r\n    let pkgview: DViewElement = DViewElement.new('PackageDefaultView', DV.packageView(), undefined, '', '', '', [DPackage.name]);\r\n    pkgview.width = 500; pkgview.height = 500;\r\n    pkgview.adaptHeight = false;\r\n    pkgview.adaptWidth = false;\r\n\r\n    let cview: DViewElement = DViewElement.new('ClassDefaultView', DV.classView(), undefined, '', '', '', [DClass.name]);\r\n    cview.adaptHeight = 'fit-content';\r\n    cview.adaptWidth = false;\r\n\r\n    let eview: DViewElement = DViewElement.new('EnumDefaultView', DV.enumeratorView(), undefined, '', '', '', [DEnumerator.name]);\r\n    eview.adaptHeight = 'fit-content';\r\n    eview.adaptWidth = false;\r\n\r\n    let aview: DViewElement = DViewElement.new('AttribDefaultView', DV.attributeView(), undefined, '', '', '', [DAttribute.name]);\r\n    aview.draggable = false; aview.resizable = false; aview.adaptWidth = true; aview.display = 'contents'; aview.height = 0;\r\n    aview.adaptHeight = 'fit-content';\r\n\r\n    let rview: DViewElement = DViewElement.new('RefDefaultView', DV.referenceView(), undefined, '', '', '', [DReference.name]);\r\n    rview.draggable = false; rview.resizable = false; rview.adaptWidth = true; rview.display = 'contents'; rview.height = 0;\r\n    rview.adaptHeight = 'fit-content';\r\n\r\n    let oview: DViewElement = DViewElement.new('OperationDefaultView', DV.operationView(), undefined, '', '', '', [DOperation.name]);\r\n    oview.draggable = false; oview.resizable = false; oview.adaptWidth = true; oview.display = 'contents'; oview.height = 0;\r\n    oview.adaptHeight = 'fit-content';\r\n\r\n    let literalView: DViewElement = DViewElement.new('LiteralDefaultView', DV.literalView(), undefined, '', '', '', [DEnumLiteral.name]);\r\n    literalView.draggable = false; literalView.resizable = false; literalView.adaptWidth = true; literalView.display = 'contents'; literalView.height = 0;\r\n    literalView.adaptHeight = 'fit-content';\r\n\r\n    let objectView: DViewElement = DViewElement.new('ObjectDefaultView', DV.objectView(), undefined, '', '', '', [DObject.name]);\r\n    objectView.adaptHeight = 'fit-content';\r\n    objectView.adaptWidth = false;\r\n\r\n    let valueView: DViewElement = DViewElement.new('ValueDefaultView', DV.valueView(), undefined, '', '', '', [DValue.name]);\r\n    valueView.draggable = false; valueView.resizable = false; valueView.adaptWidth = true; valueView.display = 'contents'; valueView.height = 0;\r\n    valueView.adaptHeight = 'fit-content';\r\n\r\n    const defaultPackage: DViewElement = DViewElement.new('Default Package', DV.defaultPackage());\r\n    defaultPackage.draggable = false; defaultPackage.resizable = false; defaultPackage.adaptWidth = false; defaultPackage.adaptHeight = false;\r\n    defaultPackage.query = `metamodel.packages.filter((pkg) => {return pkg.name === 'default'})`;\r\n\r\n    pkgview.subViews = [cview.id]; // childrens can use this view too todo: this is temporary\r\n\r\n    let alldefaultViews = [mview, pkgview, cview, eview, aview, rview, oview, literalView, objectView, valueView, defaultPackage];\r\n    mview.subViews = [mview.id, ...alldefaultViews.slice(1).map(e => e.id)]// childrens can use this view too todo: this is temporary, should just be the sliced map of everything else.\r\n    return alldefaultViews;\r\n}\r\n\r\nfunction makeEditView(): DViewElement {\r\n    // let jsx = <p><h1>edit view of {this.data.name}</h1><Input className={'raw'} obj={this.view.id} field={((getPath as DViewElement).jsxString as any).$}/></p>;\r\n    let jsxstring = '<p style={{display: \"flex\", flexFlow: \"wrap\"}}><h1>edit view of {this.data.name}</h1><Textarea obj={this.views[1].id} field={((getPath).jsxString).$}/></p>;';\r\n    let view: DViewElement = DViewElement.new('EditView', jsxstring);\r\n    view.subViews = [view.id]; // childrens can use this view too, this is indented and likely definitive.\r\n    return view;\r\n}\r\n/*\r\nclass SynchStore{// shared on session\r\n\r\n}\r\nclass AsynchStore{ // user private\r\n    pendingUserAction: UserPendingAction[];\r\n}*/\r\n/*\r\n@RuntimeAccessible\r\nexport class DUserState extends DPointerTargetable {\r\n    pointerPosition?: GraphPoint;\r\n    // nope, la selezione Ã¨ vertex-wise, e il vertex Ã¨ graph-dependent. la view Ã¨ graph-indipendent. selection: Dictionary<Pointer<User, 1, 1>, Pointer<DGraphElement, 0, 'N'>[]> = {};\r\n    constructor() {\r\n        super(true);\r\n        this.className = this.constructor.name;\r\n    }\r\n}\r\n\r\n@RuntimeAccessible\r\nexport class LUserState extends MixOnlyFuncs(DUserState, LPointerTargetable) {\r\n    pointerPosition?: GraphPoint;\r\n    defaultView!: LViewElement;\r\n    // nope, la selezione Ã¨ vertex-wise, e il vertex Ã¨ graph-dependent. la view Ã¨ graph-indipendent. selection: Dictionary<Pointer<User, 1, 1>, Pointer<DGraphElement, 0, 'N'>[]> = {};\r\n\r\n}\r\nDPointerTargetable.subclasses.push(DUserState);*/\r\n\r\n@RuntimeAccessible\r\nexport class ViewPointState extends DPointerTargetable {\r\n    name: string = '';\r\n}\r\n\r\n// todo: ogni entitÃ  ha: dati (store), logica con operazioni, dati di presentazione, ...?\r\n\r\n@RuntimeAccessible\r\nexport class ModelStore {\r\n    private _meta!: ModelStore | string; // todo: credo sia un Pointer? roba vecchia. oldcomment: // string memorizzata nello store, logicamente si comporta come una reference perchÃ¨ usi la stringa per recuperare un modelstore (il tipo modelstore Ã¨ di documentazione)\r\n    instances!: (ModelStore | string)[];\r\n\r\n    // todo: figata! getter e setter senza proxy??\r\n    get meta(): ModelStore | string {\r\n        return this._meta;\r\n    }\r\n\r\n    set meta(value: ModelStore | string) {\r\n        this._meta = value;\r\n    }\r\n}\r\n/*\r\ntype Cconnect = <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\r\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\r\n    mapDispatchToProps: MapDispatchToPropsNonObject<TDispatchProps, TOwnProps>\r\n): InferableComponentEnhancerWithProps<TStateProps & TDispatchProps, TOwnProps>;\r\n*/\r\n// export const initialState: IStore = new IStore();\r\n// console.info('ts loaded store');\r\n"],"mappings":";AA0BA,SACIA,mBAAmB,EACnBC,UAAU,EACVC,MAAM,EACNC,MAAM,EACNC,WAAW,EACXC,YAAY,EACZC,MAAM,EACNC,OAAO,EACPC,UAAU,EACVC,QAAQ,EACRC,kBAAkB,EAClBC,UAAU,EACVC,KAAK,EACLC,MAAM,EACNC,YAAY,EAKZC,iBAAiB,EACjBC,kBAAkB,EAAEC,iBAAiB,QAClC,WAAW;AAElB,SAASC,EAAE,QAAQ,cAAc;AAEjC,SAASC,UAAU,QAAoB,6BAA6B;AAEpEC,OAAO,CAACC,IAAI,CAAC,kBAAkB,CAAC;;AAEhC;AACA;;AAUA;AACA,OAAO,MAAMC,YAIZ,GAAG;EAAEC,kBAAkB,EAAE;AAAM,CAAQ;AACxCD,YAAY,CAACV,KAAK,CAACY,OAAO,CAAC,GAAG;EAAEC,QAAQ,EAAE,EAAE;EAAEC,QAAQ,EAAE;AAAG,CAAC,CAAC,CAAC;;AAE7DC,MAAM,CAASL,YAAY,GAAGA,YAAY;AAC3C,OAAO,MAAMM,MAAM,CAAC;EAEsB;;EAMtC;EACA;;EAGA;;EAOA;;EAeA;;EAMA;EAC4B;;EAO5B;;EAmBAC,WAAWA,CAAA,EAAG;IAAA,KAlEdC,IAAI,GAAgC,EAAE;IAAA,KACtCC,MAAM,GAA4B,EAAE;IAAA,KACpCC,WAAW;IAAA,KAEXC,YAAY,GAAgD,EAAE;IAAA,KAC9DC,UAAU,GAAgD,EAAE;IAAA,KAI5DC,QAAQ,GAAkE,CAAC,CAAC;IAAA,KAG5EC,MAAM,GAAoC,EAAE;IAAA,KAC5CC,WAAW,GAA0C,EAAE;IAAA,KACvDC,OAAO,GAAqC,EAAE;IAAA,KAC9CC,YAAY,GAA0C,EAAE;IAAA,KAExDC,UAAU,GAAwC,EAAE;IAAA,KAEpDC,QAAQ,GAAwC,EAAE;IAAA,KAClDC,QAAQ,GAAwC,EAAE;IAAA,KAElDC,WAAW,GAA8C,EAAE;IAAA,KAC3DC,WAAW,GAA8C,EAAE;IAAA,KAC3DC,QAAQ,GAAwC,EAAE;IAAA,KAClDC,cAAc,GAAoC,EAAE;IAAA,KACpDC,UAAU,GAA4C,EAAE;IAAA,KACxDC,YAAY,GAAgD,EAAE;IAAA,KAC9DC,UAAU,GAA4C,EAAE;IAAA,KACxDC,MAAM,GAAoC,EAAE;IAAA,KAC5CC,UAAU,GAA4C,EAAE;IAAA,KACxDC,UAAU,GAA4C,EAAE;IAAA,KACxDC,WAAW,GAAoC,EAAE;IAAA,KAGjDC,aAAa,GAAiF;MAAEC,IAAI,EAAE,EAAE;MAAEC,MAAM,EAAE;IAAG,CAAC;IAAA,KAEtHC,WAAW,GAA+C;MAAEC,OAAO,EAAE,KAAK;MAAEC,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC;IAAA,KAGxFC,KAAK,GAAkB,EAAE;IAAA,KAEzBC,OAAO,GAAa,EAAE;IAAA,KAEtBC,OAAO,GAAsC,EAAE;IAAA,KAC/CC,MAAM,GAAoC,EAAE;IAAA,KAG5CC,aAAa;IAAA,KAKbC,KAAK;IAAA,KACLC,aAAa,GAAG;MAAEC,WAAW,EAAE,CAAC;MAAEC,KAAK,EAAE,SAAS;MAAEC,MAAM,EAAE,GAAG;MAAEC,IAAI,EAAE;IAAS,CAAC;IAAA,KACjFC,eAAe,GAAG;MAAEC,MAAM,EAAE,IAAI;MAAEC,WAAW,EAAE,IAAI;MAAEC,WAAW,EAAE;IAAK,CAAC;IAAA,KAExEC,SAAS,GAA0C,EAAE;IAAA,KACrDC,UAAU,GAA4C,EAAE;IAAA,KAExDC,QAAQ,GAAoC,EAAE;IAAA,KAC9CC,QAAQ,GAAoC,EAAE;IAAA,KAE9CxB,IAAI,GAAgC,IAAI;IAIpC;IACA,IAAI,CAACvB,WAAW,GAAGpB,KAAK,CAACoE,GAAG,CAACC,SAAS,EAAE,KAAK,CAAC;IAC9C,IAAI,CAACf,KAAK,GAAG,CAAC,IAAI,CAAClC,WAAW,CAACkD,EAAE,CAAC;IAClC,IAAI,CAACnD,MAAM,GAAG,EAAE;EACpB;EAEA,OAAOoD,QAAQA,CAACC,KAAc,EAAQ;IAClC,MAAMC,iBAAiC,GAAGC,qBAAqB,CAAC,CAAC;IACjE,KAAK,IAAIC,gBAAgB,IAAIF,iBAAiB,EAAE;MAAErF,mBAAmB,CAACgF,GAAG,CAACO,gBAAgB,CAAC;IAAE;IAE7F,MAAMX,SAAS,GAAGzD,UAAU,CAAC6D,GAAG,CAAC,SAAS,CAAC;IAC3ChF,mBAAmB,CAACgF,GAAG,CAACJ,SAAS,CAAC;IAClC5D,kBAAkB,CAACgE,GAAG,CAAC,WAAW,EAAEJ,SAAS,CAACM,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC;IAC3D;AACR;AACA;AACA;AACA;AACA;AACA;;IAEQ,KAAK,IAAIM,aAAa,IAAIC,MAAM,CAACzB,MAAM,CAAC/C,iBAAiB,CAAC,EAAE;MACxD,IAAIyE,cAAc;MAClB,IAAIF,aAAa,KAAKvE,iBAAiB,CAAC0E,IAAI,EAAE,SAAS,CAAC;MAAA,KACnDD,cAAc,GAAGxF,MAAM,CAAC8E,GAAG,CAACQ,aAAa,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAEP,SAAS,EAAE,IAAI,CAAC;MAC/F;MACAjE,kBAAkB,CAACgE,GAAG,CAAC,gBAAgB,EAAEU,cAAc,CAACR,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC;IAC3E;IACA;AACR;AACA;AACA;AACA;AACA;AACA;;IAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAGI;EAEA,OAAOU,UAAUA,CAAA,EAA8E;IAAA,IAA7EC,UAAmB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAb,SAAA,GAAAa,SAAA,MAAG,IAAI;IAAA,IAAEE,YAAkC,GAAAF,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAb,SAAA,GAAAa,SAAA,MAAG,EAAE;IACjF,MAAMG,EAAU,GAAG/F,MAAM,CAAC8E,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC;IACnD,MAAMkB,UAAkB,GAAGhG,MAAM,CAAC8E,GAAG,CAAC,YAAY,CAAC;IACnDkB,UAAU,CAACC,UAAU,GAAG,CAACF,EAAE,CAACf,EAAE,CAAC;IAC/B,MAAMkB,YAAoB,GAAGlG,MAAM,CAAC8E,GAAG,CAAC,cAAc,CAAC;IACvD,MAAMqB,UAAsB,GAAGpG,UAAU,CAAC+E,GAAG,CAAC,MAAM,CAAC;IACrDoB,YAAY,CAACD,UAAU,GAAG,CAACF,EAAE,CAACf,EAAE,CAAC,CAAC,CAAC;IACnCkB,YAAY,CAACrD,UAAU,GAAG,CAACsD,UAAU,CAACnB,EAAE,CAAC;;IAEzC;IACA,MAAMoB,GAAa,GAAG7F,QAAQ,CAACuE,GAAG,CAAC,WAAW,CAAC;IAC/C,MAAMuB,SAAqB,GAAGtG,UAAU,CAAC+E,GAAG,CAAC,KAAK,CAAC;IACnD;IACA;IACA,MAAMwB,aAAyB,GAAG7F,UAAU,CAACqE,GAAG,CAAC,aAAa,CAAC;IAC/D;;IAEA,MAAMyB,KAAa,GAAGvG,MAAM,CAAC8E,GAAG,CAAC,IAAI,CAAC;IACtC,MAAM0B,MAAkB,GAAG/F,UAAU,CAACqE,GAAG,CAAC,SAAS,CAAC;IACpDyB,KAAK,CAACN,UAAU,GAAG,CAACC,YAAY,CAAClB,EAAE,CAAC;IACpC;IACA,MAAMyB,MAAc,GAAGzG,MAAM,CAAC8E,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC;IACvDwB,aAAa,CAACI,IAAI,GAAGD,MAAM,CAACzB,EAAE;IAC9ByB,MAAM,CAACR,UAAU,GAAG,CAACC,YAAY,CAAClB,EAAE,CAAC,CAAC,CAAC;IACvC;IACA,MAAM2B,EAAU,GAAG1G,MAAM,CAAC6E,GAAG,CAAC,IAAI,CAAC;IACnC6B,EAAE,CAAChE,QAAQ,GAAG,CAACyD,GAAG,CAACpB,EAAE,CAAC;IACtB;IACA,MAAM4B,OAAe,GAAGxG,MAAM,CAAC0E,GAAG,CAAC6B,EAAE,CAAC3B,EAAE,CAAC;IACzC;IACA;;IAGA,MAAM6B,SAAS,GAAG,yCAAyC;IAC3D;IACA;IACA,IAAI1B,iBAAiC,GAAGC,qBAAqB,CAAC,CAAC;IAC/DU,YAAY,CAACgB,IAAI,CAACC,IAAI,CAACjB,YAAY,EAAEa,EAAE,EAAEC,OAAO,EAAEb,EAAE,EAAEC,UAAU,EAAEE,YAAY,EAAEC,UAAU,EAAEC,GAAG,EAAEC,SAAS,EAAEC,aAAa,EAAEE,MAAM,EAAEC,MAAM,EAAE,GAAGtB,iBAAiB,CAAC;IAChK,OAAOwB,EAAE;EACb;AACJ;AACA,SAASvB,qBAAqBA,CAAA,EAAmB;EAE7C,IAAI4B,KAAmB,GAAGpG,YAAY,CAACkE,GAAG,CAAC,kBAAkB,EAAE9D,EAAE,CAACiG,SAAS,CAAC,CAAC,EAAElC,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC9E,MAAM,CAACiH,IAAI,CAAC,CAAC;EACpHF,KAAK,CAACG,SAAS,GAAG,KAAK;EAAEH,KAAK,CAACI,SAAS,GAAG,KAAK,CAAC,CAAC;EAClDJ,KAAK,CAACK,WAAW,GAAG,wBAAwB;EAC5CL,KAAK,CAACM,UAAU,GAAG,wBAAwB;EAE3C,IAAIC,OAAqB,GAAG3G,YAAY,CAACkE,GAAG,CAAC,oBAAoB,EAAE9D,EAAE,CAACwG,WAAW,CAAC,CAAC,EAAEzC,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAACxE,QAAQ,CAAC2G,IAAI,CAAC,CAAC;EAC5HK,OAAO,CAACE,KAAK,GAAG,GAAG;EAAEF,OAAO,CAACG,MAAM,GAAG,GAAG;EACzCH,OAAO,CAACF,WAAW,GAAG,KAAK;EAC3BE,OAAO,CAACD,UAAU,GAAG,KAAK;EAE1B,IAAIK,KAAmB,GAAG/G,YAAY,CAACkE,GAAG,CAAC,kBAAkB,EAAE9D,EAAE,CAAC4G,SAAS,CAAC,CAAC,EAAE7C,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC/E,MAAM,CAACkH,IAAI,CAAC,CAAC;EACpHS,KAAK,CAACN,WAAW,GAAG,aAAa;EACjCM,KAAK,CAACL,UAAU,GAAG,KAAK;EAExB,IAAIO,KAAmB,GAAGjH,YAAY,CAACkE,GAAG,CAAC,iBAAiB,EAAE9D,EAAE,CAAC8G,cAAc,CAAC,CAAC,EAAE/C,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC7E,WAAW,CAACgH,IAAI,CAAC,CAAC;EAC7HW,KAAK,CAACR,WAAW,GAAG,aAAa;EACjCQ,KAAK,CAACP,UAAU,GAAG,KAAK;EAExB,IAAIS,KAAmB,GAAGnH,YAAY,CAACkE,GAAG,CAAC,mBAAmB,EAAE9D,EAAE,CAACgH,aAAa,CAAC,CAAC,EAAEjD,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAChF,UAAU,CAACmH,IAAI,CAAC,CAAC;EAC7Ha,KAAK,CAACZ,SAAS,GAAG,KAAK;EAAEY,KAAK,CAACX,SAAS,GAAG,KAAK;EAAEW,KAAK,CAACT,UAAU,GAAG,IAAI;EAAES,KAAK,CAACvE,OAAO,GAAG,UAAU;EAAEuE,KAAK,CAACL,MAAM,GAAG,CAAC;EACvHK,KAAK,CAACV,WAAW,GAAG,aAAa;EAEjC,IAAIY,KAAmB,GAAGrH,YAAY,CAACkE,GAAG,CAAC,gBAAgB,EAAE9D,EAAE,CAACkH,aAAa,CAAC,CAAC,EAAEnD,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAACtE,UAAU,CAACyG,IAAI,CAAC,CAAC;EAC1He,KAAK,CAACd,SAAS,GAAG,KAAK;EAAEc,KAAK,CAACb,SAAS,GAAG,KAAK;EAAEa,KAAK,CAACX,UAAU,GAAG,IAAI;EAAEW,KAAK,CAACzE,OAAO,GAAG,UAAU;EAAEyE,KAAK,CAACP,MAAM,GAAG,CAAC;EACvHO,KAAK,CAACZ,WAAW,GAAG,aAAa;EAEjC,IAAIc,KAAmB,GAAGvH,YAAY,CAACkE,GAAG,CAAC,sBAAsB,EAAE9D,EAAE,CAACoH,aAAa,CAAC,CAAC,EAAErD,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAACzE,UAAU,CAAC4G,IAAI,CAAC,CAAC;EAChIiB,KAAK,CAAChB,SAAS,GAAG,KAAK;EAAEgB,KAAK,CAACf,SAAS,GAAG,KAAK;EAAEe,KAAK,CAACb,UAAU,GAAG,IAAI;EAAEa,KAAK,CAAC3E,OAAO,GAAG,UAAU;EAAE2E,KAAK,CAACT,MAAM,GAAG,CAAC;EACvHS,KAAK,CAACd,WAAW,GAAG,aAAa;EAEjC,IAAIgB,WAAyB,GAAGzH,YAAY,CAACkE,GAAG,CAAC,oBAAoB,EAAE9D,EAAE,CAACqH,WAAW,CAAC,CAAC,EAAEtD,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC5E,YAAY,CAAC+G,IAAI,CAAC,CAAC;EACpImB,WAAW,CAAClB,SAAS,GAAG,KAAK;EAAEkB,WAAW,CAACjB,SAAS,GAAG,KAAK;EAAEiB,WAAW,CAACf,UAAU,GAAG,IAAI;EAAEe,WAAW,CAAC7E,OAAO,GAAG,UAAU;EAAE6E,WAAW,CAACX,MAAM,GAAG,CAAC;EACrJW,WAAW,CAAChB,WAAW,GAAG,aAAa;EAEvC,IAAIiB,UAAwB,GAAG1H,YAAY,CAACkE,GAAG,CAAC,mBAAmB,EAAE9D,EAAE,CAACsH,UAAU,CAAC,CAAC,EAAEvD,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC1E,OAAO,CAAC6G,IAAI,CAAC,CAAC;EAC5HoB,UAAU,CAACjB,WAAW,GAAG,aAAa;EACtCiB,UAAU,CAAChB,UAAU,GAAG,KAAK;EAE7B,IAAIiB,SAAuB,GAAG3H,YAAY,CAACkE,GAAG,CAAC,kBAAkB,EAAE9D,EAAE,CAACuH,SAAS,CAAC,CAAC,EAAExD,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAACpE,MAAM,CAACuG,IAAI,CAAC,CAAC;EACxHqB,SAAS,CAACpB,SAAS,GAAG,KAAK;EAAEoB,SAAS,CAACnB,SAAS,GAAG,KAAK;EAAEmB,SAAS,CAACjB,UAAU,GAAG,IAAI;EAAEiB,SAAS,CAAC/E,OAAO,GAAG,UAAU;EAAE+E,SAAS,CAACb,MAAM,GAAG,CAAC;EAC3Ia,SAAS,CAAClB,WAAW,GAAG,aAAa;EAErC,MAAMmB,cAA4B,GAAG5H,YAAY,CAACkE,GAAG,CAAC,iBAAiB,EAAE9D,EAAE,CAACwH,cAAc,CAAC,CAAC,CAAC;EAC7FA,cAAc,CAACrB,SAAS,GAAG,KAAK;EAAEqB,cAAc,CAACpB,SAAS,GAAG,KAAK;EAAEoB,cAAc,CAAClB,UAAU,GAAG,KAAK;EAAEkB,cAAc,CAACnB,WAAW,GAAG,KAAK;EACzImB,cAAc,CAACC,KAAK,GAAG,qEAAqE;EAE5FlB,OAAO,CAACmB,QAAQ,GAAG,CAACf,KAAK,CAAC3C,EAAE,CAAC,CAAC,CAAC;;EAE/B,IAAI2D,eAAe,GAAG,CAAC3B,KAAK,EAAEO,OAAO,EAAEI,KAAK,EAAEE,KAAK,EAAEE,KAAK,EAAEE,KAAK,EAAEE,KAAK,EAAEE,WAAW,EAAEC,UAAU,EAAEC,SAAS,EAAEC,cAAc,CAAC;EAC7HxB,KAAK,CAAC0B,QAAQ,GAAG,CAAC1B,KAAK,CAAChC,EAAE,EAAE,GAAG2D,eAAe,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAAC9D,EAAE,CAAC,CAAC;EACvE,OAAO2D,eAAe;AAC1B;AAEA,SAASI,YAAYA,CAAA,EAAiB;EAClC;EACA,IAAIC,SAAS,GAAG,8JAA8J;EAC9K,IAAIC,IAAkB,GAAGrI,YAAY,CAACkE,GAAG,CAAC,UAAU,EAAEkE,SAAS,CAAC;EAChEC,IAAI,CAACP,QAAQ,GAAG,CAACO,IAAI,CAACjE,EAAE,CAAC,CAAC,CAAC;EAC3B,OAAOiE,IAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WACaC,cAAc,GAD1BrI,iBAAiB,CAAAsI,MAAA,GAAlB,MACaD,cAAc,SAAS1I,kBAAkB,CAAC;EAAAmB,YAAA;IAAA,SAAAiE,SAAA;IAAA,KACnDsB,IAAI,GAAW,EAAE;EAAA;AACrB,CAAC,KAAAiC,MAAA;;AAED;;AAEA,WACaC,UAAU,GADtBvI,iBAAiB,CAAAwI,OAAA,GAAlB,MACaD,UAAU,CAAC;EAAAzH,YAAA;IAAA,KACZ2H,KAAK;IAAA,KACbC,SAAS;EAAA,EAD4B;EAGrC;EACA,IAAIC,IAAIA,CAAA,EAAwB;IAC5B,OAAO,IAAI,CAACF,KAAK;EACrB;EAEA,IAAIE,IAAIA,CAACC,KAA0B,EAAE;IACjC,IAAI,CAACH,KAAK,GAAGG,KAAK;EACtB;AACJ,CAAC,KAAAJ,OAAA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module"}