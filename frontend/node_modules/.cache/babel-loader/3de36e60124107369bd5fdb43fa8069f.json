{"ast":null,"code":"var _jsxFileName = \"C:\\\\0Programmi\\\\Dev\\\\projects\\\\frontend\\\\jjodel\\\\src\\\\components\\\\editors\\\\MetaData.tsx\";\nimport { LModelElement } from \"../../joiner\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction MetaDataComponent(props) {\n  var _props$data;\n  let ddata = (_props$data = props.data) === null || _props$data === void 0 ? void 0 : _props$data.__raw;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'px-3 mt-3 metadata-editor',\n    children: !props.data ? \"Select a Node.\" : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: props.data.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this), ddata.className !== 'DModel' && props.data.isInstantiable() && /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"d-flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"my-auto\",\n          children: \"Icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"ms-1 my-auto\",\n          type: \"url\",\n          placeholder: \"icon url or base64 string\",\n          value: props.data.state.icon,\n          onChange: e => {\n            props.data.state = {\n              icon: e.target.value\n            };\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 9\n        }, this), props.data.state.icon && /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"ms-1 my-auto\",\n          style: {\n            maxWidth: \"50px\",\n            maxHeight: \"50px\"\n          },\n          src: props.data.state.icon,\n          alt: \"Invalid url/data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 35\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}\n// todo: how to memo with redux?\n// memo(ModelMetaDataComponent, ((p1: AllProps, p2: AllProps) => { p1.data.clonedCounter === p2.data.clonedCounter}) as any);\n_c = MetaDataComponent;\nfunction mapStateToProps(state, ownProps) {\n  var _state$_lastSelected;\n  const ret = {};\n  const dataid = (_state$_lastSelected = state._lastSelected) === null || _state$_lastSelected === void 0 ? void 0 : _state$_lastSelected.modelElement;\n  if (dataid) ret.data = LModelElement.fromPointer(dataid);\n  /*\r\n  const nodeid = state._lastSelected?.node;\r\n  if(nodeid) ret.node = LGraphElement.fromPointer(nodeid);\r\n  const viewid = state._lastSelected?.view;\r\n  if(viewid) ret.view = LViewElement.fromPointer(viewid);*/\n  return ret;\n}\nfunction mapDispatchToProps(dispatch) {\n  const ret = {};\n  return ret;\n}\nexport const MetaDataConnected = connect(mapStateToProps, mapDispatchToProps)(MetaDataComponent);\nexport function MetaData(props) {\n  let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return /*#__PURE__*/_jsxDEV(MetaDataConnected, {\n    ...props,\n    children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 12\n  }, this);\n}\n_c2 = MetaData;\nvar _c, _c2;\n$RefreshReg$(_c, \"MetaDataComponent\");\n$RefreshReg$(_c2, \"MetaData\");","map":{"version":3,"names":["LModelElement","React","connect","jsxDEV","_jsxDEV","Fragment","_Fragment","MetaDataComponent","props","_props$data","ddata","data","__raw","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","isInstantiable","type","placeholder","value","state","icon","onChange","e","target","style","maxWidth","maxHeight","src","alt","_c","mapStateToProps","ownProps","_state$_lastSelected","ret","dataid","_lastSelected","modelElement","fromPointer","mapDispatchToProps","dispatch","MetaDataConnected","MetaData","arguments","length","undefined","_c2","$RefreshReg$"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/src/components/editors/MetaData.tsx"],"sourcesContent":["import {DNamedElement, DState, GObject, LModelElement, LPointerTargetable, Overlap} from \"../../joiner\";\r\nimport React, {Dispatch, ReactElement} from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype AllProps = Overlap<OwnProps, Overlap<StateProps, DispatchProps>>;\r\nfunction MetaDataComponent(props:AllProps): ReactElement{\r\n    let ddata: DNamedElement = props.data?.__raw as any;\r\n    return(\r\n        <div className={'px-3 mt-3 metadata-editor'}>\r\n            {\r\n    !props.data ? \"Select a Node.\" : <>\r\n        <h2>{props.data.name}</h2>\r\n    {ddata.className !== 'DModel' && props.data.isInstantiable() &&\r\n    <label className={\"d-flex\"}>\r\n    <span className={\"my-auto\"}>Icon</span>\r\n        <input className={\"ms-1 my-auto\"} type={\"url\"} placeholder={\"icon url or base64 string\"} value={props.data.state.icon}\r\n        onChange={(e)=>{ props.data.state={icon:e.target.value}}}/>\r\n        {props.data.state.icon && <img className={\"ms-1 my-auto\"} style={{maxWidth: \"50px\", maxHeight: \"50px\"}} src={props.data.state.icon} alt={\"Invalid url/data\"}/>}\r\n        </label>}\r\n        </>}\r\n        </div>);\r\n        }\r\n// todo: how to memo with redux?\r\n// memo(ModelMetaDataComponent, ((p1: AllProps, p2: AllProps) => { p1.data.clonedCounter === p2.data.clonedCounter}) as any);\r\n\r\nexport interface OwnProps {}\r\ninterface StateProps {\r\n    data: LPointerTargetable & GObject;\r\n}\r\ninterface DispatchProps { }\r\n\r\nfunction mapStateToProps(state: DState, ownProps: OwnProps): StateProps {\r\n    const ret: StateProps = {} as StateProps;\r\n    const dataid = state._lastSelected?.modelElement;\r\n    if (dataid) ret.data = LModelElement.fromPointer(dataid);\r\n    /*\r\n    const nodeid = state._lastSelected?.node;\r\n    if(nodeid) ret.node = LGraphElement.fromPointer(nodeid);\r\n    const viewid = state._lastSelected?.view;\r\n    if(viewid) ret.view = LViewElement.fromPointer(viewid);*/\r\n    return ret;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<any>): DispatchProps {\r\n    const ret: DispatchProps = {};\r\n    return ret;\r\n}\r\n\r\nexport const MetaDataConnected = connect<StateProps, DispatchProps, OwnProps, DState>(mapStateToProps, mapDispatchToProps)(MetaDataComponent);\r\n\r\nexport function MetaData(props: OwnProps, children: (string | React.Component)[] = []): ReactElement {\r\n    return <MetaDataConnected {...{...props, children}} />;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}