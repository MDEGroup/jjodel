{"ast":null,"code":"var _jsxFileName = \"C:\\\\d\\\\Programming\\\\web\\\\jodel-mde\\\\src\\\\components\\\\forEndUser\\\\Measurable.tsx\",\n  _dec,\n  _class,\n  _class2;\nimport React, { Component } from \"react\";\nimport { Log, RuntimeAccessible, U } from \"../../joiner\";\nimport $ from \"jquery\";\n\n// todo\n\n// private\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let MeasurableComponent = (_dec = RuntimeAccessible('MeasurableComponent'), _dec(_class = (_class2 = class MeasurableComponent extends Component {\n  constructor() {\n    super(...arguments);\n    this.html = null;\n    this.$html = void 0;\n    this.dragOptionsChanged = true;\n    this.resizeOptionsChanged = true;\n    this.rotateOptionsChanged = true;\n    this.defaultOptions = {\n      draggable: {\n        cursor: 'grabbing',\n        // containment: 'parent',\n        distance: 5\n        // helper: 'clone', // 'original' or 'csselector'? or func=>html\n        // disabled: !(view.draggable),}\n      },\n      resizable: {},\n      rotatable: {}\n    };\n  }\n  componentDidMount() {\n    this.afterUpdate();\n  }\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    this.afterUpdate();\n  }\n  afterUpdate() {\n    if (!this.html) return;\n    this.$html = $(this.html);\n    if (this.dragOptionsChanged) {\n      this.afterUpdateSingle(\"draggable\");\n    }\n    if (this.resizeOptionsChanged) {\n      this.afterUpdateSingle(\"resizable\");\n    }\n    if (this.rotateOptionsChanged) {\n      this.afterUpdateSingle(\"rotatable\");\n    }\n  }\n  afterUpdateSingle(type) {\n    if (!this.$html) return;\n    let $measurable = this.$html;\n\n    // todo: changing options at runtime works, but changing children does not update\n\n    let eventmap = {\n      's': {\n        'draggable': 'onDragStart',\n        'rotatable': 'onRotateStart',\n        'resizable': 'onResizeStart'\n      },\n      'ing': {\n        'draggable': 'whileDragging',\n        'rotatable': 'whileRotating',\n        'resizable': 'whileResizing'\n      },\n      'e': {\n        'draggable': 'onDragEnd',\n        'rotatable': 'onRotateEnd',\n        'resizable': 'onResizeEnd'\n      }\n    };\n    let childmodekeys = ['left', 'top', 'transform', 'position'];\n    let childmode = (e, evt) => {\n      let oc = this.props.onChildren;\n      console.log('measurable default event', {\n        type,\n        e,\n        oc\n      });\n      if (!oc) return;\n      let child;\n      if (typeof oc === 'function') child = oc(e);else child = e.children[0];\n      if (!child) return;\n      let key;\n      for (key of childmodekeys) {\n        child.style[key] = e.style[key];\n        delete e.style[key];\n      }\n    };\n    function absoluteToTransform(e, evt) {\n      console.log(\"transform measurable\", {\n        evt,\n        e\n      });\n      let x = e.style.left;\n      let y = e.style.top; /*\r\n                           e.style.left = '0px';\r\n                           e.style.top = '0px';*/\n      //e.style.position = 'unset';\n      e.style.transform = `translate(${x}, ${y})`;\n    }\n    let translateeevents = {\n      'draggable': {\n        's': (e, ui) => {\n          absoluteToTransform(e.target, e);\n        },\n        'ing': (e, ui) => {\n          absoluteToTransform(e.target, e);\n        },\n        'e': (e, ui) => {\n          absoluteToTransform(e.target, e);\n        }\n      },\n      'resizable': {\n        's': (e, ui) => {},\n        'ing': (e, ui) => {},\n        'e': (e, ui) => {}\n      },\n      'rotatable': {\n        's': (e, ui) => {},\n        'ing': (e, ui) => {},\n        'e': (e, ui) => {}\n      }\n    };\n    let defaulteevent = evtkind => (e, ui) => {\n      console.log('measurable default event', {\n        type,\n        evtkind,\n        translateeevents,\n        e,\n        t: e.target\n      });\n      translateeevents[type][evtkind](e, ui);\n      childmode(e.target, e);\n    };\n    let jqui_ing;\n    switch (type) {\n      default:\n        jqui_ing = Log.eDevv(\"unexpected measurable event: \" + type);\n        return;\n      case \"draggable\":\n        jqui_ing = 'drag';\n        break;\n      case \"resizable\":\n        jqui_ing = 'resize';\n        break;\n      case \"rotatable\":\n        jqui_ing = 'rotate';\n        break;\n    }\n    /*\r\n    defaultoptions.start = (event: GObject, obj: GObject) => {\r\n        TRANSACTION(()=>{\r\n            //for (let vid of allviews) this.doMeasurableEvent((EMeasurableEvents as any)[eventmap.s[type]], vid);\r\n        })\r\n    }\r\n    defaultoptions[jqui_ing] = (event: GObject, obj: GObject) => {\r\n        TRANSACTION(()=>{\r\n            //for (let vid of allviews) this.doMeasurableEvent((EMeasurableEvents as any)[eventmap.s[type]], vid);\r\n        })\r\n    };\r\n    defaultoptions.stop = (event: GObject, obj: GObject) => {\r\n        TRANSACTION(()=>{\r\n            //for (let vid of allviews) this.doMeasurableEvent((EMeasurableEvents as any)[eventmap.s[type]], vid);\r\n        })\r\n    }*/\n    let options;\n    const props = this.props;\n    const datamap = {\n      draggable: \"uiDraggable\",\n      resizable: \"uiResizable\",\n      rotatable: \"uiRotatable\"\n    };\n    const optionmap = {\n      draggable: \"draggable\",\n      resizable: \"resizable\",\n      rotatable: \"rotatable\"\n    };\n    const optionkey = optionmap[type];\n    if (props[optionkey] === false || !props[optionkey]) {\n      console.log(\"measurable off \" + type, {\n        $measurable,\n        type,\n        datamap,\n        optionkey,\n        props\n      });\n      if ($measurable.data(datamap[type])) $measurable[type]('disable');\n      return;\n    }\n    if (props[optionkey] === true) {\n      options = {};\n    } else options = {\n      ...props[optionkey]\n    };\n\n    //let jodelevent = {'s': eventmap.s[type], 'ing': eventmap.ing[type], 'e': eventmap.e[type]};\n    let jquievent = {\n      's': 'start',\n      'ing': jqui_ing,\n      'e': 'stop'\n    };\n    let evtkey;\n    for (evtkey in jquievent) {\n      let jqkey = jquievent[evtkey] || '';\n      let propsevent = props[eventmap[evtkey][type]];\n      if (propsevent && typeof propsevent !== \"function\") {\n        Log.ee(\"<Measurable /> \" + eventmap[evtkey][type] + \" props must be a function\");\n        continue;\n      }\n      options[jqkey + \"_debug\"] = propsevent;\n      // call ondragend... jodel events\n      let oldevt = options[jqkey];\n      let jodelevt = propsevent; // (...params: any) => propsevent(...params); // was made to preserve \"this\"?\n      let translatemodeevt = this.props.transformMode ? defaulteevent(evtkey) : null;\n      let allevents = [oldevt, jodelevt, translatemodeevt].filter(e => !!e);\n      if (allevents.length) options[jqkey] = function () {\n        for (let e of allevents) e(...arguments);\n      };\n    }\n    let propsOptions = {\n      ...options\n    };\n    let defaultOptions = this.defaultOptions[type];\n    U.objectMergeInPlace(options, defaultOptions);\n    console.log(\"measurable\", {\n      type,\n      $measurable,\n      options,\n      propsOptions,\n      defaultOptions\n    });\n    $measurable[type](options);\n  }\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    console.log(\"measurable shouldup\", {\n      nc: nextProps.children,\n      tc: this.props.children,\n      eq: nextProps.children == this.props.children\n    });\n    // todo: would need to check if pros.children has changed, but that requires a deep search of subcomponents props and state.\n    // currently with just return true it works and rerenders every time the parent component rerenders. not when other elements are interacted.\n    // it works also with <Input> as direct child and it updates.\n    if (window) return true;\n    const oldProps = this.props || {};\n    this.dragOptionsChanged = false;\n    this.resizeOptionsChanged = false;\n    this.rotateOptionsChanged = false;\n    let ret = false;\n    const nestederr = \"Options cannot contain functions or nested objects\";\n    if (!U.isShallowEqualWithProxies(oldProps.draggable, nextProps.draggable)) {\n      const opt = oldProps.draggable;\n      if (opt && typeof opt === \"object\") for (let k in opt) {\n        switch (typeof opt[k]) {\n          case \"function\":\n          case \"object\":\n            Log.ee(\"drag\" + nestederr, k);\n        }\n      }\n      this.dragOptionsChanged = true;\n      ret = true;\n    }\n    if (!U.isShallowEqualWithProxies(oldProps.resizable, nextProps.resizable)) {\n      const opt = oldProps.resizable;\n      if (opt && typeof opt === \"object\") for (let k in opt) {\n        switch (typeof opt[k]) {\n          case \"function\":\n          case \"object\":\n            Log.ee(\"resize\" + nestederr, k);\n        }\n      }\n      this.resizeOptionsChanged = true;\n      ret = true;\n    }\n    if (!U.isShallowEqualWithProxies(oldProps.rotatable, nextProps.rotatable)) {\n      const opt = oldProps.rotatable;\n      if (opt && typeof opt === \"object\") for (let k in opt) {\n        switch (typeof opt[k]) {\n          case \"function\":\n          case \"object\":\n            Log.ee(\"rotate\" + nestederr, k);\n        }\n      }\n      this.rotateOptionsChanged = true;\n      return true;\n    }\n    if (ret) return true; // i don't need to set more this.variable stuff and i already determined something changed.\n    if (Object.keys(oldProps).length !== Object.keys(nextProps).length) return true;\n    let k;\n    for (k in oldProps) {\n      switch (k) {\n        //case \"axis\": if (ok)\n        case \"draggable\":\n        case \"resizable\":\n        case \"rotatable\":\n          continue;\n        case \"children\":\n          continue;\n      }\n      if (!(k in nextProps)) return false;\n      let ok = oldProps[k];\n      let nk = nextProps[k];\n      if (ok === nk) continue;\n      let tk = typeof ok;\n      if (tk !== typeof nk) return false;\n      switch (tk) {\n        case \"object\":\n          Log.ee(\"unexpected object in <Measurable/> props\", {\n            k,\n            nk,\n            ok\n          });\n          return true;\n        case \"function\":\n          if (ok.toString() !== nk.toString()) return true;\n          break;\n        default:\n          return false;\n        // already checked they are !==\n      }\n    }\n    return false;\n  }\n  render() {\n    let child = this.props.children;\n    console.log(\"measurable render\", child);\n    if (!child) return child || null; // sometimes react passes {} as props.children?\n    if (!Object.keys(child).length) return Log.ee(\"Measurable can have only 1 subelement and it cannot be an array or a <>React.fragment</>\", child, this.props);\n    if (Array.isArray(child)) {\n      if (child.length !== 1) {\n        Log.ee(\"Measurable can have only 1 subelement and it cannot be an array or a <>React.fragment</>\", child, this.props);\n        return child;\n      } else child = child[0];\n    }\n    if (child.type.toString() === React.Fragment.toString()) {\n      Log.ee(\"Measurable can have only 1 subelement and it cannot be an array or a <>React.fragment</>\", child, this.props);\n      return child;\n    }\n    let oldProps = child.props;\n    let newProps = {\n      ref: html => {\n        console.log('measurable set ref', html);\n        if (html && !U.isHtmlNode(html)) {\n          Log.ee('ref tring to set non-html element', html);\n          return;\n        }\n        this.html = html;\n      }\n    };\n    U.objectMergeInPlace(newProps, oldProps);\n    let clonedChild = /*#__PURE__*/React.cloneElement(child, newProps);\n    return clonedChild;\n  }\n}, _class2.cname = \"MeasurableComponent\", _class2)) || _class);\n/*\r\n@RuntimeAccessible('InfiniteScrollComponent')\r\nexport class InfiniteScrollComponent extends Component<ScrollOwnProps, ScrollState>{\r\n    static cname: string = \"InfiniteScrollComponent\";\r\n    render(){\r\n        return <Measurable transformMode={false} onChildren={true}>{ this.props.children}</Measurable>\r\n    }\r\n}\r\n*/\n// private\n\n// private\n\n// private\n\n// private\n\n////// mapper func\n/*\r\nfunction mapStateToProps(state: DState, ownProps: MeasurableOwnProps): MeasurableStateProps {\r\n    const ret: MeasurableStateProps = {} as any;\r\n    /// to fill\r\n    return ret; }\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<any>): DispatchProps {\r\n    const ret: DispatchProps = {} as any;\r\n    /// to fill\r\n    return ret; }\r\n*/\n\nMeasurableComponent.defaultProps = {\n  autosizex: true,\n  autosizey: true,\n  style: undefined,\n  children: []\n};\nexport class InfiniteScrollComponent extends Component {}\nexport function Measurable(props) {\n  let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return /*#__PURE__*/_jsxDEV(MeasurableComponent, {\n    ...props,\n    children,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 330,\n    columnNumber: 12\n  }, this);\n}\n// todo: shortcuts for Draggable Resizable Rotatable with whileDragging onDragStart props simplified to start, while, end\n_c = Measurable;\nexport function InfiniteScroll(props) {\n  let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return /*#__PURE__*/_jsxDEV(Measurable, {\n    ...props,\n    children,\n    transformMode: false,\n    onChildren: true,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 334,\n    columnNumber: 12\n  }, this);\n} /*\r\n  export function InfiniteScroll(props: MeasurableAllProps, children: ReactChild[] = []): ReactElement {\r\n     return <InfiniteScrollComponent {...{...props, children}}>{children}</InfiniteScrollComponent>;\r\n  }*/\n\n/*connect<MeasurableStateProps, DispatchProps, MeasurableOwnProps, DState>(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MeasurableComponent);*/\n_c2 = InfiniteScroll;\nvar _c, _c2;\n$RefreshReg$(_c, \"Measurable\");\n$RefreshReg$(_c2, \"InfiniteScroll\");","map":{"version":3,"names":["React","Component","Log","RuntimeAccessible","U","$","jsxDEV","_jsxDEV","MeasurableComponent","_dec","_class","_class2","constructor","arguments","html","$html","dragOptionsChanged","resizeOptionsChanged","rotateOptionsChanged","defaultOptions","draggable","cursor","distance","resizable","rotatable","componentDidMount","afterUpdate","componentDidUpdate","prevProps","prevState","snapshot","afterUpdateSingle","type","$measurable","eventmap","childmodekeys","childmode","e","evt","oc","props","onChildren","console","log","child","children","key","style","absoluteToTransform","x","left","y","top","transform","translateeevents","s","ui","target","ing","defaulteevent","evtkind","t","jqui_ing","eDevv","options","datamap","optionmap","optionkey","data","jquievent","evtkey","jqkey","propsevent","ee","oldevt","jodelevt","translatemodeevt","transformMode","allevents","filter","length","propsOptions","objectMergeInPlace","shouldComponentUpdate","nextProps","nextState","nextContext","nc","tc","eq","window","oldProps","ret","nestederr","isShallowEqualWithProxies","opt","k","Object","keys","ok","nk","tk","toString","render","Array","isArray","Fragment","newProps","ref","isHtmlNode","clonedChild","cloneElement","cname","defaultProps","autosizex","autosizey","undefined","InfiniteScrollComponent","Measurable","fileName","_jsxFileName","lineNumber","columnNumber","_c","InfiniteScroll","_c2","$RefreshReg$"],"sources":["C:/d/Programming/web/jodel-mde/src/components/forEndUser/Measurable.tsx"],"sourcesContent":["import React, {Component, CSSProperties, PureComponent, ReactChild, ReactElement, ReactNode} from \"react\";\r\nimport {Dictionary, GObject, Log, RuntimeAccessible, TRANSACTION, U} from \"../../joiner\";\r\nimport $ from \"jquery\";\r\nimport {JQueryUI} from \"../../common/libraries/jqui-types\";\r\ntype ResizableEvent = JQueryUI.ResizableEvent;\r\ntype DraggableEvent = JQueryUI.DraggableEvent;\r\ntype RotatableEvent = ()=>void; // todo\r\n\r\n// private\r\ninterface MeasurableState {\r\n}\r\ninterface ScrollState {\r\n}\r\n\r\ntype MeasurableUIEvent = ResizableEvent | DraggableEvent | RotatableEvent;\r\n\r\n@RuntimeAccessible('MeasurableComponent')\r\nexport class MeasurableComponent extends Component<MeasurableAllProps, MeasurableState>{\r\n    static cname: string = \"MeasurableComponent\";\r\n\r\n\r\n    private html: Element | null = null;\r\n    private $html!:  JQuery<Element>;\r\n    dragOptionsChanged: boolean = true;\r\n    resizeOptionsChanged: boolean = true;\r\n    rotateOptionsChanged: boolean = true;\r\n    defaultOptions: {\"draggable\": JQueryUI.DraggableOptions, resizable: JQueryUI.ResizableOptions, rotatable: GObject} = {\r\n        draggable: {\r\n            cursor: 'grabbing',\r\n            // containment: 'parent',\r\n            distance: 5,\r\n            // helper: 'clone', // 'original' or 'csselector'? or func=>html\r\n            // disabled: !(view.draggable),}\r\n        },\r\n        resizable: {},\r\n        rotatable: {},\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.afterUpdate();\r\n    }\r\n    componentDidUpdate(prevProps: Readonly<MeasurableAllProps>, prevState: Readonly<MeasurableState>, snapshot?: any) {\r\n        this.afterUpdate();\r\n    }\r\n    afterUpdate(): void{\r\n        if (!this.html) return;\r\n        this.$html = $(this.html);\r\n        if (this.dragOptionsChanged) { this.afterUpdateSingle(\"draggable\"); }\r\n        if (this.resizeOptionsChanged) { this.afterUpdateSingle(\"resizable\"); }\r\n        if (this.rotateOptionsChanged) { this.afterUpdateSingle(\"rotatable\"); }\r\n    }\r\n\r\n    afterUpdateSingle(type: \"draggable\" | \"resizable\" | \"rotatable\"): void{\r\n        if (!this.$html) return;\r\n        let $measurable = this.$html;\r\n\r\n        // todo: changing options at runtime works, but changing children does not update\r\n\r\n\r\n        let eventmap = {\r\n            's':    {'draggable': 'onDragStart',    'rotatable': 'onRotateStart',   'resizable': 'onResizeStart'},\r\n            'ing':  {'draggable': 'whileDragging',  'rotatable': 'whileRotating',   'resizable': 'whileResizing'},\r\n            'e':    {'draggable': 'onDragEnd',      'rotatable': 'onRotateEnd',     'resizable': 'onResizeEnd'  },\r\n        }\r\n        let childmodekeys: (keyof CSSStyleDeclaration)[] = ['left', 'top', 'transform', 'position'];\r\n        let childmode = (e: HTMLElement, evt?: any): void => {\r\n            let oc = this.props.onChildren;\r\n            console.log('measurable default event', {type, e, oc});\r\n            if (!oc) return;\r\n            let child: HTMLElement;\r\n            if (typeof oc === 'function') child = oc(e);\r\n            else child = e.children[0] as HTMLElement;\r\n            if (!child) return;\r\n            let key: any;\r\n            for (key of childmodekeys) {\r\n                child.style[key] = e.style[key];\r\n                delete e.style[key]\r\n            }\r\n        }\r\n        function absoluteToTransform(e: HTMLElement, evt?: any): void {\r\n            console.log(\"transform measurable\", {evt, e});\r\n            let x = e.style.left;\r\n            let y = e.style.top;/*\r\n            e.style.left = '0px';\r\n            e.style.top = '0px';*/\r\n            //e.style.position = 'unset';\r\n            e.style.transform = `translate(${x}, ${y})`;\r\n        }\r\n        let translateeevents: Dictionary<string, Dictionary<string, DraggableEvent>> = {\r\n            'draggable': {\r\n                's': (e, ui)=>{ absoluteToTransform(e.target as HTMLElement, e); },\r\n                'ing': (e, ui)=>{ absoluteToTransform(e.target as HTMLElement, e); },\r\n                'e': (e, ui)=>{ absoluteToTransform(e.target as HTMLElement, e); }},\r\n            'resizable': {\r\n                's': (e, ui)=>{},\r\n                'ing': (e, ui)=>{},\r\n                'e': (e, ui)=>{}},\r\n            'rotatable': {\r\n                's': (e, ui)=>{},\r\n                'ing': (e, ui)=>{},\r\n                'e': (e, ui)=>{}},\r\n        };\r\n        let defaulteevent = (evtkind: 's'|'ing'|'e')=>( (e: any, ui: any) => {\r\n            console.log('measurable default event', {type, evtkind, translateeevents, e, t: e.target});\r\n            translateeevents[type][evtkind](e, ui);\r\n            childmode(e.target, e);\r\n        } ) as MeasurableUIEvent;\r\n        let jqui_ing: string;\r\n        switch (type){\r\n            default: jqui_ing = Log.eDevv(\"unexpected measurable event: \" + type); return;\r\n            case \"draggable\": jqui_ing = 'drag'; break;\r\n            case \"resizable\": jqui_ing = 'resize'; break;\r\n            case \"rotatable\": jqui_ing = 'rotate'; break;\r\n        }\r\n        /*\r\n        defaultoptions.start = (event: GObject, obj: GObject) => {\r\n            TRANSACTION(()=>{\r\n                //for (let vid of allviews) this.doMeasurableEvent((EMeasurableEvents as any)[eventmap.s[type]], vid);\r\n            })\r\n        }\r\n        defaultoptions[jqui_ing] = (event: GObject, obj: GObject) => {\r\n            TRANSACTION(()=>{\r\n                //for (let vid of allviews) this.doMeasurableEvent((EMeasurableEvents as any)[eventmap.s[type]], vid);\r\n            })\r\n        };\r\n        defaultoptions.stop = (event: GObject, obj: GObject) => {\r\n            TRANSACTION(()=>{\r\n                //for (let vid of allviews) this.doMeasurableEvent((EMeasurableEvents as any)[eventmap.s[type]], vid);\r\n            })\r\n        }*/\r\n        let options: GObject;\r\n        const props: GObject = this.props;\r\n        const datamap = {draggable: \"uiDraggable\", resizable: \"uiResizable\", rotatable: \"uiRotatable\"};\r\n        const optionmap = {draggable: \"draggable\", resizable: \"resizable\", rotatable: \"rotatable\"};\r\n        const optionkey = optionmap[type];\r\n        if (props[optionkey] === false || !props[optionkey]) {\r\n            console.log(\"measurable off \" + type, {$measurable, type, datamap, optionkey, props});\r\n            if ($measurable.data(datamap[type])) ($measurable as GObject)[type]('disable');\r\n            return;\r\n        }\r\n        if (props[optionkey] === true) {\r\n            options = {};\r\n        } else options = {...props[optionkey]};\r\n\r\n        //let jodelevent = {'s': eventmap.s[type], 'ing': eventmap.ing[type], 'e': eventmap.e[type]};\r\n        let jquievent = {'s': 'start', 'ing': jqui_ing, 'e':'stop'};\r\n        let evtkey: keyof typeof jquievent;\r\n        for (evtkey in jquievent) {\r\n            let jqkey = jquievent[evtkey] || '';\r\n            let propsevent = props[eventmap[evtkey][type]];\r\n            if (propsevent && typeof propsevent !== \"function\") {\r\n                Log.ee(\"<Measurable /> \" + eventmap[evtkey][type] + \" props must be a function\");\r\n                continue;\r\n            }\r\n            options[jqkey+\"_debug\"] = propsevent;\r\n            // call ondragend... jodel events\r\n            let oldevt = options[jqkey];\r\n            let jodelevt = propsevent; // (...params: any) => propsevent(...params); // was made to preserve \"this\"?\r\n            let translatemodeevt: null | MeasurableUIEvent = this.props.transformMode ? defaulteevent(evtkey) : null;\r\n            let allevents = [oldevt, jodelevt, translatemodeevt].filter((e)=>!!e);\r\n            if (allevents.length) options[jqkey] = (...params: any)=> { for (let e of allevents) e(...params); };\r\n        }\r\n        let propsOptions = {...options};\r\n        let defaultOptions = this.defaultOptions[type];\r\n        U.objectMergeInPlace(options, defaultOptions);\r\n        console.log(\"measurable\", {type, $measurable, options, propsOptions, defaultOptions});\r\n        ($measurable as GObject)[type](options);\r\n    }\r\n    shouldComponentUpdate(nextProps: Readonly<MeasurableAllProps>, nextState: Readonly<MeasurableState>, nextContext: any): boolean {\r\n        console.log(\"measurable shouldup\", {nc:nextProps.children, tc:this.props.children, eq: nextProps.children == this.props.children});\r\n        // todo: would need to check if pros.children has changed, but that requires a deep search of subcomponents props and state.\r\n        // currently with just return true it works and rerenders every time the parent component rerenders. not when other elements are interacted.\r\n        // it works also with <Input> as direct child and it updates.\r\n        if (window) return true;\r\n        const oldProps = this.props || {};\r\n        this.dragOptionsChanged = false;\r\n        this.resizeOptionsChanged = false;\r\n        this.rotateOptionsChanged = false;\r\n        let ret: boolean = false;\r\n        const nestederr = \"Options cannot contain functions or nested objects\";\r\n        if (!U.isShallowEqualWithProxies(oldProps.draggable, nextProps.draggable)) {\r\n            const opt: GObject = oldProps.draggable as any;\r\n            if (opt && typeof opt === \"object\") for(let k in opt){ switch (typeof opt[k]){ case \"function\": case \"object\": Log.ee(\"drag\" + nestederr, k); } }\r\n            this.dragOptionsChanged = true;\r\n            ret = true;\r\n        }\r\n        if (!U.isShallowEqualWithProxies(oldProps.resizable, nextProps.resizable)) {\r\n            const opt: GObject = oldProps.resizable as any;\r\n            if (opt && typeof opt === \"object\") for(let k in opt){ switch (typeof opt[k]){ case \"function\": case \"object\": Log.ee(\"resize\" + nestederr, k); } }\r\n            this.resizeOptionsChanged = true;\r\n            ret = true;\r\n        }\r\n        if (!U.isShallowEqualWithProxies(oldProps.rotatable, nextProps.rotatable)) {\r\n            const opt: GObject = oldProps.rotatable as any;\r\n            if (opt && typeof opt === \"object\") for(let k in opt){ switch (typeof opt[k]){ case \"function\": case \"object\": Log.ee(\"rotate\" + nestederr, k); } }\r\n            this.rotateOptionsChanged = true;\r\n            return true;\r\n        }\r\n        if (ret) return true; // i don't need to set more this.variable stuff and i already determined something changed.\r\n        if (Object.keys(oldProps).length !== Object.keys(nextProps).length) return true;\r\n        let k: keyof typeof nextProps;\r\n        for (k in oldProps){\r\n            switch(k){\r\n                //case \"axis\": if (ok)\r\n                case \"draggable\": case \"resizable\": case \"rotatable\": continue;\r\n                case \"children\": continue;\r\n            }\r\n            if (!(k in nextProps)) return false;\r\n            let ok = oldProps[k];\r\n            let nk = nextProps[k];\r\n            if (ok === nk) continue;\r\n            let tk = typeof ok;\r\n            if (tk !== typeof nk) return false;\r\n            switch (tk) {\r\n                case \"object\": Log.ee(\"unexpected object in <Measurable/> props\", {k, nk, ok}); return true;\r\n                case \"function\": if (ok!.toString() !== nk!.toString()) return true; break;\r\n                default: return false; // already checked they are !==\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    render(): ReactNode {\r\n        let child: ReactElement = this.props.children as any;\r\n        console.log(\"measurable render\", child);\r\n        if (!child) return child || null; // sometimes react passes {} as props.children?\r\n        if (!Object.keys(child).length) return Log.ee(\"Measurable can have only 1 subelement and it cannot be an array or a <>React.fragment</>\", child, this.props);\r\n        if (Array.isArray(child)) {\r\n            if (child.length !== 1) {\r\n                Log.ee(\"Measurable can have only 1 subelement and it cannot be an array or a <>React.fragment</>\", child, this.props);\r\n                return child;\r\n            }\r\n            else child = child[0];\r\n        }\r\n        if (child.type.toString() === React.Fragment.toString()) {\r\n            Log.ee(\"Measurable can have only 1 subelement and it cannot be an array or a <>React.fragment</>\", child, this.props);\r\n            return child; }\r\n\r\n        let oldProps = child.props;\r\n        let newProps = {\r\n            ref: (html: Element | null)=>{\r\n                console.log('measurable set ref',  html);\r\n                if (html && !U.isHtmlNode(html)) {\r\n                    Log.ee('ref tring to set non-html element', html);\r\n                    return;\r\n                }\r\n                this.html = html;\r\n            }\r\n        };\r\n        U.objectMergeInPlace(newProps, oldProps);\r\n        let clonedChild = React.cloneElement(child, newProps);\r\n        return clonedChild;\r\n    }\r\n}\r\n/*\r\n@RuntimeAccessible('InfiniteScrollComponent')\r\nexport class InfiniteScrollComponent extends Component<ScrollOwnProps, ScrollState>{\r\n    static cname: string = \"InfiniteScrollComponent\";\r\n    render(){\r\n        return <Measurable transformMode={false} onChildren={true}>{ this.props.children}</Measurable>\r\n    }\r\n}\r\n*/\r\n// private\r\ninterface ScrollOwnProps {\r\n    children: ReactChild[] | ReactChild;\r\n}\r\ninterface MeasurableOwnProps {\r\n    children: ReactChild[] | ReactChild;\r\n    //dragOptions?: Options;\r\n    //drag?: Options;\r\n    draggable?: JQueryUI.DraggableOptions | boolean;\r\n    onDragStart?: DraggableEvent;\r\n    whileDragging?: DraggableEvent;\r\n    onDragEnd?: DraggableEvent;\r\n    onChildren?: boolean | ((e: HTMLElement)=>HTMLElement);\r\n\r\n    //resizeOptions?: Options;\r\n    //resize?: Options;\r\n    resizable?: JQueryUI.ResizableOptions | boolean;\r\n    onResizeStart?: ResizableEvent;\r\n    whileResizing?: ResizableEvent;\r\n    onResizeEnd?: ResizableEvent;\r\n    transformMode?: boolean; // if true uses transform: translate() instead of pos:absolute; left; & top;\r\n\r\n    //rotateOptions?: Options;\r\n    //rotate?: Options;\r\n    rotatable?: GObject | boolean;\r\n    onRotationStart?: RotatableEvent;\r\n    whileRotating?: RotatableEvent;\r\n    onRotationEnd?: RotatableEvent;\r\n}\r\n// private\r\ninterface MeasurableStateProps {\r\n    // propsFromReduxStateOrOtherKindOfStateManagement: boolean; // flux or custom things too, unrelated to this.state of react.\r\n}\r\n\r\n// private\r\ninterface DispatchProps {\r\n    // propsFromReduxActions: typeof funzioneTriggeraAzioneDaImportare;\r\n}\r\n\r\n\r\n// private\r\ntype MeasurableAllProps = MeasurableOwnProps & MeasurableStateProps & DispatchProps;\r\n\r\n////// mapper func\r\n/*\r\nfunction mapStateToProps(state: DState, ownProps: MeasurableOwnProps): MeasurableStateProps {\r\n    const ret: MeasurableStateProps = {} as any;\r\n    /// to fill\r\n    return ret; }\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<any>): DispatchProps {\r\n    const ret: DispatchProps = {} as any;\r\n    /// to fill\r\n    return ret; }\r\n*/\r\n\r\n(MeasurableComponent as any).defaultProps = {\r\n    autosizex: true,\r\n    autosizey: true,\r\n    style: undefined,\r\n    children: [],\r\n} as MeasurableOwnProps;\r\n\r\nexport class InfiniteScrollComponent extends Component<any, any>{ }\r\n\r\nexport function Measurable(props: MeasurableAllProps, children: ReactChild[] = []): ReactElement {\r\n    return <MeasurableComponent {...{...props, children}}>{children}</MeasurableComponent>;\r\n}\r\n// todo: shortcuts for Draggable Resizable Rotatable with whileDragging onDragStart props simplified to start, while, end\r\nexport function InfiniteScroll(props: MeasurableAllProps, children: ReactChild[] = []): ReactElement {\r\n    return <Measurable {...{...props, children}} transformMode={false} onChildren={true}>{children}</Measurable>;\r\n}/*\r\nexport function InfiniteScroll(props: MeasurableAllProps, children: ReactChild[] = []): ReactElement {\r\n    return <InfiniteScrollComponent {...{...props, children}}>{children}</InfiniteScrollComponent>;\r\n}*/\r\n\r\n/*connect<MeasurableStateProps, DispatchProps, MeasurableOwnProps, DState>(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MeasurableComponent);*/\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}