{"ast":null,"code":"var _jsxFileName = \"C:\\\\0Programmi\\\\Dev\\\\projects\\\\frontend\\\\jjodel\\\\src\\\\components\\\\forEndUser\\\\Input.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { Defaults, Keystrokes, LPointerTargetable, MultiSelect, store, U } from '../../joiner';\nimport { useStateIfMounted } from 'use-state-if-mounted';\nimport './inputselect.scss';\nimport { Tooltip } from './Tooltip';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function getSelectOptions_raw(data, field) {\n  if (!data) return [];\n  // console.log(\"select options\", {data, field, children, options});\n  let returns;\n  let primitives;\n  let classes;\n  let enumerators;\n  let objects;\n  let m2classname;\n  let hasPrimitives = false;\n  let hasReturnTypes = false;\n  let cname = data.className;\n  if (!field) switch (cname) {\n    case 'DAttribute':\n    case 'DReference':\n    case 'DOperation':\n    case 'DParameter':\n      field = 'type';\n      break;\n    case 'DValue':\n      field = 'values';\n      break;\n    case 'DClass':\n      field = 'extends';\n      break;\n  }\n  switch (field) {\n    case 'type':\n      let model = data.model;\n      switch (cname) {\n        default:\n          break;\n        case 'DAttribute':\n          enumerators = model.enums;\n          hasPrimitives = true;\n          break;\n        case 'DReference':\n          classes = model.classes;\n          break;\n        case 'DOperation':\n          classes = model.classes;\n          enumerators = model.enums;\n          hasPrimitives = hasReturnTypes = true;\n          break;\n        case 'DParameter':\n          classes = model.classes;\n          enumerators = model.enums;\n          hasPrimitives = true;\n          break;\n      }\n      break;\n    case 'value':\n    case 'values':\n      if (cname !== 'DValue') break;\n      let m2 = data.instanceof;\n      if (!m2) {\n        objects = data.model.allSubObjects;\n        break;\n      }\n      let dm2 = m2.__raw;\n      if (dm2.className === \"DAttribute\") break;\n      let type = m2.type;\n      if (!type) break;\n      m2classname = type.name;\n      let m1modelid = data.model.id;\n      objects = (type.allInstances || []).filter(o => o.model.id === m1modelid);\n  }\n  let state;\n  // todo: all this stuff might be better moved in mapstatetoprops, or the select list won't update properly.\n  if (hasPrimitives) {\n    if (!state) state = store.getState();\n    primitives = LPointerTargetable.fromPointer(state.primitiveTypes);\n  }\n  if (hasReturnTypes) {\n    if (!state) state = store.getState();\n    returns = LPointerTargetable.fromPointer(state.returnTypes);\n  }\n\n  // console.log(\"select options\", {data, field, returns, primitives, classes, enumerators});\n\n  let ret = [];\n  if (returns && returns.length) ret.push({\n    label: 'Defaults',\n    options: returns.map((r, i) => ({\n      value: r.id,\n      label: r.name\n    }))\n  });\n  if (primitives && primitives.length) ret.push({\n    label: 'Primitives',\n    options: primitives.map((r, i) => ({\n      value: r.id,\n      label: r.name\n    }))\n  });\n  if (enumerators && enumerators.length) ret.push({\n    label: 'Enumerators',\n    options: enumerators.map((r, i) => ({\n      value: r.id,\n      label: r.name\n    }))\n  });\n  if (classes && classes.length) ret.push({\n    label: 'Classes',\n    options: classes.map((r, i) => ({\n      value: r.id,\n      label: r.name\n    }))\n  });\n  if (objects && objects.length) ret.push({\n    label: m2classname ? 'Instances of ' + m2classname : \"All objects\",\n    options: [{\n      value: undefined,\n      label: ''\n    }, ...objects.map((r, i) => ({\n      value: r.id,\n      label: r.name\n    }))]\n  });\n  return ret;\n}\nexport function getSelectOptions(data, field, options, children) {\n  if (options) return options;\n  // children is auto-filled to empty array even if it is not set explicitly in jsx\n  if (Array.isArray(children) && children.length > 0) return children;\n  let ret = getSelectOptions_raw(data, field);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: ret.map(optgrp => /*#__PURE__*/_jsxDEV(\"optgroup\", {\n      label: optgrp.label,\n      children: optgrp.options.map((e, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: e.value,\n        children: e.label\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 46\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 31\n    }, this)).filter(e => !!e)\n  }, void 0, false);\n}\nexport function InputComponent(props) {\n  _s();\n  var _data;\n  const data = props.data;\n  const getter = props.getter;\n  const setter = props.setter;\n  const field = props.field;\n  const oldValue = getter ? getter(data, field) : data ? data[field] : undefined; // !== undefined); ? data[field] : 'undefined'\n  let [value, setValue] = useStateIfMounted(oldValue);\n  const [isTouched, setIsTouched] = useStateIfMounted(false);\n  const inputRef = useRef(null);\n  if (props.tag === 'select') value = oldValue; // select does not use state.\n  let serializeValue = val => (val === null || val === void 0 ? void 0 : val.id) || val;\n  function valueDidChange(v1, v2) {\n    return serializeValue(v1) !== serializeValue(v2);\n    /*\r\n    let rawv1 = v1?.__raw || v1;\r\n    let rawv2 = v2?.__raw || v2;\r\n    if (rawv1 !== v1 || rawv2 !== v2) { return v1?.clonedCounter !== v2?.clonedCounter; }\r\n    return v1 !== v2;*/\n  }\n\n  // I check if the value that I have in my local state is being edited by other <Input />\n  if (props.tag !== 'select' && !isTouched && valueDidChange(value, oldValue)) {\n    setValue(serializeValue(oldValue));\n    setIsTouched(false);\n  }\n  if (!(data && field || getter && setter)) return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"Either props.data & field or both getter & setter are required.\"\n  }, void 0, false);\n  let readOnly;\n  if (props.readonly !== undefined) readOnly = props.readonly;\n  // else if (props.disabled !== undefined) readOnly = props.disabled;\n  else readOnly = props.debugmodee !== 'true' && Defaults.check(data === null || data === void 0 ? void 0 : data.id);\n  let type = props.type ? props.type : 'text';\n  let subtype = type;\n  switch (type) {\n    case 'toggle':\n      type = 'checkbox';\n      subtype = 'switch';\n      break;\n    case 'checkbox3':\n    case 'switch':\n      type = 'checkbox';\n      break;\n    case 'slider':\n      type = 'range';\n      break;\n  }\n  let label = props.jsxLabel || props.label;\n  let postlabel = props.postlabel;\n  let tooltip = (props.tooltip === true ? data === null || data === void 0 ? void 0 : (_data = data['__info_of__' + field]) === null || _data === void 0 ? void 0 : _data.txt : props.tooltip) || '';\n  let css = ''; //'my-auto input ';\n  //css += (jsxLabel) ? 'ms-1' : (label) ? 'ms-auto' : '';\n  css += props.hidden ? ' hidden-input' : '';\n  let autosize = props.autosize === undefined ? false : props.autosize; // props.type==='text'\n  css += autosize ? ' autosize-input' : '';\n  const isBoolean = ['checkbox', 'radio'].includes(type);\n  const onChange = evt => {\n    var _onChange, _ref;\n    (_onChange = (_ref = props).onChange) === null || _onChange === void 0 ? void 0 : _onChange.call(_ref, evt);\n    if (readOnly) return;\n    if (isBoolean) {\n      let target = evt.target.checked;\n      if (subtype === 'checkbox3' && !value) {\n        target = undefined;\n      }\n      if (setter) setter(target, data, field);else data[field] = target;\n      setValue(target);\n      return;\n    }\n    if (props.tag === \"select\") {\n      confirmValue(evt);\n    } else {\n      //console.log(\"setValue\", {value, nv: getValueFromEvent(evt), evt, ev: evt.target.value});\n      setValue(getValueFromEvent(evt));\n      setIsTouched(true); // I'm editing the element in my local state.\n      // the actual set is done in onBlur\n    }\n  };\n  const onKeyDown = evt => {\n    var _onKeyDown, _ref2;\n    (_onKeyDown = (_ref2 = props).onKeyDown) === null || _onKeyDown === void 0 ? void 0 : _onKeyDown.call(_ref2, evt);\n    if (props.tag === 'select') return;\n    if (evt.key === Keystrokes.enter) confirmValue(evt);\n    if (evt.key === Keystrokes.escape) {\n      const oldValue = getter ? getter(data, field) : data[field];\n      writeHtmlValueFromEvent(evt, oldValue);\n      setValue(serializeValue(oldValue));\n      setIsTouched(false);\n      evt.target.blur();\n      // to optimize: probably can remove a large part of this function because this should trigger blur event as well. or move \"change\" event contents here\n      // optimize 2: memoize the whole component, so it won't update unless the displayed value changed. this would also fix cursor going to input end when pressing enter.\n    }\n  };\n  const getValueFromEvent = evt => {\n    switch (props.tag) {\n      case \"textarea\":\n      case \"input\":\n      case \"select\":\n      case \"\":\n      case null:\n      case undefined:\n        return evt.target.value;\n      default:\n        return evt.target.innerText;\n    }\n  };\n  const writeHtmlValueFromEvent = (evt, value) => {\n    value = serializeValue(value);\n    switch (props.tag) {\n      case \"textarea\":\n      case \"input\":\n      case \"select\":\n      case \"\":\n      case null:\n      case undefined:\n        return evt.target.value = value;\n      default:\n        return evt.target.innerText = value;\n    }\n  };\n  const onBlur = evt => {\n    var _onBlur, _ref3;\n    (_onBlur = (_ref3 = props).onBlur) === null || _onBlur === void 0 ? void 0 : _onBlur.call(_ref3, evt);\n    if (props.tag === 'select') return;\n    confirmValue(evt);\n  };\n  const confirmValue = evt => {\n    if (readOnly || isBoolean) return;\n    const newValue = getValueFromEvent(evt);\n    const oldValue = getter ? getter(data, field) : data[field];\n    // console.log(\"onChange confirm\", {evt, newValue, oldValue, changed: valueDidChange(newValue, oldValue), readOnly, isBoolean, nnv:serializeValue(newValue)});\n    if (valueDidChange(newValue, oldValue)) {\n      if (setter) setter(newValue, data, field);else data[field] = serializeValue(newValue);\n    }\n    // I terminate my editing, so I communicate it to other <Input /> that render the same field.\n    setIsTouched(false);\n  };\n  const otherprops = {\n    ...props\n  };\n  delete otherprops.data;\n  delete otherprops.field;\n  delete otherprops.getter;\n  delete otherprops.setter;\n  delete otherprops.label;\n  delete otherprops.postlabel;\n  delete otherprops.jsxLabel;\n  delete otherprops.tooltip;\n  delete otherprops.hidden;\n  delete otherprops.inputStyle;\n  delete otherprops.children;\n  delete otherprops.autosize; // because react complains is bool in dom attribute or unknown attrib name\n\n  let checked = undefined;\n  if (isBoolean) checked = typeof value === \"boolean\" ? value : typeof value === \"string\" ? U.fromBoolString(value) : !!value;\n  let cursor;\n  if (tooltip) cursor = 'help';else if (readOnly) cursor = 'not-allowed';else if (isBoolean) cursor = 'pointer';else cursor = 'auto';\n  let inputProps = {\n    ...otherprops,\n    className: [props.inputClassName || '', css].join(' '),\n    style: props.inputStyle || {},\n    spellCheck: props.spellCkeck || false,\n    readOnly,\n    disabled: readOnly,\n    type,\n    value: serializeValue(value),\n    checked,\n    onChange,\n    onBlur,\n    onKeyDown\n  }; // key:`${field}.${data?.id}`\n  if (!inputProps.style.cursor && cursor === 'not-allowed') {\n    inputProps.style.cursor = cursor;\n  }\n  switch (subtype) {\n    case 'checkbox3':\n    case 'switch':\n    case 'slider':\n      inputProps.className += ' ' + subtype + (oldValue === undefined ? 'undetermined' : '');\n      break;\n    default:\n      break;\n  }\n  let input;\n  let rootprops = {\n    className: otherprops.className || '',\n    style: otherprops.style || {}\n  };\n  switch (typeof rootprops.ref) {\n    default:\n      rootprops.ref = inputRef;\n      break;\n    case \"object\":\n      let oldref = rootprops.ref;\n      rootprops.ref = v => {\n        oldref.current = inputRef.current = v;\n      };\n      break;\n    case \"function\":\n      let oldreff = rootprops.ref;\n      rootprops.ref = v => {\n        oldreff(v);\n        inputRef.current = v;\n      };\n      break;\n  }\n  if (props.autosize) rootprops['data-value'] = inputProps.value;\n  if (tooltip) {\n    rootprops.onMouseEnter = () => {\n      var _rootprops$ref;\n      return Tooltip.show(tooltip, 'b', ((_rootprops$ref = rootprops.ref) === null || _rootprops$ref === void 0 ? void 0 : _rootprops$ref.current) || rootprops.ref);\n    };\n    rootprops.onMouseLeave = () => Tooltip.hide();\n  }\n  /*let rootkeys = new Set(...Object.keys(rootprops));\r\n  //  merge events: might want to distinguish which events are merged between root and input and which not.\r\n  //  onChange surely needs merge. onMouseHover might not to let it trigger on label too.\r\n  for (let k of rootkeys) {\r\n      if (!(k[0] === 'o' && k[1] === 'n' && k[2] && k[2].toUpperCase() === k[2])) continue;\r\n      if (inputProps[k]) inputProps[k] = function(...a:any) { inputProps[k](arguments); rootprops[k](arguments); }\r\n      else inputProps[k] = rootprops[k];\r\n      delete rootprops[k];\r\n  }*/\n\n  let wrap = true;\n  if (autosize) rootprops.className = (rootprops.className || '') + ' autosize-input-container';else if (!label && !postlabel) {\n    if (rootprops.className) inputProps.className = rootprops.className + ' ' + inputProps.className;\n    if (rootprops.style) U.objectMergeInPlace(inputProps.style, rootprops.style);\n    inputProps = {\n      ...rootprops,\n      ...inputProps\n    };\n    wrap = false;\n  }\n  switch (props.tag) {\n    case \"textarea\":\n      input = /*#__PURE__*/_jsxDEV(\"textarea\", {\n        ...inputProps,\n        children: inputProps.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 34\n      }, this);\n      break;\n    case \"select\":\n      let options = getSelectOptions(data, field, props.options, props.children);\n      if (props.isMultiSelect) {\n        console.log('setting multiselect pre', {\n          value: inputProps.value,\n          options\n        });\n\n        // @ts-ignore\n        input = /*#__PURE__*/_jsxDEV(MultiSelect, {\n          ...inputProps,\n          isMulti: true,\n          onChange: v => {\n            console.log('setting multiselect', {\n              v,\n              value: inputProps.value,\n              options\n            });\n            //lclass.extends = v.map(e => e.value) as Any<string[]>;\n          },\n          children: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 25\n        }, this);\n      }\n      input = /*#__PURE__*/_jsxDEV(\"select\", {\n        ...inputProps,\n        children: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 21\n      }, this);\n      break;\n    case null:\n    case undefined:\n    case \"\":\n    case \"input\":\n      input = /*#__PURE__*/_jsxDEV(\"input\", {\n        ...inputProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 67\n      }, this);\n      break;\n    default:\n      inputProps.contentEditable = inputProps.contentEditable !== false;\n      input = /*#__PURE__*/React.createElement(props.tag, inputProps, props.children);\n      break;\n  }\n  if (!wrap) return input;\n  if (typeof label === \"string\") label = /*#__PURE__*/_jsxDEV(\"span\", {\n    children: label\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 316,\n    columnNumber: 44\n  }, this);\n  if (typeof postlabel === \"string\") postlabel = /*#__PURE__*/_jsxDEV(\"span\", {\n    children: postlabel\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 317,\n    columnNumber: 52\n  }, this);\n  const openSelect = e => {\n    /*\r\n    tried to make label click open the select but does not work easily in js, a solution was here but with css padding.\r\n    https://stackoverflow.com/questions/15249958/once-i-click-on-label-select-button-should-get-open\r\n    */\n    if (props.tag !== \"select\") return;\n    let t = e.target;\n    let select = t.tagName === 'select' ? t : t.querySelector('select');\n    console.log(\"click select root\", {\n      t,\n      select\n    });\n    select === null || select === void 0 ? void 0 : select.click();\n  };\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    className: 'input-container',\n    ...rootprops,\n    children: [label || undefined, input, postlabel || undefined]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 330,\n    columnNumber: 12\n  }, this);\n  /*\r\n  return(<label className={'p-1'} {...otherprops}\r\n                style={rootStyle}>\r\n        {label && <span className={'my-auto'} onMouseEnter={e => setShowTooltip(true)}\r\n                      onMouseLeave={e => setShowTooltip(false)}>{label}\r\n      </span>}\r\n        {jsxLabel && <span onMouseEnter={e => setShowTooltip(true)}\r\n                         onMouseLeave={e => setShowTooltip(false)} style={{width: '100%'}}>{jsxLabel}\r\n      </span>}\r\n        {(tooltip && showTooltip) && <div className={'my-tooltip'}>\r\n          <b className={'text-center text-capitalize'}>{field}</b>\r\n          <br />\r\n          <label>{tooltip}</label>\r\n      </div>}\r\n        {autosize ? <div className={(autosize ? 'autosize-input-container' : '') + (props.asLabel ? ' labelstyle' : '')}\r\n                       data-value={value}>{input}\r\n      </div> : input}\r\n  </label>);\r\n  */\n}\n_s(InputComponent, \"nlzZzFhpjnEHW6d8jEzTV191MA8=\", false, function () {\n  return [useStateIfMounted, useStateIfMounted];\n});\n_c = InputComponent;\nexport function InputMapStateToProps(state, ownProps) {\n  var _ownProps$data;\n  const ret = {};\n  const pointer = typeof ownProps.data === 'string' ? ownProps.data : (_ownProps$data = ownProps.data) === null || _ownProps$data === void 0 ? void 0 : _ownProps$data.id;\n  ret.debugmodee = state.debug ? 'true' : 'false';\n  if (pointer) ret.data = LPointerTargetable.fromPointer(pointer);\n  return ret;\n}\n_c2 = InputMapStateToProps;\nfunction mapDispatchToProps(dispatch) {\n  const ret = {};\n  return ret;\n}\nexport const InputConnected =\n// @ts-ignore\nconnect(InputMapStateToProps, mapDispatchToProps)(InputComponent);\n\n// export function Input(props: InputOwnProps, children: (string | React.Component)[] = []): ReactElement { return 'input' as any; }\nexport function Input(props) {\n  // @ts-ignore\n  return /*#__PURE__*/_jsxDEV(InputConnected, {\n    ...props,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 422,\n    columnNumber: 12\n  }, this);\n}\n\n// export function TextArea(props: InputOwnProps, children: (string | React.Component)[] = []): ReactElement { return 'textarea' as any; }\n_c3 = Input;\nexport function TextArea(props, c) {\n  // @ts-ignore\n  return /*#__PURE__*/_jsxDEV(InputConnected, {\n    ...props,\n    tag: \"textarea\",\n    children: props.children || c\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 428,\n    columnNumber: 12\n  }, this);\n}\n//export function Select(props: SelectOwnProps, children: (string | React.Component)[] = []): ReactElement { return 'select' as any; }\n_c4 = TextArea;\nexport function Select(props, c) {\n  // @ts-ignore\n  return /*#__PURE__*/_jsxDEV(InputConnected, {\n    ...props,\n    tag: \"select\",\n    children: props.children || c\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 433,\n    columnNumber: 12\n  }, this);\n}\n_c5 = Select;\nexport const Edit = Input;\n\n// @ts-ignore\nInputComponent.cname = 'InputComponent';\n// @ts-ignore\nInputConnected.cname = 'InputConnected';\nInput.cname = 'Input';\nTextArea.cname = 'TextArea';\nSelect.cname = 'Select';\nEdit.cname = 'Edit';\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"InputComponent\");\n$RefreshReg$(_c2, \"InputMapStateToProps\");\n$RefreshReg$(_c3, \"Input\");\n$RefreshReg$(_c4, \"TextArea\");\n$RefreshReg$(_c5, \"Select\");","map":{"version":3,"names":["React","useRef","connect","Defaults","Keystrokes","LPointerTargetable","MultiSelect","store","U","useStateIfMounted","Tooltip","jsxDEV","_jsxDEV","Fragment","_Fragment","getSelectOptions_raw","data","field","returns","primitives","classes","enumerators","objects","m2classname","hasPrimitives","hasReturnTypes","cname","className","model","enums","m2","instanceof","allSubObjects","dm2","__raw","type","name","m1modelid","id","allInstances","filter","o","state","getState","fromPointer","primitiveTypes","returnTypes","ret","length","push","label","options","map","r","i","value","undefined","getSelectOptions","children","Array","isArray","optgrp","e","fileName","_jsxFileName","lineNumber","columnNumber","InputComponent","props","_s","_data","getter","setter","oldValue","setValue","isTouched","setIsTouched","inputRef","tag","serializeValue","val","valueDidChange","v1","v2","readOnly","readonly","debugmodee","check","subtype","jsxLabel","postlabel","tooltip","txt","css","hidden","autosize","isBoolean","includes","onChange","evt","_onChange","_ref","call","target","checked","confirmValue","getValueFromEvent","onKeyDown","_onKeyDown","_ref2","key","enter","escape","writeHtmlValueFromEvent","blur","innerText","onBlur","_onBlur","_ref3","newValue","otherprops","inputStyle","fromBoolString","cursor","inputProps","inputClassName","join","style","spellCheck","spellCkeck","disabled","input","rootprops","ref","oldref","v","current","oldreff","onMouseEnter","_rootprops$ref","show","onMouseLeave","hide","wrap","objectMergeInPlace","isMultiSelect","console","log","isMulti","contentEditable","createElement","openSelect","t","select","tagName","querySelector","click","_c","InputMapStateToProps","ownProps","_ownProps$data","pointer","debug","_c2","mapDispatchToProps","dispatch","InputConnected","Input","_c3","TextArea","c","_c4","Select","_c5","Edit","$RefreshReg$"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/src/components/forEndUser/Input.tsx"],"sourcesContent":["import React, {Dispatch, KeyboardEvent, LegacyRef, ReactElement, ReactNode, useRef} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {DState} from '../../redux/store';\r\nimport {\r\n    Any,\r\n    Defaults,\r\n    DObject,\r\n    DPointerTargetable,\r\n    GObject,\r\n    Keystrokes, LAttribute,\r\n    LClass, LEnumerator, LModel, LObject,\r\n    LPointerTargetable, LReference, LValue, MultiSelect,\r\n    Overlap,\r\n    Pointer, PrimitiveType, Selectors,\r\n    store,\r\n    U\r\n} from '../../joiner';\r\nimport {useStateIfMounted} from 'use-state-if-mounted';\r\nimport './inputselect.scss';\r\nimport { Tooltip } from './Tooltip';\r\n\r\ntype MultiSelectOptGroup = {label: string, options: {value: string, label: string}[]};\r\n\r\nexport function getSelectOptions_raw(data: any, field: string): MultiSelectOptGroup[] {\r\n    if (!data) return [];\r\n    // console.log(\"select options\", {data, field, children, options});\r\n    let returns: LClass[] | undefined;\r\n    let primitives: LClass[] | undefined;\r\n    let classes: LClass[] | undefined;\r\n    let enumerators: LEnumerator[] | undefined;\r\n    let objects: LObject[] | undefined;\r\n    let m2classname: string | undefined;\r\n    let hasPrimitives: boolean = false;\r\n    let hasReturnTypes: boolean = false;\r\n    let cname = data.className;\r\n    if (!field) switch(cname) {\r\n        case 'DAttribute':  case 'DReference': case 'DOperation': case 'DParameter': field = 'type'; break;\r\n        case 'DValue': field = 'values'; break;\r\n        case 'DClass': field = 'extends'; break;\r\n    }\r\n    switch(field) {\r\n        case 'type':\r\n            let model = data.model;\r\n            switch (cname) {\r\n                default: break;\r\n                case 'DAttribute': enumerators = model.enums; hasPrimitives = true; break;\r\n                case 'DReference': classes = model.classes; break;\r\n                case 'DOperation': classes = model.classes; enumerators = model.enums; hasPrimitives = hasReturnTypes = true; break;\r\n                case 'DParameter': classes = model.classes; enumerators = model.enums; hasPrimitives = true; break;\r\n            }\r\n            break;\r\n        case 'value': case 'values':\r\n            if (cname !== 'DValue') break;\r\n            let m2: LReference | LAttribute | undefined = (data as LValue).instanceof;\r\n            if (!m2) {\r\n                objects = (data as LValue).model.allSubObjects;\r\n                break;\r\n            }\r\n            let dm2 = m2.__raw;\r\n            if (dm2.className === \"DAttribute\") break;\r\n            let type: LClass = m2.type as LClass;\r\n            if (!type) break;\r\n            m2classname = type.name;\r\n            let m1modelid = data.model.id;\r\n            objects = (type.allInstances || []).filter( o => o.model.id === m1modelid);\r\n    }\r\n    let state: DState | undefined;\r\n    // todo: all this stuff might be better moved in mapstatetoprops, or the select list won't update properly.\r\n    if (hasPrimitives) {\r\n        if (!state) state = store.getState();\r\n        primitives = LPointerTargetable.fromPointer(state.primitiveTypes);\r\n    }\r\n    if (hasReturnTypes) {\r\n        if (!state) state = store.getState();\r\n        returns = LPointerTargetable.fromPointer(state.returnTypes);\r\n    }\r\n\r\n    // console.log(\"select options\", {data, field, returns, primitives, classes, enumerators});\r\n\r\n    let ret:MultiSelectOptGroup[] = [];\r\n    if (returns && returns.length) ret.push({label: 'Defaults', options: returns.map((r, i)=>({value: r.id, label:r.name}))});\r\n    if (primitives && primitives.length) ret.push({label: 'Primitives', options: primitives.map((r, i)=>({value: r.id, label:r.name}))});\r\n    if (enumerators && enumerators.length) ret.push({label: 'Enumerators', options: enumerators.map((r, i)=>({value: r.id, label:r.name}))});\r\n    if (classes && classes.length) ret.push({label: 'Classes', options: classes.map((r, i)=>({value: r.id, label:r.name}))});\r\n    if (objects && objects.length) ret.push({label: m2classname ? 'Instances of ' + m2classname : \"All objects\", options:\r\n            [{value: undefined as any, label: ''}, ...objects.map((r, i)=>({value: r.id, label:r.name}))]});\r\n    return ret;\r\n}\r\nexport function getSelectOptions(data: any, field: string, options: ReactNode, children?: ReactNode): ReactNode {\r\n    if (options) return options;\r\n    // children is auto-filled to empty array even if it is not set explicitly in jsx\r\n    if (Array.isArray(children) && children.length > 0) return children;\r\n    let ret = getSelectOptions_raw(data, field);\r\n    return(\r\n        <>{\r\n            ret.map(optgrp => <optgroup label={optgrp.label}>{\r\n                optgrp.options.map((e, i) => <option key={i} value={e.value}>{e.label}</option>)\r\n            }</optgroup>).filter(e=>!!e)\r\n        }</>);\r\n}\r\n\r\nexport function InputComponent(props: AllProps) {\r\n    const data = props.data;\r\n    const getter = props.getter;\r\n    const setter = props.setter;\r\n    const field: string = props.field as string;\r\n    const oldValue: PrimitiveType | LPointerTargetable = (getter) ? getter(data, field) : (data ? data[field] : undefined); // !== undefined); ? data[field] : 'undefined'\r\n    let [value, setValue] = useStateIfMounted<PrimitiveType | LPointerTargetable>(oldValue);\r\n\r\n    const [isTouched, setIsTouched] = useStateIfMounted(false);\r\n    const inputRef = useRef<Element | null>(null);\r\n    if (props.tag === 'select') value = oldValue; // select does not use state.\r\n    let serializeValue = (val: LPointerTargetable | PrimitiveType): string | PrimitiveType => (val as LPointerTargetable)?.id || (val as any);\r\n\r\n    function valueDidChange(v1: any, v2: any): boolean {\r\n        return serializeValue(v1) !== serializeValue(v2);\r\n        /*\r\n        let rawv1 = v1?.__raw || v1;\r\n        let rawv2 = v2?.__raw || v2;\r\n        if (rawv1 !== v1 || rawv2 !== v2) { return v1?.clonedCounter !== v2?.clonedCounter; }\r\n        return v1 !== v2;*/\r\n    }\r\n\r\n    // I check if the value that I have in my local state is being edited by other <Input />\r\n    if (props.tag !== 'select' && !isTouched && valueDidChange(value, oldValue)){\r\n        setValue(serializeValue(oldValue));\r\n        setIsTouched(false);\r\n    }\r\n\r\n\r\n    if (!((data && field) || (getter && setter))) return(<>Either props.data & field or both getter & setter are required.</>);\r\n    let readOnly: boolean;\r\n    if (props.readonly !== undefined) readOnly = props.readonly;\r\n    // else if (props.disabled !== undefined) readOnly = props.disabled;\r\n    else readOnly = props.debugmodee !== 'true' && Defaults.check(data?.id)\r\n\r\n    let type = (props.type) ? props.type : 'text';\r\n    let subtype: string = type;\r\n    switch (type) {\r\n        case 'toggle': type = 'checkbox'; subtype = 'switch'; break;\r\n        case 'checkbox3': case 'switch': type = 'checkbox'; break;\r\n        case 'slider': type = 'range'; break;\r\n    }\r\n    let label: ReactNode | undefined = props.jsxLabel || props.label;\r\n    let postlabel: ReactNode | undefined = props.postlabel;\r\n    let tooltip: ReactNode|string|undefined = ((props.tooltip === true) ? data?.['__info_of__' + field]?.txt : props.tooltip) || '';\r\n\r\n    let css = '';//'my-auto input ';\r\n    //css += (jsxLabel) ? 'ms-1' : (label) ? 'ms-auto' : '';\r\n    css += (props.hidden) ? ' hidden-input' : '';\r\n    let autosize: boolean = props.autosize === undefined ? false : props.autosize; // props.type==='text'\r\n    css += autosize ? ' autosize-input' : '';\r\n    const isBoolean = (['checkbox', 'radio'].includes(type));\r\n\r\n\r\n    const onChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n        (props as any).onChange?.(evt);\r\n        if (readOnly) return;\r\n        if (isBoolean) {\r\n            let target = evt.target.checked;\r\n            if (subtype === 'checkbox3' && !value) { target = undefined as any; }\r\n            if (setter) setter(target, data, field);\r\n            else data[field] = target;\r\n            setValue(target);\r\n            return;\r\n        }\r\n        if (props.tag === \"select\") {\r\n            confirmValue(evt as any);\r\n        } else {\r\n            //console.log(\"setValue\", {value, nv: getValueFromEvent(evt), evt, ev: evt.target.value});\r\n            setValue(getValueFromEvent(evt));\r\n            setIsTouched(true);     // I'm editing the element in my local state.\r\n            // the actual set is done in onBlur\r\n        }\r\n    }\r\n    const onKeyDown = (evt: React.KeyboardEvent<HTMLInputElement>) => {\r\n        (props as any).onKeyDown?.(evt);\r\n        if (props.tag === 'select') return;\r\n        if (evt.key === Keystrokes.enter) confirmValue(evt as any);\r\n        if (evt.key === Keystrokes.escape) {\r\n            const oldValue = getter ? getter(data, field) : data[field];\r\n            writeHtmlValueFromEvent(evt as any, oldValue);\r\n            setValue(serializeValue(oldValue));\r\n            setIsTouched(false);\r\n            (evt.target as HTMLInputElement).blur();\r\n            // to optimize: probably can remove a large part of this function because this should trigger blur event as well. or move \"change\" event contents here\r\n            // optimize 2: memoize the whole component, so it won't update unless the displayed value changed. this would also fix cursor going to input end when pressing enter.\r\n        }\r\n    }\r\n    const getValueFromEvent = (evt: { target: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement }) => {\r\n        switch (props.tag){\r\n            case \"textarea\": case \"input\": case \"select\": case \"\": case null: case undefined: return evt.target.value;\r\n            default: return evt.target.innerText;\r\n        }\r\n    }\r\n    const writeHtmlValueFromEvent = (evt: { target: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement }, value: any) => {\r\n        value = serializeValue(value);\r\n        switch (props.tag){\r\n            case \"textarea\": case \"input\": case \"select\": case \"\": case null: case undefined: return evt.target.value = value;\r\n            default: return evt.target.innerText = value;\r\n        }\r\n    }\r\n\r\n    const onBlur = (evt: { target: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement }) => {\r\n        (props as any).onBlur?.(evt);\r\n        if (props.tag === 'select') return;\r\n        confirmValue(evt);\r\n    }\r\n    const confirmValue = (evt: { target: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement }) => {\r\n        if (readOnly || isBoolean) return;\r\n        const newValue: string = getValueFromEvent(evt);\r\n        const oldValue = getter ? getter(data, field) : data[field];\r\n        // console.log(\"onChange confirm\", {evt, newValue, oldValue, changed: valueDidChange(newValue, oldValue), readOnly, isBoolean, nnv:serializeValue(newValue)});\r\n        if (valueDidChange(newValue, oldValue)){\r\n            if (setter) setter(newValue, data, field);\r\n            else data[field] = serializeValue(newValue);\r\n        }\r\n        // I terminate my editing, so I communicate it to other <Input /> that render the same field.\r\n        setIsTouched(false);\r\n    }\r\n\r\n    const otherprops: GObject = {...props};\r\n    delete otherprops.data;\r\n    delete otherprops.field;\r\n    delete otherprops.getter;\r\n    delete otherprops.setter;\r\n    delete otherprops.label;\r\n    delete otherprops.postlabel;\r\n    delete otherprops.jsxLabel;\r\n    delete otherprops.tooltip;\r\n    delete otherprops.hidden;\r\n    delete otherprops.inputStyle;\r\n    delete otherprops.children;\r\n    delete otherprops.autosize; // because react complains is bool in dom attribute or unknown attrib name\r\n\r\n    let checked: boolean | undefined = undefined;\r\n    if (isBoolean) checked = typeof value === \"boolean\" ? value : (typeof value === \"string\" ? U.fromBoolString(value) : !!value);\r\n\r\n    let cursor: string;\r\n    if (tooltip) cursor = 'help';\r\n    else if (readOnly) cursor = 'not-allowed';\r\n    else if (isBoolean) cursor = 'pointer';\r\n    else cursor = 'auto';\r\n\r\n    let inputProps: GObject = {...otherprops,\r\n        className: [props.inputClassName||'', css].join(' '),\r\n        style: (props.inputStyle || {}),\r\n        spellCheck: (props as any).spellCkeck || false, readOnly, disabled: readOnly, type, value: serializeValue(value), checked,\r\n        onChange, onBlur, onKeyDown} // key:`${field}.${data?.id}`\r\n    if (!inputProps.style.cursor && cursor === 'not-allowed') { inputProps.style.cursor = cursor; }\r\n    switch(subtype){\r\n        case 'checkbox3': case 'switch': case 'slider': inputProps.className += ' ' + subtype + (oldValue===undefined?'undetermined':''); break;\r\n        default: break;\r\n    }\r\n\r\n    let input: ReactNode;\r\n    let rootprops: GObject = {className: otherprops.className||'', style: otherprops.style||{}};\r\n    switch (typeof rootprops.ref) {\r\n        default: rootprops.ref = inputRef; break;\r\n        case \"object\":\r\n            let oldref = rootprops.ref;\r\n            rootprops.ref = (v: Element | null) => { oldref.current = inputRef.current = v; }\r\n            break;\r\n        case \"function\":\r\n            let oldreff = rootprops.ref;\r\n            rootprops.ref = (v: Element | null) => { oldreff(v); inputRef.current = v; }\r\n            break;\r\n    }\r\n    if (props.autosize) rootprops['data-value'] = inputProps.value;\r\n\r\n    if (tooltip) {\r\n        rootprops.onMouseEnter = () => Tooltip.show(tooltip, 'b', (rootprops.ref?.current) || rootprops.ref);\r\n        rootprops.onMouseLeave = () => Tooltip.hide();\r\n    }\r\n    /*let rootkeys = new Set(...Object.keys(rootprops));\r\n    //  merge events: might want to distinguish which events are merged between root and input and which not.\r\n    //  onChange surely needs merge. onMouseHover might not to let it trigger on label too.\r\n    for (let k of rootkeys) {\r\n        if (!(k[0] === 'o' && k[1] === 'n' && k[2] && k[2].toUpperCase() === k[2])) continue;\r\n        if (inputProps[k]) inputProps[k] = function(...a:any) { inputProps[k](arguments); rootprops[k](arguments); }\r\n        else inputProps[k] = rootprops[k];\r\n        delete rootprops[k];\r\n    }*/\r\n\r\n    let wrap = true;\r\n    if (autosize) rootprops.className = (rootprops.className || '') + ' autosize-input-container';\r\n    else if (!label && !postlabel) {\r\n        if (rootprops.className) inputProps.className = rootprops.className + ' ' + inputProps.className;\r\n        if (rootprops.style) U.objectMergeInPlace(inputProps.style, rootprops.style);\r\n        inputProps = {...rootprops, ...inputProps};\r\n        wrap = false;\r\n    }\r\n\r\n    switch (props.tag){\r\n        case \"textarea\": input = <textarea {...inputProps}>{inputProps.value}</textarea>; break;\r\n        case \"select\":\r\n            let options = getSelectOptions(data, field, props.options, props.children);\r\n            if (props.isMultiSelect){\r\n                console.log('setting multiselect pre', {value: inputProps.value, options});\r\n\r\n                // @ts-ignore\r\n                input = <MultiSelect {...inputProps} isMulti={true} onChange={(v) => {\r\n                    console.log('setting multiselect', {v, value: inputProps.value, options});\r\n                    //lclass.extends = v.map(e => e.value) as Any<string[]>;\r\n                }}>{options}</MultiSelect>\r\n            }\r\n            input = <select {...inputProps}>{options}</select>;\r\n            break;\r\n        case null: case undefined: case \"\": case \"input\": input = <input {...inputProps} />; break;\r\n        default:\r\n            inputProps.contentEditable = inputProps.contentEditable !== false;\r\n            input = React.createElement(props.tag, inputProps, props.children); break;\r\n    }\r\n    if (!wrap) return input;\r\n\r\n    if (typeof label === \"string\") label = <span>{label}</span>;\r\n    if (typeof postlabel === \"string\") postlabel = <span>{postlabel}</span>;\r\n\r\n    const openSelect = (e: any)=>{\r\n        /*\r\n        tried to make label click open the select but does not work easily in js, a solution was here but with css padding.\r\n        https://stackoverflow.com/questions/15249958/once-i-click-on-label-select-button-should-get-open\r\n        */\r\n        if (props.tag !== \"select\") return;\r\n        let t: HTMLElement = (e.target) as any;\r\n        let select = (t.tagName === 'select') ? t : t.querySelector('select');\r\n        console.log(\"click select root\", {t, select});\r\n        select?.click();\r\n    }\r\n    return <label className={'input-container'} {...rootprops} /*onClick={openSelect}*/>\r\n        {label || undefined}{input}{postlabel || undefined}</label>;\r\n    /*\r\n    return(<label className={'p-1'} {...otherprops}\r\n                  style={rootStyle}>\r\n\r\n        {label && <span className={'my-auto'} onMouseEnter={e => setShowTooltip(true)}\r\n                        onMouseLeave={e => setShowTooltip(false)}>{label}\r\n        </span>}\r\n\r\n        {jsxLabel && <span onMouseEnter={e => setShowTooltip(true)}\r\n                           onMouseLeave={e => setShowTooltip(false)} style={{width: '100%'}}>{jsxLabel}\r\n        </span>}\r\n\r\n        {(tooltip && showTooltip) && <div className={'my-tooltip'}>\r\n            <b className={'text-center text-capitalize'}>{field}</b>\r\n            <br />\r\n            <label>{tooltip}</label>\r\n        </div>}\r\n\r\n        {autosize ? <div className={(autosize ? 'autosize-input-container' : '') + (props.asLabel ? ' labelstyle' : '')}\r\n                         data-value={value}>{input}\r\n        </div> : input}\r\n    </label>);\r\n    */\r\n}\r\n\r\nexport interface InputOwnProps {\r\n    data?: LPointerTargetable | DPointerTargetable | Pointer<DPointerTargetable, 1, 1, LPointerTargetable>;\r\n    field?: string;\r\n    // DANGER: use the data provided in parameters instead of using js closure, as the proxy accessed from using closure won't be updated in rerenders.\r\n    getter?: (data: any/*LPointerTargetable*/, field: string) => string | boolean | undefined;\r\n    setter?: (value: string|boolean, data: any, field: string) => void;\r\n    label?: string | ReactNode;\r\n    postlabel?: string | ReactNode;\r\n    jsxLabel?: ReactNode; // @deprecated, use label\r\n    type?: 'checkbox'|'color'|'date'|'datetime-local'|'email'|'file'|'image'|'month'|'number'|'password'\r\n        |'radio'|'range'|'tel'|'text'|'time'|'url'|'week'\r\n        |'checkbox3'|'toggle'|'switch'|'slider';\r\n    className?: string;\r\n    style?: GObject;\r\n    readonly?: boolean;\r\n    tooltip?: boolean | ReactNode;\r\n    hidden?: boolean;\r\n    autosize?: boolean;\r\n    inputClassName?: string;\r\n    inputStyle?: GObject;\r\n    key?: React.Key | null;\r\n    placeholder?: string;\r\n    tag?: string;\r\n    children?: ReactNode;\r\n}\r\n\r\nexport interface SelectOwnProps extends Omit<InputOwnProps, 'setter'> {\r\n    options?: JSX.Element;\r\n    setter?: (value: string, data: any, field: string) => void; // parent select has value: string | boolean\r\n    isMultiSelect?: boolean;\r\n}\r\ninterface RealOwnProps extends Omit<SelectOwnProps, 'setter'>{\r\n    setter: InputOwnProps['setter'];\r\n}\r\n\r\ninterface StateProps {\r\n    debugmodee: string;\r\n    data: LPointerTargetable & GObject;\r\n    // selected: Dictionary<Pointer<DUser>, LModelElement | null>;\r\n}\r\ninterface DispatchProps { }\r\ntype AllProps = Overlap<RealOwnProps, Overlap<StateProps, DispatchProps>>;\r\n\r\n\r\nexport function InputMapStateToProps(state: DState, ownProps: RealOwnProps): StateProps {\r\n    const ret: StateProps = {} as any;\r\n    const pointer: Pointer | undefined = typeof ownProps.data === 'string' ? ownProps.data : ownProps.data?.id;\r\n    ret.debugmodee = state.debug ? 'true' : 'false';\r\n    if (pointer) ret.data = LPointerTargetable.fromPointer(pointer);\r\n    return ret;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<any>): DispatchProps {\r\n    const ret: DispatchProps = {};\r\n    return ret;\r\n}\r\n\r\nexport const InputConnected =\r\n    // @ts-ignore\r\n    connect<StateProps, DispatchProps, RealOwnProps, DState>(InputMapStateToProps, mapDispatchToProps)(InputComponent);\r\n\r\n\r\n// export function Input(props: InputOwnProps, children: (string | React.Component)[] = []): ReactElement { return 'input' as any; }\r\nexport function Input(props: InputOwnProps): ReactElement {\r\n    // @ts-ignore\r\n    return <InputConnected {...props as any}>{props.children}</InputConnected>;\r\n}\r\n\r\n// export function TextArea(props: InputOwnProps, children: (string | React.Component)[] = []): ReactElement { return 'textarea' as any; }\r\nexport function TextArea(props: InputOwnProps, c: any): ReactElement {\r\n    // @ts-ignore\r\n    return <InputConnected {...{...props, tag:\"textarea\"} as any}>{props.children||c}</InputConnected>;\r\n}\r\n//export function Select(props: SelectOwnProps, children: (string | React.Component)[] = []): ReactElement { return 'select' as any; }\r\nexport function Select(props: SelectOwnProps, c: any): ReactElement {\r\n    // @ts-ignore\r\n    return <InputConnected {...{...props, tag:\"select\"} as any}>{props.children||c}</InputConnected>;\r\n}\r\nexport const Edit = Input;\r\n\r\n// @ts-ignore\r\nInputComponent.cname = 'InputComponent';\r\n// @ts-ignore\r\nInputConnected.cname = 'InputConnected';\r\nInput.cname = 'Input';\r\nTextArea.cname = 'TextArea';\r\nSelect.cname = 'Select';\r\nEdit.cname = 'Edit';\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAgEC,MAAM,QAAO,OAAO;AAChG,SAAQC,OAAO,QAAO,aAAa;AAEnC,SAEIC,QAAQ,EAIRC,UAAU,EAEVC,kBAAkB,EAAsBC,WAAW,EAGnDC,KAAK,EACLC,CAAC,QACE,cAAc;AACrB,SAAQC,iBAAiB,QAAO,sBAAsB;AACtD,OAAO,oBAAoB;AAC3B,SAASC,OAAO,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAIpC,OAAO,SAASC,oBAAoBA,CAACC,IAAS,EAAEC,KAAa,EAAyB;EAClF,IAAI,CAACD,IAAI,EAAE,OAAO,EAAE;EACpB;EACA,IAAIE,OAA6B;EACjC,IAAIC,UAAgC;EACpC,IAAIC,OAA6B;EACjC,IAAIC,WAAsC;EAC1C,IAAIC,OAA8B;EAClC,IAAIC,WAA+B;EACnC,IAAIC,aAAsB,GAAG,KAAK;EAClC,IAAIC,cAAuB,GAAG,KAAK;EACnC,IAAIC,KAAK,GAAGV,IAAI,CAACW,SAAS;EAC1B,IAAI,CAACV,KAAK,EAAE,QAAOS,KAAK;IACpB,KAAK,YAAY;IAAG,KAAK,YAAY;IAAE,KAAK,YAAY;IAAE,KAAK,YAAY;MAAET,KAAK,GAAG,MAAM;MAAE;IAC7F,KAAK,QAAQ;MAAEA,KAAK,GAAG,QAAQ;MAAE;IACjC,KAAK,QAAQ;MAAEA,KAAK,GAAG,SAAS;MAAE;EACtC;EACA,QAAOA,KAAK;IACR,KAAK,MAAM;MACP,IAAIW,KAAK,GAAGZ,IAAI,CAACY,KAAK;MACtB,QAAQF,KAAK;QACT;UAAS;QACT,KAAK,YAAY;UAAEL,WAAW,GAAGO,KAAK,CAACC,KAAK;UAAEL,aAAa,GAAG,IAAI;UAAE;QACpE,KAAK,YAAY;UAAEJ,OAAO,GAAGQ,KAAK,CAACR,OAAO;UAAE;QAC5C,KAAK,YAAY;UAAEA,OAAO,GAAGQ,KAAK,CAACR,OAAO;UAAEC,WAAW,GAAGO,KAAK,CAACC,KAAK;UAAEL,aAAa,GAAGC,cAAc,GAAG,IAAI;UAAE;QAC9G,KAAK,YAAY;UAAEL,OAAO,GAAGQ,KAAK,CAACR,OAAO;UAAEC,WAAW,GAAGO,KAAK,CAACC,KAAK;UAAEL,aAAa,GAAG,IAAI;UAAE;MACjG;MACA;IACJ,KAAK,OAAO;IAAE,KAAK,QAAQ;MACvB,IAAIE,KAAK,KAAK,QAAQ,EAAE;MACxB,IAAII,EAAuC,GAAId,IAAI,CAAYe,UAAU;MACzE,IAAI,CAACD,EAAE,EAAE;QACLR,OAAO,GAAIN,IAAI,CAAYY,KAAK,CAACI,aAAa;QAC9C;MACJ;MACA,IAAIC,GAAG,GAAGH,EAAE,CAACI,KAAK;MAClB,IAAID,GAAG,CAACN,SAAS,KAAK,YAAY,EAAE;MACpC,IAAIQ,IAAY,GAAGL,EAAE,CAACK,IAAc;MACpC,IAAI,CAACA,IAAI,EAAE;MACXZ,WAAW,GAAGY,IAAI,CAACC,IAAI;MACvB,IAAIC,SAAS,GAAGrB,IAAI,CAACY,KAAK,CAACU,EAAE;MAC7BhB,OAAO,GAAG,CAACa,IAAI,CAACI,YAAY,IAAI,EAAE,EAAEC,MAAM,CAAEC,CAAC,IAAIA,CAAC,CAACb,KAAK,CAACU,EAAE,KAAKD,SAAS,CAAC;EAClF;EACA,IAAIK,KAAyB;EAC7B;EACA,IAAIlB,aAAa,EAAE;IACf,IAAI,CAACkB,KAAK,EAAEA,KAAK,GAAGnC,KAAK,CAACoC,QAAQ,CAAC,CAAC;IACpCxB,UAAU,GAAGd,kBAAkB,CAACuC,WAAW,CAACF,KAAK,CAACG,cAAc,CAAC;EACrE;EACA,IAAIpB,cAAc,EAAE;IAChB,IAAI,CAACiB,KAAK,EAAEA,KAAK,GAAGnC,KAAK,CAACoC,QAAQ,CAAC,CAAC;IACpCzB,OAAO,GAAGb,kBAAkB,CAACuC,WAAW,CAACF,KAAK,CAACI,WAAW,CAAC;EAC/D;;EAEA;;EAEA,IAAIC,GAAyB,GAAG,EAAE;EAClC,IAAI7B,OAAO,IAAIA,OAAO,CAAC8B,MAAM,EAAED,GAAG,CAACE,IAAI,CAAC;IAACC,KAAK,EAAE,UAAU;IAAEC,OAAO,EAAEjC,OAAO,CAACkC,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,MAAI;MAACC,KAAK,EAAEF,CAAC,CAACf,EAAE;MAAEY,KAAK,EAACG,CAAC,CAACjB;IAAI,CAAC,CAAC;EAAC,CAAC,CAAC;EACzH,IAAIjB,UAAU,IAAIA,UAAU,CAAC6B,MAAM,EAAED,GAAG,CAACE,IAAI,CAAC;IAACC,KAAK,EAAE,YAAY;IAAEC,OAAO,EAAEhC,UAAU,CAACiC,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,MAAI;MAACC,KAAK,EAAEF,CAAC,CAACf,EAAE;MAAEY,KAAK,EAACG,CAAC,CAACjB;IAAI,CAAC,CAAC;EAAC,CAAC,CAAC;EACpI,IAAIf,WAAW,IAAIA,WAAW,CAAC2B,MAAM,EAAED,GAAG,CAACE,IAAI,CAAC;IAACC,KAAK,EAAE,aAAa;IAAEC,OAAO,EAAE9B,WAAW,CAAC+B,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,MAAI;MAACC,KAAK,EAAEF,CAAC,CAACf,EAAE;MAAEY,KAAK,EAACG,CAAC,CAACjB;IAAI,CAAC,CAAC;EAAC,CAAC,CAAC;EACxI,IAAIhB,OAAO,IAAIA,OAAO,CAAC4B,MAAM,EAAED,GAAG,CAACE,IAAI,CAAC;IAACC,KAAK,EAAE,SAAS;IAAEC,OAAO,EAAE/B,OAAO,CAACgC,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,MAAI;MAACC,KAAK,EAAEF,CAAC,CAACf,EAAE;MAAEY,KAAK,EAACG,CAAC,CAACjB;IAAI,CAAC,CAAC;EAAC,CAAC,CAAC;EACxH,IAAId,OAAO,IAAIA,OAAO,CAAC0B,MAAM,EAAED,GAAG,CAACE,IAAI,CAAC;IAACC,KAAK,EAAE3B,WAAW,GAAG,eAAe,GAAGA,WAAW,GAAG,aAAa;IAAE4B,OAAO,EAC5G,CAAC;MAACI,KAAK,EAAEC,SAAgB;MAAEN,KAAK,EAAE;IAAE,CAAC,EAAE,GAAG5B,OAAO,CAAC8B,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,MAAI;MAACC,KAAK,EAAEF,CAAC,CAACf,EAAE;MAAEY,KAAK,EAACG,CAAC,CAACjB;IAAI,CAAC,CAAC,CAAC;EAAC,CAAC,CAAC;EACvG,OAAOW,GAAG;AACd;AACA,OAAO,SAASU,gBAAgBA,CAACzC,IAAS,EAAEC,KAAa,EAAEkC,OAAkB,EAAEO,QAAoB,EAAa;EAC5G,IAAIP,OAAO,EAAE,OAAOA,OAAO;EAC3B;EACA,IAAIQ,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,IAAIA,QAAQ,CAACV,MAAM,GAAG,CAAC,EAAE,OAAOU,QAAQ;EACnE,IAAIX,GAAG,GAAGhC,oBAAoB,CAACC,IAAI,EAAEC,KAAK,CAAC;EAC3C,oBACIL,OAAA,CAAAE,SAAA;IAAA4C,QAAA,EACIX,GAAG,CAACK,GAAG,CAACS,MAAM,iBAAIjD,OAAA;MAAUsC,KAAK,EAAEW,MAAM,CAACX,KAAM;MAAAQ,QAAA,EAC5CG,MAAM,CAACV,OAAO,CAACC,GAAG,CAAC,CAACU,CAAC,EAAER,CAAC,kBAAK1C,OAAA;QAAgB2C,KAAK,EAAEO,CAAC,CAACP,KAAM;QAAAG,QAAA,EAAEI,CAAC,CAACZ;MAAK,GAA3BI,CAAC;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAmC,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzE,CAAC,CAAC,CAAC1B,MAAM,CAACsB,CAAC,IAAE,CAAC,CAACA,CAAC;EAAC,gBAC7B,CAAC;AACZ;AAEA,OAAO,SAASK,cAAcA,CAACC,KAAe,EAAE;EAAAC,EAAA;EAAA,IAAAC,KAAA;EAC5C,MAAMtD,IAAI,GAAGoD,KAAK,CAACpD,IAAI;EACvB,MAAMuD,MAAM,GAAGH,KAAK,CAACG,MAAM;EAC3B,MAAMC,MAAM,GAAGJ,KAAK,CAACI,MAAM;EAC3B,MAAMvD,KAAa,GAAGmD,KAAK,CAACnD,KAAe;EAC3C,MAAMwD,QAA4C,GAAIF,MAAM,GAAIA,MAAM,CAACvD,IAAI,EAAEC,KAAK,CAAC,GAAID,IAAI,GAAGA,IAAI,CAACC,KAAK,CAAC,GAAGuC,SAAU,CAAC,CAAC;EACxH,IAAI,CAACD,KAAK,EAAEmB,QAAQ,CAAC,GAAGjE,iBAAiB,CAAqCgE,QAAQ,CAAC;EAEvF,MAAM,CAACE,SAAS,EAAEC,YAAY,CAAC,GAAGnE,iBAAiB,CAAC,KAAK,CAAC;EAC1D,MAAMoE,QAAQ,GAAG5E,MAAM,CAAiB,IAAI,CAAC;EAC7C,IAAImE,KAAK,CAACU,GAAG,KAAK,QAAQ,EAAEvB,KAAK,GAAGkB,QAAQ,CAAC,CAAC;EAC9C,IAAIM,cAAc,GAAIC,GAAuC,IAA6B,CAACA,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAyB1C,EAAE,KAAK0C,GAAW;EAEzI,SAASC,cAAcA,CAACC,EAAO,EAAEC,EAAO,EAAW;IAC/C,OAAOJ,cAAc,CAACG,EAAE,CAAC,KAAKH,cAAc,CAACI,EAAE,CAAC;IAChD;AACR;AACA;AACA;AACA;EACI;;EAEA;EACA,IAAIf,KAAK,CAACU,GAAG,KAAK,QAAQ,IAAI,CAACH,SAAS,IAAIM,cAAc,CAAC1B,KAAK,EAAEkB,QAAQ,CAAC,EAAC;IACxEC,QAAQ,CAACK,cAAc,CAACN,QAAQ,CAAC,CAAC;IAClCG,YAAY,CAAC,KAAK,CAAC;EACvB;EAGA,IAAI,EAAG5D,IAAI,IAAIC,KAAK,IAAMsD,MAAM,IAAIC,MAAO,CAAC,EAAE,oBAAO5D,OAAA,CAAAE,SAAA;IAAA4C,QAAA,EAAE;EAA+D,gBAAE,CAAC;EACzH,IAAI0B,QAAiB;EACrB,IAAIhB,KAAK,CAACiB,QAAQ,KAAK7B,SAAS,EAAE4B,QAAQ,GAAGhB,KAAK,CAACiB,QAAQ;EAC3D;EAAA,KACKD,QAAQ,GAAGhB,KAAK,CAACkB,UAAU,KAAK,MAAM,IAAInF,QAAQ,CAACoF,KAAK,CAACvE,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEsB,EAAE,CAAC;EAEvE,IAAIH,IAAI,GAAIiC,KAAK,CAACjC,IAAI,GAAIiC,KAAK,CAACjC,IAAI,GAAG,MAAM;EAC7C,IAAIqD,OAAe,GAAGrD,IAAI;EAC1B,QAAQA,IAAI;IACR,KAAK,QAAQ;MAAEA,IAAI,GAAG,UAAU;MAAEqD,OAAO,GAAG,QAAQ;MAAE;IACtD,KAAK,WAAW;IAAE,KAAK,QAAQ;MAAErD,IAAI,GAAG,UAAU;MAAE;IACpD,KAAK,QAAQ;MAAEA,IAAI,GAAG,OAAO;MAAE;EACnC;EACA,IAAIe,KAA4B,GAAGkB,KAAK,CAACqB,QAAQ,IAAIrB,KAAK,CAAClB,KAAK;EAChE,IAAIwC,SAAgC,GAAGtB,KAAK,CAACsB,SAAS;EACtD,IAAIC,OAAmC,GAAG,CAAEvB,KAAK,CAACuB,OAAO,KAAK,IAAI,GAAI3E,IAAI,aAAJA,IAAI,wBAAAsD,KAAA,GAAJtD,IAAI,CAAG,aAAa,GAAGC,KAAK,CAAC,cAAAqD,KAAA,uBAA7BA,KAAA,CAA+BsB,GAAG,GAAGxB,KAAK,CAACuB,OAAO,KAAK,EAAE;EAE/H,IAAIE,GAAG,GAAG,EAAE,CAAC;EACb;EACAA,GAAG,IAAKzB,KAAK,CAAC0B,MAAM,GAAI,eAAe,GAAG,EAAE;EAC5C,IAAIC,QAAiB,GAAG3B,KAAK,CAAC2B,QAAQ,KAAKvC,SAAS,GAAG,KAAK,GAAGY,KAAK,CAAC2B,QAAQ,CAAC,CAAC;EAC/EF,GAAG,IAAIE,QAAQ,GAAG,iBAAiB,GAAG,EAAE;EACxC,MAAMC,SAAS,GAAI,CAAC,UAAU,EAAE,OAAO,CAAC,CAACC,QAAQ,CAAC9D,IAAI,CAAE;EAGxD,MAAM+D,QAAQ,GAAIC,GAAwC,IAAK;IAAA,IAAAC,SAAA,EAAAC,IAAA;IAC3D,CAAAD,SAAA,IAAAC,IAAA,GAACjC,KAAK,EAAS8B,QAAQ,cAAAE,SAAA,uBAAvBA,SAAA,CAAAE,IAAA,CAAAD,IAAA,EAA0BF,GAAG,CAAC;IAC9B,IAAIf,QAAQ,EAAE;IACd,IAAIY,SAAS,EAAE;MACX,IAAIO,MAAM,GAAGJ,GAAG,CAACI,MAAM,CAACC,OAAO;MAC/B,IAAIhB,OAAO,KAAK,WAAW,IAAI,CAACjC,KAAK,EAAE;QAAEgD,MAAM,GAAG/C,SAAgB;MAAE;MACpE,IAAIgB,MAAM,EAAEA,MAAM,CAAC+B,MAAM,EAAEvF,IAAI,EAAEC,KAAK,CAAC,CAAC,KACnCD,IAAI,CAACC,KAAK,CAAC,GAAGsF,MAAM;MACzB7B,QAAQ,CAAC6B,MAAM,CAAC;MAChB;IACJ;IACA,IAAInC,KAAK,CAACU,GAAG,KAAK,QAAQ,EAAE;MACxB2B,YAAY,CAACN,GAAU,CAAC;IAC5B,CAAC,MAAM;MACH;MACAzB,QAAQ,CAACgC,iBAAiB,CAACP,GAAG,CAAC,CAAC;MAChCvB,YAAY,CAAC,IAAI,CAAC,CAAC,CAAK;MACxB;IACJ;EACJ,CAAC;EACD,MAAM+B,SAAS,GAAIR,GAA0C,IAAK;IAAA,IAAAS,UAAA,EAAAC,KAAA;IAC9D,CAAAD,UAAA,IAAAC,KAAA,GAACzC,KAAK,EAASuC,SAAS,cAAAC,UAAA,uBAAxBA,UAAA,CAAAN,IAAA,CAAAO,KAAA,EAA2BV,GAAG,CAAC;IAC/B,IAAI/B,KAAK,CAACU,GAAG,KAAK,QAAQ,EAAE;IAC5B,IAAIqB,GAAG,CAACW,GAAG,KAAK1G,UAAU,CAAC2G,KAAK,EAAEN,YAAY,CAACN,GAAU,CAAC;IAC1D,IAAIA,GAAG,CAACW,GAAG,KAAK1G,UAAU,CAAC4G,MAAM,EAAE;MAC/B,MAAMvC,QAAQ,GAAGF,MAAM,GAAGA,MAAM,CAACvD,IAAI,EAAEC,KAAK,CAAC,GAAGD,IAAI,CAACC,KAAK,CAAC;MAC3DgG,uBAAuB,CAACd,GAAG,EAAS1B,QAAQ,CAAC;MAC7CC,QAAQ,CAACK,cAAc,CAACN,QAAQ,CAAC,CAAC;MAClCG,YAAY,CAAC,KAAK,CAAC;MAClBuB,GAAG,CAACI,MAAM,CAAsBW,IAAI,CAAC,CAAC;MACvC;MACA;IACJ;EACJ,CAAC;EACD,MAAMR,iBAAiB,GAAIP,GAA2E,IAAK;IACvG,QAAQ/B,KAAK,CAACU,GAAG;MACb,KAAK,UAAU;MAAE,KAAK,OAAO;MAAE,KAAK,QAAQ;MAAE,KAAK,EAAE;MAAE,KAAK,IAAI;MAAE,KAAKtB,SAAS;QAAE,OAAO2C,GAAG,CAACI,MAAM,CAAChD,KAAK;MACzG;QAAS,OAAO4C,GAAG,CAACI,MAAM,CAACY,SAAS;IACxC;EACJ,CAAC;EACD,MAAMF,uBAAuB,GAAGA,CAACd,GAA2E,EAAE5C,KAAU,KAAK;IACzHA,KAAK,GAAGwB,cAAc,CAACxB,KAAK,CAAC;IAC7B,QAAQa,KAAK,CAACU,GAAG;MACb,KAAK,UAAU;MAAE,KAAK,OAAO;MAAE,KAAK,QAAQ;MAAE,KAAK,EAAE;MAAE,KAAK,IAAI;MAAE,KAAKtB,SAAS;QAAE,OAAO2C,GAAG,CAACI,MAAM,CAAChD,KAAK,GAAGA,KAAK;MACjH;QAAS,OAAO4C,GAAG,CAACI,MAAM,CAACY,SAAS,GAAG5D,KAAK;IAChD;EACJ,CAAC;EAED,MAAM6D,MAAM,GAAIjB,GAA2E,IAAK;IAAA,IAAAkB,OAAA,EAAAC,KAAA;IAC5F,CAAAD,OAAA,IAAAC,KAAA,GAAClD,KAAK,EAASgD,MAAM,cAAAC,OAAA,uBAArBA,OAAA,CAAAf,IAAA,CAAAgB,KAAA,EAAwBnB,GAAG,CAAC;IAC5B,IAAI/B,KAAK,CAACU,GAAG,KAAK,QAAQ,EAAE;IAC5B2B,YAAY,CAACN,GAAG,CAAC;EACrB,CAAC;EACD,MAAMM,YAAY,GAAIN,GAA2E,IAAK;IAClG,IAAIf,QAAQ,IAAIY,SAAS,EAAE;IAC3B,MAAMuB,QAAgB,GAAGb,iBAAiB,CAACP,GAAG,CAAC;IAC/C,MAAM1B,QAAQ,GAAGF,MAAM,GAAGA,MAAM,CAACvD,IAAI,EAAEC,KAAK,CAAC,GAAGD,IAAI,CAACC,KAAK,CAAC;IAC3D;IACA,IAAIgE,cAAc,CAACsC,QAAQ,EAAE9C,QAAQ,CAAC,EAAC;MACnC,IAAID,MAAM,EAAEA,MAAM,CAAC+C,QAAQ,EAAEvG,IAAI,EAAEC,KAAK,CAAC,CAAC,KACrCD,IAAI,CAACC,KAAK,CAAC,GAAG8D,cAAc,CAACwC,QAAQ,CAAC;IAC/C;IACA;IACA3C,YAAY,CAAC,KAAK,CAAC;EACvB,CAAC;EAED,MAAM4C,UAAmB,GAAG;IAAC,GAAGpD;EAAK,CAAC;EACtC,OAAOoD,UAAU,CAACxG,IAAI;EACtB,OAAOwG,UAAU,CAACvG,KAAK;EACvB,OAAOuG,UAAU,CAACjD,MAAM;EACxB,OAAOiD,UAAU,CAAChD,MAAM;EACxB,OAAOgD,UAAU,CAACtE,KAAK;EACvB,OAAOsE,UAAU,CAAC9B,SAAS;EAC3B,OAAO8B,UAAU,CAAC/B,QAAQ;EAC1B,OAAO+B,UAAU,CAAC7B,OAAO;EACzB,OAAO6B,UAAU,CAAC1B,MAAM;EACxB,OAAO0B,UAAU,CAACC,UAAU;EAC5B,OAAOD,UAAU,CAAC9D,QAAQ;EAC1B,OAAO8D,UAAU,CAACzB,QAAQ,CAAC,CAAC;;EAE5B,IAAIS,OAA4B,GAAGhD,SAAS;EAC5C,IAAIwC,SAAS,EAAEQ,OAAO,GAAG,OAAOjD,KAAK,KAAK,SAAS,GAAGA,KAAK,GAAI,OAAOA,KAAK,KAAK,QAAQ,GAAG/C,CAAC,CAACkH,cAAc,CAACnE,KAAK,CAAC,GAAG,CAAC,CAACA,KAAM;EAE7H,IAAIoE,MAAc;EAClB,IAAIhC,OAAO,EAAEgC,MAAM,GAAG,MAAM,CAAC,KACxB,IAAIvC,QAAQ,EAAEuC,MAAM,GAAG,aAAa,CAAC,KACrC,IAAI3B,SAAS,EAAE2B,MAAM,GAAG,SAAS,CAAC,KAClCA,MAAM,GAAG,MAAM;EAEpB,IAAIC,UAAmB,GAAG;IAAC,GAAGJ,UAAU;IACpC7F,SAAS,EAAE,CAACyC,KAAK,CAACyD,cAAc,IAAE,EAAE,EAAEhC,GAAG,CAAC,CAACiC,IAAI,CAAC,GAAG,CAAC;IACpDC,KAAK,EAAG3D,KAAK,CAACqD,UAAU,IAAI,CAAC,CAAE;IAC/BO,UAAU,EAAG5D,KAAK,CAAS6D,UAAU,IAAI,KAAK;IAAE7C,QAAQ;IAAE8C,QAAQ,EAAE9C,QAAQ;IAAEjD,IAAI;IAAEoB,KAAK,EAAEwB,cAAc,CAACxB,KAAK,CAAC;IAAEiD,OAAO;IACzHN,QAAQ;IAAEkB,MAAM;IAAET;EAAS,CAAC,EAAC;EACjC,IAAI,CAACiB,UAAU,CAACG,KAAK,CAACJ,MAAM,IAAIA,MAAM,KAAK,aAAa,EAAE;IAAEC,UAAU,CAACG,KAAK,CAACJ,MAAM,GAAGA,MAAM;EAAE;EAC9F,QAAOnC,OAAO;IACV,KAAK,WAAW;IAAE,KAAK,QAAQ;IAAE,KAAK,QAAQ;MAAEoC,UAAU,CAACjG,SAAS,IAAI,GAAG,GAAG6D,OAAO,IAAIf,QAAQ,KAAGjB,SAAS,GAAC,cAAc,GAAC,EAAE,CAAC;MAAE;IAClI;MAAS;EACb;EAEA,IAAI2E,KAAgB;EACpB,IAAIC,SAAkB,GAAG;IAACzG,SAAS,EAAE6F,UAAU,CAAC7F,SAAS,IAAE,EAAE;IAAEoG,KAAK,EAAEP,UAAU,CAACO,KAAK,IAAE,CAAC;EAAC,CAAC;EAC3F,QAAQ,OAAOK,SAAS,CAACC,GAAG;IACxB;MAASD,SAAS,CAACC,GAAG,GAAGxD,QAAQ;MAAE;IACnC,KAAK,QAAQ;MACT,IAAIyD,MAAM,GAAGF,SAAS,CAACC,GAAG;MAC1BD,SAAS,CAACC,GAAG,GAAIE,CAAiB,IAAK;QAAED,MAAM,CAACE,OAAO,GAAG3D,QAAQ,CAAC2D,OAAO,GAAGD,CAAC;MAAE,CAAC;MACjF;IACJ,KAAK,UAAU;MACX,IAAIE,OAAO,GAAGL,SAAS,CAACC,GAAG;MAC3BD,SAAS,CAACC,GAAG,GAAIE,CAAiB,IAAK;QAAEE,OAAO,CAACF,CAAC,CAAC;QAAE1D,QAAQ,CAAC2D,OAAO,GAAGD,CAAC;MAAE,CAAC;MAC5E;EACR;EACA,IAAInE,KAAK,CAAC2B,QAAQ,EAAEqC,SAAS,CAAC,YAAY,CAAC,GAAGR,UAAU,CAACrE,KAAK;EAE9D,IAAIoC,OAAO,EAAE;IACTyC,SAAS,CAACM,YAAY,GAAG;MAAA,IAAAC,cAAA;MAAA,OAAMjI,OAAO,CAACkI,IAAI,CAACjD,OAAO,EAAE,GAAG,EAAE,EAAAgD,cAAA,GAACP,SAAS,CAACC,GAAG,cAAAM,cAAA,uBAAbA,cAAA,CAAeH,OAAO,KAAKJ,SAAS,CAACC,GAAG,CAAC;IAAA;IACpGD,SAAS,CAACS,YAAY,GAAG,MAAMnI,OAAO,CAACoI,IAAI,CAAC,CAAC;EACjD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI,IAAIC,IAAI,GAAG,IAAI;EACf,IAAIhD,QAAQ,EAAEqC,SAAS,CAACzG,SAAS,GAAG,CAACyG,SAAS,CAACzG,SAAS,IAAI,EAAE,IAAI,2BAA2B,CAAC,KACzF,IAAI,CAACuB,KAAK,IAAI,CAACwC,SAAS,EAAE;IAC3B,IAAI0C,SAAS,CAACzG,SAAS,EAAEiG,UAAU,CAACjG,SAAS,GAAGyG,SAAS,CAACzG,SAAS,GAAG,GAAG,GAAGiG,UAAU,CAACjG,SAAS;IAChG,IAAIyG,SAAS,CAACL,KAAK,EAAEvH,CAAC,CAACwI,kBAAkB,CAACpB,UAAU,CAACG,KAAK,EAAEK,SAAS,CAACL,KAAK,CAAC;IAC5EH,UAAU,GAAG;MAAC,GAAGQ,SAAS;MAAE,GAAGR;IAAU,CAAC;IAC1CmB,IAAI,GAAG,KAAK;EAChB;EAEA,QAAQ3E,KAAK,CAACU,GAAG;IACb,KAAK,UAAU;MAAEqD,KAAK,gBAAGvH,OAAA;QAAA,GAAcgH,UAAU;QAAAlE,QAAA,EAAGkE,UAAU,CAACrE;MAAK;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAW,CAAC;MAAE;IAClF,KAAK,QAAQ;MACT,IAAIf,OAAO,GAAGM,gBAAgB,CAACzC,IAAI,EAAEC,KAAK,EAAEmD,KAAK,CAACjB,OAAO,EAAEiB,KAAK,CAACV,QAAQ,CAAC;MAC1E,IAAIU,KAAK,CAAC6E,aAAa,EAAC;QACpBC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAE;UAAC5F,KAAK,EAAEqE,UAAU,CAACrE,KAAK;UAAEJ;QAAO,CAAC,CAAC;;QAE1E;QACAgF,KAAK,gBAAGvH,OAAA,CAACN,WAAW;UAAA,GAAKsH,UAAU;UAAEwB,OAAO,EAAE,IAAK;UAAClD,QAAQ,EAAGqC,CAAC,IAAK;YACjEW,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE;cAACZ,CAAC;cAAEhF,KAAK,EAAEqE,UAAU,CAACrE,KAAK;cAAEJ;YAAO,CAAC,CAAC;YACzE;UACJ,CAAE;UAAAO,QAAA,EAAEP;QAAO;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAc,CAAC;MAC9B;MACAiE,KAAK,gBAAGvH,OAAA;QAAA,GAAYgH,UAAU;QAAAlE,QAAA,EAAGP;MAAO;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC;MAClD;IACJ,KAAK,IAAI;IAAE,KAAKV,SAAS;IAAE,KAAK,EAAE;IAAE,KAAK,OAAO;MAAE2E,KAAK,gBAAGvH,OAAA;QAAA,GAAWgH;MAAU;QAAA7D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;MAAE;IACrF;MACI0D,UAAU,CAACyB,eAAe,GAAGzB,UAAU,CAACyB,eAAe,KAAK,KAAK;MACjElB,KAAK,gBAAGnI,KAAK,CAACsJ,aAAa,CAAClF,KAAK,CAACU,GAAG,EAAE8C,UAAU,EAAExD,KAAK,CAACV,QAAQ,CAAC;MAAE;EAC5E;EACA,IAAI,CAACqF,IAAI,EAAE,OAAOZ,KAAK;EAEvB,IAAI,OAAOjF,KAAK,KAAK,QAAQ,EAAEA,KAAK,gBAAGtC,OAAA;IAAA8C,QAAA,EAAOR;EAAK;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAC3D,IAAI,OAAOwB,SAAS,KAAK,QAAQ,EAAEA,SAAS,gBAAG9E,OAAA;IAAA8C,QAAA,EAAOgC;EAAS;IAAA3B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAEvE,MAAMqF,UAAU,GAAIzF,CAAM,IAAG;IACzB;AACR;AACA;AACA;IACQ,IAAIM,KAAK,CAACU,GAAG,KAAK,QAAQ,EAAE;IAC5B,IAAI0E,CAAc,GAAI1F,CAAC,CAACyC,MAAc;IACtC,IAAIkD,MAAM,GAAID,CAAC,CAACE,OAAO,KAAK,QAAQ,GAAIF,CAAC,GAAGA,CAAC,CAACG,aAAa,CAAC,QAAQ,CAAC;IACrET,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE;MAACK,CAAC;MAAEC;IAAM,CAAC,CAAC;IAC7CA,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEG,KAAK,CAAC,CAAC;EACnB,CAAC;EACD,oBAAOhJ,OAAA;IAAOe,SAAS,EAAE,iBAAkB;IAAA,GAAKyG,SAAS;IAAA1E,QAAA,GACpDR,KAAK,IAAIM,SAAS,EAAE2E,KAAK,EAAEzC,SAAS,IAAIlC,SAAS;EAAA;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;EAC/D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAACG,EAAA,CA7PeF,cAAc;EAAA,QAMF1D,iBAAiB,EAEPA,iBAAiB;AAAA;AAAAoJ,EAAA,GARvC1F,cAAc;AA2S9B,OAAO,SAAS2F,oBAAoBA,CAACpH,KAAa,EAAEqH,QAAsB,EAAc;EAAA,IAAAC,cAAA;EACpF,MAAMjH,GAAe,GAAG,CAAC,CAAQ;EACjC,MAAMkH,OAA4B,GAAG,OAAOF,QAAQ,CAAC/I,IAAI,KAAK,QAAQ,GAAG+I,QAAQ,CAAC/I,IAAI,IAAAgJ,cAAA,GAAGD,QAAQ,CAAC/I,IAAI,cAAAgJ,cAAA,uBAAbA,cAAA,CAAe1H,EAAE;EAC1GS,GAAG,CAACuC,UAAU,GAAG5C,KAAK,CAACwH,KAAK,GAAG,MAAM,GAAG,OAAO;EAC/C,IAAID,OAAO,EAAElH,GAAG,CAAC/B,IAAI,GAAGX,kBAAkB,CAACuC,WAAW,CAACqH,OAAO,CAAC;EAC/D,OAAOlH,GAAG;AACd;AAACoH,GAAA,GANeL,oBAAoB;AAQpC,SAASM,kBAAkBA,CAACC,QAAuB,EAAiB;EAChE,MAAMtH,GAAkB,GAAG,CAAC,CAAC;EAC7B,OAAOA,GAAG;AACd;AAEA,OAAO,MAAMuH,cAAc;AACvB;AACApK,OAAO,CAAkD4J,oBAAoB,EAAEM,kBAAkB,CAAC,CAACjG,cAAc,CAAC;;AAGtH;AACA,OAAO,SAASoG,KAAKA,CAACnG,KAAoB,EAAgB;EACtD;EACA,oBAAOxD,OAAA,CAAC0J,cAAc;IAAA,GAAKlG,KAAK;IAAAV,QAAA,EAAUU,KAAK,CAACV;EAAQ;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAiB,CAAC;AAC9E;;AAEA;AAAAsG,GAAA,GALgBD,KAAK;AAMrB,OAAO,SAASE,QAAQA,CAACrG,KAAoB,EAAEsG,CAAM,EAAgB;EACjE;EACA,oBAAO9J,OAAA,CAAC0J,cAAc;IAAM,GAAGlG,KAAK;IAAEU,GAAG,EAAC,UAAU;IAAApB,QAAA,EAAWU,KAAK,CAACV,QAAQ,IAAEgH;EAAC;IAAA3G,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAiB,CAAC;AACtG;AACA;AAAAyG,GAAA,GAJgBF,QAAQ;AAKxB,OAAO,SAASG,MAAMA,CAACxG,KAAqB,EAAEsG,CAAM,EAAgB;EAChE;EACA,oBAAO9J,OAAA,CAAC0J,cAAc;IAAM,GAAGlG,KAAK;IAAEU,GAAG,EAAC,QAAQ;IAAApB,QAAA,EAAWU,KAAK,CAACV,QAAQ,IAAEgH;EAAC;IAAA3G,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAiB,CAAC;AACpG;AAAC2G,GAAA,GAHeD,MAAM;AAItB,OAAO,MAAME,IAAI,GAAGP,KAAK;;AAEzB;AACApG,cAAc,CAACzC,KAAK,GAAG,gBAAgB;AACvC;AACA4I,cAAc,CAAC5I,KAAK,GAAG,gBAAgB;AACvC6I,KAAK,CAAC7I,KAAK,GAAG,OAAO;AACrB+I,QAAQ,CAAC/I,KAAK,GAAG,UAAU;AAC3BkJ,MAAM,CAAClJ,KAAK,GAAG,QAAQ;AACvBoJ,IAAI,CAACpJ,KAAK,GAAG,MAAM;AAAC,IAAAmI,EAAA,EAAAM,GAAA,EAAAK,GAAA,EAAAG,GAAA,EAAAE,GAAA;AAAAE,YAAA,CAAAlB,EAAA;AAAAkB,YAAA,CAAAZ,GAAA;AAAAY,YAAA,CAAAP,GAAA;AAAAO,YAAA,CAAAJ,GAAA;AAAAI,YAAA,CAAAF,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}