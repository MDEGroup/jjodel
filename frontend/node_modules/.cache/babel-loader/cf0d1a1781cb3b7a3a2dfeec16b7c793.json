{"ast":null,"code":"import { CreateElementAction, DProject, SetFieldAction, TRANSACTION, U } from '../../joiner';\nimport Storage from \"../../data/storage\";\nimport Api from \"../../data/api\";\nclass ProjectsApi {\n  static async create(type, name) {\n    let m2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let m1 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    let otherProjects = arguments.length > 4 ? arguments[4] : undefined;\n    const project = DProject.new(type, name, undefined, m2, m1, undefined, otherProjects);\n    if (U.isOffline()) Offline.create(project);else await Online.create(project);\n    return project;\n  }\n  static async getAll() {\n    if (U.isOffline()) Offline.getAll();else await Online.getAll();\n  }\n  static async delete(project) {\n    if (U.isOffline()) Offline.delete(project.__raw);else await Online.delete(project.__raw);\n    project.delete();\n  }\n  static async getOne(id) {\n    if (U.isOffline()) return Offline.getOne(id);else return await Online.getOne(id);\n  }\n  static async save(project) {\n    project.lastModified = Date.now();\n    project.viewpointsNumber = project.viewpoints.length;\n    project.metamodelsNumber = project.metamodels.length;\n    project.modelsNumber = project.models.length;\n    const state = await U.compressedState(project.id);\n    project.state = state;\n    const dProject = project.__raw;\n    dProject.state = state;\n    console.log('Saving project', dProject);\n    if (U.isOffline()) await Offline.save(dProject);else await Online.save(dProject);\n  }\n  static async favorite(project) {\n    if (U.isOffline()) return Offline.favorite(project);else return await Online.favorite(project);\n  }\n  static import() {\n    const reader = new FileReader();\n    reader.onload = async e => {\n      var _e$target;\n      const content = String((_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.result);\n      try {\n        const project = JSON.parse(content);\n        project.isFavorite = false;\n        if (U.isOffline()) Offline.import(project);else await Online.import(project);\n        CreateElementAction.new(project);\n      } catch (e) {\n        U.alert('e', 'Invalid File.');\n      }\n    };\n    let extensions = ['*.jjodel'];\n    U.fileRead((e, files, fileContents) => {\n      if (!(files === null || files === void 0 ? void 0 : files.length)) return;\n      const file = files[0];\n      reader.readAsText(file);\n    }, extensions, true);\n    U.refresh();\n  }\n}\nclass Offline {\n  static create(project) {\n    const projects = Storage.read('projects') || [];\n    projects.push(project);\n    Storage.write('projects', projects);\n  }\n  static getAll() {\n    const projects = Storage.read('projects') || [];\n    for (const project of projects) {\n      DProject.new(project.type, project.name, project.state, [], [], project.id);\n      TRANSACTION(() => {\n        SetFieldAction.new(project.id, 'creation', project.creation, '', false);\n        SetFieldAction.new(project.id, 'lastModified', project.lastModified, '', false);\n        SetFieldAction.new(project.id, 'description', project.description, '', false);\n        SetFieldAction.new(project.id, 'viewpointsNumber', project.viewpointsNumber, '', false);\n        SetFieldAction.new(project.id, 'metamodelsNumber', project.metamodelsNumber, '', false);\n        SetFieldAction.new(project.id, 'modelsNumber', project.modelsNumber, '', false);\n        SetFieldAction.new(project.id, 'isFavorite', project.isFavorite, '', false);\n      });\n    }\n  }\n  static delete(project) {\n    const projects = Storage.read('projects') || [];\n    const filteredProjects = projects.filter(p => p.id !== project.id);\n    Storage.write('projects', filteredProjects);\n  }\n  static getOne(id) {\n    const projects = Storage.read('projects') || [];\n    let filtered = projects.filter(p => p.id === id);\n    if (filtered.length <= 0) return null;\n    return filtered[0];\n  }\n  static async save(project) {\n    const projects = Storage.read('projects') || [];\n    const filtered = projects.filter(p => p.id !== project.id);\n    Storage.write('projects', [...filtered, project]);\n    U.alert('i', 'Project Saved!');\n  }\n  static async favorite(project) {\n    const projects = Storage.read('projects') || [];\n    const filtered = projects.filter(p => p.id !== project.id);\n    Storage.write('projects', [...filtered, {\n      ...project,\n      isFavorite: !project.isFavorite\n    }]);\n    SetFieldAction.new(project.id, 'isFavorite', !project.isFavorite);\n  }\n  static import(project) {\n    const projects = Storage.read('projects') || [];\n    const filtered = projects.filter(p => p.id !== project.id);\n    filtered.push(project);\n    Storage.write('projects', filtered);\n  }\n}\nclass Online {\n  static async create(project) {\n    await Api.post(`${Api.persistance}/projects`, {\n      id: project.id,\n      creation: project.creation || Date.now(),\n      description: project.description,\n      name: project.name,\n      type: project.type\n    });\n  }\n  static async getAll() {\n    const response = await Api.get(`${Api.persistance}/projects`);\n    if (response.code !== 200) {\n      /* 401: Unauthorized -> Invalid Token (Local Storage)  */\n      Storage.reset();\n      U.refresh();\n      return;\n    }\n    const data = U.wrapper(response.data);\n    for (const project of data) {\n      DProject.new(project.type, project.name, project.state, [], [], project.id);\n      TRANSACTION(() => {\n        SetFieldAction.new(project.id, 'creation', project.creation, '', false);\n        SetFieldAction.new(project.id, 'lastModified', project.lastModified, '', false);\n        SetFieldAction.new(project.id, 'description', project.description, '', false);\n        SetFieldAction.new(project.id, 'viewpointsNumber', project.viewpointsNumber, '', false);\n        SetFieldAction.new(project.id, 'metamodelsNumber', project.metamodelsNumber, '', false);\n        SetFieldAction.new(project.id, 'modelsNumber', project.modelsNumber, '', false);\n        SetFieldAction.new(project.id, 'isFavorite', project.isFavorite, '', false);\n      });\n    }\n  }\n  static async delete(project) {\n    await Api.delete(`${Api.persistance}/projects/${project.id}`);\n  }\n  static async getOne(id) {\n    const response = await Api.get(`${Api.persistance}/projects/${id}`);\n    if (response.code !== 200) return null;\n    return U.wrapper(response.data);\n  }\n  static async save(project) {\n    const response = await Api.patch(`${Api.persistance}/projects/${project.id}`, {\n      ...project\n    });\n    if (response.code !== 200) U.alert('e', 'Cannot Save');else U.alert('i', 'Project Saved!');\n  }\n  static async favorite(project) {\n    const response = await Api.patch(`${Api.persistance}/projects/${project.id}`, {\n      isFavorite: !project.isFavorite\n    });\n    if (response.code !== 200) U.alert('e', 'Cannot set this property!');\n    SetFieldAction.new(project.id, 'isFavorite', !project.isFavorite);\n  }\n  static async import(project) {\n    await Online.create(project);\n    await Api.patch(`${Api.persistance}/projects/${project.id}`, {\n      ...project\n    });\n  }\n}\nexport { ProjectsApi };","map":{"version":3,"names":["CreateElementAction","DProject","SetFieldAction","TRANSACTION","U","Storage","Api","ProjectsApi","create","type","name","m2","arguments","length","undefined","m1","otherProjects","project","new","isOffline","Offline","Online","getAll","delete","__raw","getOne","id","save","lastModified","Date","now","viewpointsNumber","viewpoints","metamodelsNumber","metamodels","modelsNumber","models","state","compressedState","dProject","console","log","favorite","import","reader","FileReader","onload","e","_e$target","content","String","target","result","JSON","parse","isFavorite","alert","extensions","fileRead","files","fileContents","file","readAsText","refresh","projects","read","push","write","creation","description","filteredProjects","filter","p","filtered","post","persistance","response","get","code","reset","data","wrapper","patch"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/src/api/persistance/projects.ts"],"sourcesContent":["import {CreateElementAction, DModel, DProject, LProject, Pointer, SetFieldAction, TRANSACTION, U} from '../../joiner';\r\nimport Storage from \"../../data/storage\";\r\nimport Api from \"../../data/api\";\r\n\r\nclass ProjectsApi {\r\n    static async create(type: DProject['type'], name?: DProject['name'], m2: Pointer<DModel>[] = [], m1: Pointer<DModel>[] = [], otherProjects?: LProject[]): Promise<DProject> {\r\n        const project = DProject.new(type, name, undefined, m2, m1, undefined, otherProjects);\r\n        if(U.isOffline()) Offline.create(project);\r\n        else await Online.create(project);\r\n        return project;\r\n    }\r\n    static async getAll(): Promise<void> {\r\n        if(U.isOffline()) Offline.getAll();\r\n        else await Online.getAll();\r\n    }\r\n    static async delete(project: LProject): Promise<void> {\r\n        if(U.isOffline()) Offline.delete(project.__raw as DProject);\r\n        else await Online.delete(project.__raw as DProject);\r\n        project.delete();\r\n    }\r\n    static async getOne(id: DProject['id']): Promise<null|DProject> {\r\n        if(U.isOffline()) return Offline.getOne(id);\r\n        else return await Online.getOne(id);\r\n    }\r\n    static async save(project: LProject): Promise<void> {\r\n        project.lastModified = Date.now();\r\n        project.viewpointsNumber = project.viewpoints.length;\r\n        project.metamodelsNumber = project.metamodels.length;\r\n        project.modelsNumber = project.models.length;\r\n        const state = await U.compressedState(project.id);\r\n        project.state = state;\r\n        const dProject = project.__raw as DProject;\r\n        dProject.state = state;\r\n        console.log('Saving project', dProject);\r\n        if(U.isOffline()) await Offline.save(dProject);\r\n        else await Online.save(dProject);\r\n    }\r\n    static async favorite(project: DProject): Promise<void> {\r\n        if(U.isOffline()) return Offline.favorite(project);\r\n        else return await Online.favorite(project);\r\n    }\r\n\r\n    static import() {\r\n        const reader = new FileReader();\r\n        reader.onload = async e => {\r\n            const content = String(e.target?.result);\r\n            try {\r\n                const project = JSON.parse(content) as DProject;\r\n                project.isFavorite = false;\r\n                if(U.isOffline()) Offline.import(project);\r\n                else await Online.import(project);\r\n                CreateElementAction.new(project);\r\n            } catch (e) {U.alert('e', 'Invalid File.')}\r\n        }\r\n\r\n        let extensions = ['*.jjodel'];\r\n        U.fileRead((e: unknown, files?: FileList | null, fileContents?: string[]) => {\r\n            if (!files?.length) return;\r\n            const file = files[0];\r\n            reader.readAsText(file);\r\n        }, extensions, true);\r\n        U.refresh();\r\n    }\r\n}\r\n\r\nclass Offline {\r\n    static create (project: DProject): void {\r\n        const projects = Storage.read<DProject[]>('projects') || [];\r\n        projects.push(project);\r\n        Storage.write('projects', projects);\r\n    }\r\n    static getAll(): void {\r\n        const projects = Storage.read<DProject[]>('projects') || [];\r\n        for(const project of projects) {\r\n            DProject.new(project.type, project.name, project.state, [], [], project.id);\r\n            TRANSACTION(() => {\r\n                SetFieldAction.new(project.id, 'creation', project.creation, '', false);\r\n                SetFieldAction.new(project.id, 'lastModified', project.lastModified, '', false);\r\n                SetFieldAction.new(project.id, 'description', project.description, '', false);\r\n                SetFieldAction.new(project.id, 'viewpointsNumber', project.viewpointsNumber, '', false);\r\n                SetFieldAction.new(project.id, 'metamodelsNumber', project.metamodelsNumber, '', false);\r\n                SetFieldAction.new(project.id, 'modelsNumber', project.modelsNumber, '', false);\r\n                SetFieldAction.new(project.id, 'isFavorite', project.isFavorite, '', false);\r\n            });\r\n        }\r\n    }\r\n    static delete(project: DProject): void {\r\n        const projects = Storage.read<DProject[]>('projects') || [];\r\n        const filteredProjects = projects.filter(p => p.id !== project.id);\r\n        Storage.write('projects', filteredProjects);\r\n    }\r\n    static getOne(id: string): DProject|null {\r\n        const projects = Storage.read<DProject[]>('projects') || [];\r\n        let filtered: DProject|DProject[] = projects.filter(p => p.id === id);\r\n        if(filtered.length <= 0) return null;\r\n        return filtered[0];\r\n    }\r\n    static async save(project: DProject): Promise<void> {\r\n        const projects = Storage.read<DProject[]>('projects') || [];\r\n        const filtered = projects.filter(p => p.id !== project.id);\r\n        Storage.write('projects', [...filtered, project]);\r\n        U.alert('i', 'Project Saved!');\r\n    }\r\n    static async favorite(project: DProject): Promise<void> {\r\n        const projects = Storage.read<DProject[]>('projects') || [];\r\n        const filtered = projects.filter(p => p.id !== project.id);\r\n        Storage.write('projects', [...filtered, {...project, isFavorite: !project.isFavorite}]);\r\n        SetFieldAction.new(project.id, 'isFavorite', !project.isFavorite);\r\n    }\r\n    static import(project: DProject): void {\r\n        const projects = Storage.read<DProject[]>('projects') || [];\r\n        const filtered = projects.filter(p => p.id !== project.id);\r\n        filtered.push(project);\r\n        Storage.write('projects', filtered);\r\n    }\r\n}\r\n\r\nclass Online {\r\n    static async create (project: DProject): Promise<void> {\r\n        await Api.post(`${Api.persistance}/projects`, {\r\n            id: project.id,\r\n            creation: project.creation || Date.now(),\r\n            description: project.description,\r\n            name: project.name,\r\n            type: project.type\r\n        });\r\n    }\r\n    static async getAll(): Promise<void> {\r\n        const response = await Api.get(`${Api.persistance}/projects`);\r\n        if(response.code !== 200) {\r\n            /* 401: Unauthorized -> Invalid Token (Local Storage)  */\r\n            Storage.reset();\r\n            U.refresh();\r\n            return;\r\n        }\r\n        const data = U.wrapper<DProject[]>(response.data);\r\n        for(const project of data) {\r\n            DProject.new(project.type, project.name, project.state, [], [], project.id);\r\n            TRANSACTION(() => {\r\n                SetFieldAction.new(project.id, 'creation', project.creation, '', false);\r\n                SetFieldAction.new(project.id, 'lastModified', project.lastModified, '', false);\r\n                SetFieldAction.new(project.id, 'description', project.description, '', false);\r\n                SetFieldAction.new(project.id, 'viewpointsNumber', project.viewpointsNumber, '', false);\r\n                SetFieldAction.new(project.id, 'metamodelsNumber', project.metamodelsNumber, '', false);\r\n                SetFieldAction.new(project.id, 'modelsNumber', project.modelsNumber, '', false);\r\n                SetFieldAction.new(project.id, 'isFavorite', project.isFavorite, '', false);\r\n            });\r\n        }\r\n    }\r\n    static async delete(project: DProject): Promise<void> {\r\n        await Api.delete(`${Api.persistance}/projects/${project.id}`);\r\n    }\r\n    static async getOne(id: string): Promise<DProject|null> {\r\n        const response = await Api.get(`${Api.persistance}/projects/${id}`);\r\n        if(response.code !== 200) return null;\r\n        return U.wrapper<DProject>(response.data);\r\n    }\r\n    static async save(project: DProject): Promise<void> {\r\n        const response = await Api.patch(`${Api.persistance}/projects/${project.id}`, {...project});\r\n        if(response.code !== 200) U.alert('e', 'Cannot Save');\r\n        else U.alert('i', 'Project Saved!');\r\n    }\r\n    static async favorite(project: DProject): Promise<void> {\r\n        const response = await Api.patch(`${Api.persistance}/projects/${project.id}`, {\r\n            isFavorite: !project.isFavorite\r\n        });\r\n        if(response.code !== 200) U.alert('e', 'Cannot set this property!');\r\n        SetFieldAction.new(project.id, 'isFavorite', !project.isFavorite);\r\n    }\r\n    static async import(project: DProject): Promise<void> {\r\n        await Online.create(project);\r\n        await Api.patch(`${Api.persistance}/projects/${project.id}`, {...project});\r\n    }\r\n}\r\n\r\nexport {ProjectsApi};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}