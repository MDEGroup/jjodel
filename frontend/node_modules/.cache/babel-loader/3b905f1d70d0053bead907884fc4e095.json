{"ast":null,"code":"var _jsxFileName = \"C:\\\\d\\\\Programming\\\\web\\\\jodel-mde\\\\src\\\\model\\\\dataStructure\\\\GraphDataElements.tsx\",\n  _dec,\n  _class,\n  _class2,\n  _dec2,\n  _class3,\n  _class4,\n  _dec3,\n  _class5,\n  _class6,\n  _dec4,\n  _class7,\n  _class8,\n  _dec5,\n  _class9,\n  _class10,\n  _dec6,\n  _class11,\n  _class12,\n  _dec7,\n  _class13,\n  _class14,\n  _dec8,\n  _class15,\n  _class16,\n  _dec9,\n  _class17,\n  _class18,\n  _dec10,\n  _class19,\n  _class20,\n  _dec11,\n  _class21,\n  _class22,\n  _dec12,\n  _class23,\n  _class24,\n  _dec13,\n  _class25,\n  _class26,\n  _dec14,\n  _class27,\n  _dec15,\n  _class29,\n  _class30,\n  _dec16,\n  _class31,\n  _class32,\n  _dec17,\n  _class33,\n  _class34,\n  _dec18,\n  _class35,\n  _class36,\n  _dec19,\n  _class37,\n  _class38,\n  _dec20,\n  _class39,\n  _class40,\n  _dec21,\n  _class41,\n  _class42;\n// import {Mixin} from \"ts-mixer\";\nimport { isDeepStrictEqual } from \"util\";\nimport { BEGIN, Constructors, CoordinateMode, Debug, DPointerTargetable, DUser, EdgeBendingMode, END, GraphElementComponent, GraphPoint, GraphSize, Keystrokes, Leaf, Log, LPointerTargetable, MixOnlyFuncs, Node, Point, Pointers, RuntimeAccessible, RuntimeAccessibleClass, SetFieldAction, ShortAttribETypes, Size, store, TargetableProxyHandler, transientProperties, U, Uarr, windoww } from \"../../joiner\";\nimport { EdgeGapMode } from \"../../joiner/types\";\nimport { Geom } from \"../../common/Geom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconsole.warn('ts loading graphDataElement');\nexport let DGraphElement = (_dec = RuntimeAccessible('DGraphElement'), Node(_class = _dec(_class = (_class2 = class DGraphElement extends DPointerTargetable {\n  constructor() {\n    super(...arguments);\n    this.id = void 0;\n    this.graph = void 0;\n    this.model = void 0;\n    this.isSelected = void 0;\n    this.subElements = void 0;\n    this.state = void 0;\n    this.father = void 0;\n    this.x = void 0;\n    this.y = void 0;\n    this.zIndex = 100;\n    this.w = void 0;\n    this.h = void 0;\n    this.view = void 0;\n    this.favoriteNode = void 0;\n    this.edgesIn = void 0;\n    this.edgesOut = void 0;\n    this.anchors = void 0;\n  } // static _super = DPointerTargetable;\n  // static singleton: LGraphElement;\n  // static logic: typeof LGraphElement;\n  // static structure: typeof DGraphElement;\n  // containedIn!: Pointer<DGraphElement, 0, 1, LGraphElement>;\n  // DMap\n  // width: number = 300;\n  // height: number = 400;\n  static new(htmlindex, model, parentNodeID, graphID, nodeID, a, b) {\n    return new Constructors(new DGraphElement('dwc'), parentNodeID, true, undefined, nodeID).DPointerTargetable().DGraphElement(model, graphID, htmlindex).end();\n  }\n}, _class2.subclasses = [], _class2._extends = [], _class2)) || _class) || _class);\nexport let LGraphElement = (_dec2 = RuntimeAccessible('LGraphElement'), _dec2(_class3 = (_class4 = class LGraphElement extends LPointerTargetable {\n  constructor() {\n    super(...arguments);\n    this.__raw = void 0;\n    this.id = void 0;\n    this.father = void 0;\n    this.graph = void 0;\n    this.model = void 0;\n    this.subElements = void 0;\n    this._state = void 0;\n    this.allSubNodes = void 0;\n    this.x = void 0;\n    this.y = void 0;\n    this.width = void 0;\n    this.height = void 0;\n    this.z = void 0;\n    this.zIndex = void 0;\n    this.__info_of_z__ = {\n      type: ShortAttribETypes.EInt,\n      txt: \"alias for zIndex\"\n    };\n    this.__info_of_zIndex__ = {\n      type: ShortAttribETypes.EInt,\n      txt: \"Determine the z-axis priority of the element.<br/>Higher value tende to overlap other elements.<br/>Lower value tends to be on background.\"\n    };\n    this.zoom = void 0;\n    this.html = void 0;\n    this.w = void 0;\n    this.h = void 0;\n    this.size = void 0;\n    this.position = void 0;\n    this.htmlSize = void 0;\n    this.htmlPosition = void 0;\n    this.view = void 0;\n    this.component = void 0;\n    this.favoriteNode = void 0;\n    this.vertex = void 0;\n    this.__info__of__vertex = {\n      type: \"LVoidVertex\",\n      txt: \"the foremost vertex containing this graphElement, or undefiened.\"\n    };\n    this.__info__of__favoriteNode = {\n      type: ShortAttribETypes.EBoolean,\n      txt: \"<span>Indicates this is the primarly used (by default) node to refer to a modelling element that might have multiple representations.\" + \"<br> Can be used as favorite target for edges or other.\"\n    };\n    this.startPoint = void 0;\n    this.endPoint = void 0;\n    this.__info_of__startPoint = {\n      type: \"GraphPoint\",\n      txt: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Where the outgoing edges should start their paths.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this), \"Obtained by combining anchoring point offset specified in view, before snapping to a Vertex border.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this), \"Defaults in outer coordinates.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 60\n      }, this)\n    };\n    this.__info_of__endPoint = {\n      type: \"GraphPoint\",\n      txt: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Where the incoming edges should end their paths.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this), \"Obtained by combining anchoring point offset specified in view, before snapping to a Vertex border.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this), \"Defaults in outer coordinates.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 58\n      }, this)\n    };\n    this.__info_of__graph = {\n      type: \"\",\n      txt: \"\"\n    };\n    this.innerGraph = void 0;\n    this.__info_of__innnerGraph = {\n      type: \"\",\n      txt: \"\"\n    };\n    this.outerGraph = void 0;\n    this.__info_of__outerGraphGraph = {\n      type: \"\",\n      txt: \"\"\n    };\n    this.__info_of__graphAncestors = {\n      type: \"LGraph[]\",\n      txt: \"<span>collection of the stack of Graphs containing the current element where [0] is the most nested graph, and last is root graph.</span>\"\n    };\n    this.graphAncestors = void 0;\n    this.anchors = void 0;\n    this.__info_of__anchors = {\n      type: \"Dictionary<string, point>\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"A named list of all anchor points where edges are allowed to land or depart from.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 158\n        }, this), \"When writing it must be done in percentages, with the same rules as node.state.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 72\n      }, this)\n    };\n    this.edgesIn = void 0;\n    this.edgesOut = void 0;\n    this.__info_of__edgesIn = {\n      type: \"LEdge[]\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Edges incoming into this element. \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"this.edgesOut[i].end\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 92\n        }, this), \" always equals to \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"this\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 143\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 53\n      }, this)\n    };\n    this.__info_of__edgesOut = {\n      type: \"LEdge[]\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Edges outgoing from this element. \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"this.edgesIn[i].start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 93\n        }, this), \" always equals to \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"this\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 145\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 54\n      }, this)\n    };\n    this.__info_of__edgesStart = {\n      type: \"LEdge[]\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Alias for this.edgesOut\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 56\n      }, this)\n    };\n    this.__info_of__edgesEnd = {\n      type: \"LEdge[]\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Alias for this.edgesIn\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 54\n      }, this)\n    };\n    this.outerSize = void 0;\n    this.__info_of__outerSize = {\n      type: \"GraphSize\",\n      txt: \"the size of the current element relative to the first (root) graph level.\"\n    };\n    this.innerSize = void 0;\n    this.__info_of__innerSize = {\n      type: \"GraphSize\",\n      txt: \"the size of the current element relative to the last (most nested) graph level.\"\n    };\n    this.__info_of__size = {\n      type: \"GraphSize\",\n      txt: \"same as innerSize.\"\n    };\n    this.assignEdgeAnchor = void 0;\n    this.__info_of__assignEdgeAnchor = void 0;\n    this.__info_of__isselected = {\n      type: \"Dictionary<Pointer<User>, true>\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"A map that contains all the users selecting this element as keys, and always true as a value (if present).\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 13\n        }, this), \"Edit it through node.select() and node.deselect()\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 13\n      }, this)\n    };\n    this.__info_of__select = {\n      type: \"function(forUser?:Pointer<User>):void\",\n      txt: \"Marks this node as selected by argument user.\"\n    };\n    this.__info_of__deselect = {\n      type: \"function(forUser?:Pointer<User>):void\",\n      txt: \"Un-marks this node as selected by argument user.\"\n    };\n    this.__info_of__toggleSelect = {\n      type: \"function(usr?:Pointer<User>):void\",\n      txt: \"Calls this.select(usr) if the node is selected by argument user, this.deselect(usr) otherwise. If omitted, argument \\\"usr\\\" is the current user id.<br>Returns the result of this.isSelected() after the toggle.\"\n    };\n    this.__info_of__isSelected = {\n      type: \"function(forUser?:Pointer<User>):void\",\n      txt: \"Tells if this node is selected by argument user.\"\n    };\n  }\n  static getNodeId(o) {\n    var _node;\n    if (!o) return undefined;\n    let node = o;\n    // from L to D\n    // let cname = (node.__raw || node).className;\n    // from DModelE to LGraphE\n    if (RuntimeAccessibleClass.extends(o.className, \"DModelElement\")) node = LPointerTargetable.from(o).node;\n    return typeof node === \"string\" ? node : (_node = node) === null || _node === void 0 ? void 0 : _node.id;\n  }\n  // static singleton: LGraphElement;\n  // static logic: typeof LGraphElement;\n  // static structure: typeof DGraphElement;\n\n  // todo: can be removed and accessed by navigating .father\n\n  // protected isSelected!: Dictionary<DocString<Pointer<DUser>>, boolean>; //  & ((forUser?: Pointer<DUser>) => boolean);\n\n  // containedIn?: LGraphElement;\n  // shallow, direct subelements\n  // LMap;\n  // deep, nested subelements\n\n  // fittizi\n\n  // size and position in global document coordinates.\n\n  get_graph(context) {\n    return this.get_innerGraph(context);\n  }\n  get_anchors(c) {\n    return c.data.anchors;\n  }\n  set_anchors(v, c) {\n    if (v !== undefined && (typeof v !== \"object\" || Array.isArray(v))) {\n      Log.ee('cannot set anchors: invalid value provided');\n      return true;\n    }\n    if (v) {\n      // if !v it means clear all anchors?\n      for (let ka in v) {\n        //for each anchor\n        if (!v[ka]) continue;\n        if (c.data.anchors[ka]) {\n          for (let kk in v[ka]) {\n            //for each key within an anchor (x, y, w, h)\n            // if i was attempting to set a partial size, complete it with the old size values.\n            if (v[ka][kk] === undefined && c.data.anchors[ka][kk] !== undefined) v[ka][kk] = c.data.anchors[ka][kk];\n          }\n        }\n        if (v[ka].x === undefined || isNaN(v[ka].x)) v[ka].x = 0.5;\n        if (v[ka].y === undefined || isNaN(v[ka].y)) v[ka].y = 0.5;\n        // if (v[ka].w === undefined || isNaN(v[ka].w)) v[ka].w = 5;\n        // if (v[ka].h === undefined || isNaN(v[ka].h)) v[ka].h = 5;\n      }\n    }\n    SetFieldAction.new(c.data, \"anchors\", v, '+=', false);\n    return true;\n  }\n  get_edgesIn(context) {\n    return LPointerTargetable.fromArr(context.data.edgesIn);\n  }\n  get_edgesOut(context) {\n    return LPointerTargetable.fromArr(context.data.edgesOut);\n  }\n  set_edgesIn(val, c) {\n    return SetFieldAction.new(c.data.id, \"edgesIn\", Pointers.fromArr(val), '', true);\n  }\n  set_edgesOut(val, c) {\n    return SetFieldAction.new(c.data.id, \"edgesOut\", Pointers.fromArr(val), '', true);\n  }\n  get_edgesStart(context) {\n    return this.get_edgesIn(context);\n  }\n  get_edgesEnd(context) {\n    return this.get_edgesOut(context);\n  }\n  set_edgesStart(val, context) {\n    return this.set_edgesIn(val, context);\n  }\n  set_edgesEnd(val, context) {\n    return this.set_edgesOut(val, context);\n  }\n  _defaultGetter(c, k) {\n    if (k in c.data) return this.__defaultGetter(c, k);\n    // if value not found in node, check in view.\n    return this.get_view(c)[k];\n    /*let ret: any;\r\n    let view = this.get_view(c);\r\n    try { ret = (view as any)[k] } catch (e) { Log.ee(\"Could not find get_ property \\\"\" + k + \"\\\" in node or view.\", {c, view, k}); return undefined; }\r\n    return ret;*/\n  }\n  _defaultSetter(v, c, k) {\n    this.__defaultSetter(v, c, k);\n    return true;\n  }\n  get_graphAncestors(c) {\n    let current = c.proxyObject;\n    let next = current.father;\n    let ret = [];\n    while (next) {\n      if (RuntimeAccessibleClass.extends(next.className, DGraph.cname)) ret.push(next);\n      if (current.id === next.id) break;\n      current = next;\n      next = next.father;\n    }\n    return ret;\n  }\n  get_outerGraph(context) {\n    // todo: this relies on the fact that GraphVertex are not passing their own id to their childrens, but the parent graph id\n    return TargetableProxyHandler.wrap(context.data.graph);\n  }\n  get_vertex(context) {\n    let lcurrent = LPointerTargetable.fromPointer(context.data.id);\n    let dcurrent = lcurrent.__raw;\n    // iterate parents.\n    while (dcurrent) {\n      switch (dcurrent.className) {\n        case DVertex.cname:\n        case DVoidVertex.cname:\n        case DGraphVertex.cname:\n          return lcurrent || LPointerTargetable.fromD(dcurrent);\n        default:\n          if (!dcurrent.father || dcurrent.id === dcurrent.father) return undefined;\n          Log.exDev(!dcurrent.father || dcurrent.id === dcurrent.father, \"node failed to get containing vertex\", context.data, dcurrent, lcurrent);\n          lcurrent = LPointerTargetable.fromPointer(dcurrent.father);\n          dcurrent = lcurrent.__raw;\n      }\n    }\n    return undefined;\n  }\n  get_innerGraph(context) {\n    var _LPointerTargetable$f;\n    let dcurrent = DPointerTargetable.fromPointer(context.data.father);\n\n    // if no parent, but it's a graph, return itself.\n    if (!dcurrent) {\n      dcurrent = context.data;\n      switch (dcurrent.className) {\n        case DGraph.cname:\n        case DGraphVertex.cname:\n          return LPointerTargetable.fromD(dcurrent);\n        default:\n          return Log.exDevv(\"root node failed to get containing graph\", {\n            cdata: context.data,\n            dcurrent\n          });\n      }\n    }\n\n    // if it have a parent, iterate parents.\n    while (true) {\n      var _dcurrent;\n      switch ((_dcurrent = dcurrent) === null || _dcurrent === void 0 ? void 0 : _dcurrent.className) {\n        case DGraph.cname:\n        case DGraphVertex.cname:\n          return LPointerTargetable.fromD(dcurrent);\n        default:\n          Log.exDev(!dcurrent.father, \"node failed to get containing graph\", {\n            cdata: context.data,\n            dcurrent\n          });\n          Log.exDev(dcurrent.id === dcurrent.father, \"node failed to get containing graph, found loop\", {\n            cdata: context.data,\n            dcurrent,\n            father: (_LPointerTargetable$f = LPointerTargetable.from(dcurrent)) === null || _LPointerTargetable$f === void 0 ? void 0 : _LPointerTargetable$f.father\n          });\n          dcurrent = DPointerTargetable.fromPointer(dcurrent.father);\n      }\n    }\n  }\n\n  // set_x(val: this[\"x\"], context: Context): boolean { SetFieldAction.new(context.data.id, \"x\", val, undefined, false); return true; }\n  // get_x(context: Context): this[\"x\"] { return context.data.x; }\n  get_x(context) {\n    return this.get_size(context).x;\n  }\n  set_x(val, context) {\n    return this.set_size({\n      x: val\n    }, context);\n  }\n  get_y(context) {\n    return this.get_size(context).y;\n  }\n  set_y(val, context) {\n    return this.set_size({\n      y: val\n    }, context);\n  }\n  get_w(context) {\n    return this.get_size(context).w;\n  }\n  set_w(val, context) {\n    return this.set_size({\n      w: val\n    }, context);\n  }\n  get_h(context) {\n    return this.get_size(context).h;\n  }\n  set_h(val, context) {\n    return this.set_size({\n      h: val\n    }, context);\n  }\n  get_width(context) {\n    return this.get_w(context);\n  }\n  set_width(val, context) {\n    return this.set_w(val, context);\n  }\n  get_height(context) {\n    return this.get_h(context);\n  }\n  set_height(val, context) {\n    return this.set_h(val, context);\n  }\n  get_position(context) {\n    return new GraphPoint(context.data.x, context.data.y);\n  }\n  set_position(val, context) {\n    BEGIN();\n    SetFieldAction.new(context.data.id, \"x\", val.x, undefined, false);\n    SetFieldAction.new(context.data.id, \"y\", val.y, undefined, false);\n    END();\n    return true;\n  }\n  get_sizeold(context) {\n    return new GraphSize(context.data.x, context.data.y, context.data.w, context.data.h);\n  }\n  get_component(context) {\n    // switch(context.data.className) { case DEdgePoint.name: return GraphElementComponent.map[context.data.father]; }\n    return GraphElementComponent.map[context.data.id];\n  }\n  // get_view(context: Context): this[\"view\"] { return this.get_component(context).props.view; }\n  get_view(context) {\n    var _transientProperties$, _this$get_component;\n    return ((_transientProperties$ = transientProperties.node[context.data.id]) === null || _transientProperties$ === void 0 ? void 0 : _transientProperties$.mainView) || LPointerTargetable.from(context.data.view) || ((_this$get_component = this.get_component(context)) === null || _this$get_component === void 0 ? void 0 : _this$get_component.props.view);\n  }\n  set_view(val, context) {\n    Log.eDevv(\"node.view is readonly, change it through props or the model\");\n    // let ptr: DGraphElement[\"view\"] = Pointers.from(val as this[\"view\"]);\n    // return SetFieldAction.new(context.data.id, \"view\", ptr, '', true);\n  }\n  getSize() {\n    let outer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let canTriggerSet = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return this.wrongAccessMessage(\"getSize()\");\n  }\n  get_getSize(c) {\n    var _this = this;\n    return function () {\n      let outer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      let canTriggerSet = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return _this.get_innerSize(c, canTriggerSet, outer);\n    };\n  }\n  get_outerSize(context) {\n    let canTriggerSet = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return this.get_innerSize(context, canTriggerSet, true);\n  }\n  get_size(context) {\n    let canTriggerSet = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return this.get_innerSize(context, canTriggerSet, false);\n  }\n  get_innerSize(context) {\n    let canTriggerSet = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let outerSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let r = this.get_innerSize_impl(context, canTriggerSet, outerSize);\n    return new GraphSize(r.x, r.y, r.w, r.h);\n  }\n  get_innerSize_impl(context) {\n    var _this$get_component2;\n    let canTriggerSet = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let outerSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    canTriggerSet = canTriggerSet && !Debug.lightMode;\n    switch (context.data.className) {\n      default:\n        return Log.exDevv(\"unexpected classname in get_size switch: \" + context.data.className);\n      case DEdge.cname:\n      case DVoidEdge.cname:\n      case DGraph.cname:\n        return nosize;\n      // case DField.cname:\n      case DGraphElement.cname:\n        let graph = outerSize ? this.get_outerGraph(context) : this.get_innerGraph(context);\n        return graph.coord(this.get_htmlSize(context));\n      case DVoidVertex.cname:\n      case DVertex.cname:\n      case DEdgePoint.cname:\n      case DGraphVertex.cname:\n        break;\n    }\n\n    // low prio todo: memoization in proxy, as long state does not change keep a collection Dictionary[object][key] = returnval. it gets emptied when state is updated.\n\n    // when loading a save, edge segements and edgepoints/nodes are computed before creating the edgepoint component\n    let view = this.get_view(context);\n    // (window as any).retry = ()=>view.getSize(context.data.id);\n    let ret = view.getSize(context.data.id); // (this.props.dataid || this.props.nodeid as string)\n\n    // console.log(\"getSize() from view\", {ret: ret ? {...ret} : ret});\n    if (!ret) {\n      ret = new GraphSize();\n      ret.x = context.data.x;\n      ret.y = context.data.y;\n      ret.w = context.data.w;\n      ret.h = context.data.h;\n      let def;\n      if (undefined === ret.x) {\n        if (!def) def = view.defaultVSize;\n        ret.x = def.x || 0;\n      }\n      if (undefined === ret.y) {\n        if (!def) def = view.defaultVSize;\n        ret.y = def.y || 0;\n      }\n      if (undefined === ret.w) {\n        if (!def) def = view.defaultVSize;\n        ret.w = def.w || 10;\n      }\n      if (undefined === ret.h) {\n        if (!def) def = view.defaultVSize;\n        ret.h = def.h | 10;\n      }\n      ret.currentCoordType = context.data.currentCoordType;\n      // console.log(\"getSize() from node merged with defaultVSize\", {ret: ret ? {...ret} : ret});\n    }\n    if (context.data.className === DEdgePoint.cname) {\n      ret = this.decodePosCoords(context, ret, view);\n    }\n\n    /*\r\n            if ((context.data as DVoidVertex).isResized) {\r\n                return ret;\r\n            }*/\n    if (!canTriggerSet) {\n      if (outerSize) ret = this.get_outerGraph(context).translateSize(ret, this.get_innerGraph(context));\n      return ret;\n    }\n    let html = (_this$get_component2 = this.get_component(context)) === null || _this$get_component2 === void 0 ? void 0 : _this$get_component2.html;\n    let actualSize = (html === null || html === void 0 ? void 0 : html.current) ? Size.of(html.current) : {\n      w: 0,\n      h: 0\n    };\n    let updateSize = false;\n    let isOldElement = context.data.clonedCounter > 3;\n    // if w = 0 i don't auto-set it as in first render it has w:0 because is not reredered and not resized.\n    // if (canTriggerSet) this.set_size({w:actualSize.w}, context);\n    if (view.adaptWidth && ret.w !== actualSize.w) {\n      if (canTriggerSet && (isOldElement || actualSize.w !== 0)) {\n        ret.w = actualSize.w;\n        updateSize = true;\n      }\n    }\n    if (view.adaptHeight && ret.h !== actualSize.h) {\n      if (canTriggerSet && (isOldElement || actualSize.h !== 0)) {\n        ret.h = actualSize.h;\n        updateSize = true;\n      }\n    }\n    // console.log(\"getSize() from node merged with actualSize\", {ret: {...ret}});\n\n    if (updateSize) this.set_size(ret, context);\n    if (outerSize) ret = this.get_outerGraph(context).translateSize(ret, this.get_innerGraph(context));\n    return ret;\n  }\n  // set_size(size: Partial<this[\"size\"]>, context: Context): boolean {\n  set_size(size0, c) {\n    // console.log(\"setSize(\"+(this.props?.data as any).name+\") thisss\", this);\n    if (!size0) return false;\n    let size = size0;\n    let view = this.get_view(c);\n    let testmode = false;\n    if (c.data.className === DEdgePoint.cname && size.currentCoordType !== CoordinateMode.absolute) size = this.encodePosCoords(c, size, view);\n    if (view.updateSize(c.data.id, size)) return true;\n    BEGIN();\n    if (size.x !== c.data.x && size.x !== undefined) SetFieldAction.new(c.data.id, \"x\", size.x, undefined, false);\n    if (size.y !== c.data.y && size.y !== undefined) SetFieldAction.new(c.data.id, \"y\", size.y, undefined, false);\n    if (size.w !== c.data.w && size.w !== undefined) SetFieldAction.new(c.data.id, \"w\", size.w, undefined, false);\n    if (size.h !== c.data.h && size.h !== undefined) SetFieldAction.new(c.data.id, \"h\", size.h, undefined, false);\n    let epdata = c.data;\n    if (size.currentCoordType !== epdata.currentCoordType && size.currentCoordType !== undefined) SetFieldAction.new(epdata.id, \"currentCoordType\", size.currentCoordType, undefined, false);\n    END();\n    return true;\n  }\n  get_html(c) {\n    let component = this.get_component(c);\n    let html = component.html.current;\n    if (html) return html;\n    html = $('[nodeid=\"' + c.data.id + '\"]')[0];\n    if (!html) return undefined;\n    component.html.current = html;\n    return html;\n  }\n  // get_html(context: Context): this[\"html\"] { return $(\"[node-id='\" + context.data.id + \"']\")[0]; }\n  set_html(val, context) {\n    return this.cannotSet(\"set_html(). html is generated through jsx. edit the view instead.\");\n  }\n  get_htmlSize(context) {\n    let html = this.get_html(context);\n    return html ? Size.of(html) : new Size(0, 0, 0, 0);\n    /*\r\n    let graph = this.get_graph(context);\r\n    if (!html) return nosize as any;\r\n    let size = Size.of(html);\r\n    let zoom = graph.zoom;\r\n    size.x /= zoom.x;\r\n    size.y /= zoom.y;\r\n    return size;*/\n  }\n  set_htmlSize(val, context) {\n    // might be useful for fixed display size/location elements that stay in place even if you move tab or change zoom. debatable if needed\n    this.cannotSet(\"set_htmlSize(): todo extra low priority. set GraphSize through set_size instead.\");\n    return true;\n  }\n  get_htmlPosition(context) {\n    return this.get_htmlSize(context).tl();\n  }\n  set_htmlPosition(val, context) {\n    // might be useful for fixed display size/location elements that stay in place even if you move tab or change zoom. debatable if needed\n    this.cannotSet(\"set_htmlPosition(): todo extra low priority. set graph position through set_position instead.\");\n    return true;\n  }\n\n  /* how z-index work, it's really messy.\r\n  * cannot move html position. node id depends on it, and a node moving position would need to change id.\r\n  * so i use css order.\r\n  * first order is assigned through node constructor called by parent component injectProps, according to his last index in html.\r\n  * now z-index is set in node and updated properly.\r\n  * z-index is passed to a prop, rendered as html attribute.\r\n  * css takes the attribute value and uses it in \"order\" css rule.\r\n  * problem: updating node.z doesn't trigger the parent injectprops, so he inject html index and\r\n  * the outernmost html root cannot update his attribute without refreshing the parent and recalling injectprops\r\n  * fixed: by updating it directly in GraphElement.render()\r\n  * */\n  get_zIndex(context) {\n    return context.data.zIndex || 0;\n  }\n  set_zIndex(val, context) {\n    SetFieldAction.new(context.data.id, \"zIndex\", val, undefined, false);\n    return true;\n  }\n  get_z(context) {\n    return context.data.zIndex;\n  }\n  set_z(val, context) {\n    return this.set_zIndex(val, context);\n  }\n  /*\r\n      get_containedIn(context: Context): this[\"containedIn\"] {\r\n          return context.data.containedIn ? LPointerTargetable.fromPointer(context.data.containedIn) : undefined; }\r\n      set_containedIn(val: Pack1<this[\"containedIn\"]>, context: LogicContext<DGraphElement>): boolean {\r\n          let ptr: DGraphElement[\"containedIn\"] = Pointers.from(val) as any;\r\n          SetFieldAction.new(context.data, 'containedIn', ptr, undefined, true);\r\n          if (ptr) SetFieldAction.new(ptr as any, 'subElements+=', context.data.id);\r\n          return true; }*/\n\n  get_subElements(context) {\n    return LPointerTargetable.fromArr([...new Set(context.data.subElements)]);\n  }\n  set_subElements(val, context) {\n    console.log(\"isDeepStrictEqual\", {\n      isDeepStrictEqual\n    });\n    Log.eDev([...new Set(val)].length !== val.length, \"subelemnts setter have duplicates\", {\n      val,\n      context\n    });\n    // if (isDeepStrictEqual(context.data.subElements, val)) return true;\n    let pointers = Pointers.from(val) || [];\n    if (Uarr.equals(pointers, context.data.subElements, false)) return true;\n    SetFieldAction.new(context.data, 'subElements', pointers, '', true);\n    const idlookup = store.getState().idlookup;\n    let arrdiff = U.arrayDifference(context.data.subElements, pointers);\n    // old subelements\n    for (let oldsubelementid of arrdiff.removed) {\n      let subelement = oldsubelementid && idlookup[oldsubelementid];\n      if (subelement.father !== context.data.id) continue;\n      LPointerTargetable.from(subelement).father = null; // todo: can this happen? è transitorio o causa vertici senza parent permanenti?\n    }\n    // new subelements\n    for (let newsubelementid of arrdiff.added) {\n      let subelement = newsubelementid && idlookup[newsubelementid];\n      if (subelement.father === context.data.id) continue;\n      LPointerTargetable.from(subelement).father = context.data.id; // trigger side-action\n    }\n    return true;\n  }\n  get_isResized(context) {\n    return context.data.isResized;\n  }\n  set_isResized(val, context) {\n    return SetFieldAction.new(context.data.id, \"isResized\", val);\n  }\n  get_model(context) {\n    const modelElementId = context.data.model; //$('[id=\"' + context.data.id + '\"]')[0].dataset.dataid;\n    const lModelElement = LPointerTargetable.from(modelElementId);\n    return lModelElement;\n  }\n  get_allSubNodes(context, state) {\n    // return context.data.packages.map(p => LPointerTargetable.from(p));\n    state = state || store.getState();\n    let tocheck = context.data.subElements || [];\n    let checked = {};\n    let dblcheck = {}; // <child, parent>  // debug only\n    for (let e of tocheck) dblcheck[e] = context.data.id; // debug only\n    checked[context.data.id] = true; //nb6[]{}&\n    while (tocheck.length) {\n      let newtocheck = [];\n      for (let ptr of tocheck) {\n        Log.eDev(checked[ptr], \"loop in GraphElements containing themselves\", {\n          dblcheck,\n          context,\n          ptr,\n          checked,\n          fistContainer: dblcheck[ptr]\n        });\n        if (checked[ptr]) continue;\n        checked[ptr] = true;\n        let subnode = DPointerTargetable.from(ptr, state);\n        let se = subnode === null || subnode === void 0 ? void 0 : subnode.subElements;\n        for (let e of se) dblcheck[e] = ptr; // debug only\n        U.arrayMergeInPlace(newtocheck, se);\n      }\n      tocheck = newtocheck;\n    }\n    delete checked[context.data.id];\n    return LPointerTargetable.from(Object.keys(checked), state);\n  }\n  get_assignEdgeAnchor(c) {\n    return anchorName => {\n      if (anchorName && !c.data.anchors[anchorName]) anchorName = undefined;\n      if (LVoidEdge.startFollow) {\n        let de = DPointerTargetable.fromPointer(LVoidEdge.startFollow);\n        if (de.start !== c.data.id) return; // cannot change edge targets, only an anchor within the current targets\n        let le = LPointerTargetable.fromD(de);\n        le.anchorStart = anchorName;\n        le.startFollow = false;\n      }\n      if (LVoidEdge.endFollow) {\n        let de = DPointerTargetable.fromPointer(LVoidEdge.endFollow);\n        if (de.end !== c.data.id) return; // cannot change edge targets, only an anchor within the current targets\n        let le = LPointerTargetable.fromD(de);\n        le.anchorEnd = anchorName;\n        le.endFollow = false;\n      }\n    };\n  }\n  get_events(c) {\n    const tn = transientProperties.node[c.data.id];\n    let mainview = tn.mainView.__raw;\n    let otherViews = tn.stackViews.map(v => v.__raw);\n    let allviews = [mainview, ...otherViews].reverse();\n    const keep_for_closure_original_funcs = {};\n    const ret = {};\n    for (let dv of allviews) U.objectMergeInPlace(keep_for_closure_original_funcs, transientProperties.view[dv.id].events);\n    const lastContext = tn.viewScores[mainview.id].evalContext;\n    const keys = Object.keys(keep_for_closure_original_funcs);\n    // for (let k of keys) ret['_raw_'+k] = keep_for_closure_original_funcs[k];\n    for (let k of keys) {\n      if (!keep_for_closure_original_funcs[k]) continue;\n      ret[k] = function () {\n        for (var _len = arguments.length, _params = new Array(_len), _key = 0; _key < _len; _key++) {\n          _params[_key] = arguments[_key];\n        }\n        return keep_for_closure_original_funcs[k](lastContext, ..._params);\n      };\n    }\n    return ret;\n  }\n  get_father(context) {\n    return LPointerTargetable.fromPointer(context.data.father);\n  }\n  set_father(val, context) {\n    let ptr = Pointers.from(val);\n    SetFieldAction.new(context.data, 'father', ptr, undefined, true);\n    if (ptr) SetFieldAction.new(ptr, 'subElements+=', context.data.id);\n    return true;\n  }\n  select(forUser) {\n    return this.wrongAccessMessage(\"node.select()\");\n  }\n  deselect(forUser) {\n    return this.wrongAccessMessage(\"node.deselect()\");\n  }\n  toggleSelected(forUser) {\n    return this.wrongAccessMessage(\"node.toggleSelected()\");\n  }\n  isSelected(forUser) {\n    return this.wrongAccessMessage(\"node.isSelected()\");\n  }\n  get_select(c) {\n    return forUser => {\n      if (!forUser) forUser = DUser.current;\n      if (c.data.isSelected[forUser]) return; // no-op\n      let map = {\n        ...c.data.isSelected\n      };\n      map[forUser] = true;\n      SetFieldAction.new(c.data.id, \"isSelected\", map, undefined, false);\n      // todo: actually they are pointer to users, but i'm assuming users are not erased at runtime. on deselect too\n    };\n  }\n  get_deselect(c) {\n    return forUser => {\n      if (!forUser) forUser = DUser.current;\n      if (!c.data.isSelected[forUser]) return; // no-op\n      let map = {\n        ...c.data.isSelected\n      };\n      delete map[forUser];\n      SetFieldAction.new(c.data.id, \"isSelected\", map, undefined, false);\n      // todo: actually they are pointer to users, but i'm assuming users are not erased at runtime. on deselect too\n    };\n  }\n  get_toggleSelected(context) {\n    return forUser => {\n      if (!forUser) forUser = DUser.current;\n      if (this.get_isSelected(context)(forUser)) {\n        this.get_deselect(context)(forUser);\n        return false;\n      } else {\n        this.get_select(context)(forUser);\n        return true;\n      }\n    };\n  }\n  get_isSelected(context) {\n    return forUser => {\n      if (!forUser) forUser = DUser.current;\n      return !!context.data.isSelected[forUser];\n    };\n  }\n  set_isSelected(val, context) {\n    return this.cannotSet(\"graphElement.isSelected(): use this.select() or this.deselect() instead.\");\n  }\n  /*\r\n  get_isSelected(context: LogicContext<DVoidVertex>): GObject {\r\n      return DPointerTargetable.mapWrap(context.data.isSelected, context.data, 'idlookup.' + context.data.id + '.isSelected', []);\r\n  }*/\n\n  // for edges\n  get_startPoint(c, size, view) {\n    return this.get_startEndPoint(c, size, view, true);\n  }\n  get_endPoint(c, size, view) {\n    return this.get_startEndPoint(c, size, view, false);\n  }\n  get_startEndPoint(c, size, view) {\n    let isStart = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    if (!size) {\n      if (c) size = this.get_size(c);else size = Log.exDevv(\"invalid arguments in get_startEndPoint\", {\n        arguments\n      });\n    }\n    if (!view) {\n      // if (c) view = this.get_view(c); else view = Log.exDevv(\"invalid arguments in get_startPoint\", {arguments});\n      view = c && this.get_view(c) || Log.exDevv(\"invalid arguments in get_startEndPoint\", {\n        arguments\n      });\n    }\n    let offset = view[isStart ? \"edgeStartOffset\" : \"edgeEndOffset\"];\n    let isPercentage = view[isStart ? \"edgeStartOffset_isPercentage\" : \"edgeEndOffset_isPercentage\"];\n    if (!size) size = new GraphSize(0, 0, 0, 0);\n    if (isPercentage) offset = new GraphPoint(offset.x / 100 * size.w, offset.y / 100 * size.h);\n    return size.tl().add(offset, false);\n  }\n}, _class4.subclasses = [], _class4._extends = [], _class4)) || _class3);\nRuntimeAccessibleClass.set_extend(DPointerTargetable, DGraphElement);\nRuntimeAccessibleClass.set_extend(LPointerTargetable, LGraphElement);\nexport let DGraph = (_dec3 = RuntimeAccessible('DGraph'), _dec3(_class5 = (_class6 = class DGraph extends DGraphElement {\n  constructor() {\n    super(...arguments);\n    this.father = void 0;\n    this.id = void 0;\n    this.graph = void 0;\n    this.model = void 0;\n    this.isSelected = void 0;\n    this.subElements = void 0;\n    this.state = void 0;\n    this.zoom = void 0;\n    this.offset = void 0;\n  } // static _super = DGraphElement;\n  // static singleton: LGraph;\n  // static logic: typeof LGraph;\n  // static structure: typeof DGraph;\n  // inherit redefine\n  // containedIn!: Pointer<DGraphElement, 0, 1, LGraphElement>;\n  // personal attributes\n  // in-graph scrolling offset\n\n  static new(htmlindex, model, parentNodeID,\n  // immediate parent\n  parentgraphID,\n  // graph containing this subgraph (redudant? could get it from father chain)\n  nodeID) {\n    return new Constructors(new DGraph('dwc'), parentNodeID, true, undefined, nodeID || Constructors.DGraph_makeID(model)).DPointerTargetable().DGraphElement(model, parentgraphID, htmlindex).DGraph().end();\n  }\n  static getNodes(dmp, out) {\n    let $allnodes = $('[data-dataid]');\n    let matchedids = (dmp || []).map(d => d.id);\n    let matchedidmap = U.objectFromArrayValues(matchedids);\n    if (!out) out = {};\n    let allnodesarr = [...$allnodes];\n    let filternode = d => {\n      var _d$dataset, _d$dataset2;\n      if (!(d === null || d === void 0 ? void 0 : (_d$dataset = d.dataset) === null || _d$dataset === void 0 ? void 0 : _d$dataset.dataid)) return false;\n      let id = '' + (d === null || d === void 0 ? void 0 : (_d$dataset2 = d.dataset) === null || _d$dataset2 === void 0 ? void 0 : _d$dataset2.dataid);\n      return matchedidmap[id];\n    };\n    out.$matched = $(allnodesarr.filter(filternode));\n    out.$notMatched = $(allnodesarr.filter(n => !filternode(n)));\n    return out.$matched;\n    // throw new Error(\"Method not implemented.\");\n  }\n}, _class6.subclasses = [], _class6._extends = [], _class6)) || _class5);\nvar nosize = {\n  x: 0,\n  y: 0,\n  w: 0,\n  h: 0,\n  nosize: true\n};\nvar defaultEdgePointSize = undefined; // = {x:0, y:0, w:5, h:5};\nvar defaultVertexSize = undefined; // {x:0, y:0, w:140.6818084716797, h:32.52840805053711};\n\nexport let LGraph = (_dec4 = RuntimeAccessible('LGraph'), _dec4(_class7 = (_class8 = class LGraph extends LGraphElement {\n  constructor() {\n    super(...arguments);\n    this.__raw = void 0;\n    this.id = void 0;\n    this.graph = void 0;\n    this.model = void 0;\n    this.subElements = void 0;\n    this._state = void 0;\n    this.zoom = void 0;\n    this.graphSize = void 0;\n    this.offset = void 0;\n    this.__info_of__zoom = {\n      type: GraphPoint.cname,\n      label: \"zoom\",\n      txt: \"Scales the graph and all subelements by a factor.\"\n    };\n    this.__info_of__offset = {\n      type: GraphPoint.cname,\n      label: \"offset\",\n      txt: \"In-graph scrolling position.\"\n    };\n    this.__info_of__graphSize = {\n      type: GraphSize.cname,\n      label: \"graphSize\",\n      txt: \"size internal to the graph, including internal scroll and panning.\"\n    };\n    this.__info_of__translateSize = {\n      type: \"(T, Graph)=>T where T is GraphSize | GraphPoint\",\n      txt: \"Translates a coordinate set from the local coordinates of a SubGraph to this Graph containing it.\"\n    };\n    this.__info_of__translateHtmlSize = {\n      type: \"(Size|Point) => GraphSize|GraphPoint\",\n      txt: \"Translate page\\'s viewport coordinate set to this graph coordinate set.\"\n    };\n  } // static singleton: LGraph;\n  // static logic: typeof LGraph;\n  // static structure: typeof DGraph;\n  // inherit redefine\n  // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\n  isSelected(forUser) {\n    return this.wrongAccessMessage(\"node.isSelected()\");\n  }\n  // containedIn?: LGraphElement;\n\n  // LMap;\n  // personal attributes\n\n  // derived attribute: bounding rect containing all subnodes, while \"size\" is instead external size of the vertex holding the graph in GraphVertexes\n\n  // Scrolling position inside the graph\n\n  // get_graphSize(context: LogicContext<DGraph>):  Readonly<GraphSize> { return todo: get bounding rect containing all subnodes.; }\n  get_offset(context) {\n    return new GraphSize(context.data.offset.x, context.data.offset.y);\n  }\n  set_offset(val, context) {\n    if (!val) val = {\n      x: 0,\n      y: 0\n    };\n    if (context.data.offset.x === val.x && context.data.offset.y === val.y) return true;\n    if (val.x === undefined && context.data.offset.x !== val.x) val.x = context.data.offset.x;\n    if (val.y === undefined && context.data.offset.y !== val.y) val.y = context.data.offset.y;\n    SetFieldAction.new(context.data, \"offset\", val);\n    return true;\n  }\n  get_zoom(context) {\n    const zoom = context.data.zoom;\n    // (zoom as any).debug = {rawgraph: context.data.__raw, zoomx: context.data.zoom.x, zoomy: context.data.zoom.y}\n    return context.data.zoom;\n  }\n  toGraphSize() {\n    return this.wrongAccessMessage(\"toGraphSize\");\n  }\n  coord(htmlSize) {\n    return this.wrongAccessMessage(\"toGraphSize\");\n  }\n  get_coord(context) {\n    return htmlSize => {\n      let size = this.get_htmlSize(context);\n      let zoom = this.get_zoom(context);\n      return new GraphSize((htmlSize.x - size.x) / zoom.x, (htmlSize.y - size.y) / zoom.y, htmlSize.w / zoom.x, htmlSize.h / zoom.y);\n    };\n  }\n  // get_htmlSize(context: Context): Size { }\n  translateSize(ret, innerGraph) {\n    return this.wrongAccessMessage(\"translateSize()\");\n  }\n  translateHtmlSize(size) {\n    return this.wrongAccessMessage(\"translateHtmlSize()\");\n  }\n  set_zoom(val, c) {\n    SetFieldAction.new(c.data, 'zoom', val, '+=', false);\n    return true;\n  }\n  get_translateHtmlSize(c) {\n    return size => {\n      let graphHtmlSize = this.get_htmlSize(c);\n      let a = size.subtract(graphHtmlSize.tl(), true);\n      let b = a.add({\n        x: c.data.offset.x,\n        y: c.data.offset.y\n      }, false);\n      return b.multiply(c.data.zoom, false);\n    };\n  }\n  get_translateSize(c) {\n    return (size, innerGraph) => {\n      innerGraph = LPointerTargetable.wrap(innerGraph);\n      let ret = size.hasOwnProperty(\"w\") ? new GraphSize(size.x, size.y, size.w, size.h) : new GraphPoint(size.x, size.y);\n      Log.ex(!innerGraph, \"translateSize() graph parameter is invalid: \" + innerGraph, innerGraph, c);\n      let ancestors = [innerGraph, ...innerGraph.graphAncestors];\n      Log.ex(ancestors.indexOf(c.proxyObject) !== -1, \"translateSize() graph parameter is invalid: it must be a graph containing the current one.\", innerGraph, c);\n      for (let g of ancestors) ret.add(g.size.tl(), false);\n      // console.log(\"translateSize\", {c, thiss:c.proxyObject, ancestors, ancestorSizes: ancestors.map(a=> a.size.tl()), size, ret});\n      return ret;\n    };\n  }\n  contains(elem) {\n    return this.wrongAccessMessage(\"contains()\");\n  }\n  get_contains(c) {\n    return elem => {\n      let current = elem;\n      let next = elem.father;\n      let targetid = c.proxyObject.id;\n      if (current.id !== targetid) return true;\n      while (next && current.id !== next.id) {\n        current = next;\n        next = next.father;\n        if (current.id !== targetid) return true;\n      }\n      return false;\n    };\n  }\n}, _class8.subclasses = [], _class8._extends = [], _class8)) || _class7);\nRuntimeAccessibleClass.set_extend(DGraphElement, DGraph);\nRuntimeAccessibleClass.set_extend(LGraphElement, LGraph);\n// export const defaultVSize: GraphSize = new GraphSize(0, 0, 300, 160); // useless, now it's in view.DefaultVSize\n// export const defaultEPSize: GraphSize = new GraphSize(0, 0, 15, 15); // useless, now it's in view.DefaultVSize\n\nexport let DVoidVertex = (_dec5 = RuntimeAccessible('DVoidVertex'), _dec5(_class9 = (_class10 = class DVoidVertex extends DGraphElement {\n  constructor() {\n    super(...arguments);\n    this.id = void 0;\n    this.graph = void 0;\n    this.model = void 0;\n    this.isSelected = void 0;\n    this.subElements = void 0;\n    this.state = void 0;\n    this.zoom = void 0;\n    this.x = void 0;\n    this.y = void 0;\n    this.w = void 0;\n    this.h = void 0;\n    this.isResized = void 0;\n  } // static _super = DGraphElement;\n  // static singleton: LVoidVertex;\n  // static logic: typeof LVoidVertex;\n  // static structure: typeof DVoidVertex;\n  // inherit redefine\n  // containedIn!: Pointer<DGraphElement, 0, 1, LGraphElement>;\n  // personal attributes\n  // size?: GraphSize; // virtual, gets extracted from this. x and y are stored directly here as it extends GraphSize\n\n  static new(htmlindex, model, parentNodeID, graphID, nodeID, size) {\n    return new Constructors(new DVoidVertex('dwc'), parentNodeID, true, undefined, nodeID).DPointerTargetable().DGraphElement(model, graphID, htmlindex).DVoidVertex(size || defaultVertexSize).end();\n  }\n}, _class10.subclasses = [], _class10._extends = [], _class10)) || _class9);\nexport let LVoidVertex = (_dec6 = RuntimeAccessible('LVoidVertex'), _dec6(_class11 = (_class12 = class LVoidVertex extends LGraphElement {\n  constructor() {\n    super(...arguments);\n    this.__raw = void 0;\n    this.id = void 0;\n    this.graph = void 0;\n    this.model = void 0;\n    this.subElements = void 0;\n    this._state = void 0;\n    this.zoom = void 0;\n    this.isResized = void 0;\n    this.x = void 0;\n    this.y = void 0;\n    this.w = void 0;\n    this.h = void 0;\n    this.size = void 0;\n    this.__info_of__size = {\n      type: \"?GraphSize\",\n      txt: \"Size of the vertex, if null it means is utilizing the defaultSize from view. recommended to read component.getSize() instead of this.\"\n    };\n  } // <D extends DVoidVertex = any>\n  // static singleton: LVoidVertex;\n  // static logic: typeof LVoidVertex;\n  // static structure: typeof DVoidVertex;\n  // inherit redefine\n  // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\n  isSelected(forUser) {\n    return this.wrongAccessMessage(\"node.isSelected()\");\n  }\n  // containedIn?: LGraphElement;\n\n  // LMap;\n\n  // personal attributes\n\n  // virtual, gets extracted from this. x and y are stored directly here as it extends GraphSize\n\n  get_isResized(context) {\n    return context.data.isResized;\n  }\n  set_isResized(val, context) {\n    return SetFieldAction.new(context.data.id, \"isResized\", val);\n  }\n}, _class12.subclasses = [], _class12._extends = [], _class12)) || _class11);\nRuntimeAccessibleClass.set_extend(DGraphElement, DVoidVertex);\nRuntimeAccessibleClass.set_extend(LGraphElement, LVoidVertex);\nexport let DEdgePoint = (_dec7 = RuntimeAccessible('DEdgePoint'), _dec7(_class13 = (_class14 = class DEdgePoint extends DVoidVertex {\n  constructor() {\n    super(...arguments);\n    this.id = void 0;\n    this.father = void 0;\n    this.graph = void 0;\n    this.model = void 0;\n    this.isSelected = void 0;\n    this.subElements = void 0;\n    this.zoom = void 0;\n    this.x = void 0;\n    this.y = void 0;\n    this.w = void 0;\n    this.h = void 0;\n    this.size = void 0;\n    this.__isDEdgePoint = void 0;\n    this.currentCoordType = void 0;\n  } // DVoidVertex\n  // static singleton: LEdgePoint;\n  // static logic: typeof LEdgePoint;\n  // static structure: typeof DEdgePoint;\n  // inherit redefine\n  // todo: if null gets model from this.father (edge)?\n  // containedIn!: Pointer<DGraphElement, 0, 1, LGraphElement>;\n  //／／ virtual, gets extracted from this. x and y are stored directly here as it extends GraphSize\n  // personal attributes\n  static new(htmlindex, model, parentNodeID, graphID, nodeID, size) {\n    return new Constructors(new DEdgePoint('dwc'), parentNodeID, true, undefined, nodeID).DGraphElement(undefined, graphID, htmlindex).DVoidVertex(size || defaultEdgePointSize).DEdgePoint().end();\n  }\n}, _class14.subclasses = [], _class14._extends = [], _class14)) || _class13);\nexport let LEdgePoint = (_dec8 = RuntimeAccessible('LEdgePoint'), _dec8(_class15 = (_class16 = class LEdgePoint extends LVoidVertex {\n  constructor() {\n    super(...arguments);\n    this.father = void 0;\n    this.id = void 0;\n    this.graph = void 0;\n    this.model = void 0;\n    this.subElements = void 0;\n    this.zoom = void 0;\n    this.x = void 0;\n    this.y = void 0;\n    this.w = void 0;\n    this.h = void 0;\n    this.size = void 0;\n    this.__isLEdgePoint = void 0;\n    this.edge = void 0;\n    this.__info_of__edge = {\n      type: \"?LEdge\",\n      txt: \"returns the containing edge if called on an EdgePoint, \\\"this\\\" if called on an edge, undefined otherwise.\"\n    };\n  } // static singleton: LEdgePoint;\n  // static logic: typeof LEdgePoint;\n  // static structure: typeof DEdgePoint;\n  // inherit redefine\n  // __raw!: DEdgePoint;\n  // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\n  isSelected(forUser) {\n    return this.wrongAccessMessage(\"node.isSelected()\");\n  }\n  // containedIn?: LGraphElement;\n\n  // virtual, gets extracted from this. x and y are stored directly here as it extends GraphSize\n  // personal attributes\n\n  // returns container edge\n\n  get_edge(c) {\n    return c.proxyObject.father;\n  }\n  set_edge(v, c) {\n    return this.set_father(v, c);\n  }\n  static decodeCoords(size0, sp, ep) /*absolute*/{\n    let size = size0;\n    let ret = \"w\" in size || \"h\" in size ? new GraphSize() : new GraphPoint(); // GObject<Partial<GraphSize>>;\n    switch (size.currentCoordType) {\n      default:\n        return Log.exDevv(\"translatePosCoords() invalid coordinate mode\", {\n          mode: size.currentCoordType\n        });\n      // case CoordinateMode.absolute: return size;\n      case CoordinateMode.absolute:\n      case undefined:\n      case null:\n        if (size.x !== undefined) ret.x = size.x;\n        if (size.y !== undefined) ret.y = size.y;\n        break;\n      case CoordinateMode.relativePercent:\n        //maybe do: dampening factor on relative % offset? is it possible?\n        // let s = this.getBasicSize(c);\n        // MATH:\n        // size.x = sp.x*x% + ep.x*(1-x%)\n        // size.x = sp.x*x% + ep.x - ep.x*x%\n        // size.x - ep.x= (sp.x - ep.x)*x%\n        // (size.x - ep.x) / (sp.x - ep.x) = x% // actually i inverted <sp, ep> in first equation, so reverse them in result too.\n        if (size.x !== undefined) ret.x = (1 - size.x) * sp.x + size.x * ep.x;\n        if (size.y !== undefined) ret.y = (1 - size.y) * sp.y + size.y * ep.y;\n        break;\n      case CoordinateMode.relativeOffset:\n      case CoordinateMode.relativeOffsetStart:\n      case CoordinateMode.relativeOffsetEnd:\n        let useStart;\n        let useEnd;\n        switch (size.currentCoordType) {\n          default:\n          case CoordinateMode.relativeOffset:\n            useStart = true;\n            useEnd = true;\n            break;\n          case CoordinateMode.relativeOffsetStart:\n            useStart = true;\n            useEnd = false;\n            break;\n          case CoordinateMode.relativeOffsetEnd:\n            useStart = false;\n            useEnd = true;\n            break;\n        }\n        // offset = sp - size\n        // size = offset - sp\n        // in reverse: actualsize = offset, size=offset\n\n        // if coords are already in absolute mode.\n        let xIsAbsolute = size.x && !Array.isArray(size.x) ? size.x : undefined;\n        let yIsAbsolute = size.x && !Array.isArray(size.x) ? size.x : undefined;\n        Log.w(!!(xIsAbsolute || yIsAbsolute), \"decoding relative offset require an array size coordinate system. x=[x1, x2] --> x\", {\n          size\n        });\n        let offsetsp = useStart ? new GraphPoint(xIsAbsolute || size.x[0] + sp.x, yIsAbsolute || size.y[0] + sp.y) : new GraphPoint();\n        let offsetep = useEnd ? new GraphPoint(xIsAbsolute || size.x[1] + ep.x, yIsAbsolute || size.y[1] + ep.y) : new GraphPoint();\n        // if the start and endpoint of the edge didn't move, offsetsp = offsetep.\n        // if they moved, those 2 are discordant --> i pick middle\n        offsetsp.add(offsetep, false);\n        if (useStart && useEnd) offsetsp.divide(2, false);\n        if (!xIsAbsolute && size.x !== undefined) ret.x = offsetsp.x;\n        if (!yIsAbsolute && size.y !== undefined) ret.y = offsetsp.y;\n        if (xIsAbsolute) {\n          ret.x = size.x;\n        }\n        if (yIsAbsolute) {\n          ret.y = size.y;\n        }\n        break;\n    }\n    if (size.x === undefined) delete ret.x;\n    if (size.y === undefined) delete ret.y;\n    if (size.w === undefined) delete ret.w;else ret.w = size.w;\n    if (size.h === undefined) delete ret.h;else ret.h = size.h;\n    ret.currentCoordType = CoordinateMode.absolute;\n    // console.log(\"decode coords\", {size, sp, ep, ret});\n    return ret;\n  }\n  // from x,y as coords, to x%,y% as % of ((1-val)%*startpt) + ((val)%*endpt)\n  decodePosCoords(c, size, view, sp0, ep0) {\n    let le = c && c.proxyObject.father;\n    // console.log(\"decodepos:\", {le, sp0, lesp:le?.startPoint});\n    let sp = sp0 || le.startPoint;\n    let ep = ep0 || le.endPoint;\n    return LEdgePoint.decodeCoords(size, sp, ep);\n  }\n  static testCoords() {\n    let range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 30;\n    outer: for (let mode of [\"absolute\", \"relative%\", \"relativeOffset\", \"relativeOffsetStart\", \"relativeOffsetEnd\"]) for (let i = -range; i < range; i++) for (let j = -range; j < range; j++) {\n      var s0 = {\n        x: i,\n        y: j\n      };\n      var sp = {\n        x: 10,\n        y: 10\n      };\n      var ep = {\n        x: 10,\n        y: -10\n      };\n      // @ts-ignore\n      var s1 = LEdgePoint.encodeCoords(s0, mode, sp, ep);\n      // @ts-ignore\n      var s00 = LEdgePoint.decodeCoords(s1, sp, ep);\n      // @ts-ignore\n      var error = Object.keys(s0).map(k => s0[k].toFixed(3) === s00[k].toFixed(3) ? '' : k).join('');\n      (mode != \"relative%\" && error ? console.error : console.log)({\n        diff: [s00.x - s0.x, s00.y - s0.y].join(),\n        i,\n        j,\n        mode,\n        s1: [s1.x, s1.y].join(),\n        s0,\n        s00,\n        error\n      });\n      if (mode != \"relative%\" && error) break outer;\n    }\n  }\n  // @ts-ignore a\n\n  static encodeCoords(size0, edgePointCoordMode, sp, ep) /*absolute*/{\n    let size = size0;\n    if (edgePointCoordMode === size.currentCoordType || !size.currentCoordType && edgePointCoordMode === CoordinateMode.absolute) return size;\n    if (size.currentCoordType && size.currentCoordType !== CoordinateMode.absolute) size = LEdgePoint.decodeCoords(size, sp, ep);\n    let ret = \"w\" in size || \"h\" in size ? new GraphSize() : new GraphPoint(); // GObject<Partial<GraphSize>>;\n    switch (edgePointCoordMode) {\n      default:\n        return Log.exDevv(\"translatePosCoords() invalid coordinate mode\", {\n          mode: edgePointCoordMode\n        });\n      // case CoordinateMode.absolute: return size;\n      case CoordinateMode.relativePercent:\n        // let s = this.getBasicSize(c);\n        // MATH:\n        // size.x = sp.x*x% + ep.x*(1-x%)\n        // size.x = sp.x*x% + ep.x - ep.x*x%\n        // size.x - ep.x= (sp.x - ep.x)*x%\n        // (size.x - ep.x) / (sp.x - ep.x) = x% // actually i inverted <sp, ep> in first equation, so reverse them in result too.\n\n        if (sp.x === ep.x) ret.x = 0.5; // because otherwise it is infinity. so i force him to return in line.\n        else if (size.x !== undefined) ret.x = (size.x - sp.x) / (ep.x - sp.x);\n        if (sp.y === ep.y) ret.y = 0.5;else if (size.y !== undefined) ret.y = (size.y - sp.y) / (ep.y - sp.y);\n        break;\n      case CoordinateMode.relativeOffset:\n      case CoordinateMode.relativeOffsetStart:\n      case CoordinateMode.relativeOffsetEnd:\n        let useStart;\n        let useEnd;\n        switch (edgePointCoordMode) {\n          default:\n          case CoordinateMode.relativeOffset:\n            useStart = true;\n            useEnd = true;\n            break;\n          case CoordinateMode.relativeOffsetStart:\n            useStart = true;\n            useEnd = false;\n            break;\n          case CoordinateMode.relativeOffsetEnd:\n            useStart = false;\n            useEnd = true;\n            break;\n        }\n        if (size.x) ret.x = [useStart ? size.x - sp.x : -1, useEnd ? size.x - ep.x : -1];\n        if (size.y) ret.y = [useStart ? size.y - sp.y : -1, useEnd ? size.y - ep.y : -1];\n        /*\r\n        if (size.x) ret.x = [sp.x - size.x, ep.x - size.x];\r\n        if (size.y) ret.y = [sp.y - size.y, ep.y - size.y];*/\n        break;\n    }\n    if (size.x === undefined) delete ret.x;\n    if (size.y === undefined) delete ret.y;\n    if (size.w === undefined) delete ret.w;else ret.w = size.w;\n    if (size.h === undefined) delete ret.h;else ret.h = size.h;\n    // console.log(\"encode coorde\", {size, sp, ep, ret});\n    ret.currentCoordType = edgePointCoordMode;\n    return ret;\n  }\n  encodePosCoords(c, size0, view, sp0, ep0, mode) {\n    if (!view) view = this.get_view(c);\n    let size = size0;\n    let edgePointCoordMode = mode || (view.__raw || view).edgePointCoordMode;\n    let le = c && c.proxyObject.father;\n    let sp = sp0 || le.startPoint;\n    let ep = ep0 || le.endPoint;\n    return LEdgePoint.encodeCoords(size, edgePointCoordMode, sp, ep);\n  }\n\n  /* 13/10/2023 Giordano comment (defined in LPointerTargetable\r\n  public get_delete(context: Context): () => void {\r\n      // careful: pointedBy might be broken due to comment x984 (search it)\r\n      return super.get_delete(context);\r\n  }\r\n  */\n}, _class16.subclasses = [], _class16._extends = [], _class16)) || _class15);\nRuntimeAccessibleClass.set_extend(DVoidVertex, DEdgePoint);\nRuntimeAccessibleClass.set_extend(LVoidVertex, LEdgePoint);\nexport let DVertex = (_dec9 = RuntimeAccessible('DVertex'), _dec9(_class17 = (_class18 = class DVertex extends DGraphElement {\n  constructor() {\n    super(...arguments);\n    this.id = void 0;\n    this.graph = void 0;\n    this.model = void 0;\n    this.isSelected = void 0;\n    this.subElements = void 0;\n    this.zoom = void 0;\n    this.x = void 0;\n    this.y = void 0;\n    this.w = void 0;\n    this.h = void 0;\n    this.isResized = void 0;\n    this.__isDVertex = void 0;\n  } // DVoidVertex\n  // static _super = DVoidVertex;\n  // static singleton: LVertex;\n  // static logic: typeof LVertex;\n  // static structure: typeof DVertex;\n  // inherit redefine\n  // containedIn!: Pointer<DGraphElement, 0, 1, LGraphElement>;\n  // size!: GraphSize; // virtual, gets extracted from this. x and y are stored directly here as it extends GraphSize\n  // personal attributes\n  static new(htmlindex, model, parentNodeID, graphID, nodeID, size) {\n    return new Constructors(new DVertex('dwc'), parentNodeID, true, undefined, nodeID).DPointerTargetable().DGraphElement(model, graphID, htmlindex).DVoidVertex(size || defaultVertexSize).DVertex().end();\n  }\n}, _class18.subclasses = [], _class18._extends = [], _class18)) || _class17);\nexport let LVertex = (_dec10 = RuntimeAccessible('LVertex'), _dec10(_class19 = (_class20 = class LVertex extends LVoidVertex {\n  constructor() {\n    super(...arguments);\n    this.__raw = void 0;\n    this.id = void 0;\n    this.graph = void 0;\n    this.model = void 0;\n    this.subElements = void 0;\n    this.zoom = void 0;\n    this.x = void 0;\n    this.y = void 0;\n    this.w = void 0;\n    this.h = void 0;\n    this.size = void 0;\n    this.isResized = void 0;\n    this.__isLVertex = void 0;\n  } // static singleton: LVertex;\n  // static logic: typeof LVertex;\n  // static structure: typeof DVertex;\n  // inherit redefine\n  // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\n  isSelected(forUser) {\n    return this.wrongAccessMessage(\"node.isSelected()\");\n  }\n  // containedIn?: LGraphElement;\n\n  // virtual, gets extracted from this. x and y are stored directly here as it extends GraphSize\n\n  // personal attributes\n}, _class20.subclasses = [], _class20._extends = [], _class20)) || _class19);\nRuntimeAccessibleClass.set_extend(DGraphElement, DVertex);\nRuntimeAccessibleClass.set_extend(LGraphElement, LVertex);\nexport let DGraphVertex = (_dec11 = RuntimeAccessible('DGraphVertex'), Leaf(_class21 = _dec11(_class21 = (_class22 = class DGraphVertex extends DGraphElement {\n  constructor() {\n    super(...arguments);\n    this.id = void 0;\n    this.graph = void 0;\n    this.model = void 0;\n    this.isSelected = void 0;\n    this.subElements = void 0;\n    this.zoom = void 0;\n    this.offset = void 0;\n    this.x = void 0;\n    this.y = void 0;\n    this.w = void 0;\n    this.h = void 0;\n    this.isResized = void 0;\n    this.__isDVertex = void 0;\n    this.__isDGraph = void 0;\n    this.__isDGraphVertex = void 0;\n  } // MixOnlyFuncs(DGraph, DVertex)\n  // static _super1 = DGraph;\n  // static _super2 = DVertex;\n  // static singleton: LGraphVertex;\n  // static logic: typeof LGraphVertex;\n  // static structure: typeof DGraphVertex;\n  // inherit redefine\n  // containedIn!: Pointer<DGraphElement, 0, 1, LGraphElement>;\n  // from graph\n  // in-graph scrolling position\n  // from VoidVertex\n  // size!: GraphSize; // virtual\n  // from graph\n  // personal attributes\n  static new(htmlindex, model, parentNodeID, graphID, nodeID, size) {\n    return new Constructors(new DGraphVertex('dwc'), parentNodeID, true, undefined, nodeID).DPointerTargetable().DGraphElement(model, graphID, htmlindex).DVoidVertex(size || defaultVertexSize).DVertex().DGraph().end();\n  }\n\n  /*\r\n      static init_constructor(thiss: DGraphVertex, isUser: boolean = false, nodeID: string | undefined, graphID: string | undefined, model: Pointer<DModel>): void {\r\n          DGraph.init_constructor(thiss, isUser, nodeID, graphID, model);\r\n  //isUser: boolean = false, nodeID: string | undefined, graphID: string, model?: Pointer<DModel>\r\n          DVertex.init_constructor(thiss, isUser, nodeID, graphID as string, model);\r\n          thiss.className = this.name;\r\n      }*/\n}, _class22.subclasses = [], _class22._extends = [], _class22)) || _class21) || _class21);\nclass LG extends LGraph {}\nclass LV extends LVertex {}\nconst Mixed = MixOnlyFuncs(LG, LV);\nexport let LGraphVertex = (_dec12 = RuntimeAccessible('LGraphVertex'), _dec12(_class23 = (_class24 = class LGraphVertex extends Mixed {\n  constructor() {\n    super(...arguments);\n    this.__raw = void 0;\n    this.id = void 0;\n    this.graph = void 0;\n    this.model = void 0;\n    this.zoom = void 0;\n    this.offset = void 0;\n    this.graphSize = void 0;\n    this.x = void 0;\n    this.y = void 0;\n    this.w = void 0;\n    this.h = void 0;\n    this.isResized = void 0;\n    this.size = void 0;\n    this.__isLVertex = void 0;\n    this.__isLGraph = void 0;\n    this.__isLGraphVertex = void 0;\n  } // MixOnlyFuncs(LGraph, LVertex)\n  // static singleton: LGraphVertex;\n  // static logic: typeof LGraphVertex;\n  // static structure: typeof DGraphVertex;\n  // inherit redefine\n  // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\n  isSelected(forUser) {\n    return this.wrongAccessMessage(\"node.isSelected()\");\n  }\n  // containedIn?: LGraphElement;\n  ///////////////////////////////////////// subElements!: LGraphElement[];\n  // from graph\n\n  // in-graph scrolling position\n  // internal size of the graph. can be huge even if the sub-graph is in a small window (scroll)\n\n  // from VoidVertex\n\n  // virtual\n\n  // personal attributes\n}, _class24.subclasses = [], _class24._extends = [], _class24)) || _class23);\nRuntimeAccessibleClass.set_extend(DGraph, DGraphVertex);\nRuntimeAccessibleClass.set_extend(DVertex, DGraphVertex);\nRuntimeAccessibleClass.set_extend(LGraph, LGraphVertex);\nRuntimeAccessibleClass.set_extend(LVertex, LGraphVertex);\nexport let DVoidEdge = (_dec13 = RuntimeAccessible('DVoidEdge'), _dec13(_class25 = (_class26 = class DVoidEdge extends DGraphElement {\n  constructor() {\n    super(...arguments);\n    this.id = void 0;\n    this.graph = void 0;\n    this.model = void 0;\n    this.isSelected = void 0;\n    this.subElements = void 0;\n    this.start = void 0;\n    this.end = void 0;\n    this.__isDVoidEdge = void 0;\n    this.midPoints = void 0;\n    this.midnodes = void 0;\n    this.longestLabel = void 0;\n    this.labels = void 0;\n    this.anchorStart = void 0;\n    this.anchorEnd = void 0;\n  } // static singleton: LVoidEdge;\n  // static logic: typeof LVoidEdge;\n  // static structure: typeof DVoidEdge;\n  // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\n  // containedIn!: Pointer<DGraphElement, 0, 1, LGraphElement>;\n  // personal attributes\n  // the logic part which instructs to generate the midnodes\n  // using subelements instead most of times\n  // endFollow!: boolean; they became derived attributes from static properties\n  // startFollow!: boolean;\n  static new(htmlindex, model, parentNodeID, graphID, nodeID, start, end, longestLabel, labels) {\n    return new Constructors(new DEdge('dwc'), parentNodeID, true, undefined, nodeID).DPointerTargetable().DGraphElement(model, graphID, htmlindex).DVoidEdge(start, end, longestLabel, labels).end();\n  }\n  static new2(model, parentNodeID, graphID, nodeID, start, end, setter) {\n    return new Constructors(new DEdge('dwc'), parentNodeID, true, undefined, nodeID).DPointerTargetable().DGraphElement(model, graphID).DVoidEdge(start, end).end(setter);\n  }\n}, _class26.subclasses = [], _class26._extends = [], _class26.isFollowingCoords = void 0, _class26)) || _class25);\n/*\r\n@RuntimeAccessible\r\nexport class MidPoint{\r\n    readonly id: string; // not really a pointer, it's not on store.\r\n    x?: number; y?: number;\r\n    readonly w?: number; // if it's modified it's not ever here (initial size) but on DEdgePoint that is a Node.\r\n    readonly h?: number;/*\r\n    constructor2(x: number=5, y: number=5, w: number=5, h: number=5) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.w = w;\r\n        this.h = h;\r\n    }* /\r\nconstructor(id: string, w: number=5, h: number=5) {\r\n    this.id = id;\r\n    this.w = w;\r\n    this.h = h;\r\n}\r\n}*/\nexport let EdgeSegment = (_dec14 = RuntimeAccessible('EdgeSegment'), _dec14(_class27 = class EdgeSegment {\n  //  a segment of the whole path\n  // m coefficient of the line between start and end.\n  // for head and tails: radian angle of the segment.\n  // for labels: it flips the angle when it's < PI/2 so the text is never upside down\n\n  /*constructor(label: PrimitiveType|undefined, length: number, startp: GraphPoint, endp: GraphPoint, start: LGraphElement, end: LGraphElement,\r\n              bezierpts: GraphPoint[], mid: LGraphElement[],\r\n              svgLetter: EdgeBendingMode, index: number, fillMode: MidNodeHandling) {\r\n      this.label = label;\r\n      this.length = length;\r\n      this.length = length;\r\n      this.startp = startp;\r\n      this.bezierp = bezierpts;\r\n      this.endp = endp;\r\n      this.start = start;\r\n      this.end = end;\r\n      this.mid = mid;\r\n  }*/\n  constructor(start, mid, end, svgLetter, gapMode, index, prevSegment) {\n    this.index = void 0;\n    this.prev = void 0;\n    this.start = void 0;\n    this.bezier = void 0;\n    this.end = void 0;\n    this.length = void 0;\n    this.d = void 0;\n    this.dpart = void 0;\n    this.m = void 0;\n    this.rad = void 0;\n    this.radLabels = void 0;\n    this.isLongest = void 0;\n    this.label = void 0;\n    this.svgLetter = void 0;\n    // console.log(\"segmentmaker:\", arguments, ((start.ge?.model as any)?.name)+\" ---> \" + ((end.ge?.model as any)?.name));\n    this.start = start;\n    this.bezier = mid;\n    this.end = end;\n    this.index = index;\n    this.prev = prevSegment;\n    //this.segments = segments;\n    // the idea: forbid all T and S or transform them in C, Q by calculating and manually adding their mirrored bezier pts\n    // if (svgLetter[1]) svgLetter = (svgLetter[0]) as any;\n    if (svgLetter === EdgeBendingMode.Bezier_QT) {\n      this.svgLetter = EdgeBendingMode.Bezier_QT[0];\n      // this.svgLetter = (index === 0 ? EdgeBendingMode.Bezier_QT[0] : EdgeBendingMode.Bezier_QT[1]) as any as EdgeBendingMode;\n      this.addBezierPoint();\n    } else if (svgLetter === EdgeBendingMode.Bezier_CS) {\n      this.svgLetter = EdgeBendingMode.Bezier_CS[0];\n      // this.svgLetter = (index === 0 ? EdgeBendingMode.Bezier_CS[0] : EdgeBendingMode.Bezier_CS[1]) as any as EdgeBendingMode;\n      this.addBezierPoint();\n    } else this.svgLetter = svgLetter;\n\n    // fix if amount of bezier pts is invalid for current letter\n    switch (this.svgLetter) {\n      case EdgeBendingMode.Line:\n      case EdgeBendingMode.Bezier_quadratic:\n        if (this.bezier.length >= 1) break;else this.svgLetter = EdgeBendingMode.Line;\n        break;\n      case EdgeBendingMode.Bezier_cubic:\n        if (this.bezier.length >= 2) break;else if (this.bezier.length >= 1) this.svgLetter = EdgeBendingMode.Bezier_quadratic;else this.svgLetter = EdgeBendingMode.Line;\n        break;\n      case EdgeBendingMode.Elliptical_arc:\n        if (this.bezier.length >= 3) break;else this.svgLetter = EdgeBendingMode.Line; // straight to end ignoring midpoints that are NOT coordinates when using elliptical arc.\n        break;\n      default:\n      //case EdgeBendingMode.Bezier_quadratic_mirrored as string:\n      //case EdgeBendingMode.Bezier_cubic_mirrored as string: // translated to Q or C by adding mirrored bezier points explicitly\n      case EdgeBendingMode.Bezier_QT:\n      case EdgeBendingMode.Bezier_CS:\n        // translated to Q or C by sending the right letter to each segment\n        Log.exDevv(\"this svg letter should not appear here\", this.svgLetter);\n        break;\n    }\n  }\n  addBezierPoint() {\n    let prev = this.prev;\n    if (!prev) return;\n    let prevedgemakerbezier = prev.bezier[prev.bezier.length - 1] || prev.start;\n    let mirroredBezier = {\n      ...prevedgemakerbezier,\n      pt: EdgeSegment.invertLastBezierPt(prevedgemakerbezier.pt, prev.end.pt),\n      uncutPt: EdgeSegment.invertLastBezierPt(prevedgemakerbezier.uncutPt, prev.end.uncutPt)\n    };\n    this.bezier = [mirroredBezier, ...this.bezier];\n    // always only 1 assumed pt both in cubic and quadratic.\n    // let next: this | undefined = this.segments[this.index+1];\n    // EdgeSegment.invertLastBezierPt((next.mid[1] || next.end).pt, next.start.pt);\n  }\n  makeD(index, gapMode) {\n    this.m = GraphPoint.getM(this.start.pt, this.end.pt);\n    this.rad = Geom.mToRad(this.m, this.start.pt, this.end.pt);\n    this.radLabels = Math.atan(this.m);\n    let svgLetter = this.svgLetter; // caller makes sure to pass right letter and resolve \"CS\" mixed letters. // this.bendingModeToLetter(bendingMode, index);\n    // caller sends inverted pts as normal coords\n    // let invertedBezPt = lastSegment && EdgeSegment.invertLastBezierPt(lastSegment.midp[lastSegment.mid.length-1] || lastSegment.startp, lastSegment.endp);\n    switch (this.svgLetter.length) {\n      case 2:\n        return Log.exDevv(\"mixed letters are not allowed and should have been resolved to single svg letters before here, found:\" + svgLetter);\n      /*return Log.exDevv(\"dev problem to fix:\\n\" +\r\n      \"the mirrored mode requires the first one to have explicit non-mirrored mode?? like M, C a1 a2 a3, S a1, S a1, S a1\\n\" +\r\n      \"So all segments with mixed modes needs to extract the last bezier point (penultimate coordinate) from previous segments, mirror it and insert in midp[0]\");*/\n      case 1:\n        let bezierpts = [...this.bezier.map(b => b.pt), this.end.pt];\n        let finalpart = svgLetter + \" \" + bezierpts.map(p => p.x + \" \" + p.y).join(\", \");\n        this.dpart = \"M \" + this.start.pt.x + \" \" + this.start.pt.y + \", \" + finalpart;\n        let bezierptsUncut = [...this.bezier.map(b => b.uncutPt), this.end.pt]; // uncutPt exist for start and end too, but i want to use the cut one for those. or edgehead is off\n        let finalpartUncut = svgLetter + \" \" + bezierptsUncut.map(p => p.x + \" \" + p.y).join(\", \");\n        this.d = (index === 0 ? \"M\" + this.start.pt.x + \" \" + this.start.pt.y + \", \" : \"\") + finalpartUncut;\n\n        //midp = [this.startp, ...this.midp];\n        // d = M sp X mp2 ep // X = custom letter\n        // dpart = T sp X mp2 ep // S = S if X = C,\n        // sp is the startingpoint from the prev node, which might be != from endpoint of last node if last node have w>0 && h>0\n        // so i'm \"filling\" the gap with a T, or L arc wich can use only 1 parameter (they are the only 1-parameter arcs)\n        // if (this.prev && this.prev.end.pt.equals(this.start.pt)) gapMode = EdgeGapMode.average; // if the 2 points coincide, i use any 1 of the gapmodes that are continuous\n        /*switch (gapMode){\r\n            case EdgeGapMode.center:\r\n            case EdgeGapMode.average:\r\n                // continuous gap modes. they only differ in how the \"joining\" point is found, but not in how they behave after that.\r\n                /*\r\n                if (index === 0) {\r\n                     startletter = \"M \";\r\n                 }\r\n                 else {\r\n                     switch (svgLetter) {\r\n                         case SvgLetter.A: case SvgLetter.C: case SvgLetter.S: case SvgLetter.Q: case SvgLetter.T: default:\r\n                             startletter = SvgLetter.T + \" \"; break;\r\n                         case SvgLetter.L: case SvgLetter.M:\r\n                             startletter = SvgLetter.L + \" \"; break;\r\n                     }\r\n                 }* /\r\n                if (index) {\r\n                    this.d = finalpart;\r\n                }\r\n                else { this.d = this.dpart; }\r\n                break;\r\n            case EdgeGapMode.gap:\r\n            case EdgeGapMode.autoFill:\r\n            case EdgeGapMode.lineFill:\r\n            case EdgeGapMode.arcFill:\r\n                // the filling itself is done by another segment (solving svg letter and simulating i=0), so i treat it as a gap.\r\n                this.d = this.dpart;\r\n                break;\r\n            default:\r\n                Log.exDevv(\"unexpected EdgeGapMode:\" + gapMode, {gapMode});\r\n        }*/\n        break;\n      default:\n        return Log.exDevv(\"unexpected bending mode length:\" + this.svgLetter + \" or fillMode: \" + gapMode, {\n          bendingMode: this.svgLetter,\n          index,\n          gapMode\n        });\n    }\n\n    //using\n    /*\r\n    88\r\n      // d should not have M set (except for segments[0]\r\n    // dpart have M abd beed to add explicit points for \"mirroring\" and transforming bezier quadratic mirrored in bezier quadratic normal etc.\r\n    //88 problem: the mirrored mode requires the first one to have explicit nonmirrored mode?? like M, C a1 a2 a3, S a1, S a1, S a1 .... ?\r\n    in any case the % letter part is wrong because it needs to subtract first element used for M*/\n    return this.d;\n  }\n  static invertLastBezierPt(bezier, end) {\n    // vector = bezier - end\n    // end + vector = bezier\n    // end - vector = inverted bezier? = 2*end-bezier\n    let vector = bezier.subtract(end, true);\n    return end.subtract(vector, true);\n  }\n  calcLength() {\n    this.length = this.start.pt.distanceFromPoint(this.end.pt);\n  }\n}) || _class27);\nexport class EdgeFillSegment extends EdgeSegment {\n  makeD(index, gapMode) {\n    // if (gapMode === EdgeGapMode.autoFill) { gapMode = this.svgLetter === EdgeBendingMode.Line ? EdgeGapMode.lineFill : EdgeGapMode.arcFill; }\n    switch (gapMode) {\n      case \"closest\": // EdgeGapMode.closest:\n      case EdgeGapMode.center:\n      case EdgeGapMode.average:\n      case EdgeGapMode.gap:\n        return \"\";\n      // should not have filler arcs\n      default:\n        /*\r\n        case EdgeGapMode.autoFill as any:\r\n        case EdgeGapMode.lineFill:\r\n        this.bezier = [];\r\n        this.svgLetter = EdgeBendingMode.Line;\r\n        return super.makeD(index, gapMode);\r\n        case EdgeGapMode.arcFill:*/\n        this.svgLetter = this.svgLetter[0];\n        if (this.svgLetter === \"Q\") this.bezier = this.bezier.length ? [this.bezier[0]] : [];\n        return super.makeD(index, gapMode);\n    }\n  }\n}\nEdgeFillSegment.cname = \"EdgeFillSegment\";\nexport let LVoidEdge = (_dec15 = RuntimeAccessible('LVoidEdge'), _dec15(_class29 = (_class30 = class LVoidEdge extends LGraphElement {\n  constructor() {\n    super(...arguments);\n    this.__raw = void 0;\n    this.id = void 0;\n    this.graph = void 0;\n    this.model = void 0;\n    this.subElements = void 0;\n    this.start = void 0;\n    this.end = void 0;\n    this.__isLVoidEdge = void 0;\n    this.midPoints = void 0;\n    this.midnodes = void 0;\n    this.edge = void 0;\n    this.__info_of__edge = {\n      type: \"?LEdge\",\n      txt: \"returns this if called on an edge, the containing edge if called on an EdgePoint, undefined otherwise.\"\n    };\n    this.label = void 0;\n    this.longestLabel = void 0;\n    this.labels = void 0;\n    this.allNodes = void 0;\n    this.__info_of__longestLabel = {\n      label: \"Longest label\",\n      type: \"function(edge)=>string | string\",\n      readType: \"PrimitiveType\",\n      writeType: \"PrimitiveType | (e:this, curr: LGraphElement, next: LGraphElement, curr_index: number, allNodes: LGraphElement[]) => PrimitiveType)\",\n      txt: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Label assigned to the longest path segment.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1664,\n        columnNumber: 14\n      }, this)\n    };\n    this.__info_of__label = {\n      type: \"\",\n      txt: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Alias for longestLabel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1665,\n        columnNumber: 46\n      }, this)\n    };\n    this.__info_of__labels = {\n      label: \"Multiple labels\",\n      type: \"function(edge)=>string | string\",\n      writeType: \"type of label or Array<type of label>\",\n      txt: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Instructions to label to multiple or all path segments in an edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1668,\n        columnNumber: 14\n      }, this)\n    };\n    this.__info_of__allNodes = {\n      type: \"[LGraphElement, ...Array<LEdgePoint>, LGraphElement]\",\n      txt: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"first element is this.start. then all this.midnodes. this.end as last element\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1669,\n        columnNumber: 101\n      }, this)\n    };\n    this.__info_of__startPoint = {\n      type: \"GraphPoint\",\n      txt: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"startPoint of this.start (element originating the edge). Defaults in outer coordinates.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1807,\n        columnNumber: 60\n      }, this)\n    };\n    this.__info_of__endPoint = {\n      type: \"GraphPoint\",\n      txt: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"endPoint of this.end (element originating the edge). Defaults in outer coordinates.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1808,\n        columnNumber: 58\n      }, this)\n    };\n    this.segments = void 0;\n    this.segments_inner = void 0;\n    this.segments_outer = void 0;\n    this.__info_of__segments = {\n      type: \"{all:T, segments:T, fillers:T, head: GraphSize&{rad:number}, tail: as head} where T is EdgeSegment\",\n      txt: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Collection of segments connecting in order vertex and EdgePoint without intersecting their area, aimed to be rendered in svg path.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1828,\n          columnNumber: 13\n        }, this), \"fillers are arcs generated by view.edgeGapMode being autofill, arcfill or linefill.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1829,\n          columnNumber: 13\n        }, this), \"length of this.segments array is Math.ceil(allNodes.length / svg_letter_size) specified on view.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1830,\n          columnNumber: 13\n        }, this), \"\\\"head\\\" and \\\"tail\\\" are the position and angle of eventual edge decorators. Refer to this.headPos documentation.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1827,\n        columnNumber: 13\n      }, this)\n    };\n    this.d = void 0;\n    this.__info_of__d = {\n      type: ShortAttribETypes.EString,\n      txt: \"the full suggested path of SVG path \\\"d\\\" attribute, merging all segments.\"\n    };\n    this.anchorStart = void 0;\n    this.anchorEnd = void 0;\n    this.__info_of__anchorStart = {\n      writeType: \"string | undefined\",\n      type: \"string\",\n      isEdge: true,\n      txt: \"The name of a node anchor where the edge should originate from.\"\n    };\n    this.__info_of__anchorEnd = {\n      writeType: \"string | undefined\",\n      type: \"string\",\n      isEdge: true,\n      txt: \"The name of a node anchor where the edge should point to.\"\n    };\n    this.endFollow = void 0;\n    this.startFollow = void 0;\n    this.__info_of__endFollow = {\n      writeType: \"boolean\",\n      readType: \"boolean\",\n      type: \"boolean\",\n      isEdge: true,\n      // type:\"read:(()=>void), write:boolean\", readType:\"(()=>void))\",\n      txt: \"makes the ending point of an edge follow the cursor, so it can be assigned to a new anchor or target.\"\n    };\n    this.__info_of__startFollow = {\n      writeType: \"boolean\",\n      readType: \"boolean\",\n      type: \"boolean\",\n      isEdge: true,\n      // type:\"read:(()=>void), write:boolean\", readType:\"(()=>void))\",\n      txt: \"makes the starting point of an edge follow the cursor, so it can be assigned to a new anchor or source.\"\n    };\n  } // static singleton: LVoidEdge;\n  // static logic: typeof LVoidEdge;\n  // static structure: typeof DVoidEdge;\n  // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\n  isSelected(forUser) {\n    return this.wrongAccessMessage(\"node.isSelected()\");\n  }\n  // containedIn?: LGraphElement;\n\n  // the logic part which instructs to generate the midnodes\n\n  // returns self. useful to get edge from edgePoints without triggering error if you are already on edge.\n\n  /*\r\n  replaced by startPoint\r\n      edgeStart!: GraphPoint;\r\n      edgeStart_inner!: GraphPoint;\r\n      edgeStart_outer!: GraphPoint;\r\n      __info_of__edgeStart: Info = {type: \"GraphPoint\", txt: \"Same as edgeStart_outer.\"}\r\n      __info_of__edgeStart_outer: Info = {type: \"GraphPoint\",\r\n       txt: \"Where the edge should start his path, in coordinates relative at the root Graph.\r\n       <br>Computed by combining the anchor offset option in View and the size of the starting node.\"}\r\n      __info_of__edgeStart_inner: Info = {type: \"GraphPoint\",\r\n       txt: \"Where the edge should start his path, in coordinates relative at the most nested Graph.\r\n       <br>Computed by combining the anchor offset option in View and the size of the starting node.\"}\r\n      edgeEnd!: GraphPoint;\r\n      edgeEnd_inner!: GraphPoint;\r\n      edgeEnd_outer!: GraphPoint;\r\n      __info_of__edgeEnd: Info = {type: \"GraphPoint\", txt: \"Same as edgeEnd_outer.\"}\r\n      __info_of__edgeEnd_outer: Info = {type: \"GraphPoint\",\r\n       txt: \"Where the edge should end his path, in coordinates relative at the root Graph.\r\n       <br>Computed by combining the anchor offset option in View and the size of the starting node.\"}\r\n      __info_of__edgeEnd_inner: Info = {type: \"GraphPoint\",\r\n       txt: \"Where the edge should end his path, in coordinates relative at the most nested Graph.\r\n       <br>Computed by combining the anchor offset option in View and the size of the starting node.\"}\r\n  */\n\n  // should never be read change their documentation in write only. their values is \"read\" in this.segments\n\n  get_label(c) {\n    return this.get_longestLabel(c);\n  }\n  set_label(val, c) {\n    return this.set_longestLabel(val, c);\n  }\n  get_longestLabel(c) {\n    return c.data.longestLabel;\n  }\n  set_longestLabel(val, c) {\n    SetFieldAction.new(c.data, \"longestLabel\", val);\n    return true;\n  }\n  get_labels(c) {\n    return c.data.labels;\n  }\n  set_labels(val, c) {\n    SetFieldAction.new(c.data, \"labels\", val);\n    return true;\n  }\n  headPos_impl(c, isHead, headSize0, segment0, zoom0) {\n    let segment = segment0 || this.get_segments(c).segments[0];\n    // let v: LViewElement = this.get_view(c);\n    let tmp = headSize0 || (isHead ? this.get_view(c).edgeHeadSize : this.get_view(c).edgeTailSize);\n    if (!tmp || tmp.x === 0 || tmp.y === 0) {\n      // head or tail missing\n      tmp = new GraphSize(0, 0, 0, 0);\n      tmp.rad = 0;\n      return tmp;\n    }\n    let zoom = zoom0 || this.get_graph(c).zoom;\n    let headPos = new GraphSize(0, 0, tmp.x, tmp.y); //.multiply({w:zoom.x, h:zoom.y});\n    let useBezierPoints = true;\n    let start, end;\n    let m;\n    if (useBezierPoints) {\n      if (isHead) {\n        start = segment.end.pt;\n        end = (segment.bezier[segment.bezier.length - 1] || segment.start).pt;\n      } else {\n        start = segment.start.pt;\n        end = (segment.bezier[0] || segment.end).pt;\n      }\n      m = GraphPoint.getM(start, end);\n    } else {\n      if (isHead) {\n        start = segment.end.pt;\n        end = segment.start.pt;\n      } else {\n        start = segment.start.pt;\n        end = segment.end.pt;\n      }\n      m = segment.m;\n    }\n    // first find the center of where it should be positioned\n    // let center: GraphPoint;\n    // let distance: number = Math.sqrt(headPos.w*headPos.w + headPos.h*headPos.h);\n    // let isVertical = m >=1 ;\n    let x4headsize = new GraphSize(start.x - headPos.w, start.y - headPos.h, headPos.w * 2, headPos.h * 2);\n    // first intersection is segment origin. second is found with the box containing all possible edgeHead positions that touch the startPoint\n    // (doing x4 his shape and placing 4 \"rectangles\" all around startPoint) to cover all possible segment directions.\n    // or finding first direction (vertical if m >1, horizontal if m<0) and vector direction and intersecting with only the \"correct\" placed edgeHead rectangle.\n    // then the intersection will likely not fall on the extreme angle of EdgeHead and i can re-center edgeHead\n    // so that first and second intersections are equal spaced with the center segment\n    let secondIntersection;\n    let segmentDistance = start.distanceFromPoint(end);\n    if (segmentDistance <= Math.sqrt(headPos.w ** 2 + headPos.h ** 2)) {\n      let safeDistance = Math.max(headPos.w, headPos.h) * 5;\n      end = new GraphPoint(end.y + safeDistance, end.y + m * safeDistance); // move the point away so it doesn't intersect anymore. i just need direction\n      // too small to fit edgeHead, i simply put it centered on the whole segment\n      // secondIntersection = end;\n    }\n    secondIntersection = GraphSize.closestIntersection(x4headsize, start, end, undefined);\n    if (!secondIntersection) return Log.exx(\"failed to intersect edge head\", {\n      x4headsize,\n      segment,\n      headPos,\n      c,\n      start,\n      end,\n      useBezierPoints\n    });\n    tmp = secondIntersection.add(start, false).divide(2); // center of edgehead\n    headPos.x = tmp.x - headPos.w / 2; // tl corner\n    headPos.y = tmp.y - headPos.h / 2; // tl corner\n    headPos.rad = Geom.mToRad(m, start, end);\n    /*\r\n    devo trovare la distanza tra il centro dell'egeHead e il punto di inizio in termini assoluti, così tramite M trovo distanza in x e y. o trovarla in altro modo\r\n    if (segment.m === Number.POSITIVE_INFINITY || segment.m === Number.NEGATIVE_INFINITY) {\r\n        center = segment.start.pt.add({x:0, y: distance}, true); }\r\n    else { center = segment.start.pt.add({x:segment.m*headPos.w/2, y:segment.m*headPos.h/2\r\n     this is wrong, cannot be the same for x and y, i should invert the line equation for x?}, true); }\r\n    headPos.x = center.x - headPos.w / 2;\r\n    headPos.y = center.y - headPos.h / 2;*/\n    // console.log(\"head intersected\", {headPos, secondIntersection, x4headsize, segment, c, start, end, useBezierPoints});\n\n    return headPos;\n  }\n  headPos(headSize0, segment0, zoom0) {\n    return this.wrongAccessMessage(\"This is not headPos() implementation. it is just for typings. use the getter\");\n  }\n  tailPos(headSize0, segment0, zoom0) {\n    return this.wrongAccessMessage(\"This is not tailPos() implementation. it is just for typings. use the getter\");\n  }\n  get_headPos(c) {\n    return (headSize, segment, zoom) => this.headPos_impl(c, true, headSize, segment, zoom);\n  }\n  get_tailPos(c) {\n    return (headSize, segment, zoom) => this.headPos_impl(c, false, headSize, segment, zoom);\n  }\n  get_allNodes(c) {\n    return [this.get_start(c), ...this.get_midnodes(c), this.get_end(c)];\n  }\n  get_edge(c) {\n    return c.proxyObject;\n  }\n  set_edge(v, c) {\n    return this.cannotSet(\"edge field, on an edge element\");\n  }\n  get_midPoints(c) {\n    return c.data.midPoints;\n  }\n  addMidPoint(v) {\n    return this.wrongAccessMessage(\"addMidPoint\");\n  }\n  get_addMidPoint(c) {\n    return v => this.impl_addMidPoints(v, c);\n  }\n  set_midPoints(val, c) {\n    return SetFieldAction.new(c.data.id, \"midPoints\", val, undefined, false);\n  }\n  impl_addMidPoints(val, c) {\n    return SetFieldAction.new(c.data.id, \"midPoints\", val, '+=', false);\n  }\n  get_label_impl(c, segment, nodes, segments) {\n    let key = segment.isLongest ? \"longestLabel\" : \"labels\"; // : keyof this\n    // if (isLongestSegment) return this.get_longestLabel_impl(d, l, nodes, index):\n    const d = c.data;\n    const l = c.proxyObject;\n    let labelmaker = d[key]; // orArr<PrimitiveType | JSX | function>\n    let labelmakerfunc = labelmaker;\n    // let lastSeg = segments[i-1];\n    switch (typeof labelmaker) {\n      //nb{}[]<>\n      case \"number\":\n      case \"undefined\":\n      case \"boolean\":\n      case \"string\":\n        return labelmaker;\n      // case \"function\": return nodes.map( (o, i) => d.labels(l, nodes, i)).slice(0, nodes.length-1);\n      case \"function\":\n        return labelmakerfunc(l, segment, nodes, segments);\n      default:\n        break;\n      case \"object\":\n        if (labelmaker === null) return null;\n        if (!Array.isArray(labelmaker)) break;\n        if (typeof labelmaker[0] === \"function\") return labelmaker[segment.index % labelmaker.length](l, segment, nodes, segments);\n        return labelmaker[segment.index % labelmaker.length];\n    }\n    Log.exx(\"edge labels invalid type, must be a primitive value, a function or an array of such.\", {\n      labelmaker,\n      key,\n      d\n    });\n    return undefined;\n  } /*\r\n    private get_label_impl_old(d: DVoidEdge, l: LVoidEdge, nodes:this[\"allNodes\"], index: number, longestlabelindex?: number): PrimitiveType {\r\n       if (d.longestLabel !== undefined && index === longestlabelindex) return this.get_longestLabel_impl(d, l, nodes, index);\r\n       switch (typeof d.labels) {//nb{}[]<>\r\n           case \"number\":\r\n           case \"undefined\":\r\n           case \"boolean\":\r\n           case \"string\": return d.labels;\r\n           // case \"function\": return nodes.map( (o, i) => d.labels(l, nodes, i)).slice(0, nodes.length-1);\r\n           case \"function\": return d.labels(l, nodes[index], nodes[index+1], index, nodes);\r\n           default: break;\r\n           case \"object\": if (!Array.isArray(d.labels)) break;\r\n           if (typeof d.labels[0] === \"function\") return (d.labels as any)[index % d.labels.length](l, nodes[index], nodes[index+1], index, nodes);\r\n           return (d.labels as PrimitiveType[])[index % d.labels.length];\r\n       }\r\n       Log.exx(\"edge labels invalid type, must be a primitive value, a function or an array of such.\", d.labels);\r\n    }*/\n\n  get_startPoint(context) {\n    return this.get_startPoint_Outer(context);\n  }\n  get_endPoint(context) {\n    return this.get_endPoint_Outer(context);\n  }\n  get_startPoint_Outer(c) {\n    // console.log(\"get_edgeStart_Outer\", {out:this.get_outerGraph(c), pos:this.get_startPoint_inner(c), inner:this.get_start(c).innerGraph});\n    return this.get_outerGraph(c).translateSize(this.get_startPoint_inner(c), this.get_start(c).innerGraph);\n  }\n  get_endPoint_Outer(c) {\n    // console.log(\"get_edgeEnd_Outer\", {out:this.get_outerGraph(c), pos:this.get_endPoint_inner(c), inner:this.get_end(c).innerGraph});\n    return this.get_outerGraph(c).translateSize(this.get_endPoint_inner(c), this.get_end(c).innerGraph);\n  }\n  get_startPoint_inner(c) {\n    return this.get_edgeStartEnd_inner(c, true);\n  }\n  get_endPoint_inner(c) {\n    return this.get_edgeStartEnd_inner(c, false);\n  }\n  get_edgeStartEnd_inner(c, isStart) {\n    return isStart ? this.get_start(c).startPoint : this.get_end(c).endPoint;\n  }\n  svgLetterSize(s) {\n    let addM = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let doublingMidPoints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let ret;\n    switch (s) {\n      default:\n        ret = Log.exDevv(\"unexpected svg path letter: \\\"\" + s + \"\\\"\", s);\n        break;\n      case EdgeBendingMode.Line:\n        //case EdgeBendingMode.Bezier_quadratic_mirrored:\n        ret = {\n          first: 1,\n          others: 1\n        };\n        break;\n      case EdgeBendingMode.Bezier_quadratic:\n        //case EdgeBendingMode.Bezier_cubic_mirrored:\n        ret = {\n          first: 2,\n          others: 2\n        };\n        break;\n      case EdgeBendingMode.Bezier_cubic:\n        ret = {\n          first: 3,\n          others: 3\n        };\n        break;\n      case EdgeBendingMode.Elliptical_arc:\n        ret = {\n          first: 4,\n          others: 4\n        };\n        break;\n      case EdgeBendingMode.Bezier_QT:\n        ret = {\n          first: 2,\n          others: 1\n        };\n        break;\n      case EdgeBendingMode.Bezier_CS:\n        ret = {\n          first: 3,\n          others: 2\n        };\n        break;\n    }\n\n    // account for the fact that every midpoint is listed twice: at anchor start and anchor end.\n    if (doublingMidPoints) {\n      // removing last point (first is already excluded because addM didn't trigger yet)\n      // , the remaining are midpoints to double. then i add it back\n      ret.first = (ret.first - 1) * 2 + 1;\n      ret.others = (ret.others - 1) * 2 + 1;\n    }\n\n    // account for the first M letter\n    //    (if the segment is not mode.gap or first, M coord still exist in segment but are ignored)\n    if (addM) {\n      ret.first += 1;\n      ret.others += 1;\n    }\n    return ret;\n  }\n  get_points_impl(allNodes, outer, c) {\n    function getAnchorOffset(size, offset, isPercentage) {\n      let $factor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 100;\n      if (!size) size = new GraphSize(0, 0, 0, 0);\n      // else if (!size.tl) size = new GraphSize(size.x, size.y, size.w, size.h);\n      if (isPercentage) offset = new GraphPoint(offset.x / $factor * size.w, offset.y / $factor * size.h);\n      return size.tl().add(offset, false);\n    }\n    const all = allNodes.flatMap((ge, i) => {\n      let dge = ge.__raw;\n      let base = {\n        view: ge.view,\n        size: outer ? ge.outerSize : ge.innerSize,\n        ge,\n        pt: null,\n        uncutPt: null\n      };\n      Log.exDev(typeof base.size !== \"object\", \"could not get node size:\", {\n        base,\n        c,\n        outer\n      });\n      let rets; // = base as any;\n      let rete; // = {...base} as any;\n      let debug = true;\n      if (debug) {\n        base.anchor_e = dge.anchors[c.data.anchorEnd || 0] || dge.anchors[Object.keys(dge.anchors)[0]];\n        base.anchor_s = dge.anchors[c.data.anchorStart || 0] || dge.anchors[Object.keys(dge.anchors)[0]];\n      }\n\n      // get endpoint, then startpoint (land on midnode, then depart from it)\n      if (i !== 0) {\n        rete = {\n          rete: true,\n          ...base\n        };\n        if (i === allNodes.length - 1) {\n          // get end anchor from node\n          let anchor = dge.anchors[c.data.anchorEnd || 0];\n          if (!anchor) anchor = dge.anchors[Object.keys(dge.anchors)[0]];\n          if (anchor) rete.pt = getAnchorOffset(rete.size, anchor, true, 1);\n        }\n        // if no anchor, treat the node as a midpoint\n        if (!rete.pt) {\n          // get ending point from midpoint\n          //rete.pt = (LEdgePoint.singleton as LEdgePoint).get_endPoint(undefined as any, rete.size, rete.view);\n          rete.pt = getAnchorOffset(rete.size, rete.view.edgeStartOffset, rete.view.edgeStartOffset_isPercentage);\n        }\n        rete.uncutPt = rete.pt;\n      }\n      if (i !== allNodes.length - 1) {\n        rets = {\n          rets: true,\n          ...base\n        };\n        if (i === 0) {\n          // get start anchor from node\n          let anchor = dge.anchors[c.data.anchorStart || 0];\n          if (!anchor) anchor = dge.anchors[Object.keys(dge.anchors)[0]];\n          if (anchor) rets.pt = getAnchorOffset(rets.size, anchor, true, 1);\n        }\n        if (!rets.pt) {\n          // rets starting point from midpoint\n          // rets.pt = (LEdgePoint.singleton as LEdgePoint).get_startPoint(undefined as any, rets.size, rets.view);\n          rets.pt = getAnchorOffset(rets.size, rets.view.edgeStartOffset, rets.view.edgeStartOffset_isPercentage);\n        }\n        rets.uncutPt = rets.pt;\n      }\n\n      // ret.pt = ge.startPoint\n      return rets && rete ? [rete, rets] : rets ? [rets] : [rete];\n    });\n    if (DVoidEdge.isFollowingCoords) {\n      if (c.data.id === LVoidEdge.endFollow) {\n        let seg = all[all.length - 1];\n        seg.pt = DVoidEdge.isFollowingCoords;\n        seg.size = new GraphSize(seg.pt.x, seg.pt.y, 0.01, 0.01);\n      }\n      if (c.data.id === LVoidEdge.startFollow) {\n        let seg = all[0];\n        seg.pt = DVoidEdge.isFollowingCoords;\n        seg.size = new GraphSize(seg.pt.x, seg.pt.y, 0.01, 0.01);\n      }\n    }\n    return all;\n  }\n  get_pointsDebug(c) {\n    return this.get_points_impl(this.get_allNodes(c), true, c);\n  }\n  get_points(allNodes) {\n    let outer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let c = arguments.length > 2 ? arguments[2] : undefined;\n    return this.get_points_impl(allNodes, outer, c);\n  }\n  get_points_outer(allNodes, c) {\n    return this.get_points_impl(allNodes, true, c);\n  }\n  get_points_inner(allNodes, c) {\n    return this.get_points_impl(allNodes, false, c);\n  }\n  get_d(c) {\n    return this.get_segments(c).all.map(s => s.d).join(\" \");\n  } /*\r\n    private get_fillingSegments(c: Context): Partial<this[\"segments\"]> {\r\n       return this.get_segments(c).fillers;\r\n    }*/\n\n  get_segments(c) {\n    return this.get_segments_outer(c);\n  }\n  get_segments_outer(c) {\n    return this.get_segments_impl(c, true);\n  }\n  get_segments_inner(c) {\n    return this.get_segments_impl(c, false);\n  }\n  get_segments_impl(c, outer) {\n    let l = c.proxyObject;\n    let v = this.get_view(c);\n    let allNodes = l.allNodes;\n    windoww.edge = l;\n    let all = this.get_points(allNodes, outer, c);\n    //const all: {size: GraphSize, view: LViewElement, ge: LGraphElement}[] = allNodes.map((ge) => { return { view: ge.view, size: ge.size, ge}});\n    let ret = [];\n    let bm = v.bendingMode;\n    let gapMode = v.edgeGapMode;\n    let segmentSize = this.svgLetterSize(bm, false, true);\n    let increase = segmentSize.first;\n    let segment;\n    /// grouping points according to SvgLetter\n    for (let i = 0; i < all.length - 1;) {\n      // let start = all[i], end = all[i+increase];\n      let start = all[i];\n      let endindex = i + increase < all.length - 1 ? i + increase : all.length - 1;\n      let mid = all.slice(i + 1, endindex).filter((e, i) => i % 2 === 0);\n      let end = all[endindex];\n      // makes sure the edge actually reaches his target even if there is an invalid amount of midnodes fot the current EdgeBendingMode\n      if (i === endindex && segment) start = segment.end;\n      // segment = this.get_segmentv3(start, mid, end, getSvgLetter(i), i, segment, all);\n      segment = new EdgeSegment(start, mid, end, bm, gapMode, i, segment);\n      // segment = this.get_segment(start.ge, start.size, start.view, end.ge, end.size, end.view, cut, v.bendingMode, mid, ret[ret.length -1], fillMode, segment);\n      ret.push(segment);\n      i += increase + 1; // because increase index is already inserted at the end of prev segment\n      if (increase !== segmentSize.others) increase = segmentSize.others;\n      // if (longestLabel !== undefined && longest < s.length) { longest = s.length; longestindex = i; } todo: move to after snapping to borders\n    }\n    function printablesegment(s) {\n      let r = {};\n      for (let k in s) {\n        var _v;\n        let v = s[k];\n        v = ((_v = v) === null || _v === void 0 ? void 0 : _v.__raw) || v;\n        if (typeof v === \"object\") r[k] = JSON.parse(JSON.stringify(v));else r[k] = v;\n      }\n      return r;\n    }\n    let fillSegments = [];\n    this.snapSegmentsToNodeBorders(c, v, ret, fillSegments);\n    let longestLabel = c.data.longestLabel;\n    this.setLabels(c, ret, allNodes);\n    // console.log(\"getSegments() labeled:\", {main:ret, fillSegments});\n    let rett = {\n      all: [...ret, ...fillSegments],\n      segments: ret,\n      fillers: fillSegments\n    };\n    /*switch(bm){\r\n        default: break;\r\n        case EdgeBendingMode.Bezier_QT:\r\n        case EdgeBendingMode.Bezier_CS:\r\n            rett.\r\n    }*/\n    for (let i = 0; i < rett.all.length; i++) {\n      let s = rett.all[i];\n      s.makeD(i, gapMode);\n    }\n    let zoom = new GraphPoint(1, 1);\n    rett.head = this.headPos_impl(c, true, v.edgeHeadSize, rett.segments[rett.segments.length - 1], zoom);\n    rett.tail = this.headPos_impl(c, false, v.edgeTailSize, rett.segments[0], zoom);\n    return rett;\n  }\n  setLabels(c, segments, allNodes) {\n    // find longest segment\n    let longestindex = -1;\n    let longest = 0;\n    for (let i = 0; i < segments.length; i++) {\n      let s = segments[i];\n      s.calcLength();\n      if (longest < s.length) {\n        longest = s.length;\n        longestindex = i;\n      }\n      s.isLongest = false;\n    }\n    if (longestindex >= 0) segments[longestindex].isLongest = true;\n    // apply labels\n    for (let s of segments) s.label = this.get_label_impl(c, s, allNodes, segments);\n  }\n  snapSegmentsToNodeBorders(c, v, ret, fillSegments) {\n    // snap segment start and end to a node border\n    let canCutStart = v.edgeStartStopAtBoundaries,\n      canCutEnd = v.edgeEndStopAtBoundaries;\n    let grid = undefined;\n    // let fillSegments: EdgeSegment[] = [];\n    let gapMode = v.edgeGapMode;\n    let bm = v.bendingMode;\n    let ci;\n    // cut i === 0 is cut regardless of gapmode.\n    if (canCutStart) {\n      ci = GraphSize.closestIntersection(ret[0].start.size, ret[0].start.pt, (ret[0].bezier[0] || ret[0].end).pt, grid);\n      if (ci) ret[0].start.pt = ci;\n      /*\r\n      ret[0].start.pt =\r\n          GraphSize.closestIntersection(ret[0].start.size, ret[0].start.pt, (ret[0].bezier[0] || ret[0].end).pt, grid) as any\r\n          || Geom.closestPoint(ret[0].start.size, ret[0].start.pt);*/\n    }\n\n    // cut middle segments maybe\n    let prev;\n    let curr = ret[0];\n\n    // if (gapMode === EdgeGapMode.gap) return;\n    if (canCutStart || canCutEnd)\n      // do the for below\n      for (let i = 1; i < ret.length; i++) {\n        prev = ret[i - 1];\n        curr = ret[i];\n        let doStartCut, doEndCut;\n        switch (gapMode) {\n          /*\r\n          case EdgeGapMode.arcFill:\r\n          case EdgeGapMode.lineFill:\r\n          case EdgeGapMode.autoFill:\r\n          // same as gap, but will insert 1 more segment to fill the hole\r\n          doStartCut = true;\r\n          doEndCut = true;\r\n          if (prev.end.pt.equals(curr.start.pt)) break;\r\n          fillSegments.push(new EdgeFillSegment(\r\n          prev.end,\r\n          [\r\n          {...prev.end, pt: EdgeSegment.invertLastBezierPt(prev.end.pt, (prev.bezier[prev.bezier.length-1] || prev.start).pt)},\r\n          {...curr.start, pt: EdgeSegment.invertLastBezierPt(curr.start.pt, (curr.bezier[0] || curr.end).pt)}\r\n          ],\r\n          curr.start,\r\n          bm, gapMode, 0, undefined));\r\n          / *\r\n          fillSegments.push(new FillEdgeSegment( // M <start_gap> C <bez1> <bez2> <end_gap>\r\n          // <start_gap> = end of last seg (start of gap) <end_gap> = first of curr seg (end of gap)\r\n          prev.end.pt,\r\n          EdgeSegment.invertLastBezierPt(prev.end.pt, prev.bezier[prev.bezier.length-1].pt || prev.start.pt),\r\n          EdgeSegment.invertLastBezierPt(curr.start.pt, curr.bezier[0].pt || curr.end.pt),\r\n          curr.start.pt)* /\r\n          break;*/\n          case EdgeGapMode.gap:\n            // just snap to vertex edge         prevSegment.endp and ret.startp\n            doEndCut = true;\n            doStartCut = true;\n            break;\n          // average: todo: maybe rename in join (merges start-end at closest pt to both (avg), then snap on edge)\n          case \"closest\":\n            //EdgeGapMode.closest:\n            // does not work properly, i think i need to get next.end instead of curr.end, just disabled for now\n            let nextpt = (curr.bezier[0] || curr.end).pt;\n            let prevpt = (prev.bezier[prev.bezier.length - 1] || prev.start).pt;\n            let midexternalpt = prevpt.add(nextpt, true);\n            let midedgepoint = curr.start.size.tl().add(curr.start.size.br(), false).divide(2, false);\n            // od average between the 2 points before and after that are not part of this edgepoint, then raw a line from there to center of ep, find that intersection.\n            ci = GraphSize.closestIntersection(curr.start.size, midedgepoint, midexternalpt, grid);\n            doEndCut = doStartCut = false;\n            if (canCutEnd && ci) prev.end.pt = ci;\n            if (canCutStart && ci) curr.start.pt = ci;\n            break;\n          case EdgeGapMode.average:\n            // first move to average of the 2 points in the gap, then snap to edge\n            doEndCut = true;\n            doStartCut = true;\n            // indipendent from cutStart, cutEnd.\n            // they merge if just 1 of cutting sides are true. (and if they are both false we don't even enter the for loop)\n            curr.start.pt = curr.start.pt.add(prev.end.pt, false).divide(2, false);\n            prev.end.pt = curr.start.pt.duplicate(); // intentionally not the same pt because during snap to edge they can diverge again.\n            prev.start.uncutPt = prev.start.pt;\n            prev.end.uncutPt = prev.end.pt;\n            break;\n          // center: first move it to center of edgePoint/node, then snap to edge.\n          // this mode might be as well deleted, it can be specified with anchor points\n          case EdgeGapMode.center:\n            doEndCut = false;\n            doStartCut = false;\n            curr.start.pt = curr.start.size.tl().add(curr.start.size.br(), false).divide(2, false);\n            prev.end.pt = curr.start.pt.duplicate(); // intentionally not the same pt because during snap to edge they can diverge again.\n            prev.start.uncutPt = prev.start.pt; // only update them when point moves without being cut (average and center)\n            prev.end.uncutPt = prev.end.pt;\n            break;\n          default:\n            return Log.exDevv(\"unexpected EdgeGapMode:\" + gapMode);\n        }\n        if (canCutStart && doStartCut) {\n          let nextpt = (curr.bezier[0] || curr.end).pt;\n          ci = GraphSize.closestIntersection(curr.start.size, curr.start.pt, nextpt, grid);\n          if (ci) curr.start.pt = ci; // || Geom.closestPoint(curr.start.size, curr.start.pt);\n          //if (gapMode === EdgeGapMode.average && prev) { prev.end.pt = curr.start.pt.add(prev.end.pt, false).divide(2, false); }\n        }\n        if (canCutEnd && doEndCut && prev) {\n          let prevpt = (prev.bezier[prev.bezier.length - 1] || prev.start).pt;\n          ci = GraphSize.closestIntersection(prev.end.size, prev.end.pt, prevpt, grid);\n          if (ci) prev.end.pt = ci; // || Geom.closestPoint(prev.end.size, prev.end.pt);\n          // if average: first do average between start anchor points non-snapped. then i snap both,\n          // then i do average again, and since it might snap out, i get closestPoint to EdgePoint size\n          if (gapMode === EdgeGapMode.average) prev.end.pt = curr.start.pt = Geom.closestPoint(curr.start.size, curr.start.pt.add(prev.end.pt, false).divide(2, false));\n        }\n      }\n    // cut end of last segment regardless of gapMode\n    if (canCutEnd) {\n      let prevendpt = curr.end.pt;\n      ci = GraphSize.closestIntersection(curr.end.size, curr.end.pt, (curr.bezier[curr.bezier.length - 1] || curr.start).pt, grid);\n      if (ci) curr.end.pt = ci; //|| Geom.closestPoint(prev.end.size, prev.end.pt);\n    }\n  }\n  get_edgeEnd(context) {\n    return this.get_edgeEnd_outer(context);\n  }\n  get_edgeEnd_outer(c) {\n    // return this.get_outerGraph(c).translateSize(this.get_edgeEnd_inner(c), this.get_innerGraph(c));\n    return this.get_outerGraph(c).translateSize(this.get_edgeEnd_inner(c), this.get_end(c).innerGraph);\n  }\n  get_edgeEnd_inner(c) {\n    return this.get_edgeStartEnd_inner(c, false);\n    // return context.proxyObject.end?.size || new GraphPoint(0, 0);\n  }\n  get_midnodes(context) {\n    // return LPointerTargetable.wrapAll(context.data.midnodes);\n    return LPointerTargetable.wrapAll(context.data.subElements);\n  }\n  set_midnodes(val, context) {\n    return SetFieldAction.new(context.data.id, \"midnodes\", val, '', true);\n  }\n  get_start(context) {\n    return LPointerTargetable.from(context.data.start);\n  }\n  get_end(context) {\n    return LPointerTargetable.from(context.data.end);\n  }\n  get_endFollow(c) {\n    return c.data.id === LVoidEdge.endFollow;\n  }\n  get_startFollow(c) {\n    return c.data.id === LVoidEdge.startFollow;\n  }\n  // // what in multieditor? needs to be moved in transientstuff?\n  set_endFollow(val, c) {\n    return this._set_start_endFollow(val, c, false);\n  }\n  set_startFollow(val, c) {\n    return this._set_start_endFollow(val, c, true);\n  }\n  _set_start_endFollow(val, c, isStart) {\n    val = !!val;\n    console.log(\"_set_start_endFollow\", {\n      val,\n      c,\n      isStart\n    });\n    if (val) {\n      if (isStart) LVoidEdge.startFollow = c.data.id;else LVoidEdge.endFollow = c.data.id;\n      if (!LVoidEdge.following) {\n        console.log(\"_set_start_endFollow event attached\");\n        document.body.addEventListener(\"mousemove\", LVoidEdge.mousemove_pendingEdge, false);\n        document.body.addEventListener(\"keydown\", LVoidEdge.onKeyDown_pendingEdge, false);\n        LVoidEdge.following = true;\n        LVoidEdge.followingContext = c;\n        LVoidEdge.showAnchors();\n        windoww.Tooltip.show( /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Changing anchor, press \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Esc\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2204,\n            columnNumber: 88\n          }, this), \" to undo.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2204,\n          columnNumber: 60\n        }, this));\n\n        //let selector = \".Edge[nodeid='\" + (LVoidEdge.endFollow || LVoidEdge.startFollow as any)+\"']\";\n        // [...document.querySelectorAll(selector)].map(e=>e.classList.add(\"no-transition-following\")); gets refreshed by react\n        document.body.classList.add(\"no-transition-following\");\n      }\n    } else {\n      if (LVoidEdge.following && (isStart ? LVoidEdge.startFollow : LVoidEdge.endFollow) === c.data.id) {\n        document.body.removeEventListener(\"mousemove\", LVoidEdge.mousemove_pendingEdge, false);\n        document.body.removeEventListener(\"keydown\", LVoidEdge.onKeyDown_pendingEdge, false);\n        let selector = \".Edge[nodeid='\" + (LVoidEdge.endFollow || LVoidEdge.startFollow) + \"']\";\n        //[...document.querySelectorAll(selector)].map(e=>e.classList.remove(\"no-transition-following\"));\n        document.body.classList.remove(\"no-transition-following\");\n        if (isStart) LVoidEdge.startFollow = undefined;else LVoidEdge.endFollow = undefined;\n        LVoidEdge.following = false;\n        const $base = $(document.getElementById(isStart ? c.data.start : c.data.end) || []);\n        if (!$base.length) return true;\n        //const $deepAnchors = $base.find(\"[nodeid] .anchor\");\n        const $anchors = $base.find(\".anchor\"); //.not($deepAnchors);\n        $anchors.removeClass([\"valid-anchor\", \"active-anchor\"]);\n        $base[0].style.overflow = '';\n        windoww.Tooltip.hide();\n      }\n    }\n    //SetFieldAction.new(c.data, \"startFollow\", !!val, '', false);\n    return true;\n  }\n  static getCursorPos(e0) {\n    return new Point(e0.pageX, e0.pageY);\n  }\n  /*public static getGCursorPos(e0: Event): GraphPoint {\r\n      return LVLoidEdge.getCursorPos(e0).subtract(svgsize.tl(), true).multiply(svgzoom) as any as GraphPoint;\r\n  }*/\n  static onKeyDown_pendingEdge(e) {\n    if (e.key === Keystrokes.escape) {\n      const c = LVoidEdge.followingContext;\n      if (!c || !LVoidEdge.startFollow && !LVoidEdge.endFollow) return;\n      let isStart = LVoidEdge.startFollow ? true : false;\n      let l = c.proxyObject;\n      if (isStart) l.startFollow = false;else l.endFollow = false;\n      // l.component?.forceUpdate(); does not work?\n      l.clonedCounter = (l.clonedCounter || 0) + 2;\n    }\n  }\n  static showAnchors() {\n    const c = LVoidEdge.followingContext;\n    if (!c || !LVoidEdge.startFollow && !LVoidEdge.endFollow) return;\n    let isStart = LVoidEdge.startFollow ? true : false;\n    let nodeid = isStart ? c.data.start : c.data.end;\n    let activeAnchor = (isStart ? c.data.anchorStart : c.data.anchorEnd) || 0;\n    const $base = $(document.getElementById(nodeid) || []);\n    if (!$base.length) return;\n    const $deepAnchors = $base.find(\"[nodeid] .anchor\");\n    const $anchors = $base.find(\".anchor\").not($deepAnchors);\n    $anchors.addClass(\"valid-anchor\");\n    $anchors.filter('[data-anchorname=\"' + activeAnchor + '\"]').addClass(\"active-anchor\");\n    $base[0].style.overflow = \"visible\";\n  }\n  static mousemove_pendingEdge(e0) {\n    let forcererendermode = true;\n    if (forcererendermode) {\n      if (!LVoidEdge.following) return;\n      if (!LVoidEdge.canForceUpdate) return;\n      if (LVoidEdge.mousemovei++ % 30 === 0) LVoidEdge.showAnchors();\n      let c = LVoidEdge.followingContext;\n      let g = c.proxyObject.graph;\n      let cursorPos = LVoidEdge.getCursorPos(e0);\n      let gcursorpos = g.translateHtmlSize(cursorPos);\n      DVoidEdge.isFollowingCoords = gcursorpos;\n      let component = GraphElementComponent.map[LVoidEdge.startFollow || LVoidEdge.endFollow];\n      LVoidEdge.canForceUpdate = false;\n      let timer = setTimeout(() => {\n        LVoidEdge.canForceUpdate = true;\n      }, 5000);\n      let tn = transientProperties.node[c.data.id];\n      for (let vid in tn.viewScores) {\n        // required to truly force an update\n        let tnv = tn.viewScores[vid];\n        tnv.jsxOutput = undefined;\n        tnv.usageDeclarations = undefined;\n        tnv.shouldUpdate = true;\n      }\n      component.setState({\n        forceupdate: new Date().getDate()\n      }, () => {\n        LVoidEdge.canForceUpdate = true;\n        clearTimeout(timer);\n      });\n      // component.forceUpdate(()=>{LVoidEdge.canForceUpdate = true; clearTimeout(timer)});\n      return;\n    }\n    LVoidEdge.tmp++;\n    let selector = \".Edge[nodeid='\" + (LVoidEdge.endFollow || LVoidEdge.startFollow) + \"']\";\n    let root = document.querySelector(selector);\n    if (!root) return;\n    let paths = [...root.querySelectorAll(\"path.full\")];\n    let pathSegments = root.querySelectorAll(\"path.segment.preview\");\n    // if (!paths.length) paths = pathSegments;\n    let pathSegmentContainers = [...new Set([...pathSegments].map(e => e.parentElement))];\n    for (let container of pathSegmentContainers) {\n      let se = [...container.querySelectorAll(\"path.segment.preview\")];\n      paths.push(se[LVoidEdge.endFollow ? se.length - 1 : 0]);\n    }\n    let headTail = [...root.querySelectorAll(LVoidEdge.endFollow ? '.edgeHead' : '.edgeTail')];\n    let cursorPos = LVoidEdge.getCursorPos(e0);\n    let segList;\n    for (let p of paths) {\n      let svg = U.parentUntil(\"svg\", p);\n      let svgsize = Size.of(svg);\n      let svgzoom = new Point(1, 1); // todo: check viewbox and css zoom\n      let gcursorPos = cursorPos.subtract(svgsize.tl(), true).multiply(svgzoom);\n      segList = [...p.getPathData()];\n      let lastSeg = {\n        ...segList[LVoidEdge.endFollow ? segList.length - 1 : 0]\n      };\n      switch (lastSeg.type) {\n        case 'a':\n        case 'A':\n          segList.push('fake new segment to get replaced instead of actual last segment which is A');\n          lastSeg.type = \"L\";\n          lastSeg.values = [gcursorPos.x, gcursorPos.y];\n          break;\n        case \"C\":\n        case \"c\": // bezier curves, keep type just change last point\n        case \"Q\":\n        case \"q\":\n        case \"S\":\n        case \"s\":\n        case \"T\":\n        case \"t\":\n          lastSeg.values[lastSeg.values.length - 2] = gcursorPos.x;\n          lastSeg.values[lastSeg.values.length - 1] = gcursorPos.y;\n          break;\n        case \"M\":\n        case \"m\":\n          lastSeg.type = LVoidEdge.endFollow ? \"L\" : \"M\";\n          lastSeg.values = [gcursorPos.x, gcursorPos.y];\n          break;\n        case \"V\":\n        case \"v\": // stuff forced to become a line\n        case \"H\":\n        case \"h\":\n        case \"L\":\n        case \"l\":\n        case \"Z\":\n        case \"z\":\n          lastSeg.type = \"L\";\n          lastSeg.values = [gcursorPos.x, gcursorPos.y];\n          break;\n      }\n      segList[LVoidEdge.endFollow ? segList.length - 1 : 0] = lastSeg;\n      if (LVoidEdge.tmp % 20 === 0) console.log(\"svg set path data,\", {\n        segList,\n        oldSeglist: p.getPathData(),\n        p\n      });\n      p.setPathData(segList);\n    }\n    for (let ht of headTail) {\n      let svg = U.parentUntil(\"svg\", ht);\n      let svgsize = Size.of(svg);\n      let svgzoom = new Point(1, 1); // todo: check viewbox and css zoom\n      let gcursorPos = cursorPos.subtract(svgsize.tl(), true).multiply(svgzoom);\n      let rotation;\n      let lastPt = segList && segList[LVoidEdge.endFollow ? segList.length - 2 : 1].values;\n      if (lastPt) {\n        let m = gcursorPos.getM(new Point(lastPt[LVoidEdge.endFollow ? lastPt.length - 2 : 1], lastPt[LVoidEdge.endFollow ? lastPt.length - 1 : 0]));\n        if (Number.POSITIVE_INFINITY === m) rotation = Geom.degToRad(90);else if (Number.NEGATIVE_INFINITY === m) rotation = Geom.degToRad(270);else rotation = Math.atan(m);\n        if (lastPt[LVoidEdge.endFollow ? lastPt.length - 2 : 1] > gcursorPos.x) rotation -= Geom.degToRad(180);\n      } else {\n        rotation = 0;\n      }\n      let headSize = Size.of(ht);\n      let headPos = gcursorPos.subtract({\n        x: headSize.w / 2,\n        y: headSize.h / 2\n      }, true); //.subtract({x:Math.cos(rotation)*headSize.w/2, y: -Math.sin(rotation)*headSize.h/2}, true);\n\n      if (LVoidEdge.tmp % 20 === 0) console.log(\"_set_start_endFollow move head\", {\n        selector: LVoidEdge.endFollow ? '.edgeHead' : '.edgeTail',\n        headTail,\n        root\n      });\n      ht.style.transform = 'translate(' + headPos.x + \"px, \" + headPos.y + \"px) rotate(\" + rotation + \"rad)\";\n    }\n  }\n}, _class30.subclasses = [], _class30._extends = [], _class30.startFollow = undefined, _class30.endFollow = undefined, _class30.following = false, _class30.followingContext = void 0, _class30.tmp = 1, _class30.canForceUpdate = true, _class30.mousemovei = 0, _class30)) || _class29);\nRuntimeAccessibleClass.set_extend(DGraphElement, DVoidEdge);\nRuntimeAccessibleClass.set_extend(LGraphElement, LVoidEdge);\nexport let DEdge = (_dec16 = RuntimeAccessible('DEdge'), _dec16(_class31 = (_class32 = class DEdge extends DVoidEdge {\n  constructor() {\n    super(...arguments);\n    this.id = void 0;\n    this.graph = void 0;\n    this.model = void 0;\n    this.isSelected = void 0;\n    this.subElements = void 0;\n    this.state = void 0;\n    this.start = void 0;\n    this.end = void 0;\n    this.__isDEdge = void 0;\n    this.__isDVoidEdge = void 0;\n    this.midnodes = void 0;\n  } // DVoidEdge\n  // static singleton: LGraphElement;\n  // static logic: typeof LGraphElement;\n  // static structure: typeof DGraphElement;\n  // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\n  // containedIn!: Pointer<DGraphElement, 0, 1, LGraphElement>;\n}, _class32.subclasses = [], _class32._extends = [], _class32)) || _class31);\nexport let LEdge = (_dec17 = RuntimeAccessible('LEdge'), _dec17(_class33 = (_class34 = class LEdge extends LVoidEdge {\n  constructor() {\n    super(...arguments);\n    this.__raw = void 0;\n    this.id = void 0;\n    this.graph = void 0;\n    this.model = void 0;\n    this.subElements = void 0;\n    this._state = void 0;\n    this.start = void 0;\n    this.end = void 0;\n    this.midnodes = void 0;\n    this.__isLEdge = void 0;\n    this.__isLVoidEdge = void 0;\n  } // static singleton: LGraphElement;\n  // static logic: typeof LGraphElement;\n  // static structure: typeof DGraphElement;\n  // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\n  isSelected(forUser) {\n    return this.wrongAccessMessage(\"node.isSelected()\");\n  }\n  // containedIn!: LGraphElement;\n\n  // LMap;\n}, _class34.subclasses = [], _class34._extends = [], _class34)) || _class33);\nRuntimeAccessibleClass.set_extend(DVoidEdge, DEdge);\nRuntimeAccessibleClass.set_extend(LVoidEdge, LEdge);\nexport let DExtEdge = (_dec18 = RuntimeAccessible('DExtEdge'), Leaf(_class35 = _dec18(_class35 = (_class36 = class DExtEdge extends DEdge {\n  constructor() {\n    super(...arguments);\n    this.id = void 0;\n    this.graph = void 0;\n    this.model = void 0;\n    this.isSelected = void 0;\n    this.subElements = void 0;\n    this.state = void 0;\n    this.start = void 0;\n    this.end = void 0;\n    this.__isDExtEdge = void 0;\n    this.__isDEdge = void 0;\n    this.__isDVoidEdge = void 0;\n  } // etends DEdge\n  // static singleton: LGraphElement;\n  // static logic: typeof LGraphElement;\n  // static structure: typeof DGraphElement;\n  // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\n  // containedIn!: Pointer<DGraphElement, 0, 1, LGraphElement>;\n  /*\r\n      public static new(model: DGraph[\"model\"], parentNodeID: DGraphElement[\"father\"], graphID: DGraphElement[\"graph\"], nodeID?: DGraphElement[\"id\"], size?: GraphSize): DExtEdge {\r\n          return new Constructors(new DExtEdge('dwc')).DPointerTargetable().DGraphElement(model, parentNodeID, graphID, nodeID)\r\n              .DVoidEdge().DEdge().DExtEdge().end();\r\n      }*/\n}, _class36.subclasses = [], _class36._extends = [], _class36)) || _class35) || _class35);\nexport let LExtEdge = (_dec19 = RuntimeAccessible('LExtEdge'), _dec19(_class37 = (_class38 = class LExtEdge extends LEdge {\n  constructor() {\n    super(...arguments);\n    this.__raw = void 0;\n    this.id = void 0;\n    this.graph = void 0;\n    this.model = void 0;\n    this.subElements = void 0;\n    this._state = void 0;\n    this.start = void 0;\n    this.end = void 0;\n    this.__isLExtEdge = void 0;\n    this.__isLEdge = void 0;\n    this.__isLVoidEdge = void 0;\n  } // static singleton: LGraphElement;\n  // static logic: typeof LGraphElement;\n  // static structure: typeof DGraphElement;\n  // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\n  isSelected(forUser) {\n    return this.wrongAccessMessage(\"node.isSelected()\");\n  }\n  // containedIn!: LGraphElement;\n\n  // LMap;\n}, _class38.subclasses = [], _class38._extends = [], _class38)) || _class37);\nRuntimeAccessibleClass.set_extend(DEdge, DExtEdge);\nRuntimeAccessibleClass.set_extend(LEdge, LExtEdge);\nexport let DRefEdge = (_dec20 = RuntimeAccessible('DRefEdge'), Leaf(_class39 = _dec20(_class39 = (_class40 = class DRefEdge extends DEdge {\n  constructor() {\n    super(...arguments);\n    this.start = void 0;\n    this.end = void 0;\n    this.isSelected = void 0;\n    this.__isDRefEdge = void 0;\n  } // extends DEdge\n  /*\r\n      public static new(model: DGraph[\"model\"], parentNodeID: DGraphElement[\"father\"], graphID: DGraphElement[\"graph\"], nodeID?: DGraphElement[\"id\"]): DRefEdge {\r\n          return new Constructors(new DRefEdge('dwc')).DPointerTargetable().DGraphElement(model, parentNodeID, graphID, nodeID)\r\n              .DVoidEdge().DEdge().DRefEdge().end();\r\n      }*/\n}, _class40.subclasses = [], _class40._extends = [], _class40)) || _class39) || _class39);\nexport let LRefEdge = (_dec21 = RuntimeAccessible('LRefEdge'), _dec21(_class41 = (_class42 = class LRefEdge extends LEdge {\n  constructor() {\n    super(...arguments);\n    this.start = void 0;\n    this.end = void 0;\n    this.__isLRefEdge = void 0;\n  } // __raw!: DRefEdge;\n}, _class42.subclasses = [], _class42._extends = [], _class42)) || _class41);\nRuntimeAccessibleClass.set_extend(DEdge, DRefEdge);\nRuntimeAccessibleClass.set_extend(LEdge, LRefEdge);\n// for edges without a modelling element\n\n/*\r\n\r\nlet a = `DExtEdge, DRefEdge, DVoidEdge, LGraphVertex, LRefEdge, LEdgePoint, DVoidVertex, DGraphVertex, DEdgePoint,\r\n DVertex, DEdge, LVertex, LGraph, DGraph, LVoidVertex, LVoidEdge, LEdge, LGraphElement, LExtEdge, DGraphElement`;\r\n  // // ... get from export in index.ts\r\na = a.replaceAll(',,', \",\")\r\nlet aa = a.split(\",\").map(a => a.trim().substring(1));\r\n\r\nfunction onlyUnique(value, index, self) { return self.indexOf(value) === index; }\r\n\r\naa = aa.filter(onlyUnique).filter( a=> !!a)\r\nlet r = aa.filter(onlyUnique).filter( a=> !!a).map( a=> `export type W${a} = getWParams<L${a}, D${a}>;`).join('\\n')\r\ndocument.body.innerText = r;\r\n*/\n\n// getWParams<LGraphVertex, DGraphVertex>;\n\nconsole.warn('ts loading graphDataElement');","map":{"version":3,"names":["isDeepStrictEqual","BEGIN","Constructors","CoordinateMode","Debug","DPointerTargetable","DUser","EdgeBendingMode","END","GraphElementComponent","GraphPoint","GraphSize","Keystrokes","Leaf","Log","LPointerTargetable","MixOnlyFuncs","Node","Point","Pointers","RuntimeAccessible","RuntimeAccessibleClass","SetFieldAction","ShortAttribETypes","Size","store","TargetableProxyHandler","transientProperties","U","Uarr","windoww","EdgeGapMode","Geom","jsxDEV","_jsxDEV","console","warn","DGraphElement","_dec","_class","_class2","constructor","arguments","id","graph","model","isSelected","subElements","state","father","x","y","zIndex","w","h","view","favoriteNode","edgesIn","edgesOut","anchors","new","htmlindex","parentNodeID","graphID","nodeID","a","b","undefined","end","subclasses","_extends","LGraphElement","_dec2","_class3","_class4","__raw","_state","allSubNodes","width","height","z","__info_of_z__","type","EInt","txt","__info_of_zIndex__","zoom","html","size","position","htmlSize","htmlPosition","component","vertex","__info__of__vertex","__info__of__favoriteNode","EBoolean","startPoint","endPoint","__info_of__startPoint","children","fileName","_jsxFileName","lineNumber","columnNumber","__info_of__endPoint","__info_of__graph","innerGraph","__info_of__innnerGraph","outerGraph","__info_of__outerGraphGraph","__info_of__graphAncestors","graphAncestors","__info_of__anchors","__info_of__edgesIn","__info_of__edgesOut","__info_of__edgesStart","__info_of__edgesEnd","outerSize","__info_of__outerSize","innerSize","__info_of__innerSize","__info_of__size","assignEdgeAnchor","__info_of__assignEdgeAnchor","__info_of__isselected","__info_of__select","__info_of__deselect","__info_of__toggleSelect","__info_of__isSelected","getNodeId","o","_node","node","extends","className","from","get_graph","context","get_innerGraph","get_anchors","c","data","set_anchors","v","Array","isArray","ee","ka","kk","isNaN","get_edgesIn","fromArr","get_edgesOut","set_edgesIn","val","set_edgesOut","get_edgesStart","get_edgesEnd","set_edgesStart","set_edgesEnd","_defaultGetter","k","__defaultGetter","get_view","_defaultSetter","__defaultSetter","get_graphAncestors","current","proxyObject","next","ret","DGraph","cname","push","get_outerGraph","wrap","get_vertex","lcurrent","fromPointer","dcurrent","DVertex","DVoidVertex","DGraphVertex","fromD","exDev","_LPointerTargetable$f","exDevv","cdata","_dcurrent","get_x","get_size","set_x","set_size","get_y","set_y","get_w","set_w","get_h","set_h","get_width","set_width","get_height","set_height","get_position","set_position","get_sizeold","get_component","map","_transientProperties$","_this$get_component","mainView","props","set_view","eDevv","getSize","outer","length","canTriggerSet","wrongAccessMessage","get_getSize","_this","get_innerSize","get_outerSize","r","get_innerSize_impl","_this$get_component2","lightMode","DEdge","DVoidEdge","nosize","coord","get_htmlSize","DEdgePoint","def","defaultVSize","currentCoordType","decodePosCoords","translateSize","actualSize","of","updateSize","isOldElement","clonedCounter","adaptWidth","adaptHeight","size0","testmode","absolute","encodePosCoords","epdata","get_html","$","set_html","cannotSet","set_htmlSize","get_htmlPosition","tl","set_htmlPosition","get_zIndex","set_zIndex","get_z","set_z","get_subElements","Set","set_subElements","log","eDev","pointers","equals","idlookup","getState","arrdiff","arrayDifference","oldsubelementid","removed","subelement","newsubelementid","added","get_isResized","isResized","set_isResized","get_model","modelElementId","lModelElement","get_allSubNodes","tocheck","checked","dblcheck","e","newtocheck","ptr","fistContainer","subnode","se","arrayMergeInPlace","Object","keys","get_assignEdgeAnchor","anchorName","LVoidEdge","startFollow","de","start","le","anchorStart","endFollow","anchorEnd","get_events","tn","mainview","otherViews","stackViews","allviews","reverse","keep_for_closure_original_funcs","dv","objectMergeInPlace","events","lastContext","viewScores","evalContext","_len","_params","_key","get_father","set_father","select","forUser","deselect","toggleSelected","get_select","get_deselect","get_toggleSelected","get_isSelected","set_isSelected","get_startPoint","get_startEndPoint","get_endPoint","isStart","offset","isPercentage","add","set_extend","_dec3","_class5","_class6","parentgraphID","DGraph_makeID","getNodes","dmp","out","$allnodes","matchedids","d","matchedidmap","objectFromArrayValues","allnodesarr","filternode","_d$dataset","_d$dataset2","dataset","dataid","$matched","filter","$notMatched","n","defaultEdgePointSize","defaultVertexSize","LGraph","_dec4","_class7","_class8","graphSize","__info_of__zoom","label","__info_of__offset","__info_of__graphSize","__info_of__translateSize","__info_of__translateHtmlSize","get_offset","set_offset","get_zoom","toGraphSize","get_coord","translateHtmlSize","set_zoom","get_translateHtmlSize","graphHtmlSize","subtract","multiply","get_translateSize","hasOwnProperty","ex","ancestors","indexOf","g","contains","elem","get_contains","targetid","_dec5","_class9","_class10","LVoidVertex","_dec6","_class11","_class12","_dec7","_class13","_class14","__isDEdgePoint","LEdgePoint","_dec8","_class15","_class16","__isLEdgePoint","edge","__info_of__edge","get_edge","set_edge","decodeCoords","sp","ep","mode","relativePercent","relativeOffset","relativeOffsetStart","relativeOffsetEnd","useStart","useEnd","xIsAbsolute","yIsAbsolute","offsetsp","offsetep","divide","sp0","ep0","testCoords","range","i","j","s0","s1","encodeCoords","s00","error","toFixed","join","diff","edgePointCoordMode","_dec9","_class17","_class18","__isDVertex","LVertex","_dec10","_class19","_class20","__isLVertex","_dec11","_class21","_class22","__isDGraph","__isDGraphVertex","LG","LV","Mixed","LGraphVertex","_dec12","_class23","_class24","__isLGraph","__isLGraphVertex","_dec13","_class25","_class26","__isDVoidEdge","midPoints","midnodes","longestLabel","labels","new2","setter","isFollowingCoords","EdgeSegment","_dec14","_class27","mid","svgLetter","gapMode","index","prevSegment","prev","bezier","dpart","m","rad","radLabels","isLongest","Bezier_QT","addBezierPoint","Bezier_CS","Line","Bezier_quadratic","Bezier_cubic","Elliptical_arc","prevedgemakerbezier","mirroredBezier","pt","invertLastBezierPt","uncutPt","makeD","getM","mToRad","Math","atan","bezierpts","finalpart","p","bezierptsUncut","finalpartUncut","bendingMode","vector","calcLength","distanceFromPoint","EdgeFillSegment","center","average","gap","_dec15","_class29","_class30","__isLVoidEdge","allNodes","__info_of__longestLabel","readType","writeType","__info_of__label","__info_of__labels","__info_of__allNodes","segments","segments_inner","segments_outer","__info_of__segments","__info_of__d","EString","__info_of__anchorStart","isEdge","__info_of__anchorEnd","__info_of__endFollow","__info_of__startFollow","get_label","get_longestLabel","set_label","set_longestLabel","get_labels","set_labels","headPos_impl","isHead","headSize0","segment0","zoom0","segment","get_segments","tmp","edgeHeadSize","edgeTailSize","headPos","useBezierPoints","x4headsize","secondIntersection","segmentDistance","sqrt","safeDistance","max","closestIntersection","exx","tailPos","get_headPos","headSize","get_tailPos","get_allNodes","get_start","get_midnodes","get_end","get_midPoints","addMidPoint","get_addMidPoint","impl_addMidPoints","set_midPoints","get_label_impl","nodes","key","l","labelmaker","labelmakerfunc","get_startPoint_Outer","get_endPoint_Outer","get_startPoint_inner","get_endPoint_inner","get_edgeStartEnd_inner","svgLetterSize","s","addM","doublingMidPoints","first","others","get_points_impl","getAnchorOffset","$factor","all","flatMap","ge","dge","base","rets","rete","debug","anchor_e","anchor_s","anchor","edgeStartOffset","edgeStartOffset_isPercentage","seg","get_pointsDebug","get_points","get_points_outer","get_points_inner","get_d","get_segments_outer","get_segments_impl","get_segments_inner","bm","edgeGapMode","segmentSize","increase","endindex","slice","printablesegment","_v","JSON","parse","stringify","fillSegments","snapSegmentsToNodeBorders","setLabels","rett","fillers","head","tail","longestindex","longest","canCutStart","edgeStartStopAtBoundaries","canCutEnd","edgeEndStopAtBoundaries","grid","ci","curr","doStartCut","doEndCut","nextpt","prevpt","midexternalpt","midedgepoint","br","duplicate","closestPoint","prevendpt","get_edgeEnd","get_edgeEnd_outer","get_edgeEnd_inner","wrapAll","set_midnodes","get_endFollow","get_startFollow","set_endFollow","_set_start_endFollow","set_startFollow","following","document","body","addEventListener","mousemove_pendingEdge","onKeyDown_pendingEdge","followingContext","showAnchors","Tooltip","show","classList","removeEventListener","selector","remove","$base","getElementById","$anchors","find","removeClass","style","overflow","hide","getCursorPos","e0","pageX","pageY","escape","nodeid","activeAnchor","$deepAnchors","not","addClass","forcererendermode","canForceUpdate","mousemovei","cursorPos","gcursorpos","timer","setTimeout","vid","tnv","jsxOutput","usageDeclarations","shouldUpdate","setState","forceupdate","Date","getDate","clearTimeout","root","querySelector","paths","querySelectorAll","pathSegments","pathSegmentContainers","parentElement","container","headTail","segList","svg","parentUntil","svgsize","svgzoom","gcursorPos","getPathData","lastSeg","values","oldSeglist","setPathData","ht","rotation","lastPt","Number","POSITIVE_INFINITY","degToRad","NEGATIVE_INFINITY","transform","_dec16","_class31","_class32","__isDEdge","LEdge","_dec17","_class33","_class34","__isLEdge","DExtEdge","_dec18","_class35","_class36","__isDExtEdge","LExtEdge","_dec19","_class37","_class38","__isLExtEdge","DRefEdge","_dec20","_class39","_class40","__isDRefEdge","LRefEdge","_dec21","_class41","_class42","__isLRefEdge"],"sources":["C:/d/Programming/web/jodel-mde/src/model/dataStructure/GraphDataElements.tsx"],"sourcesContent":["// import {Mixin} from \"ts-mixer\";\r\nimport {isDeepStrictEqual} from \"util\";\r\nimport {\r\n    BEGIN,\r\n    Constructors,\r\n    CoordinateMode,\r\n    Debug,\r\n    Dictionary,\r\n    DModelElement,\r\n    DocString,\r\n    DPointerTargetable,\r\n    DState,\r\n    DUser,\r\n    DViewElement,\r\n    EdgeBendingMode,\r\n    END,\r\n    EPSize,\r\n    getWParams,\r\n    GObject,\r\n    GraphElementComponent,\r\n    GraphPoint,\r\n    GraphSize,\r\n    Info, Keystrokes,\r\n    Leaf,\r\n    LModelElement,\r\n    Log,\r\n    LogicContext,\r\n    LPointerTargetable,\r\n    LViewElement,\r\n    MixOnlyFuncs,\r\n    Node,\r\n    Pack1,\r\n    PackArr,\r\n    Point,\r\n    Pointer,\r\n    Pointers,\r\n    PrimitiveType,\r\n    RuntimeAccessible,\r\n    RuntimeAccessibleClass,\r\n    SetFieldAction,\r\n    ShortAttribETypes,\r\n    Size,\r\n    store,\r\n    TargetableProxyHandler,\r\n    transientProperties,\r\n    U,\r\n    Uarr,\r\n    windoww\r\n} from \"../../joiner\";\r\nimport type {Tooltip} from \"../../components/forEndUser/Tooltip\";\r\nimport type {RefObject} from \"react\";\r\nimport type {SVGPathElementt, SVGPathSegment} from '../../common/libraries/pathdata';\r\nimport {EdgeGapMode, InitialVertexSize} from \"../../joiner/types\";\r\nimport {labelfunc} from \"../../joiner/classes\";\r\nimport {Geom} from \"../../common/Geom\";\r\n\r\n\r\nconsole.warn('ts loading graphDataElement');\r\n\r\n@Node\r\n@RuntimeAccessible('DGraphElement')\r\nexport class DGraphElement extends DPointerTargetable {\r\n    // static _super = DPointerTargetable;\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    // static singleton: LGraphElement;\r\n    // static logic: typeof LGraphElement;\r\n    // static structure: typeof DGraphElement;\r\n    id!: Pointer<DGraphElement, 1, 1, LGraphElement>;\r\n    graph!: Pointer<DGraph, 1, 1, LGraph>;\r\n    model?: Pointer<DModelElement, 0, 1, LModelElement>;\r\n    isSelected!: Dictionary<DocString<Pointer<DUser>>, boolean>;\r\n    // containedIn!: Pointer<DGraphElement, 0, 1, LGraphElement>;\r\n    subElements!: Pointer<DGraphElement, 0, 'N', LGraphElement>;\r\n    state!: GObject; // DMap\r\n    father!: Pointer<DGraphElement, 1, 1, LGraphElement>;\r\n    x!: number;\r\n    y!: number;\r\n    zIndex: number = 100;\r\n    w!: number;\r\n    h!: number;\r\n    // width: number = 300;\r\n    // height: number = 400;\r\n    view!: Pointer<DViewElement, 1, 1, LViewElement>;\r\n    favoriteNode!: boolean;\r\n    edgesIn!: Pointer<DEdge>[];\r\n    edgesOut!: Pointer<DEdge>[];\r\n    anchors!: Dictionary<string, GraphPoint/* as % of node size.*/>;\r\n\r\n\r\n    public static new(htmlindex: number, model: DGraphElement[\"model\"]|null|undefined, parentNodeID: DGraphElement[\"father\"],\r\n                      graphID: DGraphElement[\"graph\"], nodeID?: DGraphElement[\"id\"]|undefined, a?: any, b?:any, ...c:any): DGraphElement {\r\n        return new Constructors(new DGraphElement('dwc'), parentNodeID, true, undefined, nodeID)\r\n            .DPointerTargetable()\r\n            .DGraphElement(model, graphID, htmlindex).end();\r\n    }\r\n\r\n}\r\n@RuntimeAccessible('LGraphElement')\r\nexport class LGraphElement<Context extends LogicContext<DGraphElement> = any, C extends Context = Context> extends LPointerTargetable {\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static getNodeId<L extends LGraphElement, D extends DGraphElement>(o?:L | D | Pointer<D> | LModelElement | DModelElement | Pointer<DModelElement>): Pointer<D> {\r\n        if (!o) return undefined as any;\r\n        let node: any = o;\r\n        // from L to D\r\n        // let cname = (node.__raw || node).className;\r\n        // from DModelE to LGraphE\r\n        if (RuntimeAccessibleClass.extends((o as any).className, \"DModelElement\")) node = LPointerTargetable.from(o as DModelElement).node as LGraphElement;\r\n        return (typeof node === \"string\") ? node : node?.id;\r\n    }\r\n    // static singleton: LGraphElement;\r\n    // static logic: typeof LGraphElement;\r\n    // static structure: typeof DGraphElement;\r\n    __raw!: DGraphElement;\r\n    id!: Pointer<DGraphElement, 1, 1, LGraphElement>;\r\n    father!: LGraphElement;\r\n    graph!: LGraph; // todo: can be removed and accessed by navigating .father\r\n    model?: LModelElement;\r\n    // protected isSelected!: Dictionary<DocString<Pointer<DUser>>, boolean>; //  & ((forUser?: Pointer<DUser>) => boolean);\r\n\r\n    // containedIn?: LGraphElement;\r\n    subElements!: LGraphElement[]; // shallow, direct subelements\r\n    _state!: GObject<\"proxified\">; // LMap;\r\n    allSubNodes!: LGraphElement[]; // deep, nested subelements\r\n    x!: number;\r\n    y!: number;\r\n    width!: number;\r\n    height!: number\r\n\r\n    z!:number;\r\n    zIndex!: number;\r\n    __info_of_z__: Info = {type:ShortAttribETypes.EInt, txt: \"alias for zIndex\"};\r\n    __info_of_zIndex__: Info = {type:ShortAttribETypes.EInt,\r\n        txt: \"Determine the z-axis priority of the element.<br/>Higher value tende to overlap other elements.<br/>Lower value tends to be on background.\"};\r\n    zoom!: GraphPoint;\r\n    html?: Element;\r\n\r\n    // fittizi\r\n    w!:number;\r\n    h!:number;\r\n    size!: GraphSize;\r\n    position!: GraphPoint;\r\n    htmlSize!: Size; // size and position in global document coordinates.\r\n    htmlPosition!: Point;\r\n    view!: LViewElement;\r\n    component!: GraphElementComponent;\r\n    favoriteNode!: boolean;\r\n    vertex?: LVoidVertex;\r\n    __info__of__vertex: Info = {type: \"LVoidVertex\", txt: \"the foremost vertex containing this graphElement, or undefiened.\"}\r\n    __info__of__favoriteNode: Info = {type: ShortAttribETypes.EBoolean,\r\n        txt: \"<span>Indicates this is the primarly used (by default) node to refer to a modelling element that might have multiple representations.\" +\r\n            \"<br> Can be used as favorite target for edges or other.\"}\r\n\r\n    startPoint!: GraphPoint;\r\n    endPoint!: GraphPoint;\r\n    __info_of__startPoint: Info = {type: \"GraphPoint\", txt:<span>Where the outgoing edges should start their paths.\r\n            <br/>Obtained by combining anchoring point offset specified in view, before snapping to a Vertex border.\r\n            <br/>Defaults in outer coordinates.</span>};\r\n    __info_of__endPoint: Info = {type: \"GraphPoint\", txt:<span>Where the incoming edges should end their paths.\r\n            <br/>Obtained by combining anchoring point offset specified in view, before snapping to a Vertex border.\r\n            <br/>Defaults in outer coordinates.</span>};\r\n\r\n    __info_of__graph: Info = {type:\"\", txt:\"\"};\r\n    innerGraph!: LGraph;\r\n    __info_of__innnerGraph: Info = {type:\"\", txt:\"\"};\r\n    outerGraph!: LGraph;\r\n    __info_of__outerGraphGraph: Info = {type:\"\", txt:\"\"};\r\n    get_graph(context: Context): LGraph { return this.get_innerGraph(context); }\r\n\r\n    __info_of__graphAncestors: Info = {type:\"LGraph[]\",\r\n        txt:\"<span>collection of the stack of Graphs containing the current element where [0] is the most nested graph, and last is root graph.</span>\"};\r\n    graphAncestors!: LGraph[];\r\n\r\n    anchors!: Dictionary<string, GraphPoint/* as % of node size.*/>;\r\n    __info_of__anchors: Info = {type:\"Dictionary<string, point>\", txt: <div>A named list of all anchor points where edges are allowed to land or depart from.<br/>\r\n            {/*When reading it is in absolute sizes.<br/>*/}\r\n            When writing it must be done in percentages, with the same rules as node.state.</div>}\r\n    get_anchors(c: Context): this[\"anchors\"]{ return c.data.anchors; }\r\n    set_anchors(v: this[\"anchors\"], c: Context):boolean{\r\n        if (v !== undefined && (typeof v !== \"object\" || Array.isArray(v))){\r\n            Log.ee('cannot set anchors: invalid value provided');\r\n            return true;\r\n        }\r\n        if (v){ // if !v it means clear all anchors?\r\n            for (let ka in v){//for each anchor\r\n                if (!v[ka]) continue;\r\n\r\n                if (c.data.anchors[ka]) {\r\n                    for (let kk in v[ka]) { //for each key within an anchor (x, y, w, h)\r\n                        // if i was attempting to set a partial size, complete it with the old size values.\r\n                        if ((v[ka][kk] === undefined) && (c.data.anchors[ka][kk] !== undefined)) v[ka][kk] = c.data.anchors[ka][kk];\r\n                    }\r\n                }\r\n                if (v[ka].x === undefined || isNaN(v[ka].x)) v[ka].x = 0.5;\r\n                if (v[ka].y === undefined || isNaN(v[ka].y)) v[ka].y = 0.5;\r\n                // if (v[ka].w === undefined || isNaN(v[ka].w)) v[ka].w = 5;\r\n                // if (v[ka].h === undefined || isNaN(v[ka].h)) v[ka].h = 5;\r\n            }\r\n        }\r\n        SetFieldAction.new(c.data, \"anchors\", v, '+=', false);\r\n        return true; }\r\n\r\n    edgesIn!: LVoidEdge[];\r\n    edgesOut!: LVoidEdge[];\r\n    __info_of__edgesIn: Info = {type:\"LEdge[]\", txt:<div>Edges incoming into this element. <code>this.edgesOut[i].end</code> always equals to <code>this</code>.</div>}\r\n    __info_of__edgesOut: Info = {type:\"LEdge[]\", txt:<div>Edges outgoing from this element. <code>this.edgesIn[i].start</code> always equals to <code>this</code>.</div>}\r\n    __info_of__edgesStart: Info = {type:\"LEdge[]\", txt:<div>Alias for this.edgesOut</div>}\r\n    __info_of__edgesEnd: Info = {type:\"LEdge[]\", txt:<div>Alias for this.edgesIn</div>}\r\n    public get_edgesIn(context: Context): this[\"edgesIn\"] { return LPointerTargetable.fromArr(context.data.edgesIn); }\r\n    public get_edgesOut(context: Context): this[\"edgesOut\"]  { return LPointerTargetable.fromArr(context.data.edgesOut); }\r\n    public set_edgesIn(val: PackArr<LVoidEdge>, c: Context): boolean { return SetFieldAction.new(c.data.id, \"edgesIn\", Pointers.fromArr(val), '', true); }\r\n    public set_edgesOut(val: PackArr<LVoidEdge>, c: Context): boolean { return SetFieldAction.new(c.data.id, \"edgesOut\", Pointers.fromArr(val), '', true); }\r\n    public get_edgesStart(context: Context): this[\"edgesIn\"]  { return this.get_edgesIn(context); }\r\n    public get_edgesEnd(context: Context): this[\"edgesOut\"]  { return this.get_edgesOut(context); }\r\n    public set_edgesStart(val: PackArr<LVoidEdge>, context: Context): boolean { return this.set_edgesIn(val, context); }\r\n    public set_edgesEnd(val: PackArr<LVoidEdge>, context: Context): boolean { return this.set_edgesOut(val, context); }\r\n\r\n\r\n    protected _defaultGetter(c: Context, k: keyof Context[\"data\"]): any {\r\n        if (k in c.data) return this.__defaultGetter(c, k);\r\n        // if value not found in node, check in view.\r\n        return (this.get_view(c) as any)[k];\r\n        /*let ret: any;\r\n        let view = this.get_view(c);\r\n        try { ret = (view as any)[k] } catch (e) { Log.ee(\"Could not find get_ property \\\"\" + k + \"\\\" in node or view.\", {c, view, k}); return undefined; }\r\n        return ret;*/\r\n    }\r\n\r\n    protected _defaultSetter(v: any, c: Context, k: keyof Context[\"data\"]): true {\r\n        this.__defaultSetter(v, c, k);\r\n        return true;\r\n    }\r\n\r\n    get_graphAncestors(c: Context): LGraph[] {\r\n        let current = c.proxyObject;\r\n        let next = current.father;\r\n        let ret: LGraph[] = [];\r\n        while(next) {\r\n            if (RuntimeAccessibleClass.extends(next.className, DGraph.cname)) ret.push(next as LGraph);\r\n            if (current.id === next.id) break;\r\n            current = next;\r\n            next = next.father;\r\n        }\r\n        return ret;\r\n    }\r\n    get_outerGraph(context: Context): LGraph {\r\n        // todo: this relies on the fact that GraphVertex are not passing their own id to their childrens, but the parent graph id\r\n        return TargetableProxyHandler.wrap(context.data.graph);\r\n    }\r\n    get_vertex(context: Context): this[\"vertex\"] {\r\n        let lcurrent: LGraphElement = LPointerTargetable.fromPointer(context.data.id);\r\n        let dcurrent = lcurrent.__raw;\r\n        // iterate parents.\r\n        while(dcurrent){\r\n            switch(dcurrent.className){\r\n                case DVertex.cname:\r\n                case DVoidVertex.cname:\r\n                case DGraphVertex.cname: return (lcurrent || LPointerTargetable.fromD(dcurrent)) as LVoidVertex;\r\n                default:\r\n                    if (!dcurrent.father || dcurrent.id === dcurrent.father) return undefined;\r\n                    Log.exDev(!dcurrent.father || dcurrent.id === dcurrent.father, \"node failed to get containing vertex\", context.data, dcurrent, lcurrent);\r\n                    lcurrent = LPointerTargetable.fromPointer(dcurrent.father);\r\n                    dcurrent = lcurrent.__raw;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    get_innerGraph(context: Context): LGraph {\r\n        let dcurrent = DPointerTargetable.fromPointer(context.data.father);\r\n\r\n        // if no parent, but it's a graph, return itself.\r\n        if (!dcurrent) {\r\n            dcurrent = context.data;\r\n            switch(dcurrent.className){\r\n                case DGraph.cname:\r\n                case DGraphVertex.cname: return (LPointerTargetable.fromD(dcurrent)) as LGraph;\r\n                default: return Log.exDevv(\"root node failed to get containing graph\", {cdata:context.data, dcurrent});\r\n            }\r\n        }\r\n\r\n        // if it have a parent, iterate parents.\r\n        while(true){\r\n            switch(dcurrent?.className){\r\n                case DGraph.cname:\r\n                case DGraphVertex.cname: return (LPointerTargetable.fromD(dcurrent)) as LGraph;\r\n                default:\r\n                    Log.exDev(!dcurrent.father, \"node failed to get containing graph\", {cdata:context.data, dcurrent});\r\n                    Log.exDev(dcurrent.id === dcurrent.father, \"node failed to get containing graph, found loop\",\r\n                        {cdata:context.data, dcurrent, father: LPointerTargetable.from(dcurrent)?.father});\r\n                    dcurrent = DPointerTargetable.fromPointer(dcurrent.father);\r\n            }\r\n        }\r\n    }\r\n\r\n    // set_x(val: this[\"x\"], context: Context): boolean { SetFieldAction.new(context.data.id, \"x\", val, undefined, false); return true; }\r\n    // get_x(context: Context): this[\"x\"] { return context.data.x; }\r\n    get_x(context: Context): this[\"x\"] { return this.get_size(context).x; }\r\n    set_x(val: this[\"x\"], context: Context): boolean { return this.set_size({x:val}, context); }\r\n    get_y(context: Context): this[\"y\"] { return this.get_size(context).y; }\r\n    set_y(val: this[\"y\"], context: Context): boolean { return this.set_size({y:val}, context); }\r\n\r\n    get_w(context: Context): this[\"w\"] { return this.get_size(context).w; }\r\n    set_w(val: this[\"w\"], context: Context): boolean { return this.set_size({w:val}, context); }\r\n    get_h(context: Context): this[\"h\"] { return this.get_size(context).h; }\r\n    set_h(val: this[\"h\"], context: Context): boolean { return this.set_size({h:val}, context); }\r\n\r\n    get_width(context: Context): this[\"w\"] { return this.get_w(context); }\r\n    set_width(val: this[\"w\"], context: Context): boolean { return this.set_w(val, context); }\r\n    get_height(context: Context): this[\"h\"] { return this.get_h(context); }\r\n    set_height(val: this[\"h\"], context: Context): boolean { return this.set_h(val, context); }\r\n\r\n    get_position(context: Context): this[\"position\"] { return new GraphPoint(context.data.x, context.data.y); }\r\n    set_position(val: this[\"position\"], context: Context): boolean {\r\n        BEGIN()\r\n        SetFieldAction.new(context.data.id, \"x\", val.x, undefined, false);\r\n        SetFieldAction.new(context.data.id, \"y\", val.y, undefined, false);\r\n        END()\r\n        return true; }\r\n\r\n    get_sizeold(context: Context): this[\"size\"] { return new GraphSize(context.data.x, context.data.y, context.data.w, context.data.h); }\r\n    get_component(context: Context): this[\"component\"] {\r\n        // switch(context.data.className) { case DEdgePoint.name: return GraphElementComponent.map[context.data.father]; }\r\n        return GraphElementComponent.map[context.data.id]; }\r\n    // get_view(context: Context): this[\"view\"] { return this.get_component(context).props.view; }\r\n    get_view(context: Context): this[\"view\"] {\r\n        return transientProperties.node[context.data.id]?.mainView || LPointerTargetable.from(context.data.view) || this.get_component(context)?.props.view;\r\n    }\r\n    set_view(val: Pack1<this[\"view\"]>, context: Context){\r\n        Log.eDevv(\"node.view is readonly, change it through props or the model\");\r\n        // let ptr: DGraphElement[\"view\"] = Pointers.from(val as this[\"view\"]);\r\n        // return SetFieldAction.new(context.data.id, \"view\", ptr, '', true);\r\n    }\r\n\r\n    outerSize!: LGraphElement[\"size\"];\r\n    __info_of__outerSize: Info = {type:\"GraphSize\", txt:\"the size of the current element relative to the first (root) graph level.\"};\r\n    innerSize!: LGraphElement[\"size\"];\r\n    __info_of__innerSize: Info = {type:\"GraphSize\", txt:\"the size of the current element relative to the last (most nested) graph level.\"};\r\n    __info_of__size: Info = {type:\"GraphSize\", txt: \"same as innerSize.\"};\r\n\r\n\r\n    getSize(outer: boolean = false, canTriggerSet: boolean = true): Readonly<GraphSize> { return this.wrongAccessMessage(\"getSize()\"); }\r\n    get_getSize(c: Context): ((outer?: boolean, canTriggerSet?: boolean) => Readonly<GraphSize>) {\r\n        return (outer: boolean = true, canTriggerSet: boolean = true) => this.get_innerSize(c, canTriggerSet, outer); }\r\n\r\n    get_outerSize(context: Context, canTriggerSet: boolean = true): Readonly<GraphSize> {\r\n        return this.get_innerSize(context, canTriggerSet, true);\r\n    }\r\n    get_size(context: Context, canTriggerSet: boolean = true): Readonly<GraphSize> { return this.get_innerSize(context, canTriggerSet, false); }\r\n    get_innerSize(context: Context, canTriggerSet: boolean = true, outerSize: boolean = false): Readonly<GraphSize> {\r\n        let r = this.get_innerSize_impl(context, canTriggerSet, outerSize);\r\n        return new GraphSize(r.x, r.y, r.w, r.h);\r\n    }\r\n    protected get_innerSize_impl(context: Context, canTriggerSet: boolean = true, outerSize: boolean = false): Readonly<GraphSize> {\r\n        canTriggerSet = canTriggerSet && !Debug.lightMode;\r\n        switch (context.data.className){\r\n            default: return Log.exDevv(\"unexpected classname in get_size switch: \" + context.data.className);\r\n            case DEdge.cname:\r\n            case DVoidEdge.cname:\r\n            case DGraph.cname: return nosize as any;\r\n            // case DField.cname:\r\n            case DGraphElement.cname:\r\n                let graph = outerSize ? this.get_outerGraph(context) : this.get_innerGraph(context);\r\n                return graph.coord(this.get_htmlSize(context));\r\n            case DVoidVertex.cname:\r\n            case DVertex.cname:\r\n            case DEdgePoint.cname:\r\n            case DGraphVertex.cname: break;\r\n        }\r\n\r\n        // low prio todo: memoization in proxy, as long state does not change keep a collection Dictionary[object][key] = returnval. it gets emptied when state is updated.\r\n\r\n        // when loading a save, edge segements and edgepoints/nodes are computed before creating the edgepoint component\r\n        let view: LViewElement = this.get_view(context);\r\n        // (window as any).retry = ()=>view.getSize(context.data.id);\r\n        let ret: EPSize = view.getSize(context.data.id) as any; // (this.props.dataid || this.props.nodeid as string)\r\n\r\n        // console.log(\"getSize() from view\", {ret: ret ? {...ret} : ret});\r\n        if (!ret) {\r\n            ret = new GraphSize() as EPSize;\r\n            ret.x = context.data.x;\r\n            ret.y = context.data.y;\r\n            ret.w = context.data.w;\r\n            ret.h = context.data.h;\r\n            let def: GraphSize | undefined;\r\n            if (undefined===(ret.x)) { if (!def) def = view.defaultVSize; ret.x = def.x || 0;}\r\n            if (undefined===(ret.y)) { if (!def) def = view.defaultVSize; ret.y = def.y || 0;}\r\n            if (undefined===(ret.w)) { if (!def) def = view.defaultVSize; ret.w = def.w || 10;}\r\n            if (undefined===(ret.h)) { if (!def) def = view.defaultVSize; ret.h = def.h | 10;}\r\n            ret.currentCoordType = (context.data as DEdgePoint).currentCoordType as any;\r\n            // console.log(\"getSize() from node merged with defaultVSize\", {ret: ret ? {...ret} : ret});\r\n        }\r\n        if (context.data.className === DEdgePoint.cname) {\r\n            ret = (this as any as LEdgePoint).decodePosCoords(context, ret, view);\r\n        }\r\n\r\n        /*\r\n                if ((context.data as DVoidVertex).isResized) {\r\n                    return ret;\r\n                }*/\r\n        if (!canTriggerSet) {\r\n            if (outerSize) ret = this.get_outerGraph(context).translateSize(ret, this.get_innerGraph(context));\r\n            return ret;\r\n        }\r\n        let html: RefObject<HTMLElement | undefined> | undefined = this.get_component(context)?.html;\r\n        let actualSize: Partial<Size> & {w:number, h:number} = html?.current ? Size.of(html.current) : {w:0, h:0};\r\n        let updateSize: boolean = false;\r\n        let isOldElement = (context.data.clonedCounter as number) > 3;\r\n        // if w = 0 i don't auto-set it as in first render it has w:0 because is not reredered and not resized.\r\n        // if (canTriggerSet) this.set_size({w:actualSize.w}, context);\r\n        if (view.adaptWidth && ret.w !== actualSize.w) {\r\n            if (canTriggerSet && (isOldElement || actualSize.w !== 0)) {\r\n                ret.w = actualSize.w;\r\n                updateSize = true;\r\n            }\r\n        }\r\n        if (view.adaptHeight && ret.h !== actualSize.h) {\r\n            if (canTriggerSet && (isOldElement || actualSize.h !== 0)) {\r\n                ret.h = actualSize.h;\r\n                updateSize = true;\r\n            }\r\n        }\r\n        // console.log(\"getSize() from node merged with actualSize\", {ret: {...ret}});\r\n\r\n        if (updateSize) this.set_size(ret, context);\r\n        if (outerSize) ret = this.get_outerGraph(context).translateSize(ret, this.get_innerGraph(context));\r\n        return ret;\r\n    }\r\n    // set_size(size: Partial<this[\"size\"]>, context: Context): boolean {\r\n    set_size(size0: Partial<GraphSize>, c: Context): boolean {\r\n        // console.log(\"setSize(\"+(this.props?.data as any).name+\") thisss\", this);\r\n        if (!size0) return false;\r\n        let size = size0 as Partial<EPSize>;\r\n        let view = this.get_view(c);\r\n        let testmode: boolean = false;\r\n        if (c.data.className === DEdgePoint.cname && size.currentCoordType !== CoordinateMode.absolute) size = (this as any as LEdgePoint).encodePosCoords(c as any, size, view);\r\n\r\n        if (view.updateSize(c.data.id, size)) return true;\r\n        BEGIN()\r\n        if (size.x !== c.data.x && size.x !== undefined) SetFieldAction.new(c.data.id, \"x\", size.x, undefined, false);\r\n        if (size.y !== c.data.y && size.y !== undefined) SetFieldAction.new(c.data.id, \"y\", size.y, undefined, false);\r\n        if (size.w !== c.data.w && size.w !== undefined) SetFieldAction.new(c.data.id, \"w\", size.w, undefined, false);\r\n        if (size.h !== c.data.h && size.h !== undefined) SetFieldAction.new(c.data.id, \"h\", size.h, undefined, false);\r\n        let epdata: DEdgePoint = c.data as DEdgePoint;\r\n        if (size.currentCoordType !== epdata.currentCoordType && size.currentCoordType !== undefined) SetFieldAction.new(epdata.id, \"currentCoordType\", size.currentCoordType, undefined, false);\r\n        END()\r\n        return true; }\r\n\r\n    get_html(c: Context): this[\"html\"] {\r\n        let component = this.get_component(c);\r\n        let html = component.html.current;\r\n        if (html) return html;\r\n        html = $('[nodeid=\"' + c.data.id + '\"]')[0];\r\n        if (!html) return undefined;\r\n        (component.html as any).current = html;\r\n        return html;\r\n    }\r\n    // get_html(context: Context): this[\"html\"] { return $(\"[node-id='\" + context.data.id + \"']\")[0]; }\r\n    set_html(val: this[\"htmlSize\"], context: Context): boolean { return this.cannotSet(\"set_html(). html is generated through jsx. edit the view instead.\"); }\r\n\r\n    get_htmlSize(context: Context): this[\"htmlSize\"] {\r\n        let html = this.get_html(context);\r\n        return html ? Size.of(html) : new Size(0, 0, 0, 0);\r\n        /*\r\n        let graph = this.get_graph(context);\r\n        if (!html) return nosize as any;\r\n        let size = Size.of(html);\r\n        let zoom = graph.zoom;\r\n        size.x /= zoom.x;\r\n        size.y /= zoom.y;\r\n        return size;*/}\r\n    set_htmlSize(val: this[\"htmlSize\"], context: Context): boolean {\r\n        // might be useful for fixed display size/location elements that stay in place even if you move tab or change zoom. debatable if needed\r\n        this.cannotSet(\"set_htmlSize(): todo extra low priority. set GraphSize through set_size instead.\");\r\n        return true; }\r\n    get_htmlPosition(context: Context): this[\"htmlPosition\"] { return this.get_htmlSize(context).tl(); }\r\n    set_htmlPosition(val: this[\"htmlPosition\"], context: Context): boolean {\r\n        // might be useful for fixed display size/location elements that stay in place even if you move tab or change zoom. debatable if needed\r\n        this.cannotSet(\"set_htmlPosition(): todo extra low priority. set graph position through set_position instead.\");\r\n        return true; }\r\n\r\n\r\n    /* how z-index work, it's really messy.\r\n    * cannot move html position. node id depends on it, and a node moving position would need to change id.\r\n    * so i use css order.\r\n    * first order is assigned through node constructor called by parent component injectProps, according to his last index in html.\r\n    * now z-index is set in node and updated properly.\r\n    * z-index is passed to a prop, rendered as html attribute.\r\n    * css takes the attribute value and uses it in \"order\" css rule.\r\n    * problem: updating node.z doesn't trigger the parent injectprops, so he inject html index and\r\n    * the outernmost html root cannot update his attribute without refreshing the parent and recalling injectprops\r\n    * fixed: by updating it directly in GraphElement.render()\r\n    * */\r\n    get_zIndex(context: Context): this[\"zIndex\"] { return (context.data.zIndex || 0); }\r\n    set_zIndex(val: this[\"zIndex\"], context: Context): boolean {\r\n        SetFieldAction.new(context.data.id, \"zIndex\", val, undefined, false);\r\n        return true; }\r\n    get_z(context: Context): this[\"zIndex\"] { return context.data.zIndex; }\r\n    set_z(val: this[\"zIndex\"], context: Context): boolean { return this.set_zIndex(val, context); }\r\n    /*\r\n        get_containedIn(context: Context): this[\"containedIn\"] {\r\n            return context.data.containedIn ? LPointerTargetable.fromPointer(context.data.containedIn) : undefined; }\r\n        set_containedIn(val: Pack1<this[\"containedIn\"]>, context: LogicContext<DGraphElement>): boolean {\r\n            let ptr: DGraphElement[\"containedIn\"] = Pointers.from(val) as any;\r\n            SetFieldAction.new(context.data, 'containedIn', ptr, undefined, true);\r\n            if (ptr) SetFieldAction.new(ptr as any, 'subElements+=', context.data.id);\r\n            return true; }*/\r\n\r\n    get_subElements(context: Context): this[\"subElements\"] {\r\n        return LPointerTargetable.fromArr([...new Set(context.data.subElements)]);\r\n    }\r\n    set_subElements(val: PackArr<this[\"subElements\"]>, context: LogicContext<DGraphElement>): boolean {\r\n        console.log(\"isDeepStrictEqual\", {isDeepStrictEqual});\r\n        Log.eDev([...new Set(val)].length !== val.length, \"subelemnts setter have duplicates\", {val, context});\r\n        // if (isDeepStrictEqual(context.data.subElements, val)) return true;\r\n        let pointers: Pointer<DGraphElement, 0, 'N', LGraphElement> = Pointers.from(val) || [];\r\n        if (Uarr.equals(pointers, context.data.subElements, false)) return true;\r\n        SetFieldAction.new(context.data, 'subElements', pointers, '', true);\r\n        const idlookup = store.getState().idlookup;\r\n        let arrdiff = U.arrayDifference(context.data.subElements, pointers);\r\n        // old subelements\r\n        for (let oldsubelementid of arrdiff.removed) {\r\n            let subelement: DGraphElement = (oldsubelementid && idlookup[oldsubelementid]) as DGraphElement;\r\n            if (subelement.father !== context.data.id) continue;\r\n            LPointerTargetable.from(subelement).father = null as any; // todo: can this happen? è transitorio o causa vertici senza parent permanenti?\r\n        }\r\n        // new subelements\r\n        for (let newsubelementid of arrdiff.added) {\r\n            let subelement: DGraphElement = (newsubelementid && idlookup[newsubelementid]) as DGraphElement;\r\n            if (subelement.father === context.data.id) continue;\r\n            LPointerTargetable.from(subelement).father = context.data.id as any; // trigger side-action\r\n        }\r\n        return true;\r\n    }\r\n\r\n    get_isResized(context: LogicContext<DVoidVertex>): DVoidVertex[\"isResized\"] { return context.data.isResized; }\r\n    set_isResized(val: DVoidVertex[\"isResized\"], context: LogicContext<DVoidVertex>): DVoidVertex[\"isResized\"] {\r\n        return SetFieldAction.new(context.data.id, \"isResized\", val);\r\n    }\r\n\r\n    get_model(context: Context): this[\"model\"] {\r\n        const modelElementId = context.data.model; //$('[id=\"' + context.data.id + '\"]')[0].dataset.dataid;\r\n        const lModelElement: LModelElement = LPointerTargetable.from(modelElementId as string);\r\n        return lModelElement;\r\n    }\r\n\r\n    private get_allSubNodes(context: Context, state?: DState): this[\"allSubNodes\"] {\r\n        // return context.data.packages.map(p => LPointerTargetable.from(p));\r\n        state = state || store.getState();\r\n        let tocheck: Pointer<DGraphElement>[] = context.data.subElements || [];\r\n        let checked: Dictionary<Pointer, true> = {};\r\n        let dblcheck: Dictionary<Pointer, Pointer> = {}; // <child, parent>  // debug only\r\n        for (let e of tocheck) dblcheck[e] = context.data.id; // debug only\r\n        checked[context.data.id] = true;//nb6[]{}&\r\n        while (tocheck.length) {\r\n            let newtocheck: Pointer<DGraphElement>[] = [];\r\n            for (let ptr of tocheck) {\r\n                Log.eDev(checked[ptr], \"loop in GraphElements containing themselves\", {dblcheck, context, ptr, checked, fistContainer:dblcheck[ptr]});\r\n                if (checked[ptr]) continue;\r\n                checked[ptr] = true;\r\n                let subnode: DGraphElement = DPointerTargetable.from(ptr, state);\r\n                let se = subnode?.subElements;\r\n                for (let e of se) dblcheck[e] = ptr; // debug only\r\n                U.arrayMergeInPlace(newtocheck, se);\r\n            }\r\n            tocheck = newtocheck;\r\n        }\r\n        delete checked[context.data.id];\r\n        return LPointerTargetable.from(Object.keys(checked), state);\r\n    }\r\n    assignEdgeAnchor!: ((anchorName?: string)=>void);\r\n    __info_of__assignEdgeAnchor!: {hidden:true, type:\"(anchorName?: string)=>void\", txt: \"Assign a specific anchor of this node to the edge currently following the cursor, if any.\"};\r\n    get_assignEdgeAnchor(c: Context): ((anchorName?: string)=>void) {\r\n        return (anchorName?: string)=>{\r\n            if (anchorName && !c.data.anchors[anchorName]) anchorName = undefined;\r\n            if (LVoidEdge.startFollow) {\r\n                let de: DEdge = DPointerTargetable.fromPointer(LVoidEdge.startFollow);\r\n                if (de.start !== c.data.id) return; // cannot change edge targets, only an anchor within the current targets\r\n                let le: LVoidEdge = LPointerTargetable.fromD(de);\r\n                le.anchorStart = anchorName;\r\n                le.startFollow = false;\r\n\r\n            }\r\n            if (LVoidEdge.endFollow) {\r\n                let de = DPointerTargetable.fromPointer(LVoidEdge.endFollow);\r\n                if (de.end !== c.data.id) return; // cannot change edge targets, only an anchor within the current targets\r\n                let le = LPointerTargetable.fromD(de);\r\n                le.anchorEnd = anchorName;\r\n                le.endFollow = false;\r\n            }\r\n        }\r\n    }\r\n    get_events(c: Context): LViewElement[\"events\"] {\r\n        const tn = transientProperties.node[c.data.id];\r\n        let mainview: DViewElement = tn.mainView.__raw;\r\n        let otherViews: DViewElement[] = tn.stackViews.map(v=>v.__raw);\r\n        let allviews: DViewElement[] = [mainview, ...otherViews].reverse();\r\n        const keep_for_closure_original_funcs: LViewElement[\"events\"] = {};\r\n        const ret: LViewElement[\"events\"] = {};\r\n        for (let dv of allviews) U.objectMergeInPlace(keep_for_closure_original_funcs, transientProperties.view[dv.id].events);\r\n\r\n        const lastContext: GObject = tn.viewScores[mainview.id].evalContext;\r\n        const keys = Object.keys(keep_for_closure_original_funcs);\r\n        // for (let k of keys) ret['_raw_'+k] = keep_for_closure_original_funcs[k];\r\n        for (let k of keys) {\r\n            if (!keep_for_closure_original_funcs[k]) continue;\r\n            ret[k] = (..._params: any) => keep_for_closure_original_funcs[k](lastContext, ..._params);\r\n        }\r\n\r\n        return ret; }\r\n\r\n\r\n    get_father(context: Context): this[\"father\"] { return LPointerTargetable.fromPointer(context.data.father); }\r\n    set_father(val: Pack1<this[\"father\"]>, context: Context): boolean {\r\n        let ptr: DGraphElement[\"father\"] = Pointers.from(val) as any;\r\n        SetFieldAction.new(context.data, 'father', ptr, undefined, true);\r\n        if (ptr) SetFieldAction.new(ptr as any, 'subElements+=', context.data.id);\r\n        return true; }\r\n\r\n    __info_of__isselected: Info = {type: \"Dictionary<Pointer<User>, true>\",\r\n        txt:<div>A map that contains all the users selecting this element as keys, and always true as a value (if present).\r\n            <br/>Edit it through node.select() and node.deselect()</div>}\r\n    __info_of__select: Info = {type:\"function(forUser?:Pointer<User>):void\", txt:\"Marks this node as selected by argument user.\"};\r\n    __info_of__deselect: Info = {type:\"function(forUser?:Pointer<User>):void\", txt:\"Un-marks this node as selected by argument user.\"};\r\n    __info_of__toggleSelect: Info = {type:\"function(usr?:Pointer<User>):void\", txt:\"Calls this.select(usr) if the node is selected by argument user, this.deselect(usr) otherwise. If omitted, argument \\\"usr\\\" is the current user id.<br>Returns the result of this.isSelected() after the toggle.\"};\r\n    __info_of__isSelected: Info = {type:\"function(forUser?:Pointer<User>):void\", txt:\"Tells if this node is selected by argument user.\"};\r\n    select(forUser?: Pointer<DUser>): void { return this.wrongAccessMessage(\"node.select()\"); }\r\n    deselect(forUser?: Pointer<DUser>): void { return this.wrongAccessMessage(\"node.deselect()\"); }\r\n    toggleSelected(forUser?: Pointer<DUser>): void { return this.wrongAccessMessage(\"node.toggleSelected()\"); }\r\n    isSelected(forUser?: Pointer<DUser>): boolean { return this.wrongAccessMessage(\"node.isSelected()\"); }\r\n    get_select(c: Context): (forUser?: Pointer<DUser>)=>void {\r\n        return (forUser?: Pointer<DUser>)=> {\r\n            if (!forUser) forUser = DUser.current;\r\n            if (c.data.isSelected[forUser]) return; // no-op\r\n            let map = {...c.data.isSelected};\r\n            map[forUser] = true;\r\n            SetFieldAction.new(c.data.id, \"isSelected\", map, undefined, false);\r\n            // todo: actually they are pointer to users, but i'm assuming users are not erased at runtime. on deselect too\r\n        }\r\n    }\r\n    get_deselect(c: Context): (forUser?: Pointer<DUser>)=>void {\r\n        return (forUser?: Pointer<DUser>)=> {\r\n            if (!forUser) forUser = DUser.current;\r\n            if (!c.data.isSelected[forUser]) return; // no-op\r\n            let map = {...c.data.isSelected};\r\n            delete map[forUser];\r\n            SetFieldAction.new(c.data.id, \"isSelected\", map, undefined, false);\r\n            // todo: actually they are pointer to users, but i'm assuming users are not erased at runtime. on deselect too\r\n        }\r\n    }\r\n    get_toggleSelected(context: Context): ((forUser?: Pointer<DUser>) => boolean) {\r\n        return (forUser?: Pointer<DUser>): boolean => {\r\n            if (!forUser) forUser = DUser.current;\r\n            if (this.get_isSelected(context)(forUser)) {\r\n                this.get_deselect(context)(forUser);\r\n                return false;\r\n            } else {\r\n                this.get_select(context)(forUser);\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    get_isSelected(context: Context): ((forUser?: Pointer<DUser>) => boolean) {\r\n        return (forUser?: Pointer<DUser>): boolean => {\r\n            if (!forUser) forUser = DUser.current;\r\n            return !!context.data.isSelected[forUser]; }\r\n    }\r\n    set_isSelected(val: this[\"isSelected\"], context: Context): boolean {\r\n        return this.cannotSet(\"graphElement.isSelected(): use this.select() or this.deselect() instead.\");\r\n    }\r\n    /*\r\n    get_isSelected(context: LogicContext<DVoidVertex>): GObject {\r\n        return DPointerTargetable.mapWrap(context.data.isSelected, context.data, 'idlookup.' + context.data.id + '.isSelected', []);\r\n    }*/\r\n\r\n\r\n\r\n    // for edges\r\n    public get_startPoint(c: Context|undefined, size?: GraphSize, view?: LViewElement): GraphPoint { return this.get_startEndPoint(c, size, view, true); }\r\n    public get_endPoint(c: Context|undefined, size?: GraphSize, view?: LViewElement): GraphPoint { return this.get_startEndPoint(c, size, view, false); }\r\n    private get_startEndPoint(c: Context|undefined, size?: GraphSize, view?: LViewElement, isStart:boolean=true): GraphPoint {\r\n        if (!size) {\r\n            if (c) size = this.get_size(c) as any; else size = Log.exDevv(\"invalid arguments in get_startEndPoint\", {arguments});\r\n        }\r\n        if (!view) {\r\n            // if (c) view = this.get_view(c); else view = Log.exDevv(\"invalid arguments in get_startPoint\", {arguments});\r\n            view = c && this.get_view(c) || Log.exDevv(\"invalid arguments in get_startEndPoint\", {arguments});\r\n        }\r\n        let offset: GraphPoint = (view as LViewElement)[isStart ? \"edgeStartOffset\" : \"edgeEndOffset\"];\r\n        let isPercentage: boolean = (view as LViewElement)[isStart ? \"edgeStartOffset_isPercentage\" : \"edgeEndOffset_isPercentage\"];\r\n        if (!size) size = new GraphSize(0, 0, 0, 0);\r\n        if (isPercentage) offset = new GraphPoint(offset.x/100*(size.w), offset.y/100*(size.h));\r\n        return size.tl().add(offset, false);\r\n    }\r\n\r\n}\r\nRuntimeAccessibleClass.set_extend(DPointerTargetable, DGraphElement);\r\nRuntimeAccessibleClass.set_extend(LPointerTargetable, LGraphElement)\r\n\r\n\r\n@RuntimeAccessible('DGraph')\r\nexport class DGraph extends DGraphElement {\r\n    // static _super = DGraphElement;\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    // static singleton: LGraph;\r\n    // static logic: typeof LGraph;\r\n    // static structure: typeof DGraph;\r\n\r\n    // inherit redefine\r\n    father!: Pointer<DGraphElement, 1, 1, LGraphElement>;\r\n    id!: Pointer<DGraph, 1, 1, LGraph>;\r\n    graph!: Pointer<DGraph, 1, 1, LGraph>;\r\n    model!: Pointer<DModelElement, 1, 1, LModelElement>;\r\n    isSelected!: Dictionary<DocString<Pointer<DUser>>, boolean>;\r\n    // containedIn!: Pointer<DGraphElement, 0, 1, LGraphElement>;\r\n    subElements!: Pointer<DGraphElement, 0, 'N', LGraphElement>;\r\n    state!: GObject;\r\n    // personal attributes\r\n    zoom!: GraphPoint;\r\n    offset!: GraphPoint; // in-graph scrolling offset\r\n\r\n    public static new(htmlindex: number, model: DGraph[\"model\"],\r\n                      parentNodeID?: DGraphElement[\"father\"], // immediate parent\r\n                      parentgraphID?: DGraphElement[\"graph\"], // graph containing this subgraph (redudant? could get it from father chain)\r\n                      nodeID?: DGraphElement[\"id\"] // this id\r\n    ): DGraph {\r\n        return new Constructors(new DGraph('dwc'), parentNodeID, true, undefined, nodeID || Constructors.DGraph_makeID(model))\r\n            .DPointerTargetable()\r\n            .DGraphElement(model, parentgraphID, htmlindex).DGraph().end();\r\n    }\r\n\r\n\r\n    static getNodes(dmp: import(\"../logicWrapper/LModelElement\").DModelElement[], out: {$matched: JQuery<HTMLElement>; $notMatched: JQuery<HTMLElement>; }): JQuery<HTMLElement> {\r\n        let $allnodes = $('[data-dataid]');\r\n        let matchedids: Pointer[] = (dmp || []).map(d => d.id);\r\n        let matchedidmap:Dictionary<string, boolean> = U.objectFromArrayValues(matchedids);\r\n        if (!out) out = {} as any;\r\n\r\n        let allnodesarr = [...$allnodes];\r\n        let filternode = (d: HTMLElement) => {\r\n            if (!d?.dataset?.dataid) return false;\r\n            let id: string = ''+d?.dataset?.dataid;\r\n            return matchedidmap[id]; };\r\n        out.$matched = $(allnodesarr.filter(filternode));\r\n        out.$notMatched = $(allnodesarr.filter((n) => !filternode(n)));\r\n        return out.$matched;\r\n        // throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n}\r\nvar nosize: GraphSize = {x:0, y:0, w:0, h:0, nosize:true} as any;\r\nvar defaultEdgePointSize: GraphSize = undefined as any; // = {x:0, y:0, w:5, h:5};\r\nvar defaultVertexSize: GraphSize = undefined as any; // {x:0, y:0, w:140.6818084716797, h:32.52840805053711};\r\n\r\n\r\n@RuntimeAccessible('LGraph')\r\nexport class LGraph<Context extends LogicContext<DGraph> = any, D extends DGraph = any> extends LGraphElement {\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    // static singleton: LGraph;\r\n    // static logic: typeof LGraph;\r\n    // static structure: typeof DGraph;\r\n\r\n    // inherit redefine\r\n    __raw!: DGraph;\r\n    id!: Pointer<DGraph, 1, 1, LGraph>;\r\n    graph!: LGraph;\r\n    model?: LModelElement;\r\n    // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\r\n    isSelected(forUser?: Pointer<DUser>): boolean { return this.wrongAccessMessage(\"node.isSelected()\"); }\r\n    // containedIn?: LGraphElement;\r\n    subElements!: LGraphElement[];\r\n    _state!: GObject<\"proxified\">; // LMap;\r\n    // personal attributes\r\n    zoom!: GraphPoint;\r\n    graphSize!: GraphSize; // derived attribute: bounding rect containing all subnodes, while \"size\" is instead external size of the vertex holding the graph in GraphVertexes\r\n    offset!: GraphPoint; // Scrolling position inside the graph\r\n\r\n    // get_graphSize(context: LogicContext<DGraph>):  Readonly<GraphSize> { return todo: get bounding rect containing all subnodes.; }\r\n    get_offset(context: LogicContext<DGraph>):  Readonly<GraphSize> {\r\n        return new GraphSize(context.data.offset.x, context.data.offset.y);\r\n    }\r\n    set_offset(val: Partial<GraphPoint>, context: Context): boolean {\r\n        if (!val) val = {x:0, y:0};\r\n        if (context.data.offset.x === val.x && context.data.offset.y === val.y) return true;\r\n        if (val.x === undefined && context.data.offset.x !== val.x) val.x = context.data.offset.x;\r\n        if (val.y === undefined && context.data.offset.y !== val.y) val.y = context.data.offset.y;\r\n        SetFieldAction.new(context.data, \"offset\", val as GraphPoint);\r\n        return true;\r\n    }\r\n    get_zoom(context: Context): GraphPoint {\r\n        const zoom: GraphPoint = context.data.zoom;\r\n        // (zoom as any).debug = {rawgraph: context.data.__raw, zoomx: context.data.zoom.x, zoomy: context.data.zoom.y}\r\n        return context.data.zoom; }\r\n\r\n    toGraphSize(...a:Parameters<this[\"coord\"]>): ReturnType<this[\"coord\"]>{ return this.wrongAccessMessage(\"toGraphSize\"); }\r\n    coord(htmlSize: Size): GraphSize { return this.wrongAccessMessage(\"toGraphSize\"); }\r\n    get_coord(context: Context): (htmlSize: Size) => GraphSize {\r\n        return (htmlSize: Size)=> {\r\n            let size: Size = this.get_htmlSize(context);\r\n            let zoom: GraphPoint = this.get_zoom(context);\r\n            return new GraphSize((htmlSize.x - size.x) / zoom.x, (htmlSize.y - size.y) / zoom.y, htmlSize.w/zoom.x, htmlSize.h/zoom.y);\r\n        }\r\n    }\r\n    // get_htmlSize(context: Context): Size { }\r\n    translateSize<T extends GraphSize|GraphPoint>(ret: T, innerGraph: LGraph): T { return this.wrongAccessMessage(\"translateSize()\"); }\r\n    translateHtmlSize<T extends Size|Point, G = T extends Size ? GraphSize : GraphPoint>(size: T): G { return this.wrongAccessMessage(\"translateHtmlSize()\"); }\r\n\r\n    __info_of__zoom: Info = {type:GraphPoint.cname, label:\"zoom\", txt:\"Scales the graph and all subelements by a factor.\"};\r\n    set_zoom(val: Partial<GraphPoint>, c: Context): boolean{\r\n        SetFieldAction.new(c.data, 'zoom', val as any, '+=', false);\r\n        return true;\r\n    }\r\n    __info_of__offset: Info = {type:GraphPoint.cname, label:\"offset\", txt:\"In-graph scrolling position.\"};\r\n    __info_of__graphSize: Info = {type:GraphSize.cname, label:\"graphSize\", txt:\"size internal to the graph, including internal scroll and panning.\"};\r\n    __info_of__translateSize: Info = {type:\"(T, Graph)=>T where T is GraphSize | GraphPoint\", txt:\"Translates a coordinate set from the local coordinates of a SubGraph to this Graph containing it.\"};\r\n    __info_of__translateHtmlSize: Info = {type:\"(Size|Point) => GraphSize|GraphPoint\", txt:\"Translate page\\'s viewport coordinate set to this graph coordinate set.\"};\r\n    get_translateHtmlSize<T extends Size|Point, G = T extends Size ? GraphSize : GraphPoint>(c: Context): ((size: T) => G) {\r\n        return (size: T): G => {\r\n            let graphHtmlSize = this.get_htmlSize(c);\r\n            let a = size.subtract(graphHtmlSize.tl(), true);\r\n            let b = a.add({x:c.data.offset.x, y:c.data.offset.y}, false);\r\n            return b.multiply(c.data.zoom, false) as any as G;\r\n        }\r\n    }\r\n\r\n    get_translateSize<T extends GraphSize|GraphPoint>(c: Context): ((size: T, innerGraph: LGraph) => T) {\r\n        return (size: T, innerGraph: LGraph): T => {\r\n            innerGraph = LPointerTargetable.wrap(innerGraph) as LGraph;\r\n            let ret: T = (size.hasOwnProperty(\"w\") ? new GraphSize(size.x, size.y, (size as GraphSize).w, (size as GraphSize).h) : new GraphPoint(size.x, size.y)) as T;\r\n            Log.ex(!innerGraph, \"translateSize() graph parameter is invalid: \"+innerGraph, innerGraph, c);\r\n            let ancestors: LGraph[] = [innerGraph, ...innerGraph.graphAncestors]\r\n            Log.ex(ancestors.indexOf(c.proxyObject) !== -1, \"translateSize() graph parameter is invalid: it must be a graph containing the current one.\", innerGraph, c);\r\n            for (let g of ancestors) ret.add(g.size.tl(), false);\r\n            // console.log(\"translateSize\", {c, thiss:c.proxyObject, ancestors, ancestorSizes: ancestors.map(a=> a.size.tl()), size, ret});\r\n            return ret; }\r\n    }\r\n    contains(elem: LGraphElement): boolean{ return this.wrongAccessMessage(\"contains()\"); }\r\n    get_contains(c: Context): ((elem: LGraphElement)=> boolean) {\r\n        return (elem: LGraphElement): boolean => {\r\n            let current = elem;\r\n            let next = elem.father;\r\n            let targetid = c.proxyObject.id;\r\n            if (current.id !== targetid) return true;\r\n            while(next && current.id !== next.id) {\r\n                current = next;\r\n                next = next.father;\r\n                if (current.id !== targetid) return true;\r\n            }\r\n            return false;\r\n        }}\r\n}\r\nRuntimeAccessibleClass.set_extend(DGraphElement, DGraph);\r\nRuntimeAccessibleClass.set_extend(LGraphElement, LGraph);\r\n// export const defaultVSize: GraphSize = new GraphSize(0, 0, 300, 160); // useless, now it's in view.DefaultVSize\r\n// export const defaultEPSize: GraphSize = new GraphSize(0, 0, 15, 15); // useless, now it's in view.DefaultVSize\r\n\r\n\r\n@RuntimeAccessible('DVoidVertex')\r\nexport class DVoidVertex extends DGraphElement {\r\n    // static _super = DGraphElement;\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    // static singleton: LVoidVertex;\r\n    // static logic: typeof LVoidVertex;\r\n    // static structure: typeof DVoidVertex;\r\n\r\n    // inherit redefine\r\n    id!: Pointer<DVoidVertex, 1, 1, LVoidVertex>;\r\n    graph!: Pointer<DGraph, 1, 1, LGraph>;\r\n    model!: Pointer<DModelElement, 0, 1, LModelElement>;\r\n    isSelected!: Dictionary<DocString<Pointer<DUser>>, boolean>;\r\n    // containedIn!: Pointer<DGraphElement, 0, 1, LGraphElement>;\r\n    subElements!: Pointer<DGraphElement, 0, 'N', LGraphElement>;\r\n    state!: GObject;\r\n    zoom!: GraphPoint;\r\n    // personal attributes\r\n    x!: number;\r\n    y!: number;\r\n    w!: number;\r\n    h!: number;\r\n    isResized!: boolean;\r\n    // size?: GraphSize; // virtual, gets extracted from this. x and y are stored directly here as it extends GraphSize\r\n\r\n    public static new(htmlindex: number, model: DGraphElement[\"model\"], parentNodeID: DGraphElement[\"father\"], graphID: DGraphElement[\"graph\"], nodeID?: DGraphElement[\"id\"],\r\n                      size?: InitialVertexSize): DVoidVertex {\r\n        return new Constructors(new DVoidVertex('dwc'), parentNodeID, true, undefined, nodeID)\r\n            .DPointerTargetable()\r\n            .DGraphElement(model, graphID, htmlindex)\r\n            .DVoidVertex(size || defaultVertexSize).end();\r\n    }\r\n\r\n}\r\n\r\n@RuntimeAccessible('LVoidVertex')\r\nexport class LVoidVertex<Context extends LogicContext<DVoidVertex> = any, C extends Context = Context> extends LGraphElement {// <D extends DVoidVertex = any>\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    // static singleton: LVoidVertex;\r\n    // static logic: typeof LVoidVertex;\r\n    // static structure: typeof DVoidVertex;\r\n\r\n    // inherit redefine\r\n    __raw!: DVoidVertex;\r\n    id!: Pointer<DVoidVertex, 1, 1, LVoidVertex>;\r\n    graph!: LGraph;\r\n    model?: LModelElement;\r\n    // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\r\n    isSelected(forUser?: Pointer<DUser>): boolean { return this.wrongAccessMessage(\"node.isSelected()\"); }\r\n    // containedIn?: LGraphElement;\r\n    subElements!: LGraphElement[];\r\n    _state!: GObject<\"proxified\">; // LMap;\r\n    zoom!: GraphPoint;\r\n    isResized!: boolean;\r\n\r\n    // personal attributes\r\n    x!: number;\r\n    y!: number;\r\n    w!: number;\r\n    h!: number;\r\n    size!: GraphSize; // virtual, gets extracted from this. x and y are stored directly here as it extends GraphSize\r\n    __info_of__size = {type: \"?GraphSize\", txt: \"Size of the vertex, if null it means is utilizing the defaultSize from view. recommended to read component.getSize() instead of this.\"};\r\n\r\n    get_isResized(context: LogicContext<DVoidVertex>): DVoidVertex[\"isResized\"] { return context.data.isResized; }\r\n    set_isResized(val: DVoidVertex[\"isResized\"], context: LogicContext<DVoidVertex>): DVoidVertex[\"isResized\"] {\r\n        return SetFieldAction.new(context.data.id, \"isResized\", val);\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nRuntimeAccessibleClass.set_extend(DGraphElement, DVoidVertex);\r\nRuntimeAccessibleClass.set_extend(LGraphElement, LVoidVertex);\r\n@RuntimeAccessible('DEdgePoint')\r\nexport class DEdgePoint extends DVoidVertex { // DVoidVertex\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    // static singleton: LEdgePoint;\r\n    // static logic: typeof LEdgePoint;\r\n    // static structure: typeof DEdgePoint;\r\n\r\n    // inherit redefine\r\n    id!: Pointer<DEdgePoint, 1, 1, LEdgePoint>;\r\n    father!: Pointer<DVoidEdge, 1, 1, LVoidEdge>;\r\n    graph!: Pointer<DGraph, 1, 1, LGraph>;\r\n    model!: Pointer<DModelElement, 0, 1, LModelElement>; // todo: if null gets model from this.father (edge)?\r\n    isSelected!: Dictionary<DocString<Pointer<DUser>>, boolean>;\r\n    // containedIn!: Pointer<DGraphElement, 0, 1, LGraphElement>;\r\n    subElements!: Pointer<DGraphElement, 0, 'N', LGraphElement>;\r\n    zoom!: GraphPoint;\r\n    x!: number;\r\n    y!: number;\r\n    w!: number;\r\n    h!: number;\r\n    size?: GraphSize; //／／ virtual, gets extracted from this. x and y are stored directly here as it extends GraphSize\r\n    // personal attributes\r\n    __isDEdgePoint!: true;\r\n    currentCoordType?: CoordinateMode;\r\n\r\n    public static new(htmlindex: number, model: DEdgePoint[\"model\"] | undefined, parentNodeID: DEdgePoint[\"father\"], graphID?: DEdgePoint[\"graph\"], nodeID?: DGraphElement[\"id\"],\r\n                      size?: InitialVertexSize): DEdgePoint {\r\n        return new Constructors(new DEdgePoint('dwc'), parentNodeID, true, undefined, nodeID)\r\n            .DGraphElement(undefined, graphID, htmlindex)\r\n            .DVoidVertex(size || defaultEdgePointSize).DEdgePoint().end();\r\n    }\r\n\r\n}\r\n\r\n@RuntimeAccessible('LEdgePoint')\r\nexport class LEdgePoint<Context extends LogicContext<DEdgePoint> = any, C extends Context = Context> extends LVoidVertex {\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    // static singleton: LEdgePoint;\r\n    // static logic: typeof LEdgePoint;\r\n    // static structure: typeof DEdgePoint;\r\n\r\n    // inherit redefine\r\n    father!: LVoidEdge;\r\n    // __raw!: DEdgePoint;\r\n    id!: Pointer<DEdgePoint, 1, 1, LEdgePoint>;\r\n    graph!: LGraph;\r\n    model?: LModelElement;\r\n    // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\r\n    isSelected(forUser?: Pointer<DUser>): boolean { return this.wrongAccessMessage(\"node.isSelected()\"); }\r\n    // containedIn?: LGraphElement;\r\n    subElements!: LGraphElement[];\r\n    zoom!: GraphPoint;\r\n    x!: number;\r\n    y!: number;\r\n    w!: number;\r\n    h!: number;\r\n    size!: GraphSize; // virtual, gets extracted from this. x and y are stored directly here as it extends GraphSize\r\n    // personal attributes\r\n    __isLEdgePoint!: true;\r\n    edge!: LVoidEdge; // returns container edge\r\n    __info_of__edge: Info = {type:\"?LEdge\", txt:\"returns the containing edge if called on an EdgePoint, \\\"this\\\" if called on an edge, undefined otherwise.\"}\r\n\r\n    public get_edge(c: Context): LVoidEdge { return c.proxyObject.father; }\r\n    public set_edge(v: Pack1<LVoidEdge>, c: Context): boolean { return this.set_father(v as any, c); }\r\n\r\n\r\n\r\n\r\n    static decodeCoords<T extends Partial<EPSize>>(size0: T, sp:GraphPoint, ep: GraphPoint): T/*absolute*/{\r\n        let size: any = size0;\r\n        let ret: any = ((\"w\" in size || \"h\" in size) ? new GraphSize() : new GraphPoint()); // GObject<Partial<GraphSize>>;\r\n        switch (size.currentCoordType) {\r\n            default: return Log.exDevv(\"translatePosCoords() invalid coordinate mode\", {mode:size.currentCoordType});\r\n            // case CoordinateMode.absolute: return size;\r\n            case CoordinateMode.absolute: case undefined: case null:\r\n                if (size.x !== undefined) ret.x = size.x;\r\n                if (size.y !== undefined) ret.y = size.y;\r\n                break;\r\n            case CoordinateMode.relativePercent:\r\n                //maybe do: dampening factor on relative % offset? is it possible?\r\n                // let s = this.getBasicSize(c);\r\n                // MATH:\r\n                // size.x = sp.x*x% + ep.x*(1-x%)\r\n                // size.x = sp.x*x% + ep.x - ep.x*x%\r\n                // size.x - ep.x= (sp.x - ep.x)*x%\r\n                // (size.x - ep.x) / (sp.x - ep.x) = x% // actually i inverted <sp, ep> in first equation, so reverse them in result too.\r\n                if (size.x !== undefined) ret.x = (1 - size.x) * sp.x + (size.x) * ep.x;\r\n                if (size.y !== undefined) ret.y = (1 - size.y) * sp.y + (size.y) * ep.y;\r\n                break;\r\n            case CoordinateMode.relativeOffset:\r\n            case CoordinateMode.relativeOffsetStart:\r\n            case CoordinateMode.relativeOffsetEnd:\r\n                let useStart: boolean;\r\n                let useEnd: boolean;\r\n                switch (size.currentCoordType) {\r\n                    default:\r\n                    case CoordinateMode.relativeOffset: useStart = true; useEnd = true; break;\r\n                    case CoordinateMode.relativeOffsetStart: useStart = true; useEnd = false; break;\r\n                    case CoordinateMode.relativeOffsetEnd: useStart = false; useEnd = true; break;\r\n                }\r\n                // offset = sp - size\r\n                // size = offset - sp\r\n                // in reverse: actualsize = offset, size=offset\r\n\r\n                // if coords are already in absolute mode.\r\n                let xIsAbsolute: number | undefined = (size.x&&!Array.isArray(size.x)) ? size.x : undefined;\r\n                let yIsAbsolute: number | undefined = (size.x&&!Array.isArray(size.x)) ? size.x : undefined;\r\n                Log.w(!!(xIsAbsolute || yIsAbsolute), \"decoding relative offset require an array size coordinate system. x=[x1, x2] --> x\", {size});\r\n\r\n                let offsetsp = useStart ? new GraphPoint(xIsAbsolute || size.x[0] + sp.x, yIsAbsolute || size.y[0] + sp.y) : new GraphPoint();\r\n                let offsetep = useEnd ? new GraphPoint(xIsAbsolute || size.x[1] + ep.x, yIsAbsolute || size.y[1] + ep.y) : new GraphPoint();\r\n                // if the start and endpoint of the edge didn't move, offsetsp = offsetep.\r\n                // if they moved, those 2 are discordant --> i pick middle\r\n                offsetsp.add(offsetep, false);\r\n                if (useStart && useEnd) offsetsp.divide(2, false);\r\n                if (!xIsAbsolute && size.x !== undefined) ret.x = offsetsp.x;\r\n                if (!yIsAbsolute && size.y !== undefined) ret.y = offsetsp.y;\r\n                if (xIsAbsolute) {\r\n                    ret.x = size.x;\r\n                }\r\n                if (yIsAbsolute) {\r\n                    ret.y = size.y;\r\n                }\r\n                break;\r\n        }\r\n        if (size.x === undefined) delete ret.x;\r\n        if (size.y === undefined) delete ret.y;\r\n        if ((size as any).w === undefined) delete ret.w; else ret.w = size.w;\r\n        if ((size as any).h === undefined) delete ret.h; else ret.h = size.h;\r\n        ret.currentCoordType = CoordinateMode.absolute;\r\n        // console.log(\"decode coords\", {size, sp, ep, ret});\r\n        return ret;\r\n    }\r\n    // from x,y as coords, to x%,y% as % of ((1-val)%*startpt) + ((val)%*endpt)\r\n    public decodePosCoords<T extends Partial<GraphSize> | Partial<GraphPoint>>(c: Context, size: T&any, view: LViewElement, sp0?: GraphPoint, ep0?: GraphPoint): T {\r\n        let le: LVoidEdge = c&&c.proxyObject.father;\r\n        // console.log(\"decodepos:\", {le, sp0, lesp:le?.startPoint});\r\n        let sp: GraphPoint = sp0||le.startPoint;\r\n        let ep: GraphPoint = ep0||le.endPoint;\r\n        return LEdgePoint.decodeCoords(size, sp, ep);\r\n    }\r\n\r\n    static testCoords(range: number = 30){\r\n        outer: for (let mode of [\"absolute\", \"relative%\", \"relativeOffset\", \"relativeOffsetStart\", \"relativeOffsetEnd\"])\r\n            for (let i = -range; i < range; i++)\r\n                for (let j = -range; j < range; j++){\r\n                    var s0 = {x:i, y:j};\r\n                    var sp = {x:10, y:10};\r\n                    var ep = {x:10, y:-10};\r\n                    // @ts-ignore\r\n                    var s1 = LEdgePoint.encodeCoords(s0, mode, sp, ep)\r\n                    // @ts-ignore\r\n                    var s00 = LEdgePoint.decodeCoords(s1, sp, ep);\r\n                    // @ts-ignore\r\n                    var error = Object.keys(s0).map( k=> s0[k].toFixed(3) === s00[k].toFixed(3) ? '' : k).join('');\r\n                    (mode != \"relative%\" && error ? console.error : console.log)({diff:[s00.x-s0.x, s00.y-s0.y].join(), i, j, mode, s1:[s1.x, s1.y].join(), s0, s00, error});\r\n                    if (mode != \"relative%\" && error ) break outer;\r\n                }\r\n    }\r\n    // @ts-ignore a\r\n\r\n    static encodeCoords<T extends Partial<EPSize>>(size0: T, edgePointCoordMode: CoordinateMode, sp:GraphPoint, ep: GraphPoint): T/*absolute*/{\r\n        let size: T = size0 as any;\r\n        if (edgePointCoordMode === size.currentCoordType ||\r\n            !size.currentCoordType && edgePointCoordMode === CoordinateMode.absolute) return size;\r\n        if (size.currentCoordType && size.currentCoordType !== CoordinateMode.absolute) size = LEdgePoint.decodeCoords(size, sp, ep);\r\n\r\n        let ret: any = ((\"w\" in size || \"h\" in size) ? new GraphSize() : new GraphPoint()); // GObject<Partial<GraphSize>>;\r\n        switch (edgePointCoordMode) {\r\n            default: return Log.exDevv(\"translatePosCoords() invalid coordinate mode\", {mode:edgePointCoordMode});\r\n            // case CoordinateMode.absolute: return size;\r\n            case CoordinateMode.relativePercent:\r\n                // let s = this.getBasicSize(c);\r\n                // MATH:\r\n                // size.x = sp.x*x% + ep.x*(1-x%)\r\n                // size.x = sp.x*x% + ep.x - ep.x*x%\r\n                // size.x - ep.x= (sp.x - ep.x)*x%\r\n                // (size.x - ep.x) / (sp.x - ep.x) = x% // actually i inverted <sp, ep> in first equation, so reverse them in result too.\r\n\r\n                if (sp.x === ep.x) ret.x = 0.5; // because otherwise it is infinity. so i force him to return in line.\r\n                else if (size.x !== undefined) ret.x = (size.x - sp.x) / (ep.x - sp.x);\r\n                if (sp.y === ep.y) ret.y = 0.5;\r\n                else if (size.y !== undefined) ret.y = (size.y - sp.y) / (ep.y - sp.y);\r\n                break;\r\n            case CoordinateMode.relativeOffset:\r\n            case CoordinateMode.relativeOffsetStart:\r\n            case CoordinateMode.relativeOffsetEnd:\r\n                let useStart: boolean;\r\n                let useEnd: boolean;\r\n                switch (edgePointCoordMode) {\r\n                    default:\r\n                    case CoordinateMode.relativeOffset: useStart = true; useEnd = true; break;\r\n                    case CoordinateMode.relativeOffsetStart: useStart = true; useEnd = false; break;\r\n                    case CoordinateMode.relativeOffsetEnd: useStart = false; useEnd = true; break;\r\n                }\r\n                if (size.x) ret.x = [useStart ? size.x - sp.x : -1, useEnd ? size.x - ep.x : -1];\r\n                if (size.y) ret.y = [useStart ? size.y - sp.y : -1, useEnd ? size.y - ep.y : -1];\r\n                /*\r\n                if (size.x) ret.x = [sp.x - size.x, ep.x - size.x];\r\n                if (size.y) ret.y = [sp.y - size.y, ep.y - size.y];*/\r\n                break;\r\n        }\r\n        if (size.x === undefined) delete ret.x;\r\n        if (size.y === undefined) delete ret.y;\r\n        if ((size as any).w === undefined) delete ret.w; else ret.w = (size as any).w;\r\n        if ((size as any).h === undefined) delete ret.h; else ret.h = (size as any).h;\r\n        // console.log(\"encode coorde\", {size, sp, ep, ret});\r\n        ret.currentCoordType = edgePointCoordMode;\r\n        return ret;\r\n    }\r\n    public encodePosCoords(c: Context, size0: Partial<EPSize>, view: LViewElement, sp0?: GraphPoint, ep0?: GraphPoint, mode?: CoordinateMode): Partial<EPSize> {\r\n        if (!view) view = this.get_view(c);\r\n        let size: Partial<EPSize> = size0 as any;\r\n        let edgePointCoordMode = mode || (view.__raw || view).edgePointCoordMode;\r\n        let le: LVoidEdge = c&&c.proxyObject.father;\r\n        let sp: GraphPoint = sp0 || le.startPoint;\r\n        let ep: GraphPoint = ep0 || le.endPoint;\r\n        return LEdgePoint.encodeCoords(size, edgePointCoordMode, sp, ep);\r\n    }\r\n\r\n    /* 13/10/2023 Giordano comment (defined in LPointerTargetable\r\n    public get_delete(context: Context): () => void {\r\n        // careful: pointedBy might be broken due to comment x984 (search it)\r\n        return super.get_delete(context);\r\n    }\r\n    */\r\n}\r\nRuntimeAccessibleClass.set_extend(DVoidVertex, DEdgePoint);\r\nRuntimeAccessibleClass.set_extend(LVoidVertex, LEdgePoint);\r\n\r\n@RuntimeAccessible('DVertex')\r\nexport class DVertex extends DGraphElement { // DVoidVertex\r\n    // static _super = DVoidVertex;\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    // static singleton: LVertex;\r\n    // static logic: typeof LVertex;\r\n    // static structure: typeof DVertex;\r\n\r\n    // inherit redefine\r\n    id!: Pointer<DVertex, 1, 1, LVertex>;\r\n    graph!: Pointer<DGraph, 1, 1, LGraph>;\r\n    model!: Pointer<DModelElement, 0, 1, LModelElement>;\r\n    isSelected!: Dictionary<DocString<Pointer<DUser>>, boolean>;\r\n    // containedIn!: Pointer<DGraphElement, 0, 1, LGraphElement>;\r\n    subElements!: Pointer<DGraphElement, 0, 'N', LGraphElement>;\r\n    zoom!: GraphPoint;\r\n    x!: number;\r\n    y!: number;\r\n    w!: number;\r\n    h!: number;\r\n    isResized!: boolean;\r\n    // size!: GraphSize; // virtual, gets extracted from this. x and y are stored directly here as it extends GraphSize\r\n    // personal attributes\r\n    __isDVertex!: true;\r\n\r\n    public static new(htmlindex: number, model: DGraphElement[\"model\"], parentNodeID: DGraphElement[\"father\"],\r\n                      graphID: DGraphElement[\"graph\"], nodeID?: DGraphElement[\"id\"], size?: GraphSize): DVertex {\r\n        return new Constructors(new DVertex('dwc'), parentNodeID, true, undefined, nodeID)\r\n            .DPointerTargetable()\r\n            .DGraphElement(model, graphID, htmlindex)\r\n            .DVoidVertex(size || defaultVertexSize).DVertex().end();\r\n    }\r\n}\r\n\r\n@RuntimeAccessible('LVertex')\r\nexport class LVertex<Context extends LogicContext<any> = any, D = DVertex> extends LVoidVertex {\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    // static singleton: LVertex;\r\n    // static logic: typeof LVertex;\r\n    // static structure: typeof DVertex;\r\n\r\n    // inherit redefine\r\n    __raw!: DVertex;\r\n    id!: Pointer<DVertex, 1, 1, LVertex>;\r\n    graph!: LGraph;\r\n    model?: LModelElement;\r\n    // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\r\n    isSelected(forUser?: Pointer<DUser>): boolean { return this.wrongAccessMessage(\"node.isSelected()\"); }\r\n    // containedIn?: LGraphElement;\r\n    subElements!: LGraphElement[];\r\n    zoom!: GraphPoint;\r\n    x!: number;\r\n    y!: number;\r\n    w!: number;\r\n    h!: number;\r\n    size!: GraphSize; // virtual, gets extracted from this. x and y are stored directly here as it extends GraphSize\r\n    isResized!: boolean;\r\n    // personal attributes\r\n    __isLVertex!: true;\r\n}\r\n\r\nRuntimeAccessibleClass.set_extend(DGraphElement, DVertex);\r\nRuntimeAccessibleClass.set_extend(LGraphElement, LVertex);\r\n\r\n@Leaf\r\n@RuntimeAccessible('DGraphVertex')\r\nexport class DGraphVertex extends DGraphElement { // MixOnlyFuncs(DGraph, DVertex)\r\n    // static _super1 = DGraph;\r\n    // static _super2 = DVertex;\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    // static singleton: LGraphVertex;\r\n    // static logic: typeof LGraphVertex;\r\n    // static structure: typeof DGraphVertex;\r\n\r\n    // inherit redefine\r\n    id!: Pointer<DGraphVertex, 1, 1>;\r\n    graph!: Pointer<DGraph, 1, 1, LGraph>;\r\n    model!: Pointer<DModelElement, 1, 1, LModelElement>;\r\n    isSelected!: Dictionary<DocString<Pointer<DUser>>, boolean>;\r\n    // containedIn!: Pointer<DGraphElement, 0, 1, LGraphElement>;\r\n    subElements!: Pointer<DGraphElement, 0, 'N', LGraphElement>;\r\n    // from graph\r\n    zoom!: GraphPoint;\r\n    offset!: GraphPoint; // in-graph scrolling position\r\n\r\n    // from VoidVertex\r\n    x!: number;\r\n    y!: number;\r\n    w!: number;\r\n    h!: number;\r\n    isResized!: boolean;\r\n    // size!: GraphSize; // virtual\r\n    // from graph\r\n\r\n    // personal attributes\r\n    __isDVertex!: true;\r\n    __isDGraph!: true;\r\n    __isDGraphVertex!: true;\r\n\r\n    public static new(htmlindex: number, model: DGraph[\"model\"], parentNodeID: DGraphElement[\"father\"],\r\n                      graphID: DGraphElement[\"graph\"], nodeID?: DGraphElement[\"id\"], size?: GraphSize): DGraphVertex {\r\n        return new Constructors(new DGraphVertex('dwc'), parentNodeID, true, undefined, nodeID)\r\n            .DPointerTargetable().DGraphElement(model, graphID, htmlindex)\r\n            .DVoidVertex(size || defaultVertexSize).DVertex().DGraph().end();\r\n    }\r\n\r\n\r\n    /*\r\n        static init_constructor(thiss: DGraphVertex, isUser: boolean = false, nodeID: string | undefined, graphID: string | undefined, model: Pointer<DModel>): void {\r\n            DGraph.init_constructor(thiss, isUser, nodeID, graphID, model);\r\n    //isUser: boolean = false, nodeID: string | undefined, graphID: string, model?: Pointer<DModel>\r\n            DVertex.init_constructor(thiss, isUser, nodeID, graphID as string, model);\r\n            thiss.className = this.name;\r\n        }*/\r\n}\r\nclass LG extends LGraph{}\r\nclass LV extends LVertex{}\r\n\r\nconst Mixed = MixOnlyFuncs(LG, LV) as (typeof LG & typeof LV & typeof RuntimeAccessibleClass);\r\n@RuntimeAccessible('LGraphVertex')\r\n//@ts-ignore TS2510\r\nexport class LGraphVertex<Context extends LogicContext<any> = any, D extends DGraphVertex = any> extends Mixed { // MixOnlyFuncs(LGraph, LVertex)\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    // static singleton: LGraphVertex;\r\n    // static logic: typeof LGraphVertex;\r\n    // static structure: typeof DGraphVertex;\r\n\r\n    // inherit redefine\r\n    __raw!: DGraphVertex;\r\n    id!: Pointer<DGraphVertex, 1, 1>;\r\n    graph!: LGraph;\r\n    model?: LModelElement;\r\n    // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\r\n    isSelected(forUser?: Pointer<DUser>): boolean { return this.wrongAccessMessage(\"node.isSelected()\"); }\r\n    // containedIn?: LGraphElement;\r\n    ///////////////////////////////////////// subElements!: LGraphElement[];\r\n    // from graph\r\n    zoom!: GraphPoint;\r\n    offset!: GraphPoint; // in-graph scrolling position\r\n    graphSize!: GraphSize; // internal size of the graph. can be huge even if the sub-graph is in a small window (scroll)\r\n\r\n    // from VoidVertex\r\n    x!: number;\r\n    y!: number;\r\n    w!: number;\r\n    h!: number;\r\n    isResized!: boolean;\r\n    size!: GraphSize; // virtual\r\n\r\n\r\n    // personal attributes\r\n    __isLVertex!: true;\r\n    __isLGraph!: true;\r\n    __isLGraphVertex!: true;\r\n}\r\n\r\nRuntimeAccessibleClass.set_extend(DGraph, DGraphVertex);\r\nRuntimeAccessibleClass.set_extend(DVertex, DGraphVertex);\r\nRuntimeAccessibleClass.set_extend(LGraph, LGraphVertex);\r\nRuntimeAccessibleClass.set_extend(LVertex, LGraphVertex);\r\n\r\n\r\n@RuntimeAccessible('DVoidEdge')\r\nexport class DVoidEdge extends DGraphElement {\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    // static singleton: LVoidEdge;\r\n    // static logic: typeof LVoidEdge;\r\n    // static structure: typeof DVoidEdge;\r\n    id!: Pointer<DVoidEdge, 1, 1, LVoidEdge>;\r\n    graph!: Pointer<DGraph, 1, 1, LGraph>;\r\n    model!: Pointer<DModelElement, 0, 1, LModelElement>;\r\n    // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\r\n    isSelected!: Dictionary<DocString<Pointer<DUser>>, boolean>;\r\n    // containedIn!: Pointer<DGraphElement, 0, 1, LGraphElement>;\r\n    subElements!: Pointer<DGraphElement, 0, 'N', LGraphElement>;\r\n\r\n    // personal attributes\r\n    start!: Pointer<DGraphElement, 1, 1, LGraphElement>;\r\n    end!: Pointer<DGraphElement, 1, 1, LGraphElement>;\r\n    __isDVoidEdge!: true;\r\n\r\n    midPoints!: InitialVertexSize[]; // the logic part which instructs to generate the midnodes\r\n    midnodes!: Pointer<DEdgePoint, 1, 1, LEdgePoint>[]; // using subelements instead most of times\r\n\r\n    longestLabel!: PrimitiveType | labelfunc;\r\n    labels!: PrimitiveType[] | labelfunc[];\r\n    anchorStart?: string;\r\n    anchorEnd?: string;\r\n    // endFollow!: boolean; they became derived attributes from static properties\r\n    // startFollow!: boolean;\r\n\r\n    static isFollowingCoords: GraphPoint;\r\n\r\n    public static new(htmlindex: number, model: DGraph[\"model\"]|null|undefined, parentNodeID: DGraphElement[\"father\"], graphID: DGraphElement[\"graph\"],\r\n                      nodeID: DGraphElement[\"id\"]|undefined, start: DGraphElement[\"id\"], end: DGraphElement[\"id\"],\r\n                      longestLabel?: DEdge[\"longestLabel\"], labels?: DEdge[\"labels\"]): DEdge {\r\n        return new Constructors(new DEdge('dwc'), parentNodeID, true, undefined, nodeID)\r\n            .DPointerTargetable()\r\n            .DGraphElement(model, graphID, htmlindex)\r\n            .DVoidEdge(start, end, longestLabel, labels).end();\r\n    }\r\n    public static new2(model: DGraph[\"model\"]|null|undefined, parentNodeID: DGraphElement[\"father\"], graphID: DGraphElement[\"graph\"],\r\n                       nodeID: DGraphElement[\"id\"]|undefined, start: DGraphElement[\"id\"], end: DGraphElement[\"id\"], setter:((d: DEdge) => any)): DEdge {\r\n        return new Constructors(new DEdge('dwc'), parentNodeID, true, undefined, nodeID)\r\n            .DPointerTargetable()\r\n            .DGraphElement(model, graphID)\r\n            .DVoidEdge(start, end).end(setter);\r\n    }\r\n}\r\n/*\r\n@RuntimeAccessible\r\nexport class MidPoint{\r\n    readonly id: string; // not really a pointer, it's not on store.\r\n    x?: number; y?: number;\r\n    readonly w?: number; // if it's modified it's not ever here (initial size) but on DEdgePoint that is a Node.\r\n    readonly h?: number;/*\r\n    constructor2(x: number=5, y: number=5, w: number=5, h: number=5) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.w = w;\r\n        this.h = h;\r\n    }* /\r\nconstructor(id: string, w: number=5, h: number=5) {\r\n    this.id = id;\r\n    this.w = w;\r\n    this.h = h;\r\n}\r\n}*/\r\n@RuntimeAccessible('EdgeSegment')\r\nexport class EdgeSegment{\r\n    index: number;\r\n    prev: EdgeSegment | undefined;\r\n    start: segmentmaker;\r\n    bezier: segmentmaker[];\r\n    end: segmentmaker;\r\n    length!: number;\r\n    d!: string;\r\n    dpart!: string; //  a segment of the whole path\r\n    m!: number; // m coefficient of the line between start and end.\r\n    rad!: number; // for head and tails: radian angle of the segment.\r\n    radLabels!: number; // for labels: it flips the angle when it's < PI/2 so the text is never upside down\r\n\r\n    isLongest!: boolean;\r\n    label!: PrimitiveType | JSX.Element | undefined;\r\n    svgLetter: EdgeBendingMode;\r\n    /*constructor(label: PrimitiveType|undefined, length: number, startp: GraphPoint, endp: GraphPoint, start: LGraphElement, end: LGraphElement,\r\n                bezierpts: GraphPoint[], mid: LGraphElement[],\r\n                svgLetter: EdgeBendingMode, index: number, fillMode: MidNodeHandling) {\r\n        this.label = label;\r\n        this.length = length;\r\n        this.length = length;\r\n        this.startp = startp;\r\n        this.bezierp = bezierpts;\r\n        this.endp = endp;\r\n        this.start = start;\r\n        this.end = end;\r\n        this.mid = mid;\r\n    }*/\r\n    constructor(start: segmentmaker, mid: segmentmaker[], end: segmentmaker,\r\n                svgLetter: EdgeBendingMode, gapMode: EdgeGapMode,\r\n                index: number, prevSegment: EdgeSegment | undefined){\r\n        // console.log(\"segmentmaker:\", arguments, ((start.ge?.model as any)?.name)+\" ---> \" + ((end.ge?.model as any)?.name));\r\n        this.start = start;\r\n        this.bezier = mid;\r\n        this.end = end;\r\n        this.index = index;\r\n        this.prev = prevSegment;\r\n        //this.segments = segments;\r\n        // the idea: forbid all T and S or transform them in C, Q by calculating and manually adding their mirrored bezier pts\r\n        // if (svgLetter[1]) svgLetter = (svgLetter[0]) as any;\r\n        if (svgLetter === EdgeBendingMode.Bezier_QT) {\r\n            this.svgLetter = EdgeBendingMode.Bezier_QT[0] as any as EdgeBendingMode;\r\n            // this.svgLetter = (index === 0 ? EdgeBendingMode.Bezier_QT[0] : EdgeBendingMode.Bezier_QT[1]) as any as EdgeBendingMode;\r\n            this.addBezierPoint();\r\n        } else\r\n        if (svgLetter === EdgeBendingMode.Bezier_CS) {\r\n            this.svgLetter = EdgeBendingMode.Bezier_CS[0] as any as EdgeBendingMode;\r\n            // this.svgLetter = (index === 0 ? EdgeBendingMode.Bezier_CS[0] : EdgeBendingMode.Bezier_CS[1]) as any as EdgeBendingMode;\r\n            this.addBezierPoint();\r\n        }\r\n        else this.svgLetter = svgLetter;\r\n\r\n        // fix if amount of bezier pts is invalid for current letter\r\n        switch (this.svgLetter) {\r\n            case EdgeBendingMode.Line:\r\n            case EdgeBendingMode.Bezier_quadratic:\r\n                if (this.bezier.length >= 1) break;\r\n                else this.svgLetter = EdgeBendingMode.Line;\r\n                break;\r\n            case EdgeBendingMode.Bezier_cubic:\r\n                if (this.bezier.length >= 2) break;\r\n                else if (this.bezier.length >= 1) this.svgLetter = EdgeBendingMode.Bezier_quadratic;\r\n                else this.svgLetter = EdgeBendingMode.Line;\r\n                break;\r\n            case EdgeBendingMode.Elliptical_arc:\r\n                if (this.bezier.length >= 3) break;\r\n                else this.svgLetter = EdgeBendingMode.Line; // straight to end ignoring midpoints that are NOT coordinates when using elliptical arc.\r\n                break;\r\n            default:\r\n            //case EdgeBendingMode.Bezier_quadratic_mirrored as string:\r\n            //case EdgeBendingMode.Bezier_cubic_mirrored as string: // translated to Q or C by adding mirrored bezier points explicitly\r\n            case EdgeBendingMode.Bezier_QT:\r\n            case EdgeBendingMode.Bezier_CS: // translated to Q or C by sending the right letter to each segment\r\n                Log.exDevv(\"this svg letter should not appear here\", this.svgLetter);\r\n                break;\r\n        }\r\n    }\r\n    addBezierPoint(): void {\r\n        let prev: EdgeSegment | undefined = this.prev;\r\n        if (!prev) return;\r\n        let prevedgemakerbezier: segmentmaker = (prev.bezier[prev.bezier.length-1] || prev.start);\r\n        let mirroredBezier: segmentmaker = {...prevedgemakerbezier,\r\n            pt: EdgeSegment.invertLastBezierPt(prevedgemakerbezier.pt, prev.end.pt),\r\n            uncutPt: EdgeSegment.invertLastBezierPt(prevedgemakerbezier.uncutPt, prev.end.uncutPt),\r\n        };\r\n        this.bezier = [mirroredBezier, ...this.bezier];\r\n        // always only 1 assumed pt both in cubic and quadratic.\r\n        // let next: this | undefined = this.segments[this.index+1];\r\n        // EdgeSegment.invertLastBezierPt((next.mid[1] || next.end).pt, next.start.pt);\r\n    }\r\n\r\n    makeD(index: number, gapMode: EdgeGapMode): string {\r\n        this.m = GraphPoint.getM(this.start.pt, this.end.pt);\r\n        this.rad = Geom.mToRad(this.m, this.start.pt, this.end.pt);\r\n        this.radLabels = Math.atan(this.m);\r\n\r\n        let svgLetter = this.svgLetter; // caller makes sure to pass right letter and resolve \"CS\" mixed letters. // this.bendingModeToLetter(bendingMode, index);\r\n        // caller sends inverted pts as normal coords\r\n        // let invertedBezPt = lastSegment && EdgeSegment.invertLastBezierPt(lastSegment.midp[lastSegment.mid.length-1] || lastSegment.startp, lastSegment.endp);\r\n        switch (this.svgLetter.length) {\r\n            case 2:\r\n                return Log.exDevv(\"mixed letters are not allowed and should have been resolved to single svg letters before here, found:\" + svgLetter);\r\n            /*return Log.exDevv(\"dev problem to fix:\\n\" +\r\n            \"the mirrored mode requires the first one to have explicit non-mirrored mode?? like M, C a1 a2 a3, S a1, S a1, S a1\\n\" +\r\n            \"So all segments with mixed modes needs to extract the last bezier point (penultimate coordinate) from previous segments, mirror it and insert in midp[0]\");*/\r\n            case 1:\r\n                let bezierpts = [...this.bezier.map( b => b.pt), this.end.pt];\r\n                let finalpart = svgLetter + \" \" + bezierpts.map((p)=> p.x + \" \" + p.y).join(\", \");\r\n                this.dpart = \"M \" + this.start.pt.x + \" \" + this.start.pt.y + \", \" + finalpart;\r\n                let bezierptsUncut = [...this.bezier.map( b => b.uncutPt), this.end.pt]; // uncutPt exist for start and end too, but i want to use the cut one for those. or edgehead is off\r\n                let finalpartUncut = svgLetter + \" \" + bezierptsUncut.map((p)=> p.x + \" \" + p.y).join(\", \");\r\n                this.d = (index === 0 ? \"M\" + this.start.pt.x + \" \" + this.start.pt.y + \", \" : \"\") + finalpartUncut;\r\n\r\n                //midp = [this.startp, ...this.midp];\r\n                // d = M sp X mp2 ep // X = custom letter\r\n                // dpart = T sp X mp2 ep // S = S if X = C,\r\n                // sp is the startingpoint from the prev node, which might be != from endpoint of last node if last node have w>0 && h>0\r\n                // so i'm \"filling\" the gap with a T, or L arc wich can use only 1 parameter (they are the only 1-parameter arcs)\r\n                // if (this.prev && this.prev.end.pt.equals(this.start.pt)) gapMode = EdgeGapMode.average; // if the 2 points coincide, i use any 1 of the gapmodes that are continuous\r\n                /*switch (gapMode){\r\n                    case EdgeGapMode.center:\r\n                    case EdgeGapMode.average:\r\n                        // continuous gap modes. they only differ in how the \"joining\" point is found, but not in how they behave after that.\r\n                        /*\r\n                        if (index === 0) {\r\n                             startletter = \"M \";\r\n                         }\r\n                         else {\r\n                             switch (svgLetter) {\r\n                                 case SvgLetter.A: case SvgLetter.C: case SvgLetter.S: case SvgLetter.Q: case SvgLetter.T: default:\r\n                                     startletter = SvgLetter.T + \" \"; break;\r\n                                 case SvgLetter.L: case SvgLetter.M:\r\n                                     startletter = SvgLetter.L + \" \"; break;\r\n                             }\r\n                         }* /\r\n                        if (index) {\r\n                            this.d = finalpart;\r\n                        }\r\n                        else { this.d = this.dpart; }\r\n                        break;\r\n                    case EdgeGapMode.gap:\r\n                    case EdgeGapMode.autoFill:\r\n                    case EdgeGapMode.lineFill:\r\n                    case EdgeGapMode.arcFill:\r\n                        // the filling itself is done by another segment (solving svg letter and simulating i=0), so i treat it as a gap.\r\n                        this.d = this.dpart;\r\n                        break;\r\n                    default:\r\n                        Log.exDevv(\"unexpected EdgeGapMode:\" + gapMode, {gapMode});\r\n                }*/\r\n                break;\r\n            default: return Log.exDevv(\"unexpected bending mode length:\" + this.svgLetter + \" or fillMode: \" + gapMode, {bendingMode: this.svgLetter, index, gapMode});\r\n        }\r\n\r\n        //using\r\n        /*\r\n        88\r\n\r\n        // d should not have M set (except for segments[0]\r\n        // dpart have M abd beed to add explicit points for \"mirroring\" and transforming bezier quadratic mirrored in bezier quadratic normal etc.\r\n        //88 problem: the mirrored mode requires the first one to have explicit nonmirrored mode?? like M, C a1 a2 a3, S a1, S a1, S a1 .... ?\r\n        in any case the % letter part is wrong because it needs to subtract first element used for M*/\r\n        return this.d;\r\n    }\r\n\r\n    static invertLastBezierPt(bezier: GraphPoint, end: GraphPoint): GraphPoint{\r\n        // vector = bezier - end\r\n        // end + vector = bezier\r\n        // end - vector = inverted bezier? = 2*end-bezier\r\n        let vector = bezier.subtract(end, true);\r\n        return end.subtract(vector, true);\r\n    }\r\n\r\n    calcLength(): void {\r\n        this.length = this.start.pt.distanceFromPoint(this.end.pt);\r\n    }\r\n}\r\n\r\nexport class EdgeFillSegment extends EdgeSegment{\r\n    public static cname: string = \"EdgeFillSegment\";\r\n    makeD(index: number, gapMode: EdgeGapMode): string {\r\n        // if (gapMode === EdgeGapMode.autoFill) { gapMode = this.svgLetter === EdgeBendingMode.Line ? EdgeGapMode.lineFill : EdgeGapMode.arcFill; }\r\n        switch (gapMode) {\r\n            case \"closest\" as any:// EdgeGapMode.closest:\r\n            case EdgeGapMode.center:\r\n            case EdgeGapMode.average:\r\n            case EdgeGapMode.gap:\r\n                return \"\"; // should not have filler arcs\r\n            default:\r\n                /*\r\n            case EdgeGapMode.autoFill as any:\r\n            case EdgeGapMode.lineFill:\r\n                this.bezier = [];\r\n                this.svgLetter = EdgeBendingMode.Line;\r\n                return super.makeD(index, gapMode);\r\n            case EdgeGapMode.arcFill:*/\r\n                this.svgLetter = this.svgLetter[0] as EdgeBendingMode;\r\n                if (this.svgLetter === \"Q\") this.bezier = this.bezier.length ? [this.bezier[0]] : [];\r\n                return super.makeD(index, gapMode);\r\n        }\r\n    }\r\n}\r\n\r\n\r\ntype segmentmaker = {size: GraphSize, view: LViewElement, ge: LGraphElement, pt: GraphPoint, uncutPt: GraphPoint};\r\n@RuntimeAccessible('LVoidEdge')\r\nexport class LVoidEdge<Context extends LogicContext<DVoidEdge> = any, D extends DEdge = DEdge> extends LGraphElement {\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    // static singleton: LVoidEdge;\r\n    // static logic: typeof LVoidEdge;\r\n    // static structure: typeof DVoidEdge;\r\n    __raw!: DVoidEdge;\r\n    id!: Pointer<DVoidEdge, 1, 1, LVoidEdge>;\r\n    graph!: LGraph;\r\n    model?: LModelElement;\r\n    // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\r\n    isSelected(forUser?: Pointer<DUser>): boolean { return this.wrongAccessMessage(\"node.isSelected()\"); }\r\n    // containedIn?: LGraphElement;\r\n    subElements!: LGraphElement[];\r\n    start!: LGraphElement;\r\n    end!: LGraphElement;\r\n    __isLVoidEdge!: true;\r\n    midPoints!: InitialVertexSize[]; // the logic part which instructs to generate the midnodes\r\n    midnodes!: LEdgePoint[];\r\n    edge!: LVoidEdge; // returns self. useful to get edge from edgePoints without triggering error if you are already on edge.\r\n    __info_of__edge: Info = {type:\"?LEdge\", txt:\"returns this if called on an edge, the containing edge if called on an EdgePoint, undefined otherwise.\"}\r\n\r\n\r\n/*\r\nreplaced by startPoint\r\n    edgeStart!: GraphPoint;\r\n    edgeStart_inner!: GraphPoint;\r\n    edgeStart_outer!: GraphPoint;\r\n    __info_of__edgeStart: Info = {type: \"GraphPoint\", txt: \"Same as edgeStart_outer.\"}\r\n    __info_of__edgeStart_outer: Info = {type: \"GraphPoint\",\r\n     txt: \"Where the edge should start his path, in coordinates relative at the root Graph.\r\n     <br>Computed by combining the anchor offset option in View and the size of the starting node.\"}\r\n    __info_of__edgeStart_inner: Info = {type: \"GraphPoint\",\r\n     txt: \"Where the edge should start his path, in coordinates relative at the most nested Graph.\r\n     <br>Computed by combining the anchor offset option in View and the size of the starting node.\"}\r\n    edgeEnd!: GraphPoint;\r\n    edgeEnd_inner!: GraphPoint;\r\n    edgeEnd_outer!: GraphPoint;\r\n    __info_of__edgeEnd: Info = {type: \"GraphPoint\", txt: \"Same as edgeEnd_outer.\"}\r\n    __info_of__edgeEnd_outer: Info = {type: \"GraphPoint\",\r\n     txt: \"Where the edge should end his path, in coordinates relative at the root Graph.\r\n     <br>Computed by combining the anchor offset option in View and the size of the starting node.\"}\r\n    __info_of__edgeEnd_inner: Info = {type: \"GraphPoint\",\r\n     txt: \"Where the edge should end his path, in coordinates relative at the most nested Graph.\r\n     <br>Computed by combining the anchor offset option in View and the size of the starting node.\"}\r\n*/\r\n\r\n\r\n    label!: PrimitiveType;  // should never be read change their documentation in write only. their values is \"read\" in this.segments\r\n    longestLabel!: PrimitiveType;\r\n    labels!: PrimitiveType[];\r\n    allNodes!: [LGraphElement, ...Array<LEdgePoint>, LGraphElement];\r\n    __info_of__longestLabel: Info = {label:\"Longest label\", type:\"function(edge)=>string | string\", readType: \"PrimitiveType\",\r\n        writeType:\"PrimitiveType | (e:this, curr: LGraphElement, next: LGraphElement, curr_index: number, allNodes: LGraphElement[]) => PrimitiveType)\",\r\n        txt: <span>Label assigned to the longest path segment.</span>}\r\n    __info_of__label: Info = {type: \"\", txt: <span>Alias for longestLabel</span>};\r\n    __info_of__labels: Info = {label:\"Multiple labels\", type: \"function(edge)=>string | string\",\r\n        writeType: \"type of label or Array<type of label>\",\r\n        txt: <span>Instructions to label to multiple or all path segments in an edge</span>};\r\n    __info_of__allNodes: Info = {type: \"[LGraphElement, ...Array<LEdgePoint>, LGraphElement]\", txt: <span>first element is this.start. then all this.midnodes. this.end as last element</span>};\r\n\r\n\r\n    get_label(c: Context): this[\"longestLabel\"] { return this.get_longestLabel(c); }\r\n    set_label(val: this[\"longestLabel\"], c: Context): boolean { return this.set_longestLabel(val, c); }\r\n    get_longestLabel(c: Context): this[\"longestLabel\"] { return c.data.longestLabel as any; }\r\n    set_longestLabel(val: this[\"longestLabel\"], c: Context): boolean { SetFieldAction.new(c.data, \"longestLabel\", val); return true; }\r\n    get_labels(c: Context): this[\"labels\"] { return c.data.labels as any; }\r\n    set_labels(val: this[\"labels\"], c: Context): boolean { SetFieldAction.new(c.data, \"labels\", val); return true; }\r\n    public headPos_impl(c: Context, isHead: boolean, headSize0?: GraphPoint, segment0?: EdgeSegment, zoom0?: GraphPoint): GraphSize & {rad: number} {\r\n        let segment: EdgeSegment = segment0 || this.get_segments(c).segments[0];\r\n        // let v: LViewElement = this.get_view(c);\r\n        let tmp: any = headSize0 || (isHead ? this.get_view(c).edgeHeadSize : this.get_view(c).edgeTailSize);\r\n        if (!tmp || tmp.x === 0 || tmp.y === 0) {\r\n            // head or tail missing\r\n            tmp = new GraphSize(0, 0, 0, 0);\r\n            tmp.rad = 0;\r\n            return tmp;\r\n        }\r\n        let zoom: GraphPoint = zoom0 || this.get_graph(c).zoom;\r\n        let headPos: GraphSize & {rad: number} = (new GraphSize(0, 0, tmp.x, tmp.y) as any); //.multiply({w:zoom.x, h:zoom.y});\r\n        let useBezierPoints = true;\r\n        let start: GraphPoint, end: GraphPoint;\r\n        let m: number;\r\n        if (useBezierPoints) {\r\n            if (isHead) {\r\n                start = segment.end.pt;\r\n                end = (segment.bezier[segment.bezier.length - 1] || segment.start).pt;\r\n            } else {\r\n                start = segment.start.pt;\r\n                end = (segment.bezier[0] || segment.end).pt;\r\n            }\r\n            m = GraphPoint.getM(start, end);\r\n        } else {\r\n            if (isHead) { start = segment.end.pt; end = segment.start.pt; }\r\n            else { start = segment.start.pt; end = segment.end.pt; }\r\n            m = segment.m;\r\n        }\r\n        // first find the center of where it should be positioned\r\n        // let center: GraphPoint;\r\n        // let distance: number = Math.sqrt(headPos.w*headPos.w + headPos.h*headPos.h);\r\n        // let isVertical = m >=1 ;\r\n        let x4headsize = new GraphSize(start.x - headPos.w, start.y - headPos.h, headPos.w*2, headPos.h*2);\r\n        // first intersection is segment origin. second is found with the box containing all possible edgeHead positions that touch the startPoint\r\n        // (doing x4 his shape and placing 4 \"rectangles\" all around startPoint) to cover all possible segment directions.\r\n        // or finding first direction (vertical if m >1, horizontal if m<0) and vector direction and intersecting with only the \"correct\" placed edgeHead rectangle.\r\n        // then the intersection will likely not fall on the extreme angle of EdgeHead and i can re-center edgeHead\r\n        // so that first and second intersections are equal spaced with the center segment\r\n        let secondIntersection: GraphPoint | undefined;\r\n        let segmentDistance = start.distanceFromPoint(end);\r\n        if (segmentDistance <= Math.sqrt(headPos.w**2 + headPos.h**2)){\r\n            let safeDistance = Math.max(headPos.w, headPos.h)*5;\r\n            end = new GraphPoint( end.y + safeDistance, end.y + m * safeDistance); // move the point away so it doesn't intersect anymore. i just need direction\r\n            // too small to fit edgeHead, i simply put it centered on the whole segment\r\n            // secondIntersection = end;\r\n        }\r\n        secondIntersection = GraphSize.closestIntersection(x4headsize, start, end, undefined);\r\n        if (!secondIntersection) return Log.exx(\"failed to intersect edge head\", {x4headsize, segment, headPos, c, start, end, useBezierPoints});\r\n        tmp = secondIntersection.add(start, false).divide(2); // center of edgehead\r\n        headPos.x = tmp.x - headPos.w / 2; // tl corner\r\n        headPos.y = tmp.y - headPos.h / 2; // tl corner\r\n        headPos.rad = Geom.mToRad(m, start, end);\r\n        /*\r\n        devo trovare la distanza tra il centro dell'egeHead e il punto di inizio in termini assoluti, così tramite M trovo distanza in x e y. o trovarla in altro modo\r\n        if (segment.m === Number.POSITIVE_INFINITY || segment.m === Number.NEGATIVE_INFINITY) {\r\n            center = segment.start.pt.add({x:0, y: distance}, true); }\r\n        else { center = segment.start.pt.add({x:segment.m*headPos.w/2, y:segment.m*headPos.h/2\r\n         this is wrong, cannot be the same for x and y, i should invert the line equation for x?}, true); }\r\n        headPos.x = center.x - headPos.w / 2;\r\n        headPos.y = center.y - headPos.h / 2;*/\r\n        // console.log(\"head intersected\", {headPos, secondIntersection, x4headsize, segment, c, start, end, useBezierPoints});\r\n\r\n        return headPos;\r\n    }\r\n\r\n    public headPos(headSize0?: GraphPoint, segment0?: EdgeSegment, zoom0?: GraphPoint): GraphSize & {rad: number} {\r\n        return this.wrongAccessMessage(\"This is not headPos() implementation. it is just for typings. use the getter\"); }\r\n    public tailPos(headSize0?: GraphPoint, segment0?: EdgeSegment, zoom0?: GraphPoint): GraphSize & {rad: number} {\r\n        return this.wrongAccessMessage(\"This is not tailPos() implementation. it is just for typings. use the getter\"); }\r\n    protected get_headPos(c: Context): this[\"headPos\"] {\r\n        return (headSize?: GraphPoint, segment?: EdgeSegment, zoom?: GraphPoint) => this.headPos_impl(c, true, headSize, segment, zoom); }\r\n    protected get_tailPos(c: Context): this[\"tailPos\"] {\r\n        return (headSize?: GraphPoint, segment?: EdgeSegment, zoom?: GraphPoint) => this.headPos_impl(c, false, headSize, segment, zoom); }\r\n    protected get_allNodes(c: Context): this[\"allNodes\"] { return [this.get_start(c), ...this.get_midnodes(c), this.get_end(c)]; }\r\n\r\n    protected get_edge(c: Context): this{ return c.proxyObject as this; }\r\n    protected set_edge(v: any, c: Context): false { return this.cannotSet(\"edge field, on an edge element\"); }\r\n    protected get_midPoints(c: Context):this[\"midPoints\"] { return c.data.midPoints; }\r\n    public addMidPoint(v: this[\"midPoints\"][0]): boolean { return this.wrongAccessMessage(\"addMidPoint\"); }\r\n    protected get_addMidPoint(c: Context): (v: this[\"midPoints\"][0]) => boolean { return (v:this[\"midPoints\"][0]) => this.impl_addMidPoints(v, c); }\r\n    protected set_midPoints(val: this[\"midPoints\"], c: Context): boolean {\r\n        return SetFieldAction.new(c.data.id, \"midPoints\", val, undefined, false);\r\n    }\r\n    protected impl_addMidPoints(val: this[\"midPoints\"][0], c: Context): boolean {\r\n        return SetFieldAction.new(c.data.id, \"midPoints\", val, '+=', false);\r\n    }\r\n    protected get_label_impl(c: Context, segment: EdgeSegment, nodes: this[\"allNodes\"], segments: EdgeSegment[]): PrimitiveType | undefined {\r\n        let key: \"longestLabel\" | \"labels\" = segment.isLongest ? \"longestLabel\" : \"labels\"; // : keyof this\r\n        // if (isLongestSegment) return this.get_longestLabel_impl(d, l, nodes, index):\r\n        const d = c.data;\r\n        const l = c.proxyObject;\r\n        let labelmaker: any = d[key]; // orArr<PrimitiveType | JSX | function>\r\n        let labelmakerfunc: labelfunc = labelmaker as any;\r\n        // let lastSeg = segments[i-1];\r\n        switch (typeof labelmaker) {//nb{}[]<>\r\n            case \"number\":\r\n            case \"undefined\":\r\n            case \"boolean\":\r\n            case \"string\": return labelmaker;\r\n            // case \"function\": return nodes.map( (o, i) => d.labels(l, nodes, i)).slice(0, nodes.length-1);\r\n            case \"function\": return labelmakerfunc(l, segment, nodes, segments);\r\n            default: break;\r\n            case \"object\":\r\n                if (labelmaker === null) return null;\r\n                if (!Array.isArray(labelmaker)) break;\r\n                if (typeof labelmaker[0] === \"function\") return (labelmaker[segment.index % labelmaker.length] as labelfunc)(l, segment, nodes, segments);\r\n                return (labelmaker as PrimitiveType[])[segment.index % labelmaker.length];\r\n        }\r\n        Log.exx(\"edge labels invalid type, must be a primitive value, a function or an array of such.\", {labelmaker, key, d});\r\n        return undefined;\r\n    }/*\r\n    private get_label_impl_old(d: DVoidEdge, l: LVoidEdge, nodes:this[\"allNodes\"], index: number, longestlabelindex?: number): PrimitiveType {\r\n        if (d.longestLabel !== undefined && index === longestlabelindex) return this.get_longestLabel_impl(d, l, nodes, index);\r\n        switch (typeof d.labels) {//nb{}[]<>\r\n            case \"number\":\r\n            case \"undefined\":\r\n            case \"boolean\":\r\n            case \"string\": return d.labels;\r\n            // case \"function\": return nodes.map( (o, i) => d.labels(l, nodes, i)).slice(0, nodes.length-1);\r\n            case \"function\": return d.labels(l, nodes[index], nodes[index+1], index, nodes);\r\n            default: break;\r\n            case \"object\": if (!Array.isArray(d.labels)) break;\r\n            if (typeof d.labels[0] === \"function\") return (d.labels as any)[index % d.labels.length](l, nodes[index], nodes[index+1], index, nodes);\r\n            return (d.labels as PrimitiveType[])[index % d.labels.length];\r\n        }\r\n        Log.exx(\"edge labels invalid type, must be a primitive value, a function or an array of such.\", d.labels);\r\n    }*/\r\n\r\n    __info_of__startPoint: Info = {type: \"GraphPoint\", txt:<span>startPoint of this.start (element originating the edge). Defaults in outer coordinates.</span>};\r\n    __info_of__endPoint: Info = {type: \"GraphPoint\", txt:<span>endPoint of this.end (element originating the edge). Defaults in outer coordinates.</span>};\r\n    public get_startPoint(context: Context): GraphPoint{ return this.get_startPoint_Outer(context); }\r\n    public get_endPoint(context: Context): GraphPoint{ return this.get_endPoint_Outer(context); }\r\n    public get_startPoint_Outer(c: Context): GraphPoint{\r\n        // console.log(\"get_edgeStart_Outer\", {out:this.get_outerGraph(c), pos:this.get_startPoint_inner(c), inner:this.get_start(c).innerGraph});\r\n        return this.get_outerGraph(c).translateSize(this.get_startPoint_inner(c), this.get_start(c).innerGraph);\r\n    }\r\n    public get_endPoint_Outer(c: Context): GraphPoint{\r\n        // console.log(\"get_edgeEnd_Outer\", {out:this.get_outerGraph(c), pos:this.get_endPoint_inner(c), inner:this.get_end(c).innerGraph});\r\n        return this.get_outerGraph(c).translateSize(this.get_endPoint_inner(c), this.get_end(c).innerGraph);\r\n    }\r\n\r\n    public get_startPoint_inner(c: Context): GraphPoint{ return this.get_edgeStartEnd_inner(c, true); }\r\n    public get_endPoint_inner(c: Context): GraphPoint{ return this.get_edgeStartEnd_inner(c, false); }\r\n    private get_edgeStartEnd_inner(c: Context, isStart: boolean): GraphPoint{ return isStart ? this.get_start(c).startPoint : this.get_end(c).endPoint; }\r\n    segments!: {all: EdgeSegment[], segments: EdgeSegment[], fillers: EdgeSegment[], head: GraphSize&{rad:number}, tail: GraphSize&{rad:number}};\r\n    segments_inner!: {all: EdgeSegment[], segments: EdgeSegment[], fillers: EdgeSegment[], head: GraphSize&{rad:number}, tail: GraphSize&{rad:number}};\r\n    segments_outer!: {all: EdgeSegment[], segments: EdgeSegment[], fillers: EdgeSegment[], head: GraphSize&{rad:number}, tail: GraphSize&{rad:number}};\r\n    __info_of__segments: Info = {type: \"{all:T, segments:T, fillers:T, head: GraphSize&{rad:number}, tail: as head} where T is EdgeSegment\",\r\n        txt:<span>Collection of segments connecting in order vertex and EdgePoint without intersecting their area, aimed to be rendered in svg path.\r\n            <br/>fillers are arcs generated by view.edgeGapMode being autofill, arcfill or linefill.\r\n            <br/>length of this.segments array is Math.ceil(allNodes.length / svg_letter_size) specified on view.\r\n            <br/>\"head\" and \"tail\" are the position and angle of eventual edge decorators. Refer to this.headPos documentation.</span>}\r\n\r\n    private svgLetterSize(s: string, addM: boolean = true, doublingMidPoints: boolean = true): {first:number, others: number} {\r\n        let ret: {first:number, others: number};\r\n        switch (s) {\r\n            default: ret = Log.exDevv(\"unexpected svg path letter: \\\"\" + s + \"\\\"\", s); break;\r\n            case EdgeBendingMode.Line:\r\n            //case EdgeBendingMode.Bezier_quadratic_mirrored:\r\n                ret = {first:1, others:1}; break;\r\n            case EdgeBendingMode.Bezier_quadratic:\r\n            //case EdgeBendingMode.Bezier_cubic_mirrored:\r\n                ret = {first:2, others:2}; break;\r\n            case EdgeBendingMode.Bezier_cubic: ret = {first:3, others:3}; break;\r\n            case EdgeBendingMode.Elliptical_arc: ret = {first:4, others:4}; break;\r\n\r\n            case EdgeBendingMode.Bezier_QT: ret = {first:2, others:1}; break;\r\n            case EdgeBendingMode.Bezier_CS: ret = {first:3, others:2}; break;\r\n        }\r\n\r\n        // account for the fact that every midpoint is listed twice: at anchor start and anchor end.\r\n        if (doublingMidPoints) {\r\n            // removing last point (first is already excluded because addM didn't trigger yet)\r\n            // , the remaining are midpoints to double. then i add it back\r\n            ret.first = (ret.first - 1) * 2 + 1;\r\n            ret.others = (ret.others - 1) * 2 + 1;\r\n        }\r\n\r\n        // account for the first M letter\r\n        //    (if the segment is not mode.gap or first, M coord still exist in segment but are ignored)\r\n        if (addM) {\r\n            ret.first += 1;\r\n            ret.others += 1;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    private get_points_impl(allNodes: LGraphElement[], outer: boolean, c:Context): segmentmaker[] {\r\n        function getAnchorOffset(size: GraphSize, offset: GraphPoint, isPercentage: boolean, $factor: number = 100) {\r\n            if (!size) size = new GraphSize(0, 0, 0, 0);\r\n            // else if (!size.tl) size = new GraphSize(size.x, size.y, size.w, size.h);\r\n            if (isPercentage) offset = new GraphPoint(offset.x/$factor*(size.w), offset.y/$factor*(size.h));\r\n            return size.tl().add(offset, false);\r\n        }\r\n        const all: segmentmaker[] = allNodes.flatMap((ge, i) => {\r\n            let dge = ge.__raw;\r\n            let base: segmentmaker = {view: ge.view, size: outer ? ge.outerSize : ge.innerSize, ge, pt: null as any, uncutPt: null as any};\r\n            Log.exDev(typeof base.size !== \"object\", \"could not get node size:\", {base, c, outer})\r\n            let rets: segmentmaker | undefined;// = base as any;\r\n            let rete: segmentmaker | undefined;// = {...base} as any;\r\n            let debug = true;\r\n            if (debug) {\r\n                (base as any).anchor_e = dge.anchors[c.data.anchorEnd || 0] || dge.anchors[Object.keys(dge.anchors)[0]];\r\n                (base as any).anchor_s = dge.anchors[c.data.anchorStart || 0] || dge.anchors[Object.keys(dge.anchors)[0]];\r\n            }\r\n\r\n            // get endpoint, then startpoint (land on midnode, then depart from it)\r\n            if (i !== 0){\r\n                rete = {rete:true, ...base} as any as segmentmaker;\r\n                if (i === allNodes.length - 1) {\r\n                    // get end anchor from node\r\n                    let anchor = dge.anchors[c.data.anchorEnd || 0];\r\n                    if (!anchor) anchor = dge.anchors[Object.keys(dge.anchors)[0]];\r\n                    if (anchor) rete.pt = getAnchorOffset(rete.size, anchor, true, 1);\r\n                }\r\n                // if no anchor, treat the node as a midpoint\r\n                if (!rete.pt) {\r\n                    // get ending point from midpoint\r\n                    //rete.pt = (LEdgePoint.singleton as LEdgePoint).get_endPoint(undefined as any, rete.size, rete.view);\r\n                    rete.pt = getAnchorOffset(rete.size, rete.view.edgeStartOffset, rete.view.edgeStartOffset_isPercentage);\r\n                }\r\n                rete.uncutPt = rete.pt;\r\n            }\r\n            if (i !== allNodes.length - 1){\r\n                rets = {rets: true, ...base} as any as segmentmaker;\r\n                if (i === 0) {\r\n                    // get start anchor from node\r\n                    let anchor = dge.anchors[c.data.anchorStart || 0];\r\n                    if (!anchor) anchor = dge.anchors[Object.keys(dge.anchors)[0]];\r\n                    if (anchor) rets.pt = getAnchorOffset(rets.size, anchor, true, 1);\r\n                }\r\n                if (!rets.pt) {\r\n                    // rets starting point from midpoint\r\n                    // rets.pt = (LEdgePoint.singleton as LEdgePoint).get_startPoint(undefined as any, rets.size, rets.view);\r\n                    rets.pt = getAnchorOffset(rets.size, rets.view.edgeStartOffset, rets.view.edgeStartOffset_isPercentage);\r\n                }\r\n                rets.uncutPt = rets.pt;\r\n            }\r\n\r\n            // ret.pt = ge.startPoint\r\n            return rets && rete ? [rete, rets] : (rets ? [rets] : [rete as segmentmaker]); }\r\n        );\r\n\r\n        if (DVoidEdge.isFollowingCoords){\r\n            if (c.data.id === LVoidEdge.endFollow) {\r\n                let seg = all[all.length - 1];\r\n                seg.pt = DVoidEdge.isFollowingCoords;\r\n                seg.size = new GraphSize(seg.pt.x, seg.pt.y, 0.01, 0.01);\r\n            }\r\n            if (c.data.id === LVoidEdge.startFollow) {\r\n                let seg = all[0];\r\n                seg.pt = DVoidEdge.isFollowingCoords;\r\n                seg.size = new GraphSize(seg.pt.x, seg.pt.y, 0.01, 0.01);\r\n            }\r\n        }\r\n        return all;\r\n    }\r\n    private get_pointsDebug(c: Context): segmentmaker[]{ return this.get_points_impl(this.get_allNodes(c), true, c); }\r\n    private get_points(allNodes: LGraphElement[], outer: boolean = false, c: Context): segmentmaker[]{ return this.get_points_impl(allNodes, outer, c); }\r\n    private get_points_outer(allNodes: LGraphElement[], c: Context): segmentmaker[]{ return this.get_points_impl(allNodes, true, c); }\r\n    private get_points_inner(allNodes: LGraphElement[], c: Context): segmentmaker[]{ return this.get_points_impl(allNodes, false, c); }\r\n    public d!: string;\r\n    public __info_of__d: Info = {type: ShortAttribETypes.EString, txt:\"the full suggested path of SVG path \\\"d\\\" attribute, merging all segments.\"}\r\n    public get_d(c: Context) {\r\n        return this.get_segments(c).all.map(s => s.d).join(\" \");\r\n    }/*\r\n    private get_fillingSegments(c: Context): Partial<this[\"segments\"]> {\r\n        return this.get_segments(c).fillers;\r\n    }*/\r\n\r\n\r\n    public get_segments(c:Context): this[\"segments\"] { return this.get_segments_outer(c); }\r\n    public get_segments_outer(c:Context): this[\"segments\"] { return this.get_segments_impl(c, true); }\r\n    public get_segments_inner(c: Context): this[\"segments\"] { return this.get_segments_impl(c, false); }\r\n    private get_segments_impl(c: Context, outer: boolean): this[\"segments\"] {\r\n        let l = c.proxyObject;\r\n        let v = this.get_view(c);\r\n        let allNodes = l.allNodes;\r\n        windoww.edge = l;\r\n        let all: segmentmaker[] = this.get_points(allNodes, outer, c);\r\n        //const all: {size: GraphSize, view: LViewElement, ge: LGraphElement}[] = allNodes.map((ge) => { return { view: ge.view, size: ge.size, ge}});\r\n        let ret: EdgeSegment[] = [];\r\n        let bm: EdgeBendingMode = v.bendingMode;\r\n        let gapMode: EdgeGapMode = v.edgeGapMode;\r\n        let segmentSize = this.svgLetterSize(bm, false, true);\r\n        let increase: number = segmentSize.first;\r\n        let segment: EdgeSegment | undefined;\r\n        /// grouping points according to SvgLetter\r\n        for (let i = 0; i < all.length - 1; ) {\r\n            // let start = all[i], end = all[i+increase];\r\n            let start: segmentmaker = all[i];\r\n            let endindex = (i+increase < all.length - 1) ? i+increase : all.length - 1;\r\n            let mid: segmentmaker[] = all.slice(i+1, endindex).filter( (e, i)=> i % 2 === 0);\r\n            let end: segmentmaker = all[endindex];\r\n            // makes sure the edge actually reaches his target even if there is an invalid amount of midnodes fot the current EdgeBendingMode\r\n            if (i === endindex && segment) start = segment.end;\r\n            // segment = this.get_segmentv3(start, mid, end, getSvgLetter(i), i, segment, all);\r\n            segment = new EdgeSegment(start, mid, end, bm, gapMode, i, segment);\r\n            // segment = this.get_segment(start.ge, start.size, start.view, end.ge, end.size, end.view, cut, v.bendingMode, mid, ret[ret.length -1], fillMode, segment);\r\n            ret.push(segment);\r\n            i+= increase+1; // because increase index is already inserted at the end of prev segment\r\n            if (increase !== segmentSize.others) increase = segmentSize.others;\r\n            // if (longestLabel !== undefined && longest < s.length) { longest = s.length; longestindex = i; } todo: move to after snapping to borders\r\n        }\r\n        function printablesegment(s:GObject) {\r\n            let r: GObject = {};\r\n            for (let k in s) {\r\n                let v = s[k];\r\n                v = v?.__raw || v;\r\n                if (typeof v === \"object\") r[k] = JSON.parse(JSON.stringify(v));\r\n                else r[k] = v;\r\n            }\r\n            return r;\r\n        }\r\n\r\n        let fillSegments: EdgeSegment[] = [];\r\n        this.snapSegmentsToNodeBorders(c, v, ret, fillSegments);\r\n        let longestLabel = c.data.longestLabel;\r\n        this.setLabels(c, ret, allNodes);\r\n        // console.log(\"getSegments() labeled:\", {main:ret, fillSegments});\r\n        let rett: this[\"segments\"] = {all: [...ret, ...fillSegments], segments: ret, fillers: fillSegments} as any;\r\n        /*switch(bm){\r\n            default: break;\r\n            case EdgeBendingMode.Bezier_QT:\r\n            case EdgeBendingMode.Bezier_CS:\r\n                rett.\r\n        }*/\r\n        for (let i = 0; i < rett.all.length; i++) {\r\n            let s = rett.all[i];\r\n            s.makeD(i, gapMode);\r\n        }\r\n        let zoom = new GraphPoint(1, 1);\r\n        rett.head = this.headPos_impl(c, true, v.edgeHeadSize, rett.segments[rett.segments.length - 1], zoom);\r\n        rett.tail = this.headPos_impl(c, false, v.edgeTailSize, rett.segments[0], zoom);\r\n        return rett;\r\n    }\r\n    private setLabels(c: Context, segments: EdgeSegment[], allNodes: this[\"allNodes\"]): void {\r\n        // find longest segment\r\n        let longestindex = -1;\r\n        let longest = 0;\r\n        for (let i = 0; i < segments.length; i++) {\r\n            let s = segments[i];\r\n            s.calcLength();\r\n            if (longest < s.length) { longest = s.length; longestindex = i; }\r\n            s.isLongest = false;\r\n        }\r\n        if (longestindex >= 0) segments[longestindex].isLongest = true;\r\n        // apply labels\r\n        for (let s of segments) s.label = this.get_label_impl(c, s, allNodes, segments);\r\n    }\r\n\r\n    private snapSegmentsToNodeBorders(c: Context, v: LViewElement, ret: EdgeSegment[], fillSegments: EdgeSegment[]){\r\n        // snap segment start and end to a node border\r\n        let canCutStart: boolean = v.edgeStartStopAtBoundaries,\r\n            canCutEnd: boolean = v.edgeEndStopAtBoundaries;\r\n        let grid: GraphPoint | undefined = undefined;\r\n        // let fillSegments: EdgeSegment[] = [];\r\n        let gapMode: EdgeGapMode = v.edgeGapMode;\r\n        let bm: EdgeBendingMode = v.bendingMode;\r\n\r\n\r\n        let ci: GraphPoint | undefined;\r\n        // cut i === 0 is cut regardless of gapmode.\r\n        if (canCutStart) {\r\n            ci = GraphSize.closestIntersection(ret[0].start.size, ret[0].start.pt, (ret[0].bezier[0] || ret[0].end).pt, grid);\r\n            if (ci) ret[0].start.pt = ci;\r\n            /*\r\n            ret[0].start.pt =\r\n                GraphSize.closestIntersection(ret[0].start.size, ret[0].start.pt, (ret[0].bezier[0] || ret[0].end).pt, grid) as any\r\n                || Geom.closestPoint(ret[0].start.size, ret[0].start.pt);*/\r\n        }\r\n\r\n        // cut middle segments maybe\r\n        let prev: EdgeSegment;\r\n        let curr: EdgeSegment = ret[0];\r\n\r\n        // if (gapMode === EdgeGapMode.gap) return;\r\n        if (canCutStart || canCutEnd) // do the for below\r\n            for (let i = 1; i < ret.length; i++){\r\n                prev = ret[i-1];\r\n                curr = ret[i];\r\n                let doStartCut: boolean, doEndCut: boolean;\r\n                switch(gapMode){/*\r\n                    case EdgeGapMode.arcFill:\r\n                    case EdgeGapMode.lineFill:\r\n                    case EdgeGapMode.autoFill:\r\n                        // same as gap, but will insert 1 more segment to fill the hole\r\n                        doStartCut = true;\r\n                        doEndCut = true;\r\n                        if (prev.end.pt.equals(curr.start.pt)) break;\r\n                        fillSegments.push(new EdgeFillSegment(\r\n                            prev.end,\r\n                            [\r\n                                {...prev.end, pt: EdgeSegment.invertLastBezierPt(prev.end.pt, (prev.bezier[prev.bezier.length-1] || prev.start).pt)},\r\n                                {...curr.start, pt: EdgeSegment.invertLastBezierPt(curr.start.pt, (curr.bezier[0] || curr.end).pt)}\r\n                            ],\r\n                            curr.start,\r\n                            bm, gapMode, 0, undefined));\r\n                            / *\r\n                            fillSegments.push(new FillEdgeSegment( // M <start_gap> C <bez1> <bez2> <end_gap>\r\n                               // <start_gap> = end of last seg (start of gap) <end_gap> = first of curr seg (end of gap)\r\n                            prev.end.pt,\r\n                            EdgeSegment.invertLastBezierPt(prev.end.pt, prev.bezier[prev.bezier.length-1].pt || prev.start.pt),\r\n                            EdgeSegment.invertLastBezierPt(curr.start.pt, curr.bezier[0].pt || curr.end.pt),\r\n                            curr.start.pt)* /\r\n\r\n                        break;*/\r\n                    case EdgeGapMode.gap:\r\n                        // just snap to vertex edge         prevSegment.endp and ret.startp\r\n                        doEndCut = true; doStartCut = true;\r\n                        break;\r\n                    // average: todo: maybe rename in join (merges start-end at closest pt to both (avg), then snap on edge)\r\n                    case \"closest\" as any: //EdgeGapMode.closest:\r\n                        // does not work properly, i think i need to get next.end instead of curr.end, just disabled for now\r\n                        let nextpt: GraphPoint = (curr.bezier[0] || curr.end).pt;\r\n                        let prevpt: GraphPoint = (prev.bezier[prev.bezier.length-1] || prev.start).pt;\r\n                        let midexternalpt = prevpt.add(nextpt, true);\r\n                        let midedgepoint = curr.start.size.tl().add(curr.start.size.br(), false).divide(2, false);\r\n                        // od average between the 2 points before and after that are not part of this edgepoint, then raw a line from there to center of ep, find that intersection.\r\n                        ci = GraphSize.closestIntersection(curr.start.size, midedgepoint, midexternalpt, grid);\r\n                        doEndCut = doStartCut = false;\r\n                        if (canCutEnd && ci) prev.end.pt = ci;\r\n                        if (canCutStart && ci) curr.start.pt = ci;\r\n                        break;\r\n                    case EdgeGapMode.average:\r\n                        // first move to average of the 2 points in the gap, then snap to edge\r\n                        doEndCut = true; doStartCut = true;\r\n                        // indipendent from cutStart, cutEnd.\r\n                        // they merge if just 1 of cutting sides are true. (and if they are both false we don't even enter the for loop)\r\n                        curr.start.pt = curr.start.pt.add(prev.end.pt, false).divide(2, false);\r\n                        prev.end.pt = curr.start.pt.duplicate(); // intentionally not the same pt because during snap to edge they can diverge again.\r\n                        prev.start.uncutPt = prev.start.pt;\r\n                        prev.end.uncutPt = prev.end.pt;\r\n                        break;\r\n                    // center: first move it to center of edgePoint/node, then snap to edge.\r\n                    // this mode might be as well deleted, it can be specified with anchor points\r\n                    case EdgeGapMode.center:\r\n                        doEndCut = false; doStartCut = false;\r\n                        curr.start.pt = curr.start.size.tl().add(curr.start.size.br(), false).divide(2, false);\r\n                        prev.end.pt = curr.start.pt.duplicate(); // intentionally not the same pt because during snap to edge they can diverge again.\r\n                        prev.start.uncutPt = prev.start.pt; // only update them when point moves without being cut (average and center)\r\n                        prev.end.uncutPt = prev.end.pt;\r\n                        break;\r\n                    default:\r\n                        return Log.exDevv(\"unexpected EdgeGapMode:\" + gapMode);\r\n                }\r\n                if (canCutStart && doStartCut){\r\n                    let nextpt: GraphPoint = (curr.bezier[0] || curr.end).pt;\r\n                    ci = GraphSize.closestIntersection(curr.start.size, curr.start.pt, nextpt, grid);\r\n                    if (ci) curr.start.pt = ci;// || Geom.closestPoint(curr.start.size, curr.start.pt);\r\n                    //if (gapMode === EdgeGapMode.average && prev) { prev.end.pt = curr.start.pt.add(prev.end.pt, false).divide(2, false); }\r\n                }\r\n                if (canCutEnd && doEndCut && prev){\r\n                    let prevpt: GraphPoint = (prev.bezier[prev.bezier.length-1] || prev.start).pt;\r\n                    ci = GraphSize.closestIntersection(prev.end.size, prev.end.pt, prevpt, grid);\r\n                    if (ci) prev.end.pt = ci;// || Geom.closestPoint(prev.end.size, prev.end.pt);\r\n                    // if average: first do average between start anchor points non-snapped. then i snap both,\r\n                    // then i do average again, and since it might snap out, i get closestPoint to EdgePoint size\r\n                    if (gapMode === EdgeGapMode.average) prev.end.pt = curr.start.pt =\r\n                        Geom.closestPoint(curr.start.size, curr.start.pt.add(prev.end.pt, false).divide(2, false));\r\n                }\r\n            }\r\n        // cut end of last segment regardless of gapMode\r\n        if (canCutEnd) {\r\n            let prevendpt = curr.end.pt;\r\n            ci = GraphSize.closestIntersection(curr.end.size, curr.end.pt, (curr.bezier[curr.bezier.length-1] || curr.start).pt, grid);\r\n            if (ci) curr.end.pt = ci; //|| Geom.closestPoint(prev.end.size, prev.end.pt);\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    get_edgeEnd(context: Context){ return this.get_edgeEnd_outer(context); }\r\n    get_edgeEnd_outer(c: Context){\r\n        // return this.get_outerGraph(c).translateSize(this.get_edgeEnd_inner(c), this.get_innerGraph(c));\r\n        return this.get_outerGraph(c).translateSize(this.get_edgeEnd_inner(c), this.get_end(c).innerGraph);\r\n    }\r\n    get_edgeEnd_inner(c: Context){\r\n        return this.get_edgeStartEnd_inner(c, false);\r\n        // return context.proxyObject.end?.size || new GraphPoint(0, 0);\r\n    }\r\n\r\n\r\n    protected get_midnodes(context: Context): this[\"midnodes\"] {\r\n        // return LPointerTargetable.wrapAll(context.data.midnodes);\r\n        return LPointerTargetable.wrapAll(context.data.subElements);\r\n    }\r\n    protected set_midnodes(val: D[\"midnodes\"], context: Context): boolean {\r\n        return SetFieldAction.new(context.data.id, \"midnodes\", val, '', true);\r\n    }\r\n    protected get_start(context: Context): this[\"start\"] { return LPointerTargetable.from(context.data.start); }\r\n    protected get_end(context: Context): this[\"end\"] { return LPointerTargetable.from(context.data.end); }\r\n\r\n\r\n    anchorStart?: string;\r\n    anchorEnd?: string;\r\n    __info_of__anchorStart: Info = {writeType:\"string | undefined\", type:\"string\", isEdge: true,\r\n        txt:\"The name of a node anchor where the edge should originate from.\"};\r\n    __info_of__anchorEnd: Info = {writeType:\"string | undefined\", type:\"string\", isEdge: true,\r\n        txt:\"The name of a node anchor where the edge should point to.\"};\r\n    endFollow!: boolean;\r\n    startFollow!: boolean;\r\n    __info_of__endFollow: Info = {writeType:\"boolean\", readType:\"boolean\", type:\"boolean\", isEdge: true,// type:\"read:(()=>void), write:boolean\", readType:\"(()=>void))\",\r\n        txt:\"makes the ending point of an edge follow the cursor, so it can be assigned to a new anchor or target.\"};\r\n    __info_of__startFollow: Info = {writeType:\"boolean\", readType:\"boolean\", type:\"boolean\", isEdge: true,// type:\"read:(()=>void), write:boolean\", readType:\"(()=>void))\",\r\n        txt:\"makes the starting point of an edge follow the cursor, so it can be assigned to a new anchor or source.\"};\r\n    get_endFollow(c: Context): boolean { return (c.data.id === LVoidEdge.endFollow); }\r\n    get_startFollow(c: Context): boolean { return (c.data.id === LVoidEdge.startFollow); }\r\n    // // what in multieditor? needs to be moved in transientstuff?\r\n    set_endFollow(val: boolean, c: Context): boolean { return this._set_start_endFollow(val, c, false); }\r\n    set_startFollow(val: boolean, c: Context): boolean { return this._set_start_endFollow(val, c, true); }\r\n    _set_start_endFollow(val: boolean, c: Context, isStart: boolean): boolean {\r\n        val = !!val;\r\n        console.log(\"_set_start_endFollow\", {val, c, isStart});\r\n        if (val) {\r\n            if (isStart) LVoidEdge.startFollow = c.data.id;\r\n            else LVoidEdge.endFollow = c.data.id;\r\n            if (!LVoidEdge.following) {\r\n                console.log(\"_set_start_endFollow event attached\");\r\n                document.body.addEventListener(\"mousemove\", LVoidEdge.mousemove_pendingEdge, false);\r\n                document.body.addEventListener(\"keydown\", LVoidEdge.onKeyDown_pendingEdge, false);\r\n                LVoidEdge.following = true;\r\n                LVoidEdge.followingContext = c;\r\n                LVoidEdge.showAnchors();\r\n                (windoww.Tooltip as (typeof Tooltip)).show(<div>Changing anchor, press <b>Esc</b> to undo.</div>);\r\n\r\n                //let selector = \".Edge[nodeid='\" + (LVoidEdge.endFollow || LVoidEdge.startFollow as any)+\"']\";\r\n                // [...document.querySelectorAll(selector)].map(e=>e.classList.add(\"no-transition-following\")); gets refreshed by react\r\n                document.body.classList.add(\"no-transition-following\");\r\n            }\r\n        }\r\n        else {\r\n            if (LVoidEdge.following && ((isStart ? LVoidEdge.startFollow : LVoidEdge.endFollow) === c.data.id)) {\r\n                document.body.removeEventListener(\"mousemove\", LVoidEdge.mousemove_pendingEdge, false);\r\n                document.body.removeEventListener(\"keydown\", LVoidEdge.onKeyDown_pendingEdge, false);\r\n                let selector = \".Edge[nodeid='\" + (LVoidEdge.endFollow || LVoidEdge.startFollow as any)+\"']\";\r\n                //[...document.querySelectorAll(selector)].map(e=>e.classList.remove(\"no-transition-following\"));\r\n                document.body.classList.remove(\"no-transition-following\");\r\n                if (isStart) LVoidEdge.startFollow = undefined;\r\n                else LVoidEdge.endFollow = undefined;\r\n                LVoidEdge.following = false;\r\n                const $base = $(document.getElementById(isStart ? c.data.start : c.data.end) || []);\r\n                if (!$base.length) return true;\r\n                //const $deepAnchors = $base.find(\"[nodeid] .anchor\");\r\n                const $anchors = $base.find(\".anchor\")//.not($deepAnchors);\r\n                $anchors.removeClass([\"valid-anchor\", \"active-anchor\"]);\r\n                $base[0].style.overflow = '';\r\n                (windoww.Tooltip as (typeof Tooltip)).hide();\r\n            }\r\n        }\r\n        //SetFieldAction.new(c.data, \"startFollow\", !!val, '', false);\r\n        return true; }\r\n    public static startFollow: Pointer<DVoidEdge> | undefined = undefined;\r\n    public static endFollow: Pointer<DVoidEdge> | undefined = undefined;\r\n    public static following: boolean = false;\r\n    public static followingContext: LogicContext<DVoidEdge, LVoidEdge>;\r\n    public static tmp: number = 1;\r\n    public static canForceUpdate: boolean = true;\r\n    public static getCursorPos(e0: Event): Point { return new Point((e0 as any as MouseEvent).pageX, (e0 as any as MouseEvent).pageY); }\r\n    /*public static getGCursorPos(e0: Event): GraphPoint {\r\n        return LVLoidEdge.getCursorPos(e0).subtract(svgsize.tl(), true).multiply(svgzoom) as any as GraphPoint;\r\n    }*/\r\n    public static onKeyDown_pendingEdge(e: KeyboardEvent): void{\r\n        if (e.key === Keystrokes.escape) {\r\n            const c = LVoidEdge.followingContext;\r\n            if (!c || (!LVoidEdge.startFollow && !LVoidEdge.endFollow)) return;\r\n            let isStart = LVoidEdge.startFollow ? true : false;\r\n            let l = (c.proxyObject as any as LVoidEdge);\r\n            if (isStart) l.startFollow = false;\r\n            else l.endFollow = false;\r\n            // l.component?.forceUpdate(); does not work?\r\n            l.clonedCounter = (l.clonedCounter || 0) + 2;\r\n        }\r\n    }\r\n    public static showAnchors(): void{\r\n        const c = LVoidEdge.followingContext;\r\n        if (!c || (!LVoidEdge.startFollow && !LVoidEdge.endFollow)) return;\r\n        let isStart = LVoidEdge.startFollow ? true : false;\r\n        let nodeid: Pointer<DGraphElement> = isStart ? c.data.start : c.data.end;\r\n        let activeAnchor: string | number = (isStart ? c.data.anchorStart : c.data.anchorEnd) || 0;\r\n\r\n        const $base = $(document.getElementById(nodeid) || []);\r\n        if (!$base.length) return;\r\n        const $deepAnchors = $base.find(\"[nodeid] .anchor\");\r\n        const $anchors = $base.find(\".anchor\").not($deepAnchors);\r\n        $anchors.addClass(\"valid-anchor\");\r\n        $anchors.filter('[data-anchorname=\"'+activeAnchor+'\"]').addClass(\"active-anchor\");\r\n        $base[0].style.overflow = \"visible\";\r\n\r\n    }\r\n    private static mousemovei: number = 0;\r\n    public static mousemove_pendingEdge(e0: Event): void {\r\n        let forcererendermode = true;\r\n        if (forcererendermode) {\r\n            if (!LVoidEdge.following) return;\r\n            if (!LVoidEdge.canForceUpdate) return;\r\n            if (LVoidEdge.mousemovei++%30 === 0) LVoidEdge.showAnchors();\r\n\r\n\r\n            let c = LVoidEdge.followingContext;\r\n            let g: LGraph = c.proxyObject.graph;\r\n            let cursorPos = LVoidEdge.getCursorPos(e0);\r\n            let gcursorpos = g.translateHtmlSize(cursorPos);\r\n            DVoidEdge.isFollowingCoords = gcursorpos;\r\n\r\n            let component: GraphElementComponent = GraphElementComponent.map[(LVoidEdge.startFollow || LVoidEdge.endFollow) as string];\r\n            LVoidEdge.canForceUpdate = false;\r\n            let timer = setTimeout(()=>{LVoidEdge.canForceUpdate = true; }, 5000);\r\n            let tn = transientProperties.node[c.data.id];\r\n            for (let vid in tn.viewScores) { // required to truly force an update\r\n                let tnv = tn.viewScores[vid];\r\n                tnv.jsxOutput = undefined;\r\n                tnv.usageDeclarations = undefined as any;\r\n                tnv.shouldUpdate = true;\r\n            }\r\n            component.setState({forceupdate:new Date().getDate()} as any, ()=>{LVoidEdge.canForceUpdate = true; clearTimeout(timer)});\r\n            // component.forceUpdate(()=>{LVoidEdge.canForceUpdate = true; clearTimeout(timer)});\r\n            return;\r\n        }\r\n\r\n        LVoidEdge.tmp++;\r\n        let selector = \".Edge[nodeid='\" + (LVoidEdge.endFollow || LVoidEdge.startFollow as any)+\"']\";\r\n        let root = document.querySelector(selector);\r\n        if (!root) return;\r\n        let paths: SVGPathElementt[] = [...root.querySelectorAll(\"path.full\")] as SVGPathElementt[];\r\n        let pathSegments = root.querySelectorAll(\"path.segment.preview\") as any as SVGPathElementt[];\r\n        // if (!paths.length) paths = pathSegments;\r\n        let pathSegmentContainers: Element[] = [...new Set([...pathSegments].map(e=>e.parentElement))] as Element[];\r\n        for (let container of pathSegmentContainers){\r\n            let se: SVGPathElementt[] = [...container.querySelectorAll(\"path.segment.preview\")] as SVGPathElementt[];\r\n            paths.push(se[LVoidEdge.endFollow ? se.length-1 : 0]);\r\n        }\r\n        let headTail = [...root.querySelectorAll(LVoidEdge.endFollow ? '.edgeHead' : '.edgeTail')] as HTMLElement[];\r\n        let cursorPos = LVoidEdge.getCursorPos(e0)\r\n\r\n        let segList: SVGPathSegment[] | undefined;\r\n        for (let p of paths) {\r\n            let svg: SVGElement = U.parentUntil(\"svg\", p) as SVGElement;\r\n            let svgsize: Size = Size.of(svg);\r\n            let svgzoom: Point = new Point(1,1); // todo: check viewbox and css zoom\r\n            let gcursorPos = cursorPos.subtract(svgsize.tl(), true).multiply(svgzoom) as any as GraphPoint;\r\n            segList = [...p.getPathData()];\r\n            let lastSeg = {...segList[LVoidEdge.endFollow ? segList.length-1 : 0]};\r\n            switch (lastSeg.type){\r\n                case 'a': case 'A':\r\n                    segList.push('fake new segment to get replaced instead of actual last segment which is A' as any);\r\n                    lastSeg.type=\"L\"; lastSeg.values = [gcursorPos.x, gcursorPos.y];\r\n                    break;\r\n                case \"C\": case \"c\": // bezier curves, keep type just change last point\r\n                case \"Q\": case \"q\":\r\n                case \"S\": case \"s\":\r\n                case \"T\": case \"t\":\r\n                    lastSeg.values[lastSeg.values.length-2] = gcursorPos.x;\r\n                    lastSeg.values[lastSeg.values.length-1] = gcursorPos.y; break;\r\n                case \"M\": case \"m\":\r\n                    lastSeg.type = LVoidEdge.endFollow ? \"L\" : \"M\";\r\n                    lastSeg.values = [gcursorPos.x, gcursorPos.y]; break;\r\n                case \"V\": case \"v\": // stuff forced to become a line\r\n                case \"H\": case \"h\":\r\n                case \"L\": case \"l\":\r\n                case \"Z\": case \"z\":\r\n                    lastSeg.type=\"L\"; lastSeg.values = [gcursorPos.x, gcursorPos.y];\r\n                    break;\r\n            }\r\n            segList[LVoidEdge.endFollow ? segList.length-1 : 0] = lastSeg;\r\n            if (LVoidEdge.tmp%20===0) console.log(\"svg set path data,\", {segList, oldSeglist:p.getPathData(), p});\r\n            p.setPathData(segList);\r\n        }\r\n\r\n        for (let ht of headTail){\r\n            let svg: SVGElement = U.parentUntil(\"svg\", ht) as SVGElement;\r\n            let svgsize: Size = Size.of(svg);\r\n            let svgzoom: Point = new Point(1,1); // todo: check viewbox and css zoom\r\n            let gcursorPos = cursorPos.subtract(svgsize.tl(), true).multiply(svgzoom) as any as GraphPoint;\r\n            let rotation: number;\r\n            let lastPt = segList && segList[LVoidEdge.endFollow ? segList.length-2 : 1].values;\r\n\r\n            if (lastPt) {\r\n                let m = gcursorPos.getM(new Point(lastPt[LVoidEdge.endFollow ? lastPt.length-2 : 1], lastPt[LVoidEdge.endFollow ? lastPt.length-1 : 0]));\r\n                if (Number.POSITIVE_INFINITY === m) rotation = Geom.degToRad(90); else\r\n                if (Number.NEGATIVE_INFINITY === m) rotation = Geom.degToRad(270); else\r\n                    rotation = Math.atan(m);\r\n                if (lastPt[LVoidEdge.endFollow ? lastPt.length-2 : 1] > gcursorPos.x) rotation -= Geom.degToRad(180);\r\n            } else { rotation = 0;}\r\n            let headSize = Size.of(ht);\r\n\r\n            let headPos = gcursorPos.subtract({x:headSize.w/2, y:headSize.h/2}, true);//.subtract({x:Math.cos(rotation)*headSize.w/2, y: -Math.sin(rotation)*headSize.h/2}, true);\r\n\r\n            if (LVoidEdge.tmp%20===0) console.log(\"_set_start_endFollow move head\", {selector:LVoidEdge.endFollow ? '.edgeHead' : '.edgeTail', headTail, root});\r\n            ht.style.transform = 'translate('+headPos.x+\"px, \"+headPos.y+\"px) rotate(\"+rotation+\"rad)\";\r\n        }\r\n    }\r\n}\r\nRuntimeAccessibleClass.set_extend(DGraphElement, DVoidEdge);\r\nRuntimeAccessibleClass.set_extend(LGraphElement, LVoidEdge);\r\n\r\n@RuntimeAccessible('DEdge')\r\nexport class DEdge extends DVoidEdge { // DVoidEdge\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    // static singleton: LGraphElement;\r\n    // static logic: typeof LGraphElement;\r\n    // static structure: typeof DGraphElement;\r\n    id!: Pointer<DEdge, 1, 1, LEdge>;\r\n    graph!: Pointer<DGraph, 1, 1, LGraph>;\r\n    model!: Pointer<DModelElement, 0, 1, LModelElement>;\r\n    // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\r\n    isSelected!: Dictionary<DocString<Pointer<DUser>>, boolean>;\r\n    // containedIn!: Pointer<DGraphElement, 0, 1, LGraphElement>;\r\n    subElements!: Pointer<DGraphElement, 0, 'N', LGraphElement>;\r\n    state!: GObject;\r\n    start!: Pointer<DGraphElement, 1, 1, LGraphElement>;\r\n    end!: Pointer<DGraphElement, 1, 1, LGraphElement>;\r\n    __isDEdge!: true;\r\n    __isDVoidEdge!: true;\r\n    midnodes!: Pointer<DEdgePoint, 1, 1, LEdgePoint>[];\r\n\r\n}\r\n\r\n@RuntimeAccessible('LEdge')\r\nexport class LEdge<Context extends LogicContext<DEdge> = any, D extends DEdge = DEdge> extends LVoidEdge {\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    // static singleton: LGraphElement;\r\n    // static logic: typeof LGraphElement;\r\n    // static structure: typeof DGraphElement;\r\n    __raw!: DEdge;\r\n    id!: Pointer<DEdge, 1, 1, LEdge>;\r\n    graph!: LGraph;\r\n    model?: LModelElement;\r\n    // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\r\n    isSelected(forUser?: Pointer<DUser>): boolean { return this.wrongAccessMessage(\"node.isSelected()\"); }\r\n    // containedIn!: LGraphElement;\r\n    subElements!: LGraphElement[];\r\n    _state!: GObject<\"proxified\">; // LMap;\r\n    start!: LGraphElement;\r\n    end!: LGraphElement;\r\n    midnodes!: LEdgePoint[];\r\n    __isLEdge!: true;\r\n    __isLVoidEdge!: true;\r\n\r\n}\r\nRuntimeAccessibleClass.set_extend(DVoidEdge, DEdge);\r\nRuntimeAccessibleClass.set_extend(LVoidEdge, LEdge);\r\n@Leaf\r\n@RuntimeAccessible('DExtEdge')\r\nexport class DExtEdge extends DEdge { // etends DEdge\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    // static singleton: LGraphElement;\r\n    // static logic: typeof LGraphElement;\r\n    // static structure: typeof DGraphElement;\r\n    id!: Pointer<DExtEdge, 1, 1, LExtEdge>;\r\n    graph!: Pointer<DGraph, 1, 1, LGraph>;\r\n    model!: Pointer<DModelElement, 0, 1, LModelElement>;\r\n    // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\r\n    isSelected!: Dictionary<DocString<Pointer<DUser>>, boolean>;\r\n    // containedIn!: Pointer<DGraphElement, 0, 1, LGraphElement>;\r\n    subElements!: Pointer<DGraphElement, 0, 'N', LGraphElement>;\r\n    state!: GObject;\r\n    start!: Pointer<DGraphElement, 1, 1, LGraphElement>;\r\n    end!: Pointer<DGraphElement, 1, 1, LGraphElement>;\r\n    __isDExtEdge!: true;\r\n    __isDEdge!: true;\r\n    __isDVoidEdge!: true;\r\n    /*\r\n        public static new(model: DGraph[\"model\"], parentNodeID: DGraphElement[\"father\"], graphID: DGraphElement[\"graph\"], nodeID?: DGraphElement[\"id\"], size?: GraphSize): DExtEdge {\r\n            return new Constructors(new DExtEdge('dwc')).DPointerTargetable().DGraphElement(model, parentNodeID, graphID, nodeID)\r\n                .DVoidEdge().DEdge().DExtEdge().end();\r\n        }*/\r\n}\r\n\r\n@RuntimeAccessible('LExtEdge')\r\nexport class LExtEdge extends LEdge{\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    // static singleton: LGraphElement;\r\n    // static logic: typeof LGraphElement;\r\n    // static structure: typeof DGraphElement;\r\n    __raw!: DExtEdge;\r\n    id!: Pointer<DExtEdge, 1, 1, LExtEdge>;\r\n    graph!: LGraph;\r\n    model?: LModelElement;\r\n    // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\r\n    isSelected(forUser?: Pointer<DUser>): boolean { return this.wrongAccessMessage(\"node.isSelected()\"); }\r\n    // containedIn!: LGraphElement;\r\n    subElements!: LGraphElement[];\r\n    _state!: GObject<\"proxified\">; // LMap;\r\n    start!: LGraphElement;\r\n    end!: LGraphElement;\r\n    __isLExtEdge!: true;\r\n    __isLEdge!: true;\r\n    __isLVoidEdge!: true;\r\n}\r\nRuntimeAccessibleClass.set_extend(DEdge, DExtEdge);\r\nRuntimeAccessibleClass.set_extend(LEdge, LExtEdge);\r\n@Leaf\r\n@RuntimeAccessible('DRefEdge')\r\nexport class DRefEdge extends DEdge { // extends DEdge\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    start!: Pointer<DGraphElement, 1, 1, LGraphElement>;\r\n    end!: Pointer<DGraphElement, 1, 1, LGraphElement>;\r\n    isSelected!: Dictionary<DocString<Pointer<DUser>>, boolean>;\r\n    __isDRefEdge!: true;\r\n    /*\r\n        public static new(model: DGraph[\"model\"], parentNodeID: DGraphElement[\"father\"], graphID: DGraphElement[\"graph\"], nodeID?: DGraphElement[\"id\"]): DRefEdge {\r\n            return new Constructors(new DRefEdge('dwc')).DPointerTargetable().DGraphElement(model, parentNodeID, graphID, nodeID)\r\n                .DVoidEdge().DEdge().DRefEdge().end();\r\n        }*/\r\n\r\n}\r\n@RuntimeAccessible('LRefEdge')\r\nexport class LRefEdge extends LEdge {\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    // __raw!: DRefEdge;\r\n    start!: LGraphElement;\r\n    end!: LGraphElement;\r\n    __isLRefEdge!: true;\r\n}\r\nRuntimeAccessibleClass.set_extend(DEdge, DRefEdge);\r\nRuntimeAccessibleClass.set_extend(LEdge, LRefEdge);\r\n// for edges without a modelling element\r\n\r\n\r\n/*\r\n\r\nlet a = `DExtEdge, DRefEdge, DVoidEdge, LGraphVertex, LRefEdge, LEdgePoint, DVoidVertex, DGraphVertex, DEdgePoint,\r\n DVertex, DEdge, LVertex, LGraph, DGraph, LVoidVertex, LVoidEdge, LEdge, LGraphElement, LExtEdge, DGraphElement`;\r\n  // // ... get from export in index.ts\r\na = a.replaceAll(',,', \",\")\r\nlet aa = a.split(\",\").map(a => a.trim().substring(1));\r\n\r\nfunction onlyUnique(value, index, self) { return self.indexOf(value) === index; }\r\n\r\naa = aa.filter(onlyUnique).filter( a=> !!a)\r\nlet r = aa.filter(onlyUnique).filter( a=> !!a).map( a=> `export type W${a} = getWParams<L${a}, D${a}>;`).join('\\n')\r\ndocument.body.innerText = r;\r\n*/\r\nexport type WExtEdge = getWParams<LExtEdge, DExtEdge>;\r\nexport type WRefEdge = getWParams<LRefEdge, DRefEdge>;\r\nexport type WVoidEdge = getWParams<LVoidEdge, DVoidEdge>;\r\nexport type WGraphVertex = any; // getWParams<LGraphVertex, DGraphVertex>;\r\nexport type WEdgePoint = getWParams<LEdgePoint, DEdgePoint>;\r\nexport type WVoidVertex = getWParams<LVoidVertex, DVoidVertex>;\r\nexport type WVertex = getWParams<LVertex, DVertex>;\r\nexport type WEdge = getWParams<LEdge, DEdge>;\r\nexport type WGraph = getWParams<LGraph, DGraph>;\r\nexport type WGraphElement = getWParams<LGraphElement, DGraphElement>;\r\n\r\nconsole.warn('ts loading graphDataElement');\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}