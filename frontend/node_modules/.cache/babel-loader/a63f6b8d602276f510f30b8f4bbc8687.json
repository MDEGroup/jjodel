{"ast":null,"code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n  var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n  var util = require('./util');\n  var binarySearch = require('./binary-search');\n  var ArraySet = require('./array-set').ArraySet;\n  var base64VLQ = require('./base64-vlq');\n  var quickSort = require('./quick-sort').quickSort;\n  function SourceMapConsumer(aSourceMap) {\n    var sourceMap = aSourceMap;\n    if (typeof aSourceMap === 'string') {\n      sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n    }\n    return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap) : new BasicSourceMapConsumer(sourceMap);\n  }\n  SourceMapConsumer.fromSourceMap = function (aSourceMap) {\n    return BasicSourceMapConsumer.fromSourceMap(aSourceMap);\n  };\n\n  /**\n   * The version of the source mapping spec that we are consuming.\n   */\n  SourceMapConsumer.prototype._version = 3;\n\n  // `__generatedMappings` and `__originalMappings` are arrays that hold the\n  // parsed mapping coordinates from the source map's \"mappings\" attribute. They\n  // are lazily instantiated, accessed via the `_generatedMappings` and\n  // `_originalMappings` getters respectively, and we only parse the mappings\n  // and create these arrays once queried for a source location. We jump through\n  // these hoops because there can be many thousands of mappings, and parsing\n  // them is expensive, so we only want to do it if we must.\n  //\n  // Each object in the arrays is of the form:\n  //\n  //     {\n  //       generatedLine: The line number in the generated code,\n  //       generatedColumn: The column number in the generated code,\n  //       source: The path to the original source file that generated this\n  //               chunk of code,\n  //       originalLine: The line number in the original source that\n  //                     corresponds to this chunk of generated code,\n  //       originalColumn: The column number in the original source that\n  //                       corresponds to this chunk of generated code,\n  //       name: The name of the original symbol which generated this chunk of\n  //             code.\n  //     }\n  //\n  // All properties except for `generatedLine` and `generatedColumn` can be\n  // `null`.\n  //\n  // `_generatedMappings` is ordered by the generated positions.\n  //\n  // `_originalMappings` is ordered by the original positions.\n\n  SourceMapConsumer.prototype.__generatedMappings = null;\n  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n    get: function () {\n      if (!this.__generatedMappings) {\n        this._parseMappings(this._mappings, this.sourceRoot);\n      }\n      return this.__generatedMappings;\n    }\n  });\n  SourceMapConsumer.prototype.__originalMappings = null;\n  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n    get: function () {\n      if (!this.__originalMappings) {\n        this._parseMappings(this._mappings, this.sourceRoot);\n      }\n      return this.__originalMappings;\n    }\n  });\n  SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n    var c = aStr.charAt(index);\n    return c === \";\" || c === \",\";\n  };\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  };\n  SourceMapConsumer.GENERATED_ORDER = 1;\n  SourceMapConsumer.ORIGINAL_ORDER = 2;\n  SourceMapConsumer.GREATEST_LOWER_BOUND = 1;\n  SourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n  /**\n   * Iterate over each mapping between an original source/line/column and a\n   * generated line/column in this source map.\n   *\n   * @param Function aCallback\n   *        The function that is called with each mapping.\n   * @param Object aContext\n   *        Optional. If specified, this object will be the value of `this` every\n   *        time that `aCallback` is called.\n   * @param aOrder\n   *        Either `SourceMapConsumer.GENERATED_ORDER` or\n   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n   *        iterate over the mappings sorted by the generated file's line/column\n   *        order or the original's source/line/column order, respectively. Defaults to\n   *        `SourceMapConsumer.GENERATED_ORDER`.\n   */\n  SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n    var context = aContext || null;\n    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n    var mappings;\n    switch (order) {\n      case SourceMapConsumer.GENERATED_ORDER:\n        mappings = this._generatedMappings;\n        break;\n      case SourceMapConsumer.ORIGINAL_ORDER:\n        mappings = this._originalMappings;\n        break;\n      default:\n        throw new Error(\"Unknown order of iteration.\");\n    }\n    var sourceRoot = this.sourceRoot;\n    mappings.map(function (mapping) {\n      var source = mapping.source === null ? null : this._sources.at(mapping.source);\n      if (source != null && sourceRoot != null) {\n        source = util.join(sourceRoot, source);\n      }\n      return {\n        source: source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : this._names.at(mapping.name)\n      };\n    }, this).forEach(aCallback, context);\n  };\n\n  /**\n   * Returns all generated line and column information for the original source,\n   * line, and column provided. If no column is provided, returns all mappings\n   * corresponding to a either the line we are searching for or the next\n   * closest line that has any mappings. Otherwise, returns all mappings\n   * corresponding to the given line and either the column we are searching for\n   * or the next closest column that has any offsets.\n   *\n   * The only argument is an object with the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.\n   *   - column: Optional. the column number in the original source.\n   *\n   * and an array of objects is returned, each with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.\n   *   - column: The column number in the generated source, or null.\n   */\n  SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n    var line = util.getArg(aArgs, 'line');\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    var needle = {\n      source: util.getArg(aArgs, 'source'),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, 'column', 0)\n    };\n    if (this.sourceRoot != null) {\n      needle.source = util.relative(this.sourceRoot, needle.source);\n    }\n    if (!this._sources.has(needle.source)) {\n      return [];\n    }\n    needle.source = this._sources.indexOf(needle.source);\n    var mappings = [];\n    var index = this._findMapping(needle, this._originalMappings, \"originalLine\", \"originalColumn\", util.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n      if (aArgs.column === undefined) {\n        var originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        var originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n    return mappings;\n  };\n  exports.SourceMapConsumer = SourceMapConsumer;\n\n  /**\n   * A BasicSourceMapConsumer instance represents a parsed source map which we can\n   * query for information about the original file positions by giving it a file\n   * position in the generated source.\n   *\n   * The only parameter is the raw source map (either as a JSON string, or\n   * already parsed to an object). According to the spec, source maps have the\n   * following attributes:\n   *\n   *   - version: Which version of the source map spec this map is following.\n   *   - sources: An array of URLs to the original source files.\n   *   - names: An array of identifiers which can be referrenced by individual mappings.\n   *   - sourceRoot: Optional. The URL root from which all sources are relative.\n   *   - sourcesContent: Optional. An array of contents of the original source files.\n   *   - mappings: A string of base64 VLQs which contain the actual mappings.\n   *   - file: Optional. The generated file this source map is associated with.\n   *\n   * Here is an example source map, taken from the source map spec[0]:\n   *\n   *     {\n   *       version : 3,\n   *       file: \"out.js\",\n   *       sourceRoot : \"\",\n   *       sources: [\"foo.js\", \"bar.js\"],\n   *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n   *       mappings: \"AA,AB;;ABCDE;\"\n   *     }\n   *\n   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n   */\n  function BasicSourceMapConsumer(aSourceMap) {\n    var sourceMap = aSourceMap;\n    if (typeof aSourceMap === 'string') {\n      sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n    }\n    var version = util.getArg(sourceMap, 'version');\n    var sources = util.getArg(sourceMap, 'sources');\n    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n    // requires the array) to play nice here.\n    var names = util.getArg(sourceMap, 'names', []);\n    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n    var mappings = util.getArg(sourceMap, 'mappings');\n    var file = util.getArg(sourceMap, 'file', null);\n\n    // Once again, Sass deviates from the spec and supplies the version as a\n    // string rather than a number, so we use loose equality checking here.\n    if (version != this._version) {\n      throw new Error('Unsupported version: ' + version);\n    }\n\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    sources = sources.map(util.normalize);\n\n    // Pass `true` below to allow duplicate names and sources. While source maps\n    // are intended to be compressed and deduplicated, the TypeScript compiler\n    // sometimes generates source maps with duplicates in them. See Github issue\n    // #72 and bugzil.la/889492.\n    this._names = ArraySet.fromArray(names, true);\n    this._sources = ArraySet.fromArray(sources, true);\n    this.sourceRoot = sourceRoot;\n    this.sourcesContent = sourcesContent;\n    this._mappings = mappings;\n    this.file = file;\n  }\n  BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\n  BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n  /**\n   * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n   *\n   * @param SourceMapGenerator aSourceMap\n   *        The source map that will be consumed.\n   * @returns BasicSourceMapConsumer\n   */\n  BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap) {\n    var smc = Object.create(BasicSourceMapConsumer.prototype);\n    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n    smc.sourceRoot = aSourceMap._sourceRoot;\n    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);\n    smc.file = aSourceMap._file;\n\n    // Because we are modifying the entries (by converting string sources and\n    // names to indices into the sources and names ArraySets), we have to make\n    // a copy of the entry or else bad things happen. Shared mutable state\n    // strikes again! See github issue #191.\n\n    var generatedMappings = aSourceMap._mappings.toArray().slice();\n    var destGeneratedMappings = smc.__generatedMappings = [];\n    var destOriginalMappings = smc.__originalMappings = [];\n    for (var i = 0, length = generatedMappings.length; i < length; i++) {\n      var srcMapping = generatedMappings[i];\n      var destMapping = new Mapping();\n      destMapping.generatedLine = srcMapping.generatedLine;\n      destMapping.generatedColumn = srcMapping.generatedColumn;\n      if (srcMapping.source) {\n        destMapping.source = sources.indexOf(srcMapping.source);\n        destMapping.originalLine = srcMapping.originalLine;\n        destMapping.originalColumn = srcMapping.originalColumn;\n        if (srcMapping.name) {\n          destMapping.name = names.indexOf(srcMapping.name);\n        }\n        destOriginalMappings.push(destMapping);\n      }\n      destGeneratedMappings.push(destMapping);\n    }\n    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n    return smc;\n  };\n\n  /**\n   * The version of the source mapping spec that we are consuming.\n   */\n  BasicSourceMapConsumer.prototype._version = 3;\n\n  /**\n   * The list of original sources.\n   */\n  Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n    get: function () {\n      return this._sources.toArray().map(function (s) {\n        return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;\n      }, this);\n    }\n  });\n\n  /**\n   * Provide the JIT with a nice shape / hidden class.\n   */\n  function Mapping() {\n    this.generatedLine = 0;\n    this.generatedColumn = 0;\n    this.source = null;\n    this.originalLine = null;\n    this.originalColumn = null;\n    this.name = null;\n  }\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    var generatedLine = 1;\n    var previousGeneratedColumn = 0;\n    var previousOriginalLine = 0;\n    var previousOriginalColumn = 0;\n    var previousSource = 0;\n    var previousName = 0;\n    var length = aStr.length;\n    var index = 0;\n    var cachedSegments = {};\n    var temp = {};\n    var originalMappings = [];\n    var generatedMappings = [];\n    var mapping, str, segment, end, value;\n    while (index < length) {\n      if (aStr.charAt(index) === ';') {\n        generatedLine++;\n        index++;\n        previousGeneratedColumn = 0;\n      } else if (aStr.charAt(index) === ',') {\n        index++;\n      } else {\n        mapping = new Mapping();\n        mapping.generatedLine = generatedLine;\n\n        // Because each offset is encoded relative to the previous one,\n        // many segments often have the same encoding. We can exploit this\n        // fact by caching the parsed variable length fields of each segment,\n        // allowing us to avoid a second parse if we encounter the same\n        // segment again.\n        for (end = index; end < length; end++) {\n          if (this._charIsMappingSeparator(aStr, end)) {\n            break;\n          }\n        }\n        str = aStr.slice(index, end);\n        segment = cachedSegments[str];\n        if (segment) {\n          index += str.length;\n        } else {\n          segment = [];\n          while (index < end) {\n            base64VLQ.decode(aStr, index, temp);\n            value = temp.value;\n            index = temp.rest;\n            segment.push(value);\n          }\n          if (segment.length === 2) {\n            throw new Error('Found a source, but no line and column');\n          }\n          if (segment.length === 3) {\n            throw new Error('Found a source and line, but no column');\n          }\n          cachedSegments[str] = segment;\n        }\n\n        // Generated column.\n        mapping.generatedColumn = previousGeneratedColumn + segment[0];\n        previousGeneratedColumn = mapping.generatedColumn;\n        if (segment.length > 1) {\n          // Original source.\n          mapping.source = previousSource + segment[1];\n          previousSource += segment[1];\n\n          // Original line.\n          mapping.originalLine = previousOriginalLine + segment[2];\n          previousOriginalLine = mapping.originalLine;\n          // Lines are stored 0-based\n          mapping.originalLine += 1;\n\n          // Original column.\n          mapping.originalColumn = previousOriginalColumn + segment[3];\n          previousOriginalColumn = mapping.originalColumn;\n          if (segment.length > 4) {\n            // Original name.\n            mapping.name = previousName + segment[4];\n            previousName += segment[4];\n          }\n        }\n        generatedMappings.push(mapping);\n        if (typeof mapping.originalLine === 'number') {\n          originalMappings.push(mapping);\n        }\n      }\n    }\n    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n    this.__generatedMappings = generatedMappings;\n    quickSort(originalMappings, util.compareByOriginalPositions);\n    this.__originalMappings = originalMappings;\n  };\n\n  /**\n   * Find the mapping that best matches the hypothetical \"needle\" mapping that\n   * we are searching for in the given \"haystack\" of mappings.\n   */\n  BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError('Line must be greater than or equal to 1, got ' + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError('Column must be greater than or equal to 0, got ' + aNeedle[aColumnName]);\n    }\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  };\n\n  /**\n   * Compute the last column for each generated mapping. The last column is\n   * inclusive.\n   */\n  BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {\n    for (var index = 0; index < this._generatedMappings.length; ++index) {\n      var mapping = this._generatedMappings[index];\n\n      // Mappings do not contain a field for the last generated columnt. We\n      // can come up with an optimistic estimate, however, by assuming that\n      // mappings are contiguous (i.e. given two consecutive mappings, the\n      // first mapping ends where the second one starts).\n      if (index + 1 < this._generatedMappings.length) {\n        var nextMapping = this._generatedMappings[index + 1];\n        if (mapping.generatedLine === nextMapping.generatedLine) {\n          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n          continue;\n        }\n      }\n\n      // The last mapping for each line spans the entire line.\n      mapping.lastGeneratedColumn = Infinity;\n    }\n  };\n\n  /**\n   * Returns the original source, line, and column information for the generated\n   * source's line and column positions provided. The only argument is an object\n   * with the following properties:\n   *\n   *   - line: The line number in the generated source.\n   *   - column: The column number in the generated source.\n   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n   *     closest element that is smaller than or greater than the one we are\n   *     searching for, respectively, if the exact element cannot be found.\n   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - source: The original source file, or null.\n   *   - line: The line number in the original source, or null.\n   *   - column: The column number in the original source, or null.\n   *   - name: The original identifier, or null.\n   */\n  BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n    var index = this._findMapping(needle, this._generatedMappings, \"generatedLine\", \"generatedColumn\", util.compareByGeneratedPositionsDeflated, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));\n    if (index >= 0) {\n      var mapping = this._generatedMappings[index];\n      if (mapping.generatedLine === needle.generatedLine) {\n        var source = util.getArg(mapping, 'source', null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          if (this.sourceRoot != null) {\n            source = util.join(this.sourceRoot, source);\n          }\n        }\n        var name = util.getArg(mapping, 'name', null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n        return {\n          source: source,\n          line: util.getArg(mapping, 'originalLine', null),\n          column: util.getArg(mapping, 'originalColumn', null),\n          name: name\n        };\n      }\n    }\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  };\n\n  /**\n   * Return true if we have the source content for every source in the source\n   * map, false otherwise.\n   */\n  BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function (sc) {\n      return sc == null;\n    });\n  };\n\n  /**\n   * Returns the original source content. The only argument is the url of the\n   * original source file. Returns null if no original source content is\n   * availible.\n   */\n  BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n    if (this.sourceRoot != null) {\n      aSource = util.relative(this.sourceRoot, aSource);\n    }\n    if (this._sources.has(aSource)) {\n      return this.sourcesContent[this._sources.indexOf(aSource)];\n    }\n    var url;\n    if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      var fileUriAbsPath = aSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\" && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n      }\n      if ((!url.path || url.path == \"/\") && this._sources.has(\"/\" + aSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + aSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    } else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n  /**\n   * Returns the generated line and column information for the original source,\n   * line, and column positions provided. The only argument is an object with\n   * the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.\n   *   - column: The column number in the original source.\n   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n   *     closest element that is smaller than or greater than the one we are\n   *     searching for, respectively, if the exact element cannot be found.\n   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.\n   *   - column: The column number in the generated source, or null.\n   */\n  BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {\n    var source = util.getArg(aArgs, 'source');\n    if (this.sourceRoot != null) {\n      source = util.relative(this.sourceRoot, source);\n    }\n    if (!this._sources.has(source)) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n    source = this._sources.indexOf(source);\n    var needle = {\n      source: source,\n      originalLine: util.getArg(aArgs, 'line'),\n      originalColumn: util.getArg(aArgs, 'column')\n    };\n    var index = this._findMapping(needle, this._originalMappings, \"originalLine\", \"originalColumn\", util.compareByOriginalPositions, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n      if (mapping.source === needle.source) {\n        return {\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        };\n      }\n    }\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  };\n  exports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n  /**\n   * An IndexedSourceMapConsumer instance represents a parsed source map which\n   * we can query for information. It differs from BasicSourceMapConsumer in\n   * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n   * input.\n   *\n   * The only parameter is a raw source map (either as a JSON string, or already\n   * parsed to an object). According to the spec for indexed source maps, they\n   * have the following attributes:\n   *\n   *   - version: Which version of the source map spec this map is following.\n   *   - file: Optional. The generated file this source map is associated with.\n   *   - sections: A list of section definitions.\n   *\n   * Each value under the \"sections\" field has two fields:\n   *   - offset: The offset into the original specified at which this section\n   *       begins to apply, defined as an object with a \"line\" and \"column\"\n   *       field.\n   *   - map: A source map definition. This source map could also be indexed,\n   *       but doesn't have to be.\n   *\n   * Instead of the \"map\" field, it's also possible to have a \"url\" field\n   * specifying a URL to retrieve a source map from, but that's currently\n   * unsupported.\n   *\n   * Here's an example source map, taken from the source map spec[0], but\n   * modified to omit a section which uses the \"url\" field.\n   *\n   *  {\n   *    version : 3,\n   *    file: \"app.js\",\n   *    sections: [{\n   *      offset: {line:100, column:10},\n   *      map: {\n   *        version : 3,\n   *        file: \"section.js\",\n   *        sources: [\"foo.js\", \"bar.js\"],\n   *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n   *        mappings: \"AAAA,E;;ABCDE;\"\n   *      }\n   *    }],\n   *  }\n   *\n   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n   */\n  function IndexedSourceMapConsumer(aSourceMap) {\n    var sourceMap = aSourceMap;\n    if (typeof aSourceMap === 'string') {\n      sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n    }\n    var version = util.getArg(sourceMap, 'version');\n    var sections = util.getArg(sourceMap, 'sections');\n    if (version != this._version) {\n      throw new Error('Unsupported version: ' + version);\n    }\n    this._sources = new ArraySet();\n    this._names = new ArraySet();\n    var lastOffset = {\n      line: -1,\n      column: 0\n    };\n    this._sections = sections.map(function (s) {\n      if (s.url) {\n        // The url field will require support for asynchronicity.\n        // See https://github.com/mozilla/source-map/issues/16\n        throw new Error('Support for url field in sections not implemented.');\n      }\n      var offset = util.getArg(s, 'offset');\n      var offsetLine = util.getArg(offset, 'line');\n      var offsetColumn = util.getArg(offset, 'column');\n      if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n        throw new Error('Section offsets must be ordered and non-overlapping.');\n      }\n      lastOffset = offset;\n      return {\n        generatedOffset: {\n          // The offset fields are 0-based, but we use 1-based indices when\n          // encoding/decoding from VLQ.\n          generatedLine: offsetLine + 1,\n          generatedColumn: offsetColumn + 1\n        },\n        consumer: new SourceMapConsumer(util.getArg(s, 'map'))\n      };\n    });\n  }\n  IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\n  IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n  /**\n   * The version of the source mapping spec that we are consuming.\n   */\n  IndexedSourceMapConsumer.prototype._version = 3;\n\n  /**\n   * The list of original sources.\n   */\n  Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n    get: function () {\n      var sources = [];\n      for (var i = 0; i < this._sections.length; i++) {\n        for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n          sources.push(this._sections[i].consumer.sources[j]);\n        }\n      }\n      ;\n      return sources;\n    }\n  });\n\n  /**\n   * Returns the original source, line, and column information for the generated\n   * source's line and column positions provided. The only argument is an object\n   * with the following properties:\n   *\n   *   - line: The line number in the generated source.\n   *   - column: The column number in the generated source.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - source: The original source file, or null.\n   *   - line: The line number in the original source, or null.\n   *   - column: The column number in the original source, or null.\n   *   - name: The original identifier, or null.\n   */\n  IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    var sectionIndex = binarySearch.search(needle, this._sections, function (needle, section) {\n      var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n      if (cmp) {\n        return cmp;\n      }\n      return needle.generatedColumn - section.generatedOffset.generatedColumn;\n    });\n    var section = this._sections[sectionIndex];\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n      bias: aArgs.bias\n    });\n  };\n\n  /**\n   * Return true if we have the source content for every source in the source\n   * map, false otherwise.\n   */\n  IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n    return this._sections.every(function (s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  };\n\n  /**\n   * Returns the original source content. The only argument is the url of the\n   * original source file. Returns null if no original source content is\n   * available.\n   */\n  IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n      var content = section.consumer.sourceContentFor(aSource, true);\n      if (content) {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    } else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n  /**\n   * Returns the generated line and column information for the original source,\n   * line, and column positions provided. The only argument is an object with\n   * the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.\n   *   - column: The column number in the original source.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.\n   *   - column: The column number in the generated source, or null.\n   */\n  IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {\n        continue;\n      }\n      var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        var ret = {\n          line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)\n        };\n        return ret;\n      }\n    }\n    return {\n      line: null,\n      column: null\n    };\n  };\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    this.__generatedMappings = [];\n    this.__originalMappings = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n      var sectionMappings = section.consumer._generatedMappings;\n      for (var j = 0; j < sectionMappings.length; j++) {\n        var mapping = sectionMappings[i];\n        var source = section.consumer._sources.at(mapping.source);\n        if (section.consumer.sourceRoot !== null) {\n          source = util.join(section.consumer.sourceRoot, source);\n        }\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n        var name = section.consumer._names.at(mapping.name);\n        this._names.add(name);\n        name = this._names.indexOf(name);\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        var adjustedMapping = {\n          source: source,\n          generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.column + (section.generatedOffset.generatedLine === mapping.generatedLine) ? section.generatedOffset.generatedColumn - 1 : 0,\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: name\n        };\n        this.__generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === 'number') {\n          this.__originalMappings.push(adjustedMapping);\n        }\n      }\n      ;\n    }\n    ;\n    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n    quickSort(this.__originalMappings, util.compareByOriginalPositions);\n  };\n  exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n});","map":{"version":3,"names":["define","require","module","exports","util","binarySearch","ArraySet","base64VLQ","quickSort","SourceMapConsumer","aSourceMap","sourceMap","JSON","parse","replace","sections","IndexedSourceMapConsumer","BasicSourceMapConsumer","fromSourceMap","prototype","_version","__generatedMappings","Object","defineProperty","get","_parseMappings","_mappings","sourceRoot","__originalMappings","_charIsMappingSeparator","SourceMapConsumer_charIsMappingSeparator","aStr","index","c","charAt","SourceMapConsumer_parseMappings","aSourceRoot","Error","GENERATED_ORDER","ORIGINAL_ORDER","GREATEST_LOWER_BOUND","LEAST_UPPER_BOUND","eachMapping","SourceMapConsumer_eachMapping","aCallback","aContext","aOrder","context","order","mappings","_generatedMappings","_originalMappings","map","mapping","source","_sources","at","join","generatedLine","generatedColumn","originalLine","originalColumn","name","_names","forEach","allGeneratedPositionsFor","SourceMapConsumer_allGeneratedPositionsFor","aArgs","line","getArg","needle","relative","has","indexOf","_findMapping","compareByOriginalPositions","column","undefined","push","lastColumn","version","sources","names","sourcesContent","file","normalize","fromArray","create","consumer","SourceMapConsumer_fromSourceMap","smc","toArray","_sourceRoot","_generateSourcesContent","_file","generatedMappings","slice","destGeneratedMappings","destOriginalMappings","i","length","srcMapping","destMapping","Mapping","s","previousGeneratedColumn","previousOriginalLine","previousOriginalColumn","previousSource","previousName","cachedSegments","temp","originalMappings","str","segment","end","value","decode","rest","compareByGeneratedPositionsDeflated","SourceMapConsumer_findMapping","aNeedle","aMappings","aLineName","aColumnName","aComparator","aBias","TypeError","search","computeColumnSpans","SourceMapConsumer_computeColumnSpans","nextMapping","lastGeneratedColumn","Infinity","originalPositionFor","SourceMapConsumer_originalPositionFor","hasContentsOfAllSources","BasicSourceMapConsumer_hasContentsOfAllSources","size","some","sc","sourceContentFor","SourceMapConsumer_sourceContentFor","aSource","nullOnMissing","url","urlParse","fileUriAbsPath","scheme","path","generatedPositionFor","SourceMapConsumer_generatedPositionFor","lastOffset","_sections","offset","offsetLine","offsetColumn","generatedOffset","constructor","j","IndexedSourceMapConsumer_originalPositionFor","sectionIndex","section","cmp","bias","IndexedSourceMapConsumer_hasContentsOfAllSources","every","IndexedSourceMapConsumer_sourceContentFor","content","IndexedSourceMapConsumer_generatedPositionFor","generatedPosition","ret","IndexedSourceMapConsumer_parseMappings","sectionMappings","add","adjustedMapping"],"sources":["C:/d/Programming/web/jodel-mde/node_modules/jstransform/node_modules/source-map/lib/source-map/source-map-consumer.js"],"sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var util = require('./util');\n  var binarySearch = require('./binary-search');\n  var ArraySet = require('./array-set').ArraySet;\n  var base64VLQ = require('./base64-vlq');\n  var quickSort = require('./quick-sort').quickSort;\n\n  function SourceMapConsumer(aSourceMap) {\n    var sourceMap = aSourceMap;\n    if (typeof aSourceMap === 'string') {\n      sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n    }\n\n    return sourceMap.sections != null\n      ? new IndexedSourceMapConsumer(sourceMap)\n      : new BasicSourceMapConsumer(sourceMap);\n  }\n\n  SourceMapConsumer.fromSourceMap = function(aSourceMap) {\n    return BasicSourceMapConsumer.fromSourceMap(aSourceMap);\n  }\n\n  /**\n   * The version of the source mapping spec that we are consuming.\n   */\n  SourceMapConsumer.prototype._version = 3;\n\n  // `__generatedMappings` and `__originalMappings` are arrays that hold the\n  // parsed mapping coordinates from the source map's \"mappings\" attribute. They\n  // are lazily instantiated, accessed via the `_generatedMappings` and\n  // `_originalMappings` getters respectively, and we only parse the mappings\n  // and create these arrays once queried for a source location. We jump through\n  // these hoops because there can be many thousands of mappings, and parsing\n  // them is expensive, so we only want to do it if we must.\n  //\n  // Each object in the arrays is of the form:\n  //\n  //     {\n  //       generatedLine: The line number in the generated code,\n  //       generatedColumn: The column number in the generated code,\n  //       source: The path to the original source file that generated this\n  //               chunk of code,\n  //       originalLine: The line number in the original source that\n  //                     corresponds to this chunk of generated code,\n  //       originalColumn: The column number in the original source that\n  //                       corresponds to this chunk of generated code,\n  //       name: The name of the original symbol which generated this chunk of\n  //             code.\n  //     }\n  //\n  // All properties except for `generatedLine` and `generatedColumn` can be\n  // `null`.\n  //\n  // `_generatedMappings` is ordered by the generated positions.\n  //\n  // `_originalMappings` is ordered by the original positions.\n\n  SourceMapConsumer.prototype.__generatedMappings = null;\n  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n    get: function () {\n      if (!this.__generatedMappings) {\n        this._parseMappings(this._mappings, this.sourceRoot);\n      }\n\n      return this.__generatedMappings;\n    }\n  });\n\n  SourceMapConsumer.prototype.__originalMappings = null;\n  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n    get: function () {\n      if (!this.__originalMappings) {\n        this._parseMappings(this._mappings, this.sourceRoot);\n      }\n\n      return this.__originalMappings;\n    }\n  });\n\n  SourceMapConsumer.prototype._charIsMappingSeparator =\n    function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n      var c = aStr.charAt(index);\n      return c === \";\" || c === \",\";\n    };\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  SourceMapConsumer.prototype._parseMappings =\n    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      throw new Error(\"Subclasses must implement _parseMappings\");\n    };\n\n  SourceMapConsumer.GENERATED_ORDER = 1;\n  SourceMapConsumer.ORIGINAL_ORDER = 2;\n\n  SourceMapConsumer.GREATEST_LOWER_BOUND = 1;\n  SourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n  /**\n   * Iterate over each mapping between an original source/line/column and a\n   * generated line/column in this source map.\n   *\n   * @param Function aCallback\n   *        The function that is called with each mapping.\n   * @param Object aContext\n   *        Optional. If specified, this object will be the value of `this` every\n   *        time that `aCallback` is called.\n   * @param aOrder\n   *        Either `SourceMapConsumer.GENERATED_ORDER` or\n   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n   *        iterate over the mappings sorted by the generated file's line/column\n   *        order or the original's source/line/column order, respectively. Defaults to\n   *        `SourceMapConsumer.GENERATED_ORDER`.\n   */\n  SourceMapConsumer.prototype.eachMapping =\n    function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n      var context = aContext || null;\n      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n      var mappings;\n      switch (order) {\n      case SourceMapConsumer.GENERATED_ORDER:\n        mappings = this._generatedMappings;\n        break;\n      case SourceMapConsumer.ORIGINAL_ORDER:\n        mappings = this._originalMappings;\n        break;\n      default:\n        throw new Error(\"Unknown order of iteration.\");\n      }\n\n      var sourceRoot = this.sourceRoot;\n      mappings.map(function (mapping) {\n        var source = mapping.source === null ? null : this._sources.at(mapping.source);\n        if (source != null && sourceRoot != null) {\n          source = util.join(sourceRoot, source);\n        }\n        return {\n          source: source,\n          generatedLine: mapping.generatedLine,\n          generatedColumn: mapping.generatedColumn,\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: mapping.name === null ? null : this._names.at(mapping.name)\n        };\n      }, this).forEach(aCallback, context);\n    };\n\n  /**\n   * Returns all generated line and column information for the original source,\n   * line, and column provided. If no column is provided, returns all mappings\n   * corresponding to a either the line we are searching for or the next\n   * closest line that has any mappings. Otherwise, returns all mappings\n   * corresponding to the given line and either the column we are searching for\n   * or the next closest column that has any offsets.\n   *\n   * The only argument is an object with the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.\n   *   - column: Optional. the column number in the original source.\n   *\n   * and an array of objects is returned, each with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.\n   *   - column: The column number in the generated source, or null.\n   */\n  SourceMapConsumer.prototype.allGeneratedPositionsFor =\n    function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n      var line = util.getArg(aArgs, 'line');\n\n      // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n      // returns the index of the closest mapping less than the needle. By\n      // setting needle.originalColumn to 0, we thus find the last mapping for\n      // the given line, provided such a mapping exists.\n      var needle = {\n        source: util.getArg(aArgs, 'source'),\n        originalLine: line,\n        originalColumn: util.getArg(aArgs, 'column', 0)\n      };\n\n      if (this.sourceRoot != null) {\n        needle.source = util.relative(this.sourceRoot, needle.source);\n      }\n      if (!this._sources.has(needle.source)) {\n        return [];\n      }\n      needle.source = this._sources.indexOf(needle.source);\n\n      var mappings = [];\n\n      var index = this._findMapping(needle,\n                                    this._originalMappings,\n                                    \"originalLine\",\n                                    \"originalColumn\",\n                                    util.compareByOriginalPositions,\n                                    binarySearch.LEAST_UPPER_BOUND);\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n\n        if (aArgs.column === undefined) {\n          var originalLine = mapping.originalLine;\n\n          // Iterate until either we run out of mappings, or we run into\n          // a mapping for a different line than the one we found. Since\n          // mappings are sorted, this is guaranteed to find all mappings for\n          // the line we found.\n          while (mapping && mapping.originalLine === originalLine) {\n            mappings.push({\n              line: util.getArg(mapping, 'generatedLine', null),\n              column: util.getArg(mapping, 'generatedColumn', null),\n              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n            });\n\n            mapping = this._originalMappings[++index];\n          }\n        } else {\n          var originalColumn = mapping.originalColumn;\n\n          // Iterate until either we run out of mappings, or we run into\n          // a mapping for a different line than the one we were searching for.\n          // Since mappings are sorted, this is guaranteed to find all mappings for\n          // the line we are searching for.\n          while (mapping &&\n                 mapping.originalLine === line &&\n                 mapping.originalColumn == originalColumn) {\n            mappings.push({\n              line: util.getArg(mapping, 'generatedLine', null),\n              column: util.getArg(mapping, 'generatedColumn', null),\n              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n            });\n\n            mapping = this._originalMappings[++index];\n          }\n        }\n      }\n\n      return mappings;\n    };\n\n  exports.SourceMapConsumer = SourceMapConsumer;\n\n  /**\n   * A BasicSourceMapConsumer instance represents a parsed source map which we can\n   * query for information about the original file positions by giving it a file\n   * position in the generated source.\n   *\n   * The only parameter is the raw source map (either as a JSON string, or\n   * already parsed to an object). According to the spec, source maps have the\n   * following attributes:\n   *\n   *   - version: Which version of the source map spec this map is following.\n   *   - sources: An array of URLs to the original source files.\n   *   - names: An array of identifiers which can be referrenced by individual mappings.\n   *   - sourceRoot: Optional. The URL root from which all sources are relative.\n   *   - sourcesContent: Optional. An array of contents of the original source files.\n   *   - mappings: A string of base64 VLQs which contain the actual mappings.\n   *   - file: Optional. The generated file this source map is associated with.\n   *\n   * Here is an example source map, taken from the source map spec[0]:\n   *\n   *     {\n   *       version : 3,\n   *       file: \"out.js\",\n   *       sourceRoot : \"\",\n   *       sources: [\"foo.js\", \"bar.js\"],\n   *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n   *       mappings: \"AA,AB;;ABCDE;\"\n   *     }\n   *\n   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n   */\n  function BasicSourceMapConsumer(aSourceMap) {\n    var sourceMap = aSourceMap;\n    if (typeof aSourceMap === 'string') {\n      sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n    }\n\n    var version = util.getArg(sourceMap, 'version');\n    var sources = util.getArg(sourceMap, 'sources');\n    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n    // requires the array) to play nice here.\n    var names = util.getArg(sourceMap, 'names', []);\n    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n    var mappings = util.getArg(sourceMap, 'mappings');\n    var file = util.getArg(sourceMap, 'file', null);\n\n    // Once again, Sass deviates from the spec and supplies the version as a\n    // string rather than a number, so we use loose equality checking here.\n    if (version != this._version) {\n      throw new Error('Unsupported version: ' + version);\n    }\n\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    sources = sources.map(util.normalize);\n\n    // Pass `true` below to allow duplicate names and sources. While source maps\n    // are intended to be compressed and deduplicated, the TypeScript compiler\n    // sometimes generates source maps with duplicates in them. See Github issue\n    // #72 and bugzil.la/889492.\n    this._names = ArraySet.fromArray(names, true);\n    this._sources = ArraySet.fromArray(sources, true);\n\n    this.sourceRoot = sourceRoot;\n    this.sourcesContent = sourcesContent;\n    this._mappings = mappings;\n    this.file = file;\n  }\n\n  BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\n  BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n  /**\n   * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n   *\n   * @param SourceMapGenerator aSourceMap\n   *        The source map that will be consumed.\n   * @returns BasicSourceMapConsumer\n   */\n  BasicSourceMapConsumer.fromSourceMap =\n    function SourceMapConsumer_fromSourceMap(aSourceMap) {\n      var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n      smc.sourceRoot = aSourceMap._sourceRoot;\n      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                              smc.sourceRoot);\n      smc.file = aSourceMap._file;\n\n      // Because we are modifying the entries (by converting string sources and\n      // names to indices into the sources and names ArraySets), we have to make\n      // a copy of the entry or else bad things happen. Shared mutable state\n      // strikes again! See github issue #191.\n\n      var generatedMappings = aSourceMap._mappings.toArray().slice();\n      var destGeneratedMappings = smc.__generatedMappings = [];\n      var destOriginalMappings = smc.__originalMappings = [];\n\n      for (var i = 0, length = generatedMappings.length; i < length; i++) {\n        var srcMapping = generatedMappings[i];\n        var destMapping = new Mapping;\n        destMapping.generatedLine = srcMapping.generatedLine;\n        destMapping.generatedColumn = srcMapping.generatedColumn;\n\n        if (srcMapping.source) {\n          destMapping.source = sources.indexOf(srcMapping.source);\n          destMapping.originalLine = srcMapping.originalLine;\n          destMapping.originalColumn = srcMapping.originalColumn;\n\n          if (srcMapping.name) {\n            destMapping.name = names.indexOf(srcMapping.name);\n          }\n\n          destOriginalMappings.push(destMapping);\n        }\n\n        destGeneratedMappings.push(destMapping);\n      }\n\n      quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n      return smc;\n    };\n\n  /**\n   * The version of the source mapping spec that we are consuming.\n   */\n  BasicSourceMapConsumer.prototype._version = 3;\n\n  /**\n   * The list of original sources.\n   */\n  Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n    get: function () {\n      return this._sources.toArray().map(function (s) {\n        return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;\n      }, this);\n    }\n  });\n\n  /**\n   * Provide the JIT with a nice shape / hidden class.\n   */\n  function Mapping() {\n    this.generatedLine = 0;\n    this.generatedColumn = 0;\n    this.source = null;\n    this.originalLine = null;\n    this.originalColumn = null;\n    this.name = null;\n  }\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  BasicSourceMapConsumer.prototype._parseMappings =\n    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      var generatedLine = 1;\n      var previousGeneratedColumn = 0;\n      var previousOriginalLine = 0;\n      var previousOriginalColumn = 0;\n      var previousSource = 0;\n      var previousName = 0;\n      var length = aStr.length;\n      var index = 0;\n      var cachedSegments = {};\n      var temp = {};\n      var originalMappings = [];\n      var generatedMappings = [];\n      var mapping, str, segment, end, value;\n\n      while (index < length) {\n        if (aStr.charAt(index) === ';') {\n          generatedLine++;\n          index++;\n          previousGeneratedColumn = 0;\n        }\n        else if (aStr.charAt(index) === ',') {\n          index++;\n        }\n        else {\n          mapping = new Mapping();\n          mapping.generatedLine = generatedLine;\n\n          // Because each offset is encoded relative to the previous one,\n          // many segments often have the same encoding. We can exploit this\n          // fact by caching the parsed variable length fields of each segment,\n          // allowing us to avoid a second parse if we encounter the same\n          // segment again.\n          for (end = index; end < length; end++) {\n            if (this._charIsMappingSeparator(aStr, end)) {\n              break;\n            }\n          }\n          str = aStr.slice(index, end);\n\n          segment = cachedSegments[str];\n          if (segment) {\n            index += str.length;\n          } else {\n            segment = [];\n            while (index < end) {\n              base64VLQ.decode(aStr, index, temp);\n              value = temp.value;\n              index = temp.rest;\n              segment.push(value);\n            }\n\n            if (segment.length === 2) {\n              throw new Error('Found a source, but no line and column');\n            }\n\n            if (segment.length === 3) {\n              throw new Error('Found a source and line, but no column');\n            }\n\n            cachedSegments[str] = segment;\n          }\n\n          // Generated column.\n          mapping.generatedColumn = previousGeneratedColumn + segment[0];\n          previousGeneratedColumn = mapping.generatedColumn;\n\n          if (segment.length > 1) {\n            // Original source.\n            mapping.source = previousSource + segment[1];\n            previousSource += segment[1];\n\n            // Original line.\n            mapping.originalLine = previousOriginalLine + segment[2];\n            previousOriginalLine = mapping.originalLine;\n            // Lines are stored 0-based\n            mapping.originalLine += 1;\n\n            // Original column.\n            mapping.originalColumn = previousOriginalColumn + segment[3];\n            previousOriginalColumn = mapping.originalColumn;\n\n            if (segment.length > 4) {\n              // Original name.\n              mapping.name = previousName + segment[4];\n              previousName += segment[4];\n            }\n          }\n\n          generatedMappings.push(mapping);\n          if (typeof mapping.originalLine === 'number') {\n            originalMappings.push(mapping);\n          }\n        }\n      }\n\n      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n      this.__generatedMappings = generatedMappings;\n\n      quickSort(originalMappings, util.compareByOriginalPositions);\n      this.__originalMappings = originalMappings;\n    };\n\n  /**\n   * Find the mapping that best matches the hypothetical \"needle\" mapping that\n   * we are searching for in the given \"haystack\" of mappings.\n   */\n  BasicSourceMapConsumer.prototype._findMapping =\n    function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                           aColumnName, aComparator, aBias) {\n      // To return the position we are searching for, we must first find the\n      // mapping for the given position and then return the opposite position it\n      // points to. Because the mappings are sorted, we can use binary search to\n      // find the best mapping.\n\n      if (aNeedle[aLineName] <= 0) {\n        throw new TypeError('Line must be greater than or equal to 1, got '\n                            + aNeedle[aLineName]);\n      }\n      if (aNeedle[aColumnName] < 0) {\n        throw new TypeError('Column must be greater than or equal to 0, got '\n                            + aNeedle[aColumnName]);\n      }\n\n      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n    };\n\n  /**\n   * Compute the last column for each generated mapping. The last column is\n   * inclusive.\n   */\n  BasicSourceMapConsumer.prototype.computeColumnSpans =\n    function SourceMapConsumer_computeColumnSpans() {\n      for (var index = 0; index < this._generatedMappings.length; ++index) {\n        var mapping = this._generatedMappings[index];\n\n        // Mappings do not contain a field for the last generated columnt. We\n        // can come up with an optimistic estimate, however, by assuming that\n        // mappings are contiguous (i.e. given two consecutive mappings, the\n        // first mapping ends where the second one starts).\n        if (index + 1 < this._generatedMappings.length) {\n          var nextMapping = this._generatedMappings[index + 1];\n\n          if (mapping.generatedLine === nextMapping.generatedLine) {\n            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n            continue;\n          }\n        }\n\n        // The last mapping for each line spans the entire line.\n        mapping.lastGeneratedColumn = Infinity;\n      }\n    };\n\n  /**\n   * Returns the original source, line, and column information for the generated\n   * source's line and column positions provided. The only argument is an object\n   * with the following properties:\n   *\n   *   - line: The line number in the generated source.\n   *   - column: The column number in the generated source.\n   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n   *     closest element that is smaller than or greater than the one we are\n   *     searching for, respectively, if the exact element cannot be found.\n   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - source: The original source file, or null.\n   *   - line: The line number in the original source, or null.\n   *   - column: The column number in the original source, or null.\n   *   - name: The original identifier, or null.\n   */\n  BasicSourceMapConsumer.prototype.originalPositionFor =\n    function SourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, 'line'),\n        generatedColumn: util.getArg(aArgs, 'column')\n      };\n\n      var index = this._findMapping(\n        needle,\n        this._generatedMappings,\n        \"generatedLine\",\n        \"generatedColumn\",\n        util.compareByGeneratedPositionsDeflated,\n        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n      );\n\n      if (index >= 0) {\n        var mapping = this._generatedMappings[index];\n\n        if (mapping.generatedLine === needle.generatedLine) {\n          var source = util.getArg(mapping, 'source', null);\n          if (source !== null) {\n            source = this._sources.at(source);\n            if (this.sourceRoot != null) {\n              source = util.join(this.sourceRoot, source);\n            }\n          }\n          var name = util.getArg(mapping, 'name', null);\n          if (name !== null) {\n            name = this._names.at(name);\n          }\n          return {\n            source: source,\n            line: util.getArg(mapping, 'originalLine', null),\n            column: util.getArg(mapping, 'originalColumn', null),\n            name: name\n          };\n        }\n      }\n\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    };\n\n  /**\n   * Return true if we have the source content for every source in the source\n   * map, false otherwise.\n   */\n  BasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n    function BasicSourceMapConsumer_hasContentsOfAllSources() {\n      if (!this.sourcesContent) {\n        return false;\n      }\n      return this.sourcesContent.length >= this._sources.size() &&\n        !this.sourcesContent.some(function (sc) { return sc == null; });\n    };\n\n  /**\n   * Returns the original source content. The only argument is the url of the\n   * original source file. Returns null if no original source content is\n   * availible.\n   */\n  BasicSourceMapConsumer.prototype.sourceContentFor =\n    function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      if (!this.sourcesContent) {\n        return null;\n      }\n\n      if (this.sourceRoot != null) {\n        aSource = util.relative(this.sourceRoot, aSource);\n      }\n\n      if (this._sources.has(aSource)) {\n        return this.sourcesContent[this._sources.indexOf(aSource)];\n      }\n\n      var url;\n      if (this.sourceRoot != null\n          && (url = util.urlParse(this.sourceRoot))) {\n        // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n        // many users. We can help them out when they expect file:// URIs to\n        // behave like it would if they were running a local HTTP server. See\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n        var fileUriAbsPath = aSource.replace(/^file:\\/\\//, \"\");\n        if (url.scheme == \"file\"\n            && this._sources.has(fileUriAbsPath)) {\n          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n        }\n\n        if ((!url.path || url.path == \"/\")\n            && this._sources.has(\"/\" + aSource)) {\n          return this.sourcesContent[this._sources.indexOf(\"/\" + aSource)];\n        }\n      }\n\n      // This function is used recursively from\n      // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n      // don't want to throw if we can't find the source - we just want to\n      // return null, so we provide a flag to exit gracefully.\n      if (nullOnMissing) {\n        return null;\n      }\n      else {\n        throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n      }\n    };\n\n  /**\n   * Returns the generated line and column information for the original source,\n   * line, and column positions provided. The only argument is an object with\n   * the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.\n   *   - column: The column number in the original source.\n   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n   *     closest element that is smaller than or greater than the one we are\n   *     searching for, respectively, if the exact element cannot be found.\n   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.\n   *   - column: The column number in the generated source, or null.\n   */\n  BasicSourceMapConsumer.prototype.generatedPositionFor =\n    function SourceMapConsumer_generatedPositionFor(aArgs) {\n      var source = util.getArg(aArgs, 'source');\n      if (this.sourceRoot != null) {\n        source = util.relative(this.sourceRoot, source);\n      }\n      if (!this._sources.has(source)) {\n        return {\n          line: null,\n          column: null,\n          lastColumn: null\n        };\n      }\n      source = this._sources.indexOf(source);\n\n      var needle = {\n        source: source,\n        originalLine: util.getArg(aArgs, 'line'),\n        originalColumn: util.getArg(aArgs, 'column')\n      };\n\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n      );\n\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n\n        if (mapping.source === needle.source) {\n          return {\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          };\n        }\n      }\n\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    };\n\n  exports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n  /**\n   * An IndexedSourceMapConsumer instance represents a parsed source map which\n   * we can query for information. It differs from BasicSourceMapConsumer in\n   * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n   * input.\n   *\n   * The only parameter is a raw source map (either as a JSON string, or already\n   * parsed to an object). According to the spec for indexed source maps, they\n   * have the following attributes:\n   *\n   *   - version: Which version of the source map spec this map is following.\n   *   - file: Optional. The generated file this source map is associated with.\n   *   - sections: A list of section definitions.\n   *\n   * Each value under the \"sections\" field has two fields:\n   *   - offset: The offset into the original specified at which this section\n   *       begins to apply, defined as an object with a \"line\" and \"column\"\n   *       field.\n   *   - map: A source map definition. This source map could also be indexed,\n   *       but doesn't have to be.\n   *\n   * Instead of the \"map\" field, it's also possible to have a \"url\" field\n   * specifying a URL to retrieve a source map from, but that's currently\n   * unsupported.\n   *\n   * Here's an example source map, taken from the source map spec[0], but\n   * modified to omit a section which uses the \"url\" field.\n   *\n   *  {\n   *    version : 3,\n   *    file: \"app.js\",\n   *    sections: [{\n   *      offset: {line:100, column:10},\n   *      map: {\n   *        version : 3,\n   *        file: \"section.js\",\n   *        sources: [\"foo.js\", \"bar.js\"],\n   *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n   *        mappings: \"AAAA,E;;ABCDE;\"\n   *      }\n   *    }],\n   *  }\n   *\n   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n   */\n  function IndexedSourceMapConsumer(aSourceMap) {\n    var sourceMap = aSourceMap;\n    if (typeof aSourceMap === 'string') {\n      sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n    }\n\n    var version = util.getArg(sourceMap, 'version');\n    var sections = util.getArg(sourceMap, 'sections');\n\n    if (version != this._version) {\n      throw new Error('Unsupported version: ' + version);\n    }\n\n    this._sources = new ArraySet();\n    this._names = new ArraySet();\n\n    var lastOffset = {\n      line: -1,\n      column: 0\n    };\n    this._sections = sections.map(function (s) {\n      if (s.url) {\n        // The url field will require support for asynchronicity.\n        // See https://github.com/mozilla/source-map/issues/16\n        throw new Error('Support for url field in sections not implemented.');\n      }\n      var offset = util.getArg(s, 'offset');\n      var offsetLine = util.getArg(offset, 'line');\n      var offsetColumn = util.getArg(offset, 'column');\n\n      if (offsetLine < lastOffset.line ||\n          (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n        throw new Error('Section offsets must be ordered and non-overlapping.');\n      }\n      lastOffset = offset;\n\n      return {\n        generatedOffset: {\n          // The offset fields are 0-based, but we use 1-based indices when\n          // encoding/decoding from VLQ.\n          generatedLine: offsetLine + 1,\n          generatedColumn: offsetColumn + 1\n        },\n        consumer: new SourceMapConsumer(util.getArg(s, 'map'))\n      }\n    });\n  }\n\n  IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\n  IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n  /**\n   * The version of the source mapping spec that we are consuming.\n   */\n  IndexedSourceMapConsumer.prototype._version = 3;\n\n  /**\n   * The list of original sources.\n   */\n  Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n    get: function () {\n      var sources = [];\n      for (var i = 0; i < this._sections.length; i++) {\n        for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n          sources.push(this._sections[i].consumer.sources[j]);\n        }\n      };\n      return sources;\n    }\n  });\n\n  /**\n   * Returns the original source, line, and column information for the generated\n   * source's line and column positions provided. The only argument is an object\n   * with the following properties:\n   *\n   *   - line: The line number in the generated source.\n   *   - column: The column number in the generated source.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - source: The original source file, or null.\n   *   - line: The line number in the original source, or null.\n   *   - column: The column number in the original source, or null.\n   *   - name: The original identifier, or null.\n   */\n  IndexedSourceMapConsumer.prototype.originalPositionFor =\n    function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, 'line'),\n        generatedColumn: util.getArg(aArgs, 'column')\n      };\n\n      // Find the section containing the generated position we're trying to map\n      // to an original position.\n      var sectionIndex = binarySearch.search(needle, this._sections,\n        function(needle, section) {\n          var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n          if (cmp) {\n            return cmp;\n          }\n\n          return (needle.generatedColumn -\n                  section.generatedOffset.generatedColumn);\n        });\n      var section = this._sections[sectionIndex];\n\n      if (!section) {\n        return {\n          source: null,\n          line: null,\n          column: null,\n          name: null\n        };\n      }\n\n      return section.consumer.originalPositionFor({\n        line: needle.generatedLine -\n          (section.generatedOffset.generatedLine - 1),\n        column: needle.generatedColumn -\n          (section.generatedOffset.generatedLine === needle.generatedLine\n           ? section.generatedOffset.generatedColumn - 1\n           : 0),\n        bias: aArgs.bias\n      });\n    };\n\n  /**\n   * Return true if we have the source content for every source in the source\n   * map, false otherwise.\n   */\n  IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n    function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n      return this._sections.every(function (s) {\n        return s.consumer.hasContentsOfAllSources();\n      });\n    };\n\n  /**\n   * Returns the original source content. The only argument is the url of the\n   * original source file. Returns null if no original source content is\n   * available.\n   */\n  IndexedSourceMapConsumer.prototype.sourceContentFor =\n    function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n\n        var content = section.consumer.sourceContentFor(aSource, true);\n        if (content) {\n          return content;\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      }\n      else {\n        throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n      }\n    };\n\n  /**\n   * Returns the generated line and column information for the original source,\n   * line, and column positions provided. The only argument is an object with\n   * the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.\n   *   - column: The column number in the original source.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.\n   *   - column: The column number in the generated source, or null.\n   */\n  IndexedSourceMapConsumer.prototype.generatedPositionFor =\n    function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n\n        // Only consider this section if the requested source is in the list of\n        // sources of the consumer.\n        if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {\n          continue;\n        }\n        var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n        if (generatedPosition) {\n          var ret = {\n            line: generatedPosition.line +\n              (section.generatedOffset.generatedLine - 1),\n            column: generatedPosition.column +\n              (section.generatedOffset.generatedLine === generatedPosition.line\n               ? section.generatedOffset.generatedColumn - 1\n               : 0)\n          };\n          return ret;\n        }\n      }\n\n      return {\n        line: null,\n        column: null\n      };\n    };\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  IndexedSourceMapConsumer.prototype._parseMappings =\n    function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      this.__generatedMappings = [];\n      this.__originalMappings = [];\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var sectionMappings = section.consumer._generatedMappings;\n        for (var j = 0; j < sectionMappings.length; j++) {\n          var mapping = sectionMappings[i];\n\n          var source = section.consumer._sources.at(mapping.source);\n          if (section.consumer.sourceRoot !== null) {\n            source = util.join(section.consumer.sourceRoot, source);\n          }\n          this._sources.add(source);\n          source = this._sources.indexOf(source);\n\n          var name = section.consumer._names.at(mapping.name);\n          this._names.add(name);\n          name = this._names.indexOf(name);\n\n          // The mappings coming from the consumer for the section have\n          // generated positions relative to the start of the section, so we\n          // need to offset them to be relative to the start of the concatenated\n          // generated file.\n          var adjustedMapping = {\n            source: source,\n            generatedLine: mapping.generatedLine +\n              (section.generatedOffset.generatedLine - 1),\n            generatedColumn: mapping.column +\n              (section.generatedOffset.generatedLine === mapping.generatedLine)\n              ? section.generatedOffset.generatedColumn - 1\n              : 0,\n            originalLine: mapping.originalLine,\n            originalColumn: mapping.originalColumn,\n            name: name\n          };\n\n          this.__generatedMappings.push(adjustedMapping);\n          if (typeof adjustedMapping.originalLine === 'number') {\n            this.__originalMappings.push(adjustedMapping);\n          }\n        };\n      };\n\n      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n      quickSort(this.__originalMappings, util.compareByOriginalPositions);\n    };\n\n  exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}