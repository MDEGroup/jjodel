{"ast":null,"code":"var _jsxFileName = \"C:\\\\d\\\\Programming\\\\web\\\\jodel-mde\\\\src\\\\components\\\\forEndUser\\\\Measurable.tsx\",\n  _dec,\n  _class,\n  _class2;\nimport React, { Component } from \"react\";\nimport { DGraphElement, Log, RuntimeAccessible, Size, U } from \"../../joiner\";\nimport $ from \"jquery\";\n\n/// <reference path=\"../../common/libraries/jqui-types.ts\" />\n\n// private\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let MeasurableComponent = (_dec = RuntimeAccessible('MeasurableComponent'), _dec(_class = (_class2 = class MeasurableComponent extends Component {\n  constructor() {\n    super(...arguments);\n    this.html = null;\n    this.$html = void 0;\n    this.dragOptionsChanged = true;\n    this.resizeOptionsChanged = true;\n    this.rotateOptionsChanged = true;\n    this.defaultOptions = {\n      draggable: {\n        cursor: 'grabbing',\n        // containment: 'parent',\n        distance: 5\n        // helper: 'clone', // 'original' or 'csselector'? or func=>html\n        // disabled: !(view.draggable),}\n      },\n      resizable: {},\n      rotatable: {}\n    };\n    this.oldPos = {\n      left: 0,\n      top: 0\n    };\n  }\n  componentDidMount() {\n    this.afterUpdate();\n  }\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    this.afterUpdate();\n  }\n  afterUpdate() {\n    if (!this.html) return;\n    this.$html = $(this.html);\n    if (this.dragOptionsChanged) {\n      this.afterUpdateSingle(\"draggable\");\n    }\n    if (this.resizeOptionsChanged) {\n      this.afterUpdateSingle(\"resizable\");\n    }\n    if (this.rotateOptionsChanged) {\n      this.afterUpdateSingle(\"rotatable\");\n    }\n  }\n  /*\r\n      afterUpdateSingle(type: \"draggable\" | \"resizable\" | \"rotatable\"): void{\r\n          if (this.props.draggable) this.afterUpdateDraggable\r\n      }/*\r\n      afterUpdateDraggable_old(): void{\r\n          nope, erase this and just make the previous _old genericversion with inner dynamic functions called 9 times like event('drag', 'while'); event('drag', 'end'); event('resize', 'while');...\r\n          make and extract new functions from code so that it dinamically build the jqui options object\r\n          if (!this.$html) return;\r\n          let $measurable = this.$html;\r\n          let jqui_options = this.props.draggable;\r\n          let jqui_start = jqui_options === 'object' ? jqui_options.start : undefined;\r\n          let jqui_end = jqui_options === 'object' ? jqui_options.stop : undefined;\r\n          let jqui_ing = jqui_options === 'object' ? jqui_options.drag : undefined;\r\n          let props_start = this.props.onDragStart;\r\n          let props_end = this.props.onDragEnd;\r\n          let props_ing = this.props.whileDragging;\r\n          let type = 'draggable';\r\n              //let positionMap = new WeakMap<HTMLElement, {left: number; top: number}>();\r\n          let childmode_drag = (e: HTMLElement, evt?: any, evtkind?: EventLetter, ui?:any): void => {\r\n              let oc = this.props.onChildren;\r\n              if (!oc) {\r\n                  Log.ee('not oc', {evt, oc, e, p: this.props}); return;\r\n              }\r\n              let child: HTMLElement;\r\n              if (typeof oc === 'function') child = oc(e);\r\n              else child = e.children[0] as HTMLElement;\r\n              if (!child) {\r\n                  Log.ee('child not found', {child, evt, oc, e}); return;\r\n              }\r\n              let oldpos = this.oldPos; // positionMap.get(e);\r\n              console.log('measurable default event child ' + evtkind, {ui, e, oc, oldpos});\r\n              //if (evtkind === 'e') { positionMap.set(e, ui.position); }\r\n                /*if (evtkind === 's') {\r\n                  ui.originalPosition.left = 300;\r\n                  ui.offset.left = 300;\r\n                  ui.position.left = 300;\r\n                  console.log('measurable sstart ', {type, e, oc, ui, el: e.style.left, cl: child.style.left});\r\n              }* /\r\n                let key: any;\r\n              for (key of childmodekeys) {\r\n                  let fixpos = () => {\r\n                      if (oldpos && (oldpos as any)[key] !== undefined) {\r\n                          if (key ==='left') console.log('measurable fixpos ' + evtkind, (oldpos as any)[key] + ui.position[key] + 'px', (oldpos as any)[key]);\r\n                          let newpos = (oldpos as any)[key] + ui.position[key];\r\n                          child.style[key] = (newpos) + 'px';\r\n                          if (evtkind === 'e') this.oldPos[key] = newpos;\r\n                      }\r\n                      else child.style[key] = e.style[key];\r\n                  }\r\n                  fixpos();\r\n                  if (evtkind === 'e')  setTimeout(fixpos, 1000);\r\n                  if (evtkind === 's' && !e.classList.contains('draggable-child-mode')) e.classList.add('draggable-child-mode');\r\n                  // delete e.style[key]\r\n              }\r\n          }\r\n            let translateeevents: Dictionary<string, Dictionary<string, DraggableEvent>> = {\r\n              'draggable': {\r\n                  's': (e, ui)=>{ this.absoluteToTransform(e.target as HTMLElement, e, 's'); },\r\n                  'ing': (e, ui)=>{ this.absoluteToTransform(e.target as HTMLElement, e, 'ing'); },\r\n                  'e': (e, ui)=>{ this.absoluteToTransform(e.target as HTMLElement, e, 'e'); }},\r\n          };\r\n          let defaulteevent = (evtkind: EventLetter): MeasurableUIEvent | null =>{\r\n              if (!this.props.transformMode && !this.props.onChildren) return null;\r\n              return (e: any, ui: any) => {\r\n                  //console.log('measurable default event', {type, evtkind, translateeevents, e, t: e.target});\r\n                  if (this.props.transformMode === true) translateeevents[type][evtkind](e, ui);\r\n                  childmode_drag(e.target, e, evtkind, ui);\r\n              }\r\n          };\r\n            if (props[optionkey] === false || !props[optionkey]) {\r\n              console.log(\"measurable off \" + type, {$measurable, type, datamap, optionkey, props});\r\n              if ($measurable.data(datamap[type])) ($measurable as GObject)[type]('disable');\r\n              return;\r\n          }\r\n          if (props[optionkey] === true) {\r\n              options = {};\r\n          } else options = {...props[optionkey]};\r\n            if (props_start && typeof props_start !== \"function\") { return Log.ee(\"<Measurable /> onDragStart props must be a function\"); }\r\n          if (props_end && typeof props_end !== \"function\") { return Log.ee(\"<Measurable /> onDragEnd props must be a function\"); }\r\n          if (props_ing && typeof props_ing !== \"function\") { return Log.ee(\"<Measurable /> whileDragging props must be a function\"); }\r\n          if (!jqui_start && !props_start && ! default_start) delete options.start,\r\n              else options.start = (evt, ui) => { default_start?.(evt, ui); jqui_start?.(evt, ui); props_start?.(thiss.getCoords(evt, ui), evt, ui); }\r\n            let propsOptions = {...options};\r\n          let defaultOptions = this.defaultOptions[type];\r\n          U.objectMergeInPlace(options, defaultOptions);\r\n          //console.log(\"measurable\", {type, $measurable, options, propsOptions, defaultOptions});\r\n          ($measurable as GObject)[type](options);\r\n      }*/\n\n  absoluteToTransform(e, evt, evtkind) {\n    let x = e.style.left;\n    let y = e.style.top;\n    /*\r\n        e.style.left = '0px';\r\n        e.style.top = '0px';*/\n    //e.style.position = 'unset';\n    e.style.transform = `translate(${x}, ${y})`;\n  }\n  childmode(e, evt, evtkind, ui) {\n    let oc = this.props.onChildren;\n    if (!oc) {\n      Log.ee('not oc', {\n        evt,\n        oc,\n        e,\n        p: this.props\n      });\n      return;\n    }\n    let child;\n    if (typeof oc === 'function') child = oc(e);else child = e.children[0];\n    if (!child) {\n      Log.ee('child not found', {\n        child,\n        evt,\n        oc,\n        e\n      });\n      return;\n    }\n    let oldpos = this.oldPos; // positionMap.get(e);\n    console.log('measurable default event child ' + evtkind, {\n      ui,\n      e,\n      oc,\n      oldpos\n    });\n    //if (evtkind === 'e') { positionMap.set(e, ui.position); }\n\n    /*if (evtkind === 's') {\r\n        ui.originalPosition.left = 300;\r\n        ui.offset.left = 300;\r\n        ui.position.left = 300;\r\n        console.log('measurable sstart ', {type, e, oc, ui, el: e.style.left, cl: child.style.left});\r\n    }*/\n\n    let key;\n    for (key of MeasurableComponent.childmodekeys) {\n      let fixpos = () => {\n        if (oldpos && oldpos[key] !== undefined) {\n          if (key === 'left') console.log('measurable fixpos ' + evtkind, oldpos[key] + ui.position[key] + 'px', oldpos[key]);\n          let newpos = oldpos[key] + ui.position[key];\n          child.style[key] = newpos + 'px';\n          if (evtkind === 'e') this.oldPos[key] = newpos;\n        } else child.style[key] = e.style[key];\n      };\n      fixpos();\n      if (evtkind === 'e') setTimeout(fixpos, 1000);\n      if (evtkind === 's' && !e.classList.contains('draggable-child-mode')) e.classList.add('draggable-child-mode');\n      // delete e.style[key]\n    }\n  }\n  getDefaultEvent(type, evtkind) {\n    if (!this.props.transformMode && !(this.props.onChildren && type === 'draggable')) return null;\n    switch (type) {\n      case 'draggable':\n        if (!this.props.transformMode && !this.props.onChildren) return null;\n        break;\n      case 'resizable':\n        break;\n      case 'rotatable':\n        break;\n    }\n    let translateeevents = {\n      'draggable': {\n        's': (e, ui) => {\n          this.absoluteToTransform(e.target, e, 's');\n        },\n        'ing': (e, ui) => {\n          this.absoluteToTransform(e.target, e, 'ing');\n        },\n        'e': (e, ui) => {\n          this.absoluteToTransform(e.target, e, 'e');\n        }\n      }\n      /*'resizable': {\r\n          's': (e, ui)=>{ },\r\n          'ing': (e, ui)=>{ },\r\n          'e': (e, ui)=>{ }},\r\n      'rotatable': {\r\n          's': (e, ui)=>{ },\r\n          'ing': (e, ui)=>{ },\r\n          'e': (e, ui)=>{ }},*/\n    };\n    return (e, ui) => {\n      var _translateeevents$typ, _translateeevents$typ2;\n      console.log('measurable default event', {\n        type,\n        evtkind,\n        translateeevents,\n        e,\n        t: e.target\n      });\n      if (this.props.transformMode === true) (_translateeevents$typ = translateeevents[type]) === null || _translateeevents$typ === void 0 ? void 0 : (_translateeevents$typ2 = _translateeevents$typ[evtkind]) === null || _translateeevents$typ2 === void 0 ? void 0 : _translateeevents$typ2.call(_translateeevents$typ, e, ui);\n      this.childmode(e.target, e, evtkind, ui);\n    };\n  }\n  makeEvent(options, type, evtkey) {\n    let eventmap = {\n      's': {\n        'draggable': 'onDragStart',\n        'rotatable': 'onRotateStart',\n        'resizable': 'onResizeStart'\n      },\n      'ing': {\n        'draggable': 'whileDragging',\n        'rotatable': 'whileRotating',\n        'resizable': 'whileResizing'\n      },\n      'e': {\n        'draggable': 'onDragEnd',\n        'rotatable': 'onRotateEnd',\n        'resizable': 'onResizeEnd'\n      }\n    };\n    let jqui_ing;\n    switch (type) {\n      default:\n        jqui_ing = Log.eDevv(\"unexpected measurable event: \" + type);\n        return;\n      case \"draggable\":\n        jqui_ing = 'drag';\n        break;\n      case \"resizable\":\n        jqui_ing = 'resize';\n        break;\n      case \"rotatable\":\n        jqui_ing = 'rotate';\n        break;\n    }\n    //let jodelevent = {'s': eventmap.s[type], 'ing': eventmap.ing[type], 'e': eventmap.e[type]};\n    let jquievent = {\n      's': 'start',\n      'ing': jqui_ing,\n      'e': 'stop'\n    };\n    let jqkey = jquievent[evtkey] || '';\n    let props = this.props;\n    let propsevent = props[eventmap[evtkey][type]];\n    if (propsevent && typeof propsevent !== \"function\") {\n      Log.ee(\"<Measurable /> \" + eventmap[evtkey][type] + \" props must be a function\");\n      return;\n    }\n    // call ondragend... jodel events\n    let jquievt = options[jqkey];\n    // let jodelevt = propsevent; // (...params: any) => propsevent(...params); // was made to preserve \"this\"?\n    let defaultevt = this.getDefaultEvent(type, evtkey);\n    let allevents = [jquievt, propsevent, defaultevt].filter(e => !!e);\n    console.log('checking for jodelevent 00', {\n      propsevent,\n      allevents,\n      props,\n      k: eventmap[evtkey][type],\n      pe: props[eventmap[evtkey][type]],\n      evtkey,\n      type,\n      eventmap\n    });\n    if (allevents.length) options[jqkey] = (evt, ui) => {\n      for (let e of allevents) {\n        propsevent = props[eventmap[evtkey][type]]; // if i don't redeclare it here, closure makes a mess taking always the last jodelevt for all iterations.\n        console.log('checking for jodelevent', e === propsevent, {\n          e,\n          propsevent,\n          allevents,\n          props,\n          k: eventmap[evtkey][type],\n          pe: props[eventmap[evtkey][type]],\n          evtkey,\n          type,\n          eventmap\n        });\n        if (e === propsevent) {\n          e(this.getCoords(evt, ui), evt, ui);\n        } else e(this.getCoords(evt, ui), evt, ui);\n      }\n    };\n  }\n  afterUpdateSingle(type) {\n    // was forced to move from general loop-style implementation to individual redundant stuff because of closure messes.\n    if (!this.$html) return;\n    let $measurable = this.$html;\n    let options;\n    const props = this.props;\n    const datamap = {\n      draggable: \"uiDraggable\",\n      resizable: \"uiResizable\",\n      rotatable: \"uiRotatable\"\n    };\n    const optionmap = {\n      draggable: \"draggable\",\n      resizable: \"resizable\",\n      rotatable: \"rotatable\"\n    };\n    const optionkey = optionmap[type];\n    if (props[optionkey] === false || !props[optionkey]) {\n      console.log(\"measurable off \" + type, {\n        $measurable,\n        type,\n        datamap,\n        optionkey,\n        props\n      });\n      if ($measurable.data(datamap[type])) $measurable[type]('disable');\n      return;\n    }\n    if (props[optionkey] === true) {\n      options = {};\n    } else options = {\n      ...props[optionkey]\n    };\n\n    // todo: changing options at runtime works, but changing children does not update\n\n    let jqui_ing;\n    switch (type) {\n      default:\n        jqui_ing = Log.eDevv(\"unexpected measurable event: \" + type);\n        return;\n      case \"draggable\":\n        jqui_ing = 'drag';\n        break;\n      case \"resizable\":\n        jqui_ing = 'resize';\n        break;\n      case \"rotatable\":\n        jqui_ing = 'rotate';\n        break;\n    }\n    let jquievent = {\n      's': 'start',\n      'ing': jqui_ing,\n      'e': 'stop'\n    };\n    let evtkey;\n    for (evtkey in jquievent) {\n      options[jquievent[evtkey]] = this.makeEvent(options, type, evtkey);\n    }\n    let defaultOptions = this.defaultOptions[type];\n    U.objectMergeInPlace(options, defaultOptions);\n    //console.log(\"measurable\", {type, $measurable, options, propsOptions, defaultOptions});\n    $measurable[type](options);\n  }\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    //console.log(\"measurable shouldup\", {nc:nextProps.children, tc:this.props.children, eq: nextProps.children == this.props.children});\n    // todo: would need to check if pros.children has changed, but that requires a deep search of subcomponents props and state.\n    // currently with just return true it works and rerenders every time the parent component rerenders. not when other elements are interacted.\n    // it works also with <Input> as direct child and it updates.\n    if (window) return true;\n    const oldProps = this.props || {};\n    this.dragOptionsChanged = false;\n    this.resizeOptionsChanged = false;\n    this.rotateOptionsChanged = false;\n    let ret = false;\n    const nestederr = \"Options cannot contain functions or nested objects\";\n    if (!U.isShallowEqualWithProxies(oldProps.draggable, nextProps.draggable)) {\n      const opt = oldProps.draggable;\n      if (opt && typeof opt === \"object\") for (let k in opt) {\n        switch (typeof opt[k]) {\n          case \"function\":\n          case \"object\":\n            Log.ee(\"drag\" + nestederr, k);\n        }\n      }\n      this.dragOptionsChanged = true;\n      ret = true;\n    }\n    if (!U.isShallowEqualWithProxies(oldProps.resizable, nextProps.resizable)) {\n      const opt = oldProps.resizable;\n      if (opt && typeof opt === \"object\") for (let k in opt) {\n        switch (typeof opt[k]) {\n          case \"function\":\n          case \"object\":\n            Log.ee(\"resize\" + nestederr, k);\n        }\n      }\n      this.resizeOptionsChanged = true;\n      ret = true;\n    }\n    if (!U.isShallowEqualWithProxies(oldProps.rotatable, nextProps.rotatable)) {\n      const opt = oldProps.rotatable;\n      if (opt && typeof opt === \"object\") for (let k in opt) {\n        switch (typeof opt[k]) {\n          case \"function\":\n          case \"object\":\n            Log.ee(\"rotate\" + nestederr, k);\n        }\n      }\n      this.rotateOptionsChanged = true;\n      return true;\n    }\n    if (ret) return true; // i don't need to set more this.variable stuff and i already determined something changed.\n    if (Object.keys(oldProps).length !== Object.keys(nextProps).length) return true;\n    let k;\n    for (k in oldProps) {\n      switch (k) {\n        //case \"axis\": if (ok)\n        case \"draggable\":\n        case \"resizable\":\n        case \"rotatable\":\n          continue;\n        case \"children\":\n          continue;\n      }\n      if (!(k in nextProps)) return false;\n      let ok = oldProps[k];\n      let nk = nextProps[k];\n      if (ok === nk) continue;\n      let tk = typeof ok;\n      if (tk !== typeof nk) return false;\n      switch (tk) {\n        case \"object\":\n          Log.ee(\"unexpected object in <Measurable/> props\", {\n            k,\n            nk,\n            ok\n          });\n          return true;\n        case \"function\":\n          if (ok.toString() !== nk.toString()) return true;\n          break;\n        default:\n          return false;\n        // already checked they are !==\n      }\n    }\n    return false;\n  }\n  updateDefaultOptions() {\n    /*let addClasses = this.props.children ? 'on-children' as any : undefined;\r\n                                      jqui.classes does not owrk? and addclass is only for draggable?\r\n    if (this.defaultOptions.draggable.addClasses !== addClasses) {\r\n        this.defaultOptions.resizable.classes = addClasses;\r\n        // this.defaultOptions.rotatable.classes = addClasses;\r\n    }*/\n  }\n  render() {\n    let child = this.props.children;\n    this.updateDefaultOptions();\n    if (!child) return child || null; // sometimes react passes {} as props.children?\n    if (!Object.keys(child).length) return Log.ee(\"Measurable can have only 1 subelement and it cannot be an array or a <>React.fragment</>\", child, this.props);\n    if (Array.isArray(child)) {\n      if (child.length !== 1) {\n        Log.ee(\"Measurable can have only 1 subelement and it cannot be an array or a <>React.fragment</>\", child, this.props);\n        return child;\n      } else child = child[0];\n    }\n    if (child.type.toString() === React.Fragment.toString()) {\n      Log.ee(\"Measurable can have only 1 subelement and it cannot be an array or a <>React.fragment</>\", child, this.props);\n      return child;\n    }\n    let oldProps = child.props;\n    let newProps = {\n      ref: html => {\n        if (html && !U.isHtmlNode(html)) {\n          Log.ee('ref tring to set non-html element', html);\n          return;\n        }\n        this.html = html;\n      }\n    };\n    U.objectMergeInPlace(newProps, oldProps);\n    let clonedChild = /*#__PURE__*/React.cloneElement(child, newProps);\n    return clonedChild;\n  }\n  getCoords(evt, ui) {\n    let size = Size.of(evt.target);\n    let graph = DGraphElement.graphLFromHtml(evt.target);\n    return graph === null || graph === void 0 ? void 0 : graph.translateHtmlSize(size);\n  }\n}, _class2.cname = \"MeasurableComponent\", _class2.childmodekeys = ['left', 'top', 'transform', 'position'], _class2)) || _class);\n/*\r\n@RuntimeAccessible('InfiniteScrollComponent')\r\nexport class InfiniteScrollComponent extends Component<ScrollOwnProps, ScrollState>{\r\n    static cname: string = \"InfiniteScrollComponent\";\r\n    render(){\r\n        return <Measurable transformMode={false} onChildren={true}>{ this.props.children}</Measurable>\r\n    }\r\n}\r\n*/\n// private\n\n// private\n\n// private\n\n// private\n\n////// mapper func\n/*\r\nfunction mapStateToProps(state: DState, ownProps: MeasurableOwnProps): MeasurableStateProps {\r\n    const ret: MeasurableStateProps = {} as any;\r\n    /// to fill\r\n    return ret; }\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<any>): DispatchProps {\r\n    const ret: DispatchProps = {} as any;\r\n    /// to fill\r\n    return ret; }\r\n*/\n\nMeasurableComponent.defaultProps = {\n  autosizex: true,\n  autosizey: true,\n  style: undefined,\n  children: []\n};\nexport class InfiniteScrollComponent extends Component {}\nexport function Measurable(props) {\n  let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return /*#__PURE__*/_jsxDEV(MeasurableComponent, {\n    ...props,\n    children,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 484,\n    columnNumber: 12\n  }, this);\n}\n// todo: shortcuts for Draggable Resizable Rotatable with whileDragging onDragStart props simplified to start, while, end\n_c = Measurable;\nexport function InfiniteScroll(props) {\n  let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return /*#__PURE__*/_jsxDEV(Measurable, {\n    ...props,\n    children,\n    transformMode: false,\n    onChildren: true,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 488,\n    columnNumber: 12\n  }, this);\n} /*\r\n  export function InfiniteScroll(props: MeasurableAllProps, children: ReactChild[] = []): ReactElement {\r\n     return <InfiniteScrollComponent {...{...props, children}}>{children}</InfiniteScrollComponent>;\r\n  }*/\n\n/*connect<MeasurableStateProps, DispatchProps, MeasurableOwnProps, DState>(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MeasurableComponent);*/\n_c2 = InfiniteScroll;\nvar _c, _c2;\n$RefreshReg$(_c, \"Measurable\");\n$RefreshReg$(_c2, \"InfiniteScroll\");","map":{"version":3,"names":["React","Component","DGraphElement","Log","RuntimeAccessible","Size","U","$","jsxDEV","_jsxDEV","MeasurableComponent","_dec","_class","_class2","constructor","arguments","html","$html","dragOptionsChanged","resizeOptionsChanged","rotateOptionsChanged","defaultOptions","draggable","cursor","distance","resizable","rotatable","oldPos","left","top","componentDidMount","afterUpdate","componentDidUpdate","prevProps","prevState","snapshot","afterUpdateSingle","absoluteToTransform","e","evt","evtkind","x","style","y","transform","childmode","ui","oc","props","onChildren","ee","p","child","children","oldpos","console","log","key","childmodekeys","fixpos","undefined","position","newpos","setTimeout","classList","contains","add","getDefaultEvent","type","transformMode","translateeevents","s","target","ing","_translateeevents$typ","_translateeevents$typ2","t","call","makeEvent","options","evtkey","eventmap","jqui_ing","eDevv","jquievent","jqkey","propsevent","jquievt","defaultevt","allevents","filter","k","pe","length","getCoords","$measurable","datamap","optionmap","optionkey","data","objectMergeInPlace","shouldComponentUpdate","nextProps","nextState","nextContext","window","oldProps","ret","nestederr","isShallowEqualWithProxies","opt","Object","keys","ok","nk","tk","toString","updateDefaultOptions","render","Array","isArray","Fragment","newProps","ref","isHtmlNode","clonedChild","cloneElement","size","of","graph","graphLFromHtml","translateHtmlSize","cname","defaultProps","autosizex","autosizey","InfiniteScrollComponent","Measurable","fileName","_jsxFileName","lineNumber","columnNumber","_c","InfiniteScroll","_c2","$RefreshReg$"],"sources":["C:/d/Programming/web/jodel-mde/src/components/forEndUser/Measurable.tsx"],"sourcesContent":["import React, {Component, CSSProperties, PureComponent, ReactChild, ReactElement, ReactNode} from \"react\";\r\nimport {DGraphElement, Dictionary, GObject, GraphSize, LGraph, Log, RuntimeAccessible, Size, TRANSACTION, U} from \"../../joiner\";\r\nimport $ from \"jquery\";\r\nimport {OwnProps} from \"../rightbar/structureEditor/ModelMetaData\";\r\n/// <reference path=\"../../common/libraries/jqui-types.ts\" />\r\nimport {JQueryUI} from \"../../common/libraries/jqui-types\"\r\n\r\ntype ResizableEvent = JQueryUI.ResizableEvent;\r\ntype DraggableEvent = JQueryUI.DraggableEvent;\r\ntype RotatableEvent = JQueryUI.RotatableEvent;\r\ntype DraggableOptions = JQueryUI.DraggableOptions;\r\ntype ResizableOptions = JQueryUI.ResizableOptions;\r\ntype RotatabeOptions = JQueryUI.RotatableOptions;\r\n// private\r\ninterface MeasurableState {\r\n}\r\ninterface ScrollState {\r\n}\r\n\r\ntype EventLetter = 's'|'ing'|'e';\r\ntype MeasurableUIEvent = ResizableEvent | DraggableEvent | RotatableEvent;\r\n\r\n@RuntimeAccessible('MeasurableComponent')\r\nexport class MeasurableComponent extends Component<MeasurableAllProps, MeasurableState>{\r\n    static cname: string = \"MeasurableComponent\";\r\n    static childmodekeys: (keyof CSSStyleDeclaration)[] = ['left', 'top', 'transform', 'position'];\r\n\r\n\r\n    private html: Element | null = null;\r\n    private $html!:  JQuery<Element>;\r\n    dragOptionsChanged: boolean = true;\r\n    resizeOptionsChanged: boolean = true;\r\n    rotateOptionsChanged: boolean = true;\r\n    defaultOptions: {\"draggable\": JQueryUI.DraggableOptions, resizable: JQueryUI.ResizableOptions, rotatable: GObject} = {\r\n        draggable: {\r\n            cursor: 'grabbing',\r\n            // containment: 'parent',\r\n            distance: 5,\r\n            // helper: 'clone', // 'original' or 'csselector'? or func=>html\r\n            // disabled: !(view.draggable),}\r\n        },\r\n        resizable: {},\r\n        rotatable: {},\r\n    }\r\n    oldPos: Dictionary<string, number> =  {left: 0, top: 0};\r\n\r\n    componentDidMount() {\r\n        this.afterUpdate();\r\n    }\r\n    componentDidUpdate(prevProps: Readonly<MeasurableAllProps>, prevState: Readonly<MeasurableState>, snapshot?: any) {\r\n        this.afterUpdate();\r\n    }\r\n\r\n    afterUpdate(): void{\r\n        if (!this.html) return;\r\n        this.$html = $(this.html);\r\n        if (this.dragOptionsChanged) { this.afterUpdateSingle(\"draggable\"); }\r\n        if (this.resizeOptionsChanged) { this.afterUpdateSingle(\"resizable\"); }\r\n        if (this.rotateOptionsChanged) { this.afterUpdateSingle(\"rotatable\"); }\r\n    }\r\n    /*\r\n        afterUpdateSingle(type: \"draggable\" | \"resizable\" | \"rotatable\"): void{\r\n            if (this.props.draggable) this.afterUpdateDraggable\r\n        }/*\r\n        afterUpdateDraggable_old(): void{\r\n            nope, erase this and just make the previous _old genericversion with inner dynamic functions called 9 times like event('drag', 'while'); event('drag', 'end'); event('resize', 'while');...\r\n            make and extract new functions from code so that it dinamically build the jqui options object\r\n            if (!this.$html) return;\r\n            let $measurable = this.$html;\r\n            let jqui_options = this.props.draggable;\r\n            let jqui_start = jqui_options === 'object' ? jqui_options.start : undefined;\r\n            let jqui_end = jqui_options === 'object' ? jqui_options.stop : undefined;\r\n            let jqui_ing = jqui_options === 'object' ? jqui_options.drag : undefined;\r\n            let props_start = this.props.onDragStart;\r\n            let props_end = this.props.onDragEnd;\r\n            let props_ing = this.props.whileDragging;\r\n            let type = 'draggable';\r\n\r\n\r\n            //let positionMap = new WeakMap<HTMLElement, {left: number; top: number}>();\r\n            let childmode_drag = (e: HTMLElement, evt?: any, evtkind?: EventLetter, ui?:any): void => {\r\n                let oc = this.props.onChildren;\r\n                if (!oc) {\r\n                    Log.ee('not oc', {evt, oc, e, p: this.props}); return;\r\n                }\r\n                let child: HTMLElement;\r\n                if (typeof oc === 'function') child = oc(e);\r\n                else child = e.children[0] as HTMLElement;\r\n                if (!child) {\r\n                    Log.ee('child not found', {child, evt, oc, e}); return;\r\n                }\r\n                let oldpos = this.oldPos; // positionMap.get(e);\r\n                console.log('measurable default event child ' + evtkind, {ui, e, oc, oldpos});\r\n                //if (evtkind === 'e') { positionMap.set(e, ui.position); }\r\n\r\n                /*if (evtkind === 's') {\r\n                    ui.originalPosition.left = 300;\r\n                    ui.offset.left = 300;\r\n                    ui.position.left = 300;\r\n                    console.log('measurable sstart ', {type, e, oc, ui, el: e.style.left, cl: child.style.left});\r\n                }* /\r\n\r\n                let key: any;\r\n                for (key of childmodekeys) {\r\n                    let fixpos = () => {\r\n                        if (oldpos && (oldpos as any)[key] !== undefined) {\r\n                            if (key ==='left') console.log('measurable fixpos ' + evtkind, (oldpos as any)[key] + ui.position[key] + 'px', (oldpos as any)[key]);\r\n                            let newpos = (oldpos as any)[key] + ui.position[key];\r\n                            child.style[key] = (newpos) + 'px';\r\n                            if (evtkind === 'e') this.oldPos[key] = newpos;\r\n                        }\r\n                        else child.style[key] = e.style[key];\r\n                    }\r\n                    fixpos();\r\n                    if (evtkind === 'e')  setTimeout(fixpos, 1000);\r\n                    if (evtkind === 's' && !e.classList.contains('draggable-child-mode')) e.classList.add('draggable-child-mode');\r\n                    // delete e.style[key]\r\n                }\r\n            }\r\n\r\n            let translateeevents: Dictionary<string, Dictionary<string, DraggableEvent>> = {\r\n                'draggable': {\r\n                    's': (e, ui)=>{ this.absoluteToTransform(e.target as HTMLElement, e, 's'); },\r\n                    'ing': (e, ui)=>{ this.absoluteToTransform(e.target as HTMLElement, e, 'ing'); },\r\n                    'e': (e, ui)=>{ this.absoluteToTransform(e.target as HTMLElement, e, 'e'); }},\r\n            };\r\n            let defaulteevent = (evtkind: EventLetter): MeasurableUIEvent | null =>{\r\n                if (!this.props.transformMode && !this.props.onChildren) return null;\r\n                return (e: any, ui: any) => {\r\n                    //console.log('measurable default event', {type, evtkind, translateeevents, e, t: e.target});\r\n                    if (this.props.transformMode === true) translateeevents[type][evtkind](e, ui);\r\n                    childmode_drag(e.target, e, evtkind, ui);\r\n                }\r\n            };\r\n\r\n            if (props[optionkey] === false || !props[optionkey]) {\r\n                console.log(\"measurable off \" + type, {$measurable, type, datamap, optionkey, props});\r\n                if ($measurable.data(datamap[type])) ($measurable as GObject)[type]('disable');\r\n                return;\r\n            }\r\n            if (props[optionkey] === true) {\r\n                options = {};\r\n            } else options = {...props[optionkey]};\r\n\r\n            if (props_start && typeof props_start !== \"function\") { return Log.ee(\"<Measurable /> onDragStart props must be a function\"); }\r\n            if (props_end && typeof props_end !== \"function\") { return Log.ee(\"<Measurable /> onDragEnd props must be a function\"); }\r\n            if (props_ing && typeof props_ing !== \"function\") { return Log.ee(\"<Measurable /> whileDragging props must be a function\"); }\r\n            if (!jqui_start && !props_start && ! default_start) delete options.start,\r\n                else options.start = (evt, ui) => { default_start?.(evt, ui); jqui_start?.(evt, ui); props_start?.(thiss.getCoords(evt, ui), evt, ui); }\r\n\r\n            let propsOptions = {...options};\r\n            let defaultOptions = this.defaultOptions[type];\r\n            U.objectMergeInPlace(options, defaultOptions);\r\n            //console.log(\"measurable\", {type, $measurable, options, propsOptions, defaultOptions});\r\n            ($measurable as GObject)[type](options);\r\n        }*/\r\n\r\n    absoluteToTransform(e: HTMLElement, evt?: any, evtkind?: EventLetter): any {\r\n        let x = e.style.left;\r\n        let y = e.style.top;\r\n        /*\r\n            e.style.left = '0px';\r\n            e.style.top = '0px';*/\r\n        //e.style.position = 'unset';\r\n        e.style.transform = `translate(${x}, ${y})`;\r\n    }\r\n    childmode(e: HTMLElement, evt?: any, evtkind?: EventLetter, ui?:any): void{\r\n        let oc = this.props.onChildren;\r\n        if (!oc) {\r\n            Log.ee('not oc', {evt, oc, e, p: this.props}); return;\r\n        }\r\n        let child: HTMLElement;\r\n        if (typeof oc === 'function') child = oc(e);\r\n        else child = e.children[0] as HTMLElement;\r\n        if (!child) {\r\n            Log.ee('child not found', {child, evt, oc, e}); return;\r\n        }\r\n        let oldpos = this.oldPos; // positionMap.get(e);\r\n        console.log('measurable default event child ' + evtkind, {ui, e, oc, oldpos});\r\n        //if (evtkind === 'e') { positionMap.set(e, ui.position); }\r\n\r\n        /*if (evtkind === 's') {\r\n            ui.originalPosition.left = 300;\r\n            ui.offset.left = 300;\r\n            ui.position.left = 300;\r\n            console.log('measurable sstart ', {type, e, oc, ui, el: e.style.left, cl: child.style.left});\r\n        }*/\r\n\r\n        let key: any;\r\n        for (key of MeasurableComponent.childmodekeys) {\r\n            let fixpos = () => {\r\n                if (oldpos && (oldpos as any)[key] !== undefined) {\r\n                    if (key ==='left') console.log('measurable fixpos ' + evtkind, (oldpos as any)[key] + ui.position[key] + 'px', (oldpos as any)[key]);\r\n                    let newpos = (oldpos as any)[key] + ui.position[key];\r\n                    child.style[key] = (newpos) + 'px';\r\n                    if (evtkind === 'e') this.oldPos[key] = newpos;\r\n                }\r\n                else child.style[key] = e.style[key];\r\n            }\r\n            fixpos();\r\n            if (evtkind === 'e')  setTimeout(fixpos, 1000);\r\n            if (evtkind === 's' && !e.classList.contains('draggable-child-mode')) e.classList.add('draggable-child-mode');\r\n            // delete e.style[key]\r\n        }\r\n    }\r\n    getDefaultEvent(type: \"draggable\" | \"resizable\" | \"rotatable\", evtkind: EventLetter): MeasurableUIEvent | null {\r\n        if (!this.props.transformMode && !(this.props.onChildren && type === 'draggable')) return null;\r\n        switch (type) {\r\n            case 'draggable': if (!this.props.transformMode && !this.props.onChildren) return null; break\r\n            case 'resizable': break\r\n            case 'rotatable': break\r\n        }\r\n\r\n        let translateeevents: Dictionary<string, Dictionary<string, DraggableEvent>> = {\r\n            'draggable': {\r\n                's': (e, ui)=>{ this.absoluteToTransform(e.target as HTMLElement, e, 's'); },\r\n                'ing': (e, ui)=>{ this.absoluteToTransform(e.target as HTMLElement, e, 'ing'); },\r\n                'e': (e, ui)=>{ this.absoluteToTransform(e.target as HTMLElement, e, 'e'); }},\r\n            /*'resizable': {\r\n                's': (e, ui)=>{ },\r\n                'ing': (e, ui)=>{ },\r\n                'e': (e, ui)=>{ }},\r\n            'rotatable': {\r\n                's': (e, ui)=>{ },\r\n                'ing': (e, ui)=>{ },\r\n                'e': (e, ui)=>{ }},*/\r\n        };\r\n        return (e: any, ui: any) => {\r\n            console.log('measurable default event', {type, evtkind, translateeevents, e, t: e.target});\r\n            if (this.props.transformMode === true) translateeevents[type]?.[evtkind]?.(e, ui);\r\n            this.childmode(e.target, e, evtkind, ui);\r\n        }\r\n    }\r\n    makeEvent(options: GObject<DraggableOptions>, type: string, evtkey: keyof typeof jquievent) {\r\n\r\n        let eventmap = {\r\n            's':    {'draggable': 'onDragStart',    'rotatable': 'onRotateStart',   'resizable': 'onResizeStart'},\r\n            'ing':  {'draggable': 'whileDragging',  'rotatable': 'whileRotating',   'resizable': 'whileResizing'},\r\n            'e':    {'draggable': 'onDragEnd',      'rotatable': 'onRotateEnd',     'resizable': 'onResizeEnd'  },\r\n        }\r\n        let jqui_ing: string;\r\n        switch (type){\r\n            default: jqui_ing = Log.eDevv(\"unexpected measurable event: \" + type); return;\r\n            case \"draggable\": jqui_ing = 'drag'; break;\r\n            case \"resizable\": jqui_ing = 'resize'; break;\r\n            case \"rotatable\": jqui_ing = 'rotate'; break;\r\n        }\r\n        //let jodelevent = {'s': eventmap.s[type], 'ing': eventmap.ing[type], 'e': eventmap.e[type]};\r\n        let jquievent = {'s': 'start', 'ing': jqui_ing, 'e':'stop'};\r\n\r\n        let jqkey = jquievent[evtkey] || '';\r\n        let props: GObject<MeasurableAllProps> = this.props;\r\n        let propsevent = props[eventmap[evtkey][type]];\r\n\r\n        if (propsevent && typeof propsevent !== \"function\") {\r\n            Log.ee(\"<Measurable /> \" + eventmap[evtkey][type] + \" props must be a function\");\r\n            return;\r\n        }\r\n        // call ondragend... jodel events\r\n        let jquievt = options[jqkey];\r\n        // let jodelevt = propsevent; // (...params: any) => propsevent(...params); // was made to preserve \"this\"?\r\n        let defaultevt: null | MeasurableUIEvent = this.getDefaultEvent(type, evtkey);\r\n        let allevents = [jquievt, propsevent, defaultevt].filter((e)=>!!e);\r\n        console.log('checking for jodelevent 00', {propsevent, allevents, props, k: eventmap[evtkey][type], pe: props[eventmap[evtkey][type]], evtkey, type, eventmap});\r\n        if (allevents.length) options[jqkey] = ((evt, ui)=>{\r\n            for (let e of allevents) {\r\n                propsevent = props[eventmap[evtkey][type]]; // if i don't redeclare it here, closure makes a mess taking always the last jodelevt for all iterations.\r\n                console.log('checking for jodelevent', e === propsevent, {e, propsevent, allevents, props, k: (eventmap as any)[evtkey][type], pe: props[eventmap[evtkey][type]], evtkey, type, eventmap});\r\n                if (e === propsevent) { e(this.getCoords(evt, ui), evt, ui); }\r\n                else e(this.getCoords(evt, ui), evt, ui);\r\n            }\r\n        }) as DraggableEvent;\r\n    }\r\n    afterUpdateSingle(type: \"draggable\" | \"resizable\" | \"rotatable\"): void{\r\n        // was forced to move from general loop-style implementation to individual redundant stuff because of closure messes.\r\n        if (!this.$html) return;\r\n        let $measurable = this.$html;\r\n        let options: GObject;\r\n        const props: GObject = this.props;\r\n        const datamap = {draggable: \"uiDraggable\", resizable: \"uiResizable\", rotatable: \"uiRotatable\"};\r\n        const optionmap = {draggable: \"draggable\", resizable: \"resizable\", rotatable: \"rotatable\"};\r\n        const optionkey = optionmap[type];\r\n        if (props[optionkey] === false || !props[optionkey]) {\r\n            console.log(\"measurable off \" + type, {$measurable, type, datamap, optionkey, props});\r\n            if ($measurable.data(datamap[type])) ($measurable as GObject)[type]('disable');\r\n            return;\r\n        }\r\n        if (props[optionkey] === true) {\r\n            options = {};\r\n        } else options = {...props[optionkey]};\r\n\r\n        // todo: changing options at runtime works, but changing children does not update\r\n\r\n        let jqui_ing: string;\r\n        switch (type){\r\n            default: jqui_ing = Log.eDevv(\"unexpected measurable event: \" + type); return;\r\n            case \"draggable\": jqui_ing = 'drag'; break;\r\n            case \"resizable\": jqui_ing = 'resize'; break;\r\n            case \"rotatable\": jqui_ing = 'rotate'; break;\r\n        }\r\n        let jquievent = {'s': 'start', 'ing': jqui_ing, 'e':'stop'};\r\n        let evtkey: keyof typeof jquievent;\r\n        for (evtkey in jquievent) { options[jquievent[evtkey]] = this.makeEvent(options, type, evtkey); }\r\n        let defaultOptions = this.defaultOptions[type];\r\n        U.objectMergeInPlace(options, defaultOptions);\r\n        //console.log(\"measurable\", {type, $measurable, options, propsOptions, defaultOptions});\r\n        ($measurable as GObject)[type](options);\r\n    }\r\n    shouldComponentUpdate(nextProps: Readonly<MeasurableAllProps>, nextState: Readonly<MeasurableState>, nextContext: any): boolean {\r\n        //console.log(\"measurable shouldup\", {nc:nextProps.children, tc:this.props.children, eq: nextProps.children == this.props.children});\r\n        // todo: would need to check if pros.children has changed, but that requires a deep search of subcomponents props and state.\r\n        // currently with just return true it works and rerenders every time the parent component rerenders. not when other elements are interacted.\r\n        // it works also with <Input> as direct child and it updates.\r\n        if (window) return true;\r\n        const oldProps = this.props || {};\r\n        this.dragOptionsChanged = false;\r\n        this.resizeOptionsChanged = false;\r\n        this.rotateOptionsChanged = false;\r\n        let ret: boolean = false;\r\n        const nestederr = \"Options cannot contain functions or nested objects\";\r\n        if (!U.isShallowEqualWithProxies(oldProps.draggable, nextProps.draggable)) {\r\n            const opt: GObject = oldProps.draggable as any;\r\n            if (opt && typeof opt === \"object\") for(let k in opt){ switch (typeof opt[k]){ case \"function\": case \"object\": Log.ee(\"drag\" + nestederr, k); } }\r\n            this.dragOptionsChanged = true;\r\n            ret = true;\r\n        }\r\n        if (!U.isShallowEqualWithProxies(oldProps.resizable, nextProps.resizable)) {\r\n            const opt: GObject = oldProps.resizable as any;\r\n            if (opt && typeof opt === \"object\") for(let k in opt){ switch (typeof opt[k]){ case \"function\": case \"object\": Log.ee(\"resize\" + nestederr, k); } }\r\n            this.resizeOptionsChanged = true;\r\n            ret = true;\r\n        }\r\n        if (!U.isShallowEqualWithProxies(oldProps.rotatable, nextProps.rotatable)) {\r\n            const opt: GObject = oldProps.rotatable as any;\r\n            if (opt && typeof opt === \"object\") for(let k in opt){ switch (typeof opt[k]){ case \"function\": case \"object\": Log.ee(\"rotate\" + nestederr, k); } }\r\n            this.rotateOptionsChanged = true;\r\n            return true;\r\n        }\r\n        if (ret) return true; // i don't need to set more this.variable stuff and i already determined something changed.\r\n        if (Object.keys(oldProps).length !== Object.keys(nextProps).length) return true;\r\n        let k: keyof typeof nextProps;\r\n        for (k in oldProps){\r\n            switch(k){\r\n                //case \"axis\": if (ok)\r\n                case \"draggable\": case \"resizable\": case \"rotatable\": continue;\r\n                case \"children\": continue;\r\n            }\r\n            if (!(k in nextProps)) return false;\r\n            let ok = oldProps[k];\r\n            let nk = nextProps[k];\r\n            if (ok === nk) continue;\r\n            let tk = typeof ok;\r\n            if (tk !== typeof nk) return false;\r\n            switch (tk) {\r\n                case \"object\": Log.ee(\"unexpected object in <Measurable/> props\", {k, nk, ok}); return true;\r\n                case \"function\": if (ok!.toString() !== nk!.toString()) return true; break;\r\n                default: return false; // already checked they are !==\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    updateDefaultOptions(){\r\n        /*let addClasses = this.props.children ? 'on-children' as any : undefined;\r\n                                          jqui.classes does not owrk? and addclass is only for draggable?\r\n        if (this.defaultOptions.draggable.addClasses !== addClasses) {\r\n            this.defaultOptions.resizable.classes = addClasses;\r\n            // this.defaultOptions.rotatable.classes = addClasses;\r\n        }*/\r\n    }\r\n    render(): ReactNode {\r\n        let child: ReactElement = this.props.children as any;\r\n\r\n        this.updateDefaultOptions();\r\n        if (!child) return child || null; // sometimes react passes {} as props.children?\r\n        if (!Object.keys(child).length) return Log.ee(\"Measurable can have only 1 subelement and it cannot be an array or a <>React.fragment</>\", child, this.props);\r\n        if (Array.isArray(child)) {\r\n            if (child.length !== 1) {\r\n                Log.ee(\"Measurable can have only 1 subelement and it cannot be an array or a <>React.fragment</>\", child, this.props);\r\n                return child;\r\n            }\r\n            else child = child[0];\r\n        }\r\n        if (child.type.toString() === React.Fragment.toString()) {\r\n            Log.ee(\"Measurable can have only 1 subelement and it cannot be an array or a <>React.fragment</>\", child, this.props);\r\n            return child; }\r\n\r\n        let oldProps = child.props;\r\n        let newProps = {\r\n            ref: (html: Element | null)=>{\r\n                if (html && !U.isHtmlNode(html)) {\r\n                    Log.ee('ref tring to set non-html element', html);\r\n                    return;\r\n                }\r\n                this.html = html;\r\n            }\r\n        };\r\n        U.objectMergeInPlace(newProps, oldProps);\r\n        let clonedChild = React.cloneElement(child, newProps);\r\n        return clonedChild;\r\n    }\r\n\r\n    private getCoords(evt: JQueryEventObject, ui: JQueryUI.DraggableEventUIParams): GraphSize {\r\n        let size = Size.of(evt.target);\r\n        let graph: LGraph = DGraphElement.graphLFromHtml(evt.target) as LGraph;\r\n        return graph?.translateHtmlSize(size);\r\n    }\r\n}\r\n/*\r\n@RuntimeAccessible('InfiniteScrollComponent')\r\nexport class InfiniteScrollComponent extends Component<ScrollOwnProps, ScrollState>{\r\n    static cname: string = \"InfiniteScrollComponent\";\r\n    render(){\r\n        return <Measurable transformMode={false} onChildren={true}>{ this.props.children}</Measurable>\r\n    }\r\n}\r\n*/\r\n// private\r\ninterface ScrollOwnProps {\r\n    children: ReactChild[] | ReactChild;\r\n}\r\ninterface MeasurableOwnProps {\r\n    children: ReactChild[] | ReactChild;\r\n    //dragOptions?: Options;\r\n    //drag?: Options;\r\n    draggable?: JQueryUI.DraggableOptions | boolean;\r\n    onDragStart?: DraggableEvent;\r\n    whileDragging?: DraggableEvent;\r\n    onDragEnd?: DraggableEvent;\r\n    onChildren?: boolean | ((e: HTMLElement)=>HTMLElement);\r\n\r\n    //resizeOptions?: Options;\r\n    //resize?: Options;\r\n    resizable?: JQueryUI.ResizableOptions | boolean;\r\n    onResizeStart?: ResizableEvent;\r\n    whileResizing?: ResizableEvent;\r\n    onResizeEnd?: ResizableEvent;\r\n    transformMode?: boolean; // if true uses transform: translate() instead of pos:absolute; left; & top;\r\n\r\n    //rotateOptions?: Options;\r\n    //rotate?: Options;\r\n    rotatable?: GObject | boolean;\r\n    onRotationStart?: RotatableEvent;\r\n    whileRotating?: RotatableEvent;\r\n    onRotationEnd?: RotatableEvent;\r\n}\r\n// private\r\ninterface MeasurableStateProps {\r\n    // propsFromReduxStateOrOtherKindOfStateManagement: boolean; // flux or custom things too, unrelated to this.state of react.\r\n}\r\n\r\n// private\r\ninterface DispatchProps {\r\n    // propsFromReduxActions: typeof funzioneTriggeraAzioneDaImportare;\r\n}\r\n\r\n\r\n// private\r\ntype MeasurableAllProps = MeasurableOwnProps & MeasurableStateProps & DispatchProps;\r\n\r\n////// mapper func\r\n/*\r\nfunction mapStateToProps(state: DState, ownProps: MeasurableOwnProps): MeasurableStateProps {\r\n    const ret: MeasurableStateProps = {} as any;\r\n    /// to fill\r\n    return ret; }\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<any>): DispatchProps {\r\n    const ret: DispatchProps = {} as any;\r\n    /// to fill\r\n    return ret; }\r\n*/\r\n\r\n(MeasurableComponent as any).defaultProps = {\r\n    autosizex: true,\r\n    autosizey: true,\r\n    style: undefined,\r\n    children: [],\r\n} as MeasurableOwnProps;\r\n\r\nexport class InfiniteScrollComponent extends Component<any, any>{ }\r\n\r\nexport function Measurable(props: MeasurableAllProps, children: ReactChild[] = []): ReactElement {\r\n    return <MeasurableComponent {...{...props, children}}>{children}</MeasurableComponent>;\r\n}\r\n// todo: shortcuts for Draggable Resizable Rotatable with whileDragging onDragStart props simplified to start, while, end\r\nexport function InfiniteScroll(props: MeasurableAllProps, children: ReactChild[] = []): ReactElement {\r\n    return <Measurable {...{...props, children}} transformMode={false} onChildren={true}>{children}</Measurable>;\r\n}/*\r\nexport function InfiniteScroll(props: MeasurableAllProps, children: ReactChild[] = []): ReactElement {\r\n    return <InfiniteScrollComponent {...{...props, children}}>{children}</InfiniteScrollComponent>;\r\n}*/\r\n\r\n/*connect<MeasurableStateProps, DispatchProps, MeasurableOwnProps, DState>(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MeasurableComponent);*/\r\n"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAGC,SAAS,QAA0E,OAAO;AACzG,SAAQC,aAAa,EAA0CC,GAAG,EAAEC,iBAAiB,EAAEC,IAAI,EAAeC,CAAC,QAAO,cAAc;AAChI,OAAOC,CAAC,MAAM,QAAQ;;AAEtB;;AASA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AASA,WACaC,mBAAmB,IAAAC,IAAA,GAD/BP,iBAAiB,CAAC,qBAAqB,CAAC,EAAAO,IAAA,CAAAC,MAAA,IAAAC,OAAA,GAAzC,MACaH,mBAAmB,SAAST,SAAS,CAAqC;EAAAa,YAAA;IAAA,SAAAC,SAAA;IAAA,KAK3EC,IAAI,GAAmB,IAAI;IAAA,KAC3BC,KAAK;IAAA,KACbC,kBAAkB,GAAY,IAAI;IAAA,KAClCC,oBAAoB,GAAY,IAAI;IAAA,KACpCC,oBAAoB,GAAY,IAAI;IAAA,KACpCC,cAAc,GAAuG;MACjHC,SAAS,EAAE;QACPC,MAAM,EAAE,UAAU;QAClB;QACAC,QAAQ,EAAE;QACV;QACA;MACJ,CAAC;MACDC,SAAS,EAAE,CAAC,CAAC;MACbC,SAAS,EAAE,CAAC;IAChB,CAAC;IAAA,KACDC,MAAM,GAAgC;MAACC,IAAI,EAAE,CAAC;MAAEC,GAAG,EAAE;IAAC,CAAC;EAAA;EAEvDC,iBAAiBA,CAAA,EAAG;IAChB,IAAI,CAACC,WAAW,CAAC,CAAC;EACtB;EACAC,kBAAkBA,CAACC,SAAuC,EAAEC,SAAoC,EAAEC,QAAc,EAAE;IAC9G,IAAI,CAACJ,WAAW,CAAC,CAAC;EACtB;EAEAA,WAAWA,CAAA,EAAQ;IACf,IAAI,CAAC,IAAI,CAACf,IAAI,EAAE;IAChB,IAAI,CAACC,KAAK,GAAGV,CAAC,CAAC,IAAI,CAACS,IAAI,CAAC;IACzB,IAAI,IAAI,CAACE,kBAAkB,EAAE;MAAE,IAAI,CAACkB,iBAAiB,CAAC,WAAW,CAAC;IAAE;IACpE,IAAI,IAAI,CAACjB,oBAAoB,EAAE;MAAE,IAAI,CAACiB,iBAAiB,CAAC,WAAW,CAAC;IAAE;IACtE,IAAI,IAAI,CAAChB,oBAAoB,EAAE;MAAE,IAAI,CAACgB,iBAAiB,CAAC,WAAW,CAAC;IAAE;EAC1E;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAUIC,mBAAmBA,CAACC,CAAc,EAAEC,GAAS,EAAEC,OAAqB,EAAO;IACvE,IAAIC,CAAC,GAAGH,CAAC,CAACI,KAAK,CAACd,IAAI;IACpB,IAAIe,CAAC,GAAGL,CAAC,CAACI,KAAK,CAACb,GAAG;IACnB;AACR;AACA;IACQ;IACAS,CAAC,CAACI,KAAK,CAACE,SAAS,GAAG,aAAaH,CAAC,KAAKE,CAAC,GAAG;EAC/C;EACAE,SAASA,CAACP,CAAc,EAAEC,GAAS,EAAEC,OAAqB,EAAEM,EAAO,EAAO;IACtE,IAAIC,EAAE,GAAG,IAAI,CAACC,KAAK,CAACC,UAAU;IAC9B,IAAI,CAACF,EAAE,EAAE;MACL5C,GAAG,CAAC+C,EAAE,CAAC,QAAQ,EAAE;QAACX,GAAG;QAAEQ,EAAE;QAAET,CAAC;QAAEa,CAAC,EAAE,IAAI,CAACH;MAAK,CAAC,CAAC;MAAE;IACnD;IACA,IAAII,KAAkB;IACtB,IAAI,OAAOL,EAAE,KAAK,UAAU,EAAEK,KAAK,GAAGL,EAAE,CAACT,CAAC,CAAC,CAAC,KACvCc,KAAK,GAAGd,CAAC,CAACe,QAAQ,CAAC,CAAC,CAAgB;IACzC,IAAI,CAACD,KAAK,EAAE;MACRjD,GAAG,CAAC+C,EAAE,CAAC,iBAAiB,EAAE;QAACE,KAAK;QAAEb,GAAG;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","ignoreList":[]},"metadata":{},"sourceType":"module"}