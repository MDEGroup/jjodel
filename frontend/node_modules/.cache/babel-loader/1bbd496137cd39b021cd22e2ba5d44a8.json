{"ast":null,"code":"var _jsxFileName = \"C:\\\\0Programmi\\\\Dev\\\\projects\\\\frontend\\\\jjodel\\\\src\\\\components\\\\forEndUser\\\\Input.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Defaults, LPointerTargetable } from '../../joiner';\nimport { useStateIfMounted } from 'use-state-if-mounted';\nimport './style.scss';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nfunction InputComponent(props) {\n  _s();\n  var _data;\n  // todo: data can be injected with UX, if field is present, can take type from a metainfo like __info_of__\n  const data = props.data;\n\n  /*  Uncomment this when we have user authentication: if a user is on a ME, it cannot be edited.\r\n              damiano: ok, ma se data non è ModelElement crasha perchè non ha \"father\"\r\n              mettici prima un\r\n              if (RuntimeAccessibleClass.extends(data, DModelElement.cname))\r\n    const fathers = U.fatherChain(data as LModelElement);\r\n  for(let father of fathers) {\r\n      const user = Object.keys(selected).find(key => selected[key]?.id === father);\r\n      if(user && user !== DUser.current) editable = false;\r\n      if(!editable) break;\r\n  }\r\n  */\n\n  const getter = props.getter;\n  const setter = props.setter;\n  const field = props.field;\n  const oldValue = !data ? undefined : getter ? getter(data) : data[field]; // !== undefined); ? data[field] : 'undefined'\n  const [value, setValue] = useStateIfMounted(oldValue);\n  const [isTouched, setIsTouched] = useStateIfMounted(false);\n  const [showTooltip, setShowTooltip] = useStateIfMounted(false);\n\n  // I check if the value that I have in my local state is being edited by other <Input />\n  if (value !== oldValue && !isTouched) {\n    setValue(oldValue);\n    setIsTouched(false);\n  }\n  if (!data) return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  const readOnly = props.readonly !== undefined ? props.readonly : props.debugmodee !== 'true' && Defaults.check(data.id);\n  const type = props.type ? props.type : 'text';\n  const label = props.label;\n  const jsxLabel = props.jsxLabel;\n  let tooltip = (props.tooltip === true ? (_data = data['__info_of__' + field]) === null || _data === void 0 ? void 0 : _data.txt : props.tooltip) || '';\n  let css = 'my-auto input ';\n  css += jsxLabel ? 'ms-1' : label ? 'ms-auto' : '';\n  css += props.hidden ? ' hidden-input' : '';\n  let autosize = props.autosize === undefined ? false : props.autosize; // props.type==='text'\n  css += autosize ? ' autosize-input' : '';\n  const change = evt => {\n    const isBoolean = ['checkbox', 'radio'].includes(evt.target.type);\n    if (isBoolean) {\n      if (readOnly) return;\n      const target = evt.target.checked;\n      if (setter) setter(target);else data[field] = target;\n    } else {\n      setValue(evt.target.value);\n      setIsTouched(true); // I'm editing the element in my local state.\n    }\n  };\n  const blur = evt => {\n    const isBoolean = ['checkbox', 'radio'].includes(evt.target.type);\n    if (readOnly || isBoolean) return;\n    const newValue = evt.target.value;\n    const oldValue = !data ? undefined : getter ? getter(data) : data[field]; // !== undefined) ? data[field] : 'undefined'\n    if (newValue !== oldValue) {\n      if (setter) setter(newValue);else data[field] = newValue;\n    }\n    // I terminate my editing, so I communicate it to other <Input /> that render the same field.\n    setIsTouched(false);\n  };\n  const otherprops = {\n    ...props\n  };\n  delete otherprops.data;\n  delete otherprops.field;\n  delete otherprops.getter;\n  delete otherprops.setter;\n  delete otherprops.label;\n  delete otherprops.jsxLabel;\n  delete otherprops.tooltip;\n  delete otherprops.hidden;\n  delete otherprops.inputStyle;\n  delete otherprops.children;\n  delete otherprops.autosize; // because react complains is bool in dom attribute or unknown attrib name\n  let input = /*#__PURE__*/_createElement(\"input\", {\n    ...otherprops,\n    key: `${field}.${data.id}`,\n    className: props.inputClassName || css,\n    style: props.inputStyle,\n    spellCheck: false,\n    readOnly: readOnly,\n    type: type,\n    value: value,\n    onChange: change,\n    onBlur: blur,\n    checked: ['checkbox', 'radio'].includes(type) ? !!value : undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    className: 'p-1',\n    ...otherprops,\n    style: {\n      display: jsxLabel || label ? 'flex' : 'block',\n      cursor: tooltip ? 'help' : 'auto',\n      ...(props.style || {})\n    },\n    children: [label && /*#__PURE__*/_jsxDEV(\"label\", {\n      className: 'my-auto',\n      onMouseEnter: e => setShowTooltip(true),\n      onMouseLeave: e => setShowTooltip(false),\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 19\n    }, this), jsxLabel && /*#__PURE__*/_jsxDEV(\"label\", {\n      onMouseEnter: e => setShowTooltip(true),\n      onMouseLeave: e => setShowTooltip(false),\n      children: jsxLabel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 22\n    }, this), tooltip && showTooltip && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'my-tooltip',\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        className: 'text-center text-capitalize',\n        children: field\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: tooltip\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 38\n    }, this), autosize ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: (autosize ? 'autosize-input-container' : '') + (props.asLabel ? ' labelstyle' : ''),\n      \"data-value\": value,\n      children: input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }, this) : input]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 12\n  }, this);\n}\n_s(InputComponent, \"9ozUTWaLJTktvX9x66LwpsnOFRw=\", false, function () {\n  return [useStateIfMounted, useStateIfMounted, useStateIfMounted];\n});\n_c = InputComponent;\nInputComponent.cname = 'InputComponent';\nfunction mapStateToProps(state, ownProps) {\n  const ret = {};\n  const pointer = typeof ownProps.data === 'string' ? ownProps.data : ownProps.data.id;\n  ret.debugmodee = state.debug ? 'true' : 'false';\n  ret.data = LPointerTargetable.fromPointer(pointer);\n  /*\r\n  const selected = state.selected;\r\n  ret.selected = {};\r\n  for(let user of Object.keys(selected)) {\r\n      const pointer = selected[user];\r\n      if(pointer) ret.selected[user] = LModelElement.fromPointer(pointer);\r\n      else ret.selected[user] = null;\r\n  }\r\n    */\n  return ret;\n}\nfunction mapDispatchToProps(dispatch) {\n  const ret = {};\n  return ret;\n}\nexport const InputConnected = connect(mapStateToProps, mapDispatchToProps)(InputComponent);\nexport function Input(props) {\n  let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return /*#__PURE__*/_jsxDEV(InputConnected, {\n    ...props,\n    children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 12\n  }, this);\n}\n_c2 = Input;\nInputComponent.cname = 'InputComponent';\nInputConnected.cname = 'InputConnected';\nInput.cname = 'Input';\nvar _c, _c2;\n$RefreshReg$(_c, \"InputComponent\");\n$RefreshReg$(_c2, \"Input\");","map":{"version":3,"names":["React","connect","Defaults","LPointerTargetable","useStateIfMounted","Fragment","_Fragment","jsxDEV","_jsxDEV","createElement","_createElement","InputComponent","props","_s","_data","data","getter","setter","field","oldValue","undefined","value","setValue","isTouched","setIsTouched","showTooltip","setShowTooltip","readOnly","readonly","debugmodee","check","id","type","label","jsxLabel","tooltip","txt","css","hidden","autosize","change","evt","isBoolean","includes","target","checked","blur","newValue","otherprops","inputStyle","children","input","key","className","inputClassName","style","spellCheck","onChange","onBlur","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","display","cursor","onMouseEnter","e","onMouseLeave","asLabel","_c","cname","mapStateToProps","state","ownProps","ret","pointer","debug","fromPointer","mapDispatchToProps","dispatch","InputConnected","Input","arguments","length","_c2","$RefreshReg$"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/src/components/forEndUser/Input.tsx"],"sourcesContent":["import React, {Dispatch, ReactElement, ReactNode} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {DState} from '../../redux/store';\r\nimport {Defaults, DPointerTargetable, GObject, LPointerTargetable, Overlap, Pointer} from '../../joiner';\r\nimport {useStateIfMounted} from 'use-state-if-mounted';\r\nimport './style.scss';\r\n\r\n\r\nfunction InputComponent(props: AllProps) {\r\n    // todo: data can be injected with UX, if field is present, can take type from a metainfo like __info_of__\r\n    const data = props.data;\r\n\r\n    /*  Uncomment this when we have user authentication: if a user is on a ME, it cannot be edited.\r\n                damiano: ok, ma se data non è ModelElement crasha perchè non ha \"father\"\r\n                mettici prima un\r\n                if (RuntimeAccessibleClass.extends(data, DModelElement.cname))\r\n\r\n    const fathers = U.fatherChain(data as LModelElement);\r\n    for(let father of fathers) {\r\n        const user = Object.keys(selected).find(key => selected[key]?.id === father);\r\n        if(user && user !== DUser.current) editable = false;\r\n        if(!editable) break;\r\n    }\r\n    */\r\n\r\n    const getter = props.getter;\r\n    const setter = props.setter;\r\n    const field = props.field;\r\n    const oldValue = (!data) ? undefined : (getter) ? getter(data) : data[field]; // !== undefined); ? data[field] : 'undefined'\r\n    const [value, setValue] = useStateIfMounted(oldValue);\r\n    const [isTouched, setIsTouched] = useStateIfMounted(false);\r\n    const [showTooltip, setShowTooltip] = useStateIfMounted(false);\r\n\r\n    // I check if the value that I have in my local state is being edited by other <Input />\r\n    if (value !== oldValue && !isTouched){\r\n        setValue(oldValue);\r\n        setIsTouched(false);\r\n    }\r\n\r\n\r\n    if (!data) return(<></>);\r\n    const readOnly = (props.readonly !== undefined) ? props.readonly : props.debugmodee !== 'true' && Defaults.check(data.id);\r\n    const type = (props.type) ? props.type : 'text';\r\n    const label: string|undefined = props.label;\r\n    const jsxLabel: ReactNode|undefined = props.jsxLabel;\r\n    let tooltip: ReactNode|string|undefined = ((props.tooltip === true) ? data['__info_of__' + field]?.txt : props.tooltip) || '';\r\n\r\n    let css = 'my-auto input ';\r\n    css += (jsxLabel) ? 'ms-1' : (label) ? 'ms-auto' : '';\r\n    css += (props.hidden) ? ' hidden-input' : '';\r\n    let autosize: boolean = props.autosize === undefined ? false : props.autosize; // props.type==='text'\r\n    css += autosize ? ' autosize-input' : '';\r\n\r\n    const change = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n        const isBoolean = (['checkbox', 'radio'].includes(evt.target.type));\r\n        if (isBoolean) {\r\n            if (readOnly) return;\r\n            const target = evt.target.checked;\r\n            if (setter) setter(target);\r\n            else data[field] = target;\r\n        } else {\r\n            setValue(evt.target.value);\r\n            setIsTouched(true);     // I'm editing the element in my local state.\r\n        }\r\n    }\r\n\r\n    const blur = (evt: React.FocusEvent<HTMLInputElement>) => {\r\n        const isBoolean = (['checkbox', 'radio'].includes(evt.target.type));\r\n        if (readOnly || isBoolean) return;\r\n        const newValue = evt.target.value;\r\n        const oldValue = (!data) ? undefined : (getter) ? getter(data) : data[field]; // !== undefined) ? data[field] : 'undefined'\r\n        if (newValue !== oldValue) {\r\n            if (setter) setter(newValue);\r\n            else data[field] = newValue;\r\n        }\r\n        // I terminate my editing, so I communicate it to other <Input /> that render the same field.\r\n        setIsTouched(false);\r\n    }\r\n\r\n    const otherprops: GObject = {...props};\r\n    delete otherprops.data;\r\n    delete otherprops.field;\r\n    delete otherprops.getter;\r\n    delete otherprops.setter;\r\n    delete otherprops.label;\r\n    delete otherprops.jsxLabel;\r\n    delete otherprops.tooltip;\r\n    delete otherprops.hidden;\r\n    delete otherprops.inputStyle;\r\n    delete otherprops.children;\r\n    delete otherprops.autosize; // because react complains is bool in dom attribute or unknown attrib name\r\n    let input = <input {...otherprops}\r\n                       key={`${field}.${data.id}`}\r\n                       className={props.inputClassName || css}\r\n                       style={props.inputStyle}\r\n                       spellCheck={false}\r\n                       readOnly={readOnly}\r\n                       type={type} value={value} onChange={change} onBlur={blur}\r\n                       checked={(['checkbox', 'radio'].includes(type)) ? !!value : undefined} />\r\n\r\n    return(<label className={'p-1'} {...otherprops}\r\n                  style={{display: (jsxLabel || label) ? 'flex' : 'block', cursor: tooltip ? 'help' : 'auto', ...((props as any).style || {})}}>\r\n\r\n        {label && <label className={'my-auto'} onMouseEnter={e => setShowTooltip(true)}\r\n                         onMouseLeave={e => setShowTooltip(false)}>{label}\r\n        </label>}\r\n\r\n        {jsxLabel && <label onMouseEnter={e => setShowTooltip(true)}\r\n                            onMouseLeave={e => setShowTooltip(false)}>{jsxLabel}\r\n        </label>}\r\n\r\n        {(tooltip && showTooltip) && <div className={'my-tooltip'}>\r\n            <b className={'text-center text-capitalize'}>{field}</b>\r\n            <br />\r\n            <label>{tooltip}</label>\r\n        </div>}\r\n\r\n        {autosize ? <div className={(autosize ? 'autosize-input-container' : '') + (props.asLabel ? ' labelstyle' : '')}\r\n                         data-value={value}>{input}\r\n        </div> : input}\r\n    </label>);\r\n}\r\n\r\nInputComponent.cname = 'InputComponent';\r\nexport interface InputOwnProps {\r\n    data: LPointerTargetable | DPointerTargetable | Pointer<DPointerTargetable, 1, 1, LPointerTargetable>;\r\n    field: string;\r\n    getter?: (data: LPointerTargetable) => string;\r\n    setter?: (value: string|boolean) => void;\r\n    label?: string;\r\n    jsxLabel?: ReactNode;\r\n    type?: 'checkbox'|'color'|'date'|'datetime-local'|'email'|'file'|'image'|'month'|\r\n    'number'|'password'|'radio'|'range'|'tel'|'text'|'time'|'url'|'week';\r\n    className?: string;\r\n    style?: GObject;\r\n    readonly?: boolean;\r\n    tooltip?: string | boolean | ReactElement;\r\n    hidden?: boolean;\r\n    autosize?: boolean;\r\n    inputClassName?: string;\r\n    inputStyle?: GObject;\r\n    asLabel?: boolean;\r\n    key?: React.Key | null;\r\n}\r\ninterface StateProps {\r\n    debugmodee: string;\r\n    data: LPointerTargetable & GObject;\r\n    // selected: Dictionary<Pointer<DUser>, LModelElement | null>;\r\n}\r\ninterface DispatchProps { }\r\ntype AllProps = Overlap<InputOwnProps, Overlap<StateProps, DispatchProps>>;\r\n\r\n\r\nfunction mapStateToProps(state: DState, ownProps: InputOwnProps): StateProps {\r\n    const ret: StateProps = {} as any;\r\n    const pointer: Pointer = typeof ownProps.data === 'string' ? ownProps.data : ownProps.data.id;\r\n    ret.debugmodee = state.debug ? 'true' : 'false';\r\n    ret.data = LPointerTargetable.fromPointer(pointer);\r\n    /*\r\n    const selected = state.selected;\r\n    ret.selected = {};\r\n    for(let user of Object.keys(selected)) {\r\n        const pointer = selected[user];\r\n        if(pointer) ret.selected[user] = LModelElement.fromPointer(pointer);\r\n        else ret.selected[user] = null;\r\n    }\r\n\r\n    */\r\n    return ret;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<any>): DispatchProps {\r\n    const ret: DispatchProps = {};\r\n    return ret;\r\n}\r\n\r\nexport const InputConnected =\r\n    connect<StateProps, DispatchProps, InputOwnProps, DState>(mapStateToProps, mapDispatchToProps)(InputComponent);\r\n\r\n\r\nexport function Input(props: InputOwnProps, children: (string | React.Component)[] = []): ReactElement {\r\n    return <InputConnected {...{...props, children}} />;\r\n}\r\n\r\nInputComponent.cname = 'InputComponent';\r\nInputConnected.cname = 'InputConnected';\r\nInput.cname = 'Input';\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}