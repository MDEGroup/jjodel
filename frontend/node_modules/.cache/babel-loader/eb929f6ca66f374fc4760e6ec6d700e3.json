{"ast":null,"code":"var _dec, _class, _class2, _dec2, _class3, _dec3, _class5, _dec4, _class7, _class8, _dec5, _class9, _class10, _dec6, _class11, _dec7, _class13, _class14;\nimport { DPointerTargetable, RuntimeAccessible, windoww, Log, RuntimeAccessibleClass } from \"../joiner\";\nexport let IPoint = (_dec = RuntimeAccessible('IPoint'), _dec(_class = (_class2 = class IPoint extends RuntimeAccessibleClass {\n  // @ts-ignore static getM is not null but must be declared nullable to achieve subclass mixing\n  // public static getM? = function(firstPt: IPoint, secondPt: IPoint): number { return (firstPt.y - secondPt.y) / (firstPt.x - secondPt.x); }\n  static getM(firstPt, secondPt) {\n    return (firstPt.y - secondPt.y) / (firstPt.x - secondPt.x);\n  }\n  static getQ(firstPt, secondPt, m) {\n    if (m === undefined) m = IPoint.getM(firstPt, secondPt);\n    return firstPt.y - m * firstPt.x;\n  }\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    super(); // super('dwc');\n    this.x = void 0;\n    this.y = void 0;\n    IPoint.init_constructor(this, x, y);\n  }\n  static init_constructor(thiss) {\n    let x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    thiss.id = \"POINT_\" + DPointerTargetable.maxID++ + \"_\" + new Date().getTime();\n    thiss.className = thiss.constructor.name;\n    if (x === null || x === undefined) thiss.x = undefined;else if (isNaN(+x)) {\n      thiss.x = 0;\n    } else thiss.x = +x;\n    if (y === null || y === undefined) thiss.y = undefined;else if (isNaN(+y)) {\n      thiss.y = 0;\n    } else thiss.y = +y;\n    thiss.className = this.cname;\n  }\n  raw() {\n    return {\n      x: this.x,\n      y: this.y\n    };\n  }\n  toString() {\n    let letters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \" \";\n    if (letters) return JSON.stringify({\n      x: this.x,\n      y: this.y\n    });else return this.x + separator + this.y + separator;\n  }\n  clone(other) {\n    this.x = other.x;\n    this.y = other.y;\n    return this;\n  }\n  duplicate() {\n    const ret = this.new();\n    ret.clone(this);\n    return ret;\n  }\n  distanceFromPoint(tentativeEnd) {\n    let skipSqrt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let d_pow2 = (this.x - tentativeEnd.x) ** 2 + (this.y - tentativeEnd.y) ** 2;\n    return skipSqrt ? d_pow2 : Math.sqrt(d_pow2);\n    // return this.subtract(tentativeEnd, true).absolute();\n  }\n  subtract(p2, newInstance) {\n    Log.e(!p2, 'subtract argument must be a valid point: ', p2);\n    let p1;\n    if (!newInstance) {\n      p1 = this;\n    } else {\n      p1 = this.duplicate();\n    }\n    p1.x -= p2.x;\n    p1.y -= p2.y;\n    return p1;\n  }\n  add(p2, newInstance) {\n    Log.e(!p2, 'add argument must be a valid point: ', p2);\n    let p1;\n    if (!newInstance) {\n      p1 = this;\n    } else {\n      p1 = this.duplicate();\n    }\n    if (p2.x !== undefined) p1.x += p2.x;\n    if (p2.y !== undefined) p1.y += p2.y;\n    return p1;\n  }\n  addAll(p, newInstance) {\n    let i;\n    let p0;\n    if (!newInstance) {\n      p0 = this;\n    } else {\n      p0 = this.duplicate();\n    }\n    for (i = 0; i < p.length; i++) {\n      p0.add(p[i], true);\n    }\n    return p0;\n  }\n  subtractAll(p, newInstance) {\n    let i;\n    let p0;\n    if (!newInstance) {\n      p0 = this;\n    } else {\n      p0 = this.duplicate();\n    }\n    for (i = 0; i < p.length; i++) {\n      p0.subtract(p[i], true);\n    }\n    return p0;\n  }\n  multiply(pt) {\n    let newInstance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let ret = newInstance ? this.duplicate() : this;\n    if (typeof pt === \"number\") {\n      ret.x *= pt;\n      ret.y *= pt;\n    } else {\n      if (pt.x !== undefined) ret.x *= pt.x;\n      if (pt.y !== undefined) ret.y *= pt.y;\n    }\n    return ret;\n  }\n  divide(pt) {\n    let newInstance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let ret = newInstance ? this.duplicate() : this;\n    if (typeof pt === \"number\") {\n      ret.x /= pt;\n      ret.y /= pt;\n    } else {\n      ret.x /= pt.x;\n      ret.y /= pt.y;\n    }\n    return ret;\n  }\n  multiplyScalar(scalar, newInstance) {\n    Log.e(isNaN(+scalar), 'IPoint.multiply()', 'scalar argument must be a valid number: ', scalar);\n    let p1;\n    if (!newInstance) {\n      p1 = this;\n    } else {\n      p1 = this.duplicate();\n    }\n    p1.x *= scalar;\n    p1.y *= scalar;\n    return p1;\n  }\n  divideScalar(scalar, newInstance) {\n    Log.e(isNaN(+scalar), 'IPoint.divide()', 'scalar argument must be a valid number: ', scalar);\n    let p1;\n    if (!newInstance) {\n      p1 = this;\n    } else {\n      p1 = this.duplicate();\n    }\n    p1.x /= scalar;\n    p1.y /= scalar;\n    return p1;\n  }\n  isInTheMiddleOf(firstPt, secondPt, tolleranza) {\n    const rectangle = Size.fromPoints(firstPt, secondPt);\n    const tolleranzaX = tolleranza; // actually should be cos * arctan(m);\n    const tolleranzaY = tolleranza; // actually should be sin * arctan(m);\n    if (this.x < rectangle.x - tolleranzaX || this.x > rectangle.x + rectangle.w + tolleranzaX) {\n      return false;\n    }\n    if (this.y < rectangle.y - tolleranzaX || this.y > rectangle.y + rectangle.h + tolleranzaY) {\n      return false;\n    }\n    // const m = IPoint.getM(firstPt, secondPt);\n    // const q = IPoint.getQ(firstPt, secondPt);\n    const lineDistance = this.distanceFromLine(firstPt, secondPt);\n    // console.log('distance:', lineDistance, ', this:', this, ', p1:', firstPt, ', p2:', secondPt);\n    return lineDistance <= tolleranza;\n  }\n  distanceFromLine(p1, p2) {\n    const top = +(p2.y - p1.y) * this.x - (p2.x - p1.x) * this.y + p2.x * p1.y - p1.x * p2.y;\n    const bot = (p2.y - p1.y) * (p2.y - p1.y) + (p2.x - p1.x) * (p2.x - p1.x);\n    return Math.abs(top) / Math.sqrt(bot);\n  }\n  equals(pt) {\n    let tolleranzaX = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let tolleranzaY = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    if (pt === null) {\n      return false;\n    }\n    return Math.abs(this.x - pt.x) <= tolleranzaX && Math.abs(this.y - pt.y) <= tolleranzaY;\n  }\n  moveOnNearestBorder(startVertexSize, clone, graph) {\n    let debug = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const pt = clone ? this.duplicate() : this;\n    const tl = startVertexSize.tl();\n    const tr = startVertexSize.tr();\n    const bl = startVertexSize.bl();\n    const br = startVertexSize.br();\n    const L = pt.distanceFromLine(tl, bl);\n    const R = pt.distanceFromLine(tr, br);\n    const T = pt.distanceFromLine(tl, tr);\n    const B = pt.distanceFromLine(bl, br);\n    const min = Math.min(L, R, T, B);\n    if (min === L) {\n      pt.x = tl.x;\n    }\n    if (min === R) {\n      pt.x = tr.x;\n    }\n    if (min === T) {\n      pt.y = tr.y;\n    }\n    if (min === B) {\n      pt.y = br.y;\n    }\n    if (debug && graph && pt instanceof GraphPoint) {\n      graph.markg(pt, false, 'purple');\n    }\n    return pt;\n  }\n  getM(pt2) {\n    var _IPoint$getM;\n    return (_IPoint$getM = IPoint.getM) === null || _IPoint$getM === void 0 ? void 0 : _IPoint$getM.call(IPoint, this, pt2);\n  }\n  degreeWith(pt2, toRadians) {\n    const directionVector = this.subtract(pt2, true);\n    const ret = Math.atan2(directionVector.y, directionVector.x);\n    return toRadians ? ret : windoww.U.RadToDegree(ret);\n  }\n  absolute() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n  set(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  // move the point by a vector with direction and distance (module)\n  move(rad, distance) {\n    let clone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let pt = clone ? this.duplicate() : this;\n    pt.x += distance * Math.cos(rad);\n    pt.y += distance * Math.sin(rad);\n    return pt;\n  }\n}, _class2.subclasses = [], _class2._extends = [], _class2)) || _class);\nexport let GraphPoint = (_dec2 = RuntimeAccessible('GraphPoint'), _dec2(_class3 = class GraphPoint extends IPoint {\n  constructor() {\n    super(...arguments);\n    this.dontmixwithPoint = void 0;\n  }\n  static fromEvent(e) {\n    if (!e) {\n      return null;\n    }\n    const p = new Point(e.pageX, e.pageY);\n    const g = null;\n    throw new Error(\"todo: const g: IGraph = Status.status.getActiveModel().graph;\");\n    return g.toGraphCoord(p);\n  }\n  new() {\n    return new GraphPoint();\n  }\n}) || _class3);\nexport let Point = (_dec3 = RuntimeAccessible('Point'), _dec3(_class5 = class Point extends IPoint {\n  constructor() {\n    super(...arguments);\n    this.dontmixwithGPoint = void 0;\n  }\n  /// https://stackoverflow.com/questions/6073505/what-is-the-difference-between-screenx-y-clientx-y-and-pagex-y\n  static fromEvent(e) {\n    const p = new Point(e.pageX, e.pageY);\n    return p;\n  }\n  new() {\n    return new Point();\n  }\n}) || _class5);\nRuntimeAccessibleClass.set_extend(RuntimeAccessibleClass, IPoint);\nRuntimeAccessibleClass.set_extend(IPoint, GraphPoint);\nRuntimeAccessibleClass.set_extend(IPoint, Point);\nexport let ISize = (_dec4 = RuntimeAccessible('ISize'), _dec4(_class7 = (_class8 = class ISize extends RuntimeAccessibleClass {\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let w = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let h = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    super(); // super('dwc');\n    // do not override any fields from the DPointerTargetable, otherwise the ! in the override will reinizialize the attribute\n    // erasing the value set in super or in the functions called by the constructor as side effect (static_init called from constructor will be overridden too)\n    // if need to override types, build the \"new\" static function like in DModelElement\n    this.x = void 0;\n    this.y = void 0;\n    this.w = void 0;\n    this.h = void 0;\n    ISize.init_constructor(this, x, y, w, h);\n  }\n  static init_constructor(thiss) {\n    let x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    let h = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    thiss.id = \"SIZE_\" + DPointerTargetable.maxID++ + \"_\" + new Date().getTime();\n    thiss.className = thiss.constructor.cname;\n    if (x === null || x === undefined) thiss.x = undefined;else if (isNaN(+x)) {\n      thiss.x = 0;\n    } else thiss.x = +x;\n    if (y === null || y === undefined) thiss.y = undefined;else if (isNaN(+y)) {\n      thiss.y = 0;\n    } else thiss.y = +y;\n    if (w === null || w === undefined) thiss.w = undefined;else if (isNaN(+w)) {\n      thiss.w = 0;\n    } else thiss.w = +w;\n    if (h === null || h === undefined) thiss.h = undefined;else if (isNaN(+h)) {\n      thiss.h = 0;\n    } else thiss.h = +h;\n    thiss.className = this.cname;\n  }\n  toString() {\n    let letters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \" \";\n    if (letters) return JSON.stringify({\n      x: this.x,\n      y: this.y,\n      w: this.w,\n      h: this.h\n    });else return this.x + separator + this.y + separator + this.w + separator + this.h;\n  }\n  set(x, y, w, h) {\n    if (x !== undefined) this.x = +x;\n    if (y !== undefined) this.y = +y;\n    if (w !== undefined) this.w = +w;\n    if (h !== undefined) this.h = +h;\n  }\n  clone(json) {\n    this.x = json.x;\n    this.y = json.y;\n    this.w = json.w;\n    this.h = json.h;\n    return this;\n  }\n  duplicate() {\n    return this.new().clone(this);\n  }\n  add(pt2, newInstance) {\n    let thiss = newInstance ? this.duplicate() : this;\n    if (typeof pt2 === \"number\") {\n      thiss.x += pt2;\n      thiss.y += pt2;\n      thiss.w += pt2;\n      thiss.h += pt2;\n      return thiss;\n    }\n    if (pt2.x !== undefined) thiss.x += pt2.x;\n    if (pt2.y !== undefined) thiss.y += pt2.y;\n    if (pt2.w !== undefined) thiss.w += pt2.w;\n    if (pt2.h !== undefined) thiss.h += pt2.h;\n    return thiss;\n  }\n  subtract(pt2, newInstance) {\n    let thiss = newInstance ? this.duplicate() : this;\n    if (typeof pt2 === \"number\") {\n      thiss.x -= pt2;\n      thiss.y -= pt2;\n      thiss.w -= pt2;\n      thiss.h -= pt2;\n      return thiss;\n    }\n    if (pt2.x !== undefined) thiss.x -= pt2.x;\n    if (pt2.y !== undefined) thiss.y -= pt2.y;\n    if (pt2.w !== undefined) thiss.w -= pt2.w;\n    if (pt2.h !== undefined) thiss.h -= pt2.h;\n    return thiss;\n  }\n  multiply(pt2, newInstance) {\n    let thiss = newInstance ? this.duplicate() : this;\n    if (typeof pt2 === \"number\") {\n      thiss.x *= pt2;\n      thiss.y *= pt2;\n      thiss.w *= pt2;\n      thiss.h *= pt2;\n      return thiss;\n    }\n    if (pt2.x !== undefined) thiss.x *= pt2.x;\n    if (pt2.y !== undefined) thiss.y *= pt2.y;\n    if (pt2.w !== undefined) thiss.w *= pt2.w;\n    if (pt2.h !== undefined) thiss.h *= pt2.h;\n    return thiss;\n  }\n  divide(pt2, newInstance) {\n    let thiss = newInstance ? this.duplicate() : this;\n    if (typeof pt2 === \"number\") {\n      thiss.x /= pt2;\n      thiss.y /= pt2;\n      thiss.w /= pt2;\n      thiss.h /= pt2;\n      return thiss;\n    }\n    if (pt2.x !== undefined) thiss.x /= pt2.x;\n    if (pt2.y !== undefined) thiss.y /= pt2.y;\n    if (pt2.w !== undefined) thiss.w /= pt2.w;\n    if (pt2.h !== undefined) thiss.h /= pt2.h;\n    return thiss;\n  }\n  tl() {\n    return this.makePoint(this.x, this.y);\n  }\n  tr() {\n    return this.makePoint(this.x + this.w, this.y);\n  }\n  bl() {\n    return this.makePoint(this.x, this.y + this.h);\n  }\n  br() {\n    return this.makePoint(this.x + this.w, this.y + this.h);\n  }\n  center() {\n    return this.makePoint(this.x + this.w / 2, this.y + this.h / 2);\n  }\n  relativePoint(xPercent, yPercent) {\n    return this.makePoint(this.x + this.w * xPercent, this.y + this.h * yPercent);\n  }\n  equals(size) {\n    return this.x === size.x && this.y === size.y && this.w === size.w && this.h === size.h;\n  }\n\n  /// field-wise Math.min()\n  min(minSize, clone) {\n    const ret = clone ? this.new() : this;\n    if (!isNaN(minSize.x) && ret.x < minSize.x) {\n      ret.x = minSize.x;\n    }\n    if (!isNaN(minSize.y) && ret.y < minSize.y) {\n      ret.y = minSize.y;\n    }\n    if (!isNaN(minSize.w) && ret.w < minSize.w) {\n      ret.w = minSize.w;\n    }\n    if (!isNaN(minSize.h) && ret.h < minSize.h) {\n      ret.h = minSize.h;\n    }\n    return ret;\n  }\n  max(maxSize, clone) {\n    const ret = clone ? this.new() : this;\n    if (!isNaN(maxSize.x) && ret.x > maxSize.x) {\n      ret.x = maxSize.x;\n    }\n    if (!isNaN(maxSize.y) && ret.y > maxSize.y) {\n      ret.y = maxSize.y;\n    }\n    if (!isNaN(maxSize.w) && ret.w > maxSize.w) {\n      ret.w = maxSize.w;\n    }\n    if (!isNaN(maxSize.h) && ret.h > maxSize.h) {\n      ret.h = maxSize.h;\n    }\n    return ret;\n  }\n  intersection(size) {\n    if (!size) return null;\n    // anche \"isinside\"\n    let startx, starty, endx, endy;\n    startx = Math.max(this.x, size.x);\n    starty = Math.max(this.y, size.y);\n    endx = Math.min(this.x + this.w, size.x + size.w);\n    endy = Math.min(this.y + this.h, size.y + size.h);\n    const intersection = this.new();\n    // intersection.set(0, 0, 0, 0);\n    intersection.x = startx;\n    intersection.y = starty;\n    intersection.w = endx - startx;\n    intersection.h = endy - starty;\n    const doesintersect = intersection.w > 0 && intersection.h > 0;\n    return doesintersect ? intersection : null;\n  }\n  contains(pt) {\n    return pt.x >= this.x && pt.x <= this.x + this.w && pt.y >= this.y && pt.y <= this.y + this.h;\n  }\n  isOverlapping(size2) {\n    return !!this.intersection(size2);\n  }\n  isOverlappingAnyOf(sizes) {\n    if (!sizes) return false;\n    for (let size of sizes) {\n      if (this.isOverlapping(size)) return true;\n    }\n    return false;\n  }\n  multiplyPoint(other, newInstance) {\n    const ret = newInstance ? this.new() : this;\n    ret.x *= other.x;\n    ret.w *= other.x;\n    ret.y *= other.y;\n    ret.h *= other.y;\n    return ret;\n  }\n  dividePoint(other, newInstance) {\n    const ret = newInstance ? this.new() : this;\n    ret.x /= other.x;\n    ret.w /= other.x;\n    ret.y /= other.y;\n    ret.h /= other.y;\n    return ret;\n  }\n  boundary(size2) {\n    /*let minx, maxx, miny, maxy;\r\n    if (size2.y < this.y) { miny = size2.y; /*maxy = this.y;* / } else { miny = this.y; /*maxy = size2.y;* / }\r\n    if (size2.x < this.x) { minx = size2.y; /*maxx = this.x;* / } else { minx = this.x; /*maxy = size2.x;* / }\r\n    if (size2.y + size2.h < this.y + this.h) maxy = this.y + this.h; else maxy = size2.y + size2.h;\r\n    if (size2.x + size2.w < this.x + this.w) maxx = this.x + this.w; else maxx = size2.x + size2.w;\r\n    */\n    this.h = size2.y + size2.h > this.y + this.h ? size2.y + size2.h : this.y + this.h; // -miny\n    this.w = size2.x + size2.w > this.x + this.w ? size2.x + size2.w : this.x + this.w; // -minx\n    if (this.y < size2.y) this.y = size2.y;\n    if (this.x < size2.x) this.x = size2.x;\n    this.h -= this.y;\n    this.w -= this.x;\n  }\n}, _class8.subclasses = [], _class8._extends = [], _class8)) || _class7);\nexport let Size = (_dec5 = RuntimeAccessible('Size'), _dec5(_class9 = (_class10 = class Size extends ISize {\n  constructor() {\n    super(...arguments);\n    this.dontMixWithGraphSize = void 0;\n  }\n  /**\r\n   * measure a node size\r\n   * @param {Element} element0 - the emelemnt to measure;\r\n   * @param {boolean} sizePostTransform - includes css transform instructions for computing his size. like transform: scale(1.5)\r\n   * */\n  static of(element0) {\n    let sizePostTransform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let element = element0;\n    if (element === document) {\n      Log.ww('trying to measure document, rerouted to measuring body.');\n      element = document.body;\n    }\n    const $element = $(element);\n    Log.e(!element || element.tagName === 'foreignObject', 'sizeof()', 'SvgForeignElementObject have a bug with size, measure a child instead.', element);\n    let tmp;\n    let size;\n    if (!Size.sizeofvar) {\n      Size.sizeofvar = document.createElement('div');\n      document.body.append(Size.sizeofvar);\n    }\n    const isOrphan = element.parentNode === null;\n    // var visible = element.style.display !== 'none';\n    // var visible = $element.is(\":visible\"); crea bug quando un elemento è teoricamente visibile ma orfano\n    const ancestors = windoww.U.ancestorArray(element);\n    const displayStyles = ancestors.map(e => {\n      var _e$style;\n      return e === null || e === void 0 ? void 0 : (_e$style = e.style) === null || _e$style === void 0 ? void 0 : _e$style.display;\n    });\n    if (isOrphan) {\n      Size.sizeofvar.append(element);\n    }\n    // show all and saveToDB visibility to restore it later\n    for (let i = 0; i < ancestors.length; i++) {\n      var _ancestors$i, _ancestors$i$style;\n      // document has undefined style\n      displayStyles[i] = (_ancestors$i = ancestors[i]) === null || _ancestors$i === void 0 ? void 0 : (_ancestors$i$style = _ancestors$i.style) === null || _ancestors$i$style === void 0 ? void 0 : _ancestors$i$style.display;\n      if (displayStyles[i] === 'none' || displayStyles[i] === '' && getComputedStyle(ancestors[i]).display === 'none') {\n        ancestors[i].style.display = 'block';\n      }\n    }\n    tmp = $element.offset(); // made sure cannot be undefined by removing display:none\n    size = new Size(tmp.left, tmp.top, 0, 0);\n    if (sizePostTransform) {\n      tmp = element.getBoundingClientRect();\n      size.w = tmp.width;\n      size.h = tmp.height;\n    } else {\n      size.w = element.offsetWidth;\n      size.h = element.offsetHeight;\n    }\n    // restore visibility\n    for (let i = 0; i < ancestors.length; i++) {\n      var _ancestors$i$style2;\n      if (displayStyles[i] === ((_ancestors$i$style2 = ancestors[i].style) === null || _ancestors$i$style2 === void 0 ? void 0 : _ancestors$i$style2.display)) continue;\n      if (displayStyles[i]) ancestors[i].style.display = displayStyles[i];else ancestors[i].style.removeProperty('display');\n    }\n    if (isOrphan) {\n      windoww.U.clear(Size.sizeofvar);\n    }\n    // Status.status.getActiveModel().graph.markS(size, false);\n    return size;\n  }\n  static fromPoints(firstPt, secondPt) {\n    const minX = Math.min(firstPt.x, secondPt.x);\n    const maxX = Math.max(firstPt.x, secondPt.x);\n    const minY = Math.min(firstPt.y, secondPt.y);\n    const maxY = Math.max(firstPt.y, secondPt.y);\n    return new Size(minX, minY, maxX - minX, maxY - minY);\n  }\n  makePoint(x, y) {\n    return new Point(x, y);\n  }\n  new() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new Size(...args);\n  }\n}, _class10.subclasses = [], _class10.sizeofvar = void 0, _class10.$sizeofvar = void 0, _class10)) || _class9);\nexport let GraphSize = (_dec6 = RuntimeAccessible('GraphSize'), _dec6(_class11 = class GraphSize extends ISize {\n  constructor() {\n    super(...arguments);\n    this.dontMixWithSize = void 0;\n  }\n  static fromPoints(firstPt, secondPt) {\n    const minX = Math.min(firstPt.x, secondPt.x);\n    const maxX = Math.max(firstPt.x, secondPt.x);\n    const minY = Math.min(firstPt.y, secondPt.y);\n    const maxY = Math.max(firstPt.y, secondPt.y);\n    return new GraphSize(minX, minY, maxX - minX, maxY - minY);\n  }\n\n  // both pt and targetPt are readonly-safe parameters\n  static closestIntersection(size, pt, targetPt, gridAlign, m0, q0) {\n    // let pt: GraphPoint = pt0.duplicate();\n    const m = m0 || GraphPoint.getM(targetPt, pt);\n    const q = q0 || GraphPoint.getQ(targetPt, pt);\n    // console.log(\"closestIntersection()\", {size, pt0, targetPt, m, q});\n    // if perfectly vertical line\n    if (m === Number.POSITIVE_INFINITY /* && q === Number.NEGATIVE_INFINITY*/) {\n      // top center\n      if (Math.abs(targetPt.y - size.y) <= Math.abs(targetPt.y - size.y - size.h)) return pt;\n      // bottom center\n      else return new GraphPoint(pt.x, size.y + size.h);\n    }\n    let tl = size.tl(),\n      tr = size.tr(),\n      bl = size.bl(),\n      br = size.br();\n    let allowT, allowB, allowL, allowR;\n    /*let distanceT: number = Number.POSITIVE_INFINITY, distanceB: number = Number.POSITIVE_INFINITY,\r\n        distanceL: number = Number.POSITIVE_INFINITY, distanceR: number = Number.POSITIVE_INFINITY;*/\n    let intersectionT, intersectionB, intersectionL, intersectionR;\n    allowT = Geom.isNumberBetween(tl.y, bl.y, targetPt.y);\n    allowB = Geom.isNumberBetween(bl.y, tl.y, targetPt.y);\n    allowL = Geom.isNumberBetween(tl.x, tr.x, targetPt.x);\n    allowR = Geom.isNumberBetween(tr.x, tl.x, targetPt.x);\n    // console.log(\"closestIntersection pt0\", {size, targetPt, pt0:pt0.raw(), gridAlign,\n    //     corners:{tl:tl.raw(), tr:tr.raw(), bl:bl.raw(), br:br.raw()}, allows:{allowT, allowB, allowL, allowR}});\n    if (!(allowT || allowB || allowL || allowR)) return undefined; // point is internal to size\n    if (allowT) intersectionT = Geom.lineToSegmentIntersection(tl, tr, q, m);else if (allowB) intersectionB = Geom.lineToSegmentIntersection(bl, br, q, m); // NOT else, (T|B) AND (L|R) can happen, or just 1 or 0 of those.\n    if (allowL) intersectionL = Geom.lineToSegmentIntersection(tl, bl, q, m);else if (allowR) intersectionR = Geom.lineToSegmentIntersection(tr, br, q, m);\n\n    // console.log(\"closestIntersection pt2\", {intersectionT, intersectionB, intersectionL, intersectionR});\n    // only 1 intersection can happen\n    return intersectionT || intersectionB || intersectionL || intersectionR;\n  }\n  static closestIntersection_old(size, prevPt, pt0, gridAlign) {\n    let ret = GraphSize.closestIntersection0(size, prevPt, pt0, gridAlign);\n    // Log.exDev(!Geom.isOnEdge(ret, size), 'ClosestIntersection failed. not on Vertex edge.', {ret, size, prevPt, pt0, gridAlign});\n    return ret;\n  }\n  static closestIntersection0(vertexGSize, prevPt, pt0, gridAlign) {\n    let pt = pt0.duplicate();\n    const m = GraphPoint.getM(prevPt, pt);\n    const q = GraphPoint.getQ(prevPt, pt);\n    // U.pe( Math.abs((pt.y - m * pt.x) - (prevPt.y - m * prevPt.x)) > .001, 'wrong math in Q:', (pt.y - m * pt.x), ' vs ', (prevPt.y - m * prevPt.x));\n    /*const isL = prevPt.x < pt.x;\r\n    const isT = prevPt.y < pt.y;\r\n    const isR = !isL;\r\n    const isB = !isT; */\n    if (m === Number.POSITIVE_INFINITY && q === Number.NEGATIVE_INFINITY) {\n      // bottom middle\n      return new GraphPoint(vertexGSize.x + vertexGSize.w / 2, vertexGSize.y + vertexGSize.h);\n    }\n    // console.log('pt:', pt, 'm:', m, 'q:', q);\n    let L = new GraphPoint(0, 0);\n    let T = new GraphPoint(0, 0);\n    let R = new GraphPoint(0, 0);\n    let B = new GraphPoint(0, 0);\n    L.x = vertexGSize.x;\n    L.y = m * L.x + q;\n    R.x = vertexGSize.x + vertexGSize.w;\n    R.y = m * R.x + q;\n    T.y = vertexGSize.y;\n    T.x = (T.y - q) / m;\n    B.y = vertexGSize.y + vertexGSize.h;\n    B.x = (B.y - q) / m;\n    // prendo solo il compreso pt ~ prevPt (escludo così il \"pierce\" sulla faccia opposta), prendo il più vicino al centro.\n    // console.log('4 possibili punti di intersezione (LTBR):', L, T, B, R);\n    /* this.owner.mark(this.owner.toHtmlCoord(T), true, 'blue');\r\n    this.owner.mark(this.owner.toHtmlCoord(B), false, 'violet');\r\n    this.owner.mark(this.owner.toHtmlCoord(L), false, 'red');\r\n    this.owner.mark(this.owner.toHtmlCoord(R), false, 'orange');*/\n    console.log(\"intersect pt1:\", {\n      T,\n      B,\n      L,\n      R\n    });\n    if (B.x >= pt.x && B.x <= prevPt.x || B.x >= prevPt.x && B.x <= pt.x) {} else {\n      B = null;\n    }\n    if (T.x >= pt.x && T.x <= prevPt.x || T.x >= prevPt.x && T.x <= pt.x) {} else {\n      T = null;\n    }\n    if (L.y >= pt.y && L.y <= prevPt.y || L.y >= prevPt.y && L.y <= pt.y) {} else {\n      L = null;\n    }\n    if (R.y >= pt.y && R.y <= prevPt.y || R.y >= prevPt.y && R.y <= pt.y) {} else {\n      R = null;\n    }\n    console.log(\"intersect pt2:\", {\n      T,\n      B,\n      L,\n      R\n    });\n    function closestmix(pt, closest, segStart, segEnd, mode) {\n      // changes pt\n      pt.x = closest.x;\n      pt.y = closest.y;\n      return;\n      let main, sub;\n      if (mode === \"TB\") {\n        main = \"y\";\n        sub = \"x\";\n      } else {\n        main = \"x\";\n        sub = \"y\";\n      }\n      pt[main] = closest[main];\n      // if T[sub] is inside the top segment, take T[sub], otherwise closest between size.tl[sub] and size.tr[sub]\n      // pt[sub] = Math.max(segStart[sub], Math.min(segStart[sub], closest[sub]));\n      if (closest[sub] <= segEnd[sub] && closest[sub] >= segStart[sub]) pt[sub] = closest[sub];else if (Math.abs(closest[sub] - segEnd[sub]) < Math.abs(closest[sub] - segStart[sub])) pt[sub] = segEnd[sub];else pt[sub] = segStart[sub];\n    }\n    function closestmix2(pt, closest, segStart, segEnd, mode) {\n      // changes closest\n      let main, sub;\n      if (mode === \"TB\") {\n        main = \"y\";\n        sub = \"x\";\n      } else {\n        main = \"x\";\n        sub = \"y\";\n      }\n      // closest[main] = pt[main];\n      // if T[sub] is inside the top segment, take T[sub], otherwise closest between size.tl[sub] and size.tr[sub]\n      // pt[sub] = Math.max(segStart[sub], Math.min(segStart[sub], closest[sub]));\n      if (closest[sub] <= segEnd[sub] && closest[sub] >= segStart[sub]) {/*no-op*/} else if (Math.abs(closest[sub] - segEnd[sub]) < Math.abs(closest[sub] - segStart[sub])) closest[sub] = segEnd[sub];else closest[sub] = segStart[sub];\n    }\n    console.log(\"intersect pt2.5:\");\n    try {\n      if (T) closestmix2(pt, T, vertexGSize.tl(), vertexGSize.tr(), \"TB\");\n      if (B) closestmix2(pt, B, vertexGSize.bl(), vertexGSize.br(), \"TB\");\n      if (R) closestmix2(pt, R, vertexGSize.tr(), vertexGSize.br(), \"LR\");\n      if (L) closestmix2(pt, L, vertexGSize.tl(), vertexGSize.bl(), \"LR\");\n    } catch (e) {\n      console.error(\"intersect error\", e);\n    }\n    // console.log('superstiti step1: (LTBR):', L, T, B, R);\n    console.log(\"intersect pt2.9:\");\n    const vicinanzaT = !T ? Number.POSITIVE_INFINITY : (T.x - pt.x) * (T.x - pt.x) + (T.y - pt.y) * (T.y - pt.y);\n    const vicinanzaB = !B ? Number.POSITIVE_INFINITY : (B.x - pt.x) * (B.x - pt.x) + (B.y - pt.y) * (B.y - pt.y);\n    const vicinanzaL = !L ? Number.POSITIVE_INFINITY : (L.x - pt.x) * (L.x - pt.x) + (L.y - pt.y) * (L.y - pt.y);\n    const vicinanzaR = !R ? Number.POSITIVE_INFINITY : (R.x - pt.x) * (R.x - pt.x) + (R.y - pt.y) * (R.y - pt.y);\n    const closest = Math.min(vicinanzaT, vicinanzaB, vicinanzaL, vicinanzaR);\n    console.log(\"intersect pt3:\", {\n      vicinanzaT,\n      vicinanzaB,\n      vicinanzaL,\n      vicinanzaR,\n      closest\n    });\n\n    // console.log( 'closest:', closest);\n    // succede quando pt e prevPt sono entrambi all'interno del rettangolo del vertice.\n    // L'edge non è visibile e il valore ritornato è irrilevante.\n\n    if (closest === Number.POSITIVE_INFINITY) {\n      /* top center */\n      pt = vertexGSize.tl();\n      pt.x += vertexGSize.w / 2;\n    } else if (closest === Number.POSITIVE_INFINITY) {\n      /* bottom center */\n      pt = vertexGSize.br();\n      pt.x -= vertexGSize.w / 2;\n    } else if (closest === vicinanzaT && T) {\n      closestmix(pt, T, vertexGSize.tl(), vertexGSize.tr(), \"TB\");\n      /*pt.y = T.y;\r\n      // if T.x is inside the top segment, take T.x, otherwise closest between size.tl.x and size.tr.x\r\n      if ((T.x <= tr.x && T.x >= tl.x)) pt.x = T.x;\r\n      else if (Math.abs(T.x-tr.x) < Math.abs(T.x-tl.x)) pt.x = tr.x;\r\n      else pt.x = tl.x;*/\n    }\n    if (closest === vicinanzaB) {\n      closestmix(pt, B, vertexGSize.bl(), vertexGSize.br(), \"TB\");\n    } else if (closest === vicinanzaR) {\n      closestmix(pt, R, vertexGSize.tr(), vertexGSize.br(), \"LR\");\n    } else if (closest === vicinanzaL) {\n      closestmix(pt, L, vertexGSize.tl(), vertexGSize.bl(), \"LR\");\n    }\n    if (!gridAlign) {\n      return pt;\n    }\n    if (!pt) return null;\n    if (gridAlign.x && (pt === T || pt === B || isNaN(closest))) {\n      const floorX = Math.floor(pt.x / gridAlign.x) * gridAlign.x;\n      const ceilX = Math.ceil(pt.x / gridAlign.x) * gridAlign.x;\n      let closestX;\n      let farthestX;\n      if (Math.abs(floorX - pt.x) < Math.abs(ceilX - pt.x)) {\n        closestX = floorX;\n        farthestX = ceilX;\n      } else {\n        closestX = ceilX;\n        farthestX = floorX;\n      }\n\n      // todo: possibile causa del bug che non allinea punti fake a punti reali. nel calcolo realPT questo non viene fatto.\n      // if closest grid intersection is inside the vertex.\n      if (closestX >= vertexGSize.x && closestX <= vertexGSize.x + vertexGSize.w) {\n        pt.x = closestX;\n      } else\n        // if 2° closer grid intersection is inside the vertex.\n        if (closestX >= vertexGSize.x && closestX <= vertexGSize.x + vertexGSize.w) {\n          pt.x = farthestX;\n          // if no intersection are inside the vertex (ignore grid)\n        } else {/* do nothing */}\n    } else if (gridAlign.y && (pt === L || pt === R)) {\n      const floorY = Math.floor(pt.y / gridAlign.y) * gridAlign.y;\n      const ceilY = Math.ceil(pt.y / gridAlign.y) * gridAlign.y;\n      let closestY;\n      let farthestY;\n      if (Math.abs(floorY - pt.y) < Math.abs(ceilY - pt.y)) {\n        closestY = floorY;\n        farthestY = ceilY;\n      } else {\n        closestY = ceilY;\n        farthestY = floorY;\n      }\n\n      // if closest grid intersection is inside the vertex.\n      if (closestY >= vertexGSize.y && closestY <= vertexGSize.y + vertexGSize.h) {\n        pt.y = closestY;\n      } else\n        // if 2° closer grid intersection is inside the vertex.\n        if (closestY >= vertexGSize.y && closestY <= vertexGSize.y + vertexGSize.h) {\n          pt.y = farthestY;\n          // if no intersection are inside the vertex (ignore grid)\n        } else {/* do nothing */}\n    }\n    return pt;\n  }\n  new() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return new GraphSize(...args);\n  }\n  makePoint(x, y) {\n    return new GraphPoint(x, y);\n  }\n  closestPoint(pt) {\n    return Geom.closestPoint(this, pt);\n  }\n}) || _class11);\nRuntimeAccessibleClass.set_extend(RuntimeAccessibleClass, ISize);\nRuntimeAccessibleClass.set_extend(ISize, Size);\nRuntimeAccessibleClass.set_extend(ISize, GraphSize);\nexport let Geom = (_dec7 = RuntimeAccessible('Geom'), _dec7(_class13 = (_class14 = class Geom extends RuntimeAccessibleClass {\n  static isPositiveZero(m) {\n    if (!!Object.is) {\n      return Object.is(m, +0);\n    }\n    return 1 / m === Number.POSITIVE_INFINITY;\n  }\n  static isNegativeZero(m) {\n    if (!!Object.is) {\n      return Object.is(m, -0);\n    }\n    return 1 / m === Number.NEGATIVE_INFINITY;\n  }\n  static TanToRadian(n) {\n    return Geom.DegreeToRad(Geom.TanToDegree(n));\n  }\n  static TanToDegree(n) {\n    if (Geom.isPositiveZero(n)) {\n      return 0;\n    }\n    if (n === Number.POSITIVE_INFINITY) {\n      return 90;\n    }\n    if (Geom.isNegativeZero(n)) {\n      return 180;\n    }\n    if (n === Number.POSITIVE_INFINITY) {\n      return 270;\n    }\n    return Geom.RadToDegree(window.Math.atan(n));\n  }\n  static RadToDegree(radians) {\n    return Geom.radToDeg(radians);\n  }\n  static DegreeToRad(degree) {\n    return Geom.degToRad(degree);\n  }\n  static radToDeg(radians) {\n    return radians * (180 / Math.PI);\n  }\n  static degToRad(degree) {\n    return degree * (Math.PI / 180);\n  }\n  // 0.001;\n  static isOnEdge(pt, shape) {\n    let tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Geom.GeomTolerance;\n    return Geom.isOnHorizontalEdges(pt, shape, tolerance) || Geom.isOnVerticalEdges(pt, shape, tolerance);\n  }\n  static isOnVerticalEdges(pt, shape) {\n    let tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Geom.GeomTolerance;\n    return Geom.isOnLeftEdge(pt, shape, tolerance) || Geom.isOnRightEdge(pt, shape, tolerance);\n  }\n  static isOnHorizontalEdges(pt, shape) {\n    let tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Geom.GeomTolerance;\n    return Geom.isOnTopEdge(pt, shape, tolerance) || Geom.isOnBottomEdge(pt, shape, tolerance);\n  }\n  static isOnRightEdge(pt, shape) {\n    let tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Geom.GeomTolerance;\n    if (!pt || !shape) {\n      return false;\n    }\n    if (tolerance) return Math.abs(pt.x - (shape.x + shape.w)) < tolerance && pt.y - shape.y > tolerance && pt.y - (shape.y + shape.h) < tolerance;\n    return pt.x === shape.x + shape.w && pt.y >= shape.y && pt.y <= shape.y + shape.h;\n  }\n  static isOnLeftEdge(pt, shape) {\n    let tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Geom.GeomTolerance;\n    if (!pt || !shape) {\n      return false;\n    }\n    if (tolerance) return Math.abs(pt.x - shape.x) < tolerance && pt.y - shape.y > tolerance && pt.y - (shape.y + shape.h) < tolerance;\n    return pt.x === shape.x && pt.y >= shape.y && pt.y <= shape.y + shape.h;\n  }\n  static isOnTopEdge(pt, shape) {\n    let tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Geom.GeomTolerance;\n    if (!pt || !shape) {\n      return false;\n    }\n    if (tolerance) return Math.abs(pt.y - shape.y) < tolerance && pt.x - shape.x > tolerance && pt.x - (shape.x + shape.w) < tolerance;\n    return pt.y === shape.y && pt.x >= shape.x && pt.x <= shape.x + shape.w;\n  }\n  static isOnBottomEdge(pt, shape, tolerance) {\n    if (!pt || !shape) {\n      return false;\n    }\n    if (tolerance) return Math.abs(pt.y - shape.y + shape.h) < tolerance && pt.x - shape.x > tolerance && pt.x - (shape.x + shape.w) < tolerance;\n    return pt.y === shape.y + shape.h && pt.x >= shape.x && pt.x <= shape.x + shape.w;\n  }\n  static closestPoint(size, pt) {\n    let top_closest = Geom.closestPointToSegment(size.tl(), size.tr(), pt);\n    let bot_closest = Geom.closestPointToSegment(size.bl(), size.br(), pt);\n    let left_closest = Geom.closestPointToSegment(size.tl(), size.bl(), pt);\n    let right_closest = Geom.closestPointToSegment(size.tr(), size.br(), pt);\n    let top_distance = top_closest.distanceFromPoint(pt, false);\n    let bot_distance = bot_closest.distanceFromPoint(pt, false);\n    let left_distance = left_closest.distanceFromPoint(pt, false);\n    let right_distance = right_closest.distanceFromPoint(pt, false);\n    let min_distance = Math.min(top_distance, bot_distance, left_distance, right_distance);\n    if (min_distance === top_distance) return top_closest;\n    if (min_distance === bot_distance) return bot_closest;\n    if (min_distance === left_distance) return left_closest;\n    return right_closest;\n  }\n  static isMinusZero(number) {\n    return 1 / number == -Infinity;\n  }\n  static closestPointToSegment(segStart, segEnd, pt) {\n    // 1) find equation of line passing for start, end.\n    // 2) then find all perpendicular lines, then the perpendicular line that pass through pt\n    // 3) find intersection between Line(s,e) and line of point 2.\n    // 4A) IF intersection is part of segment(s,e) that is closest.\n    // 4B) ELSE, one of the 2 extremes of the segment is closest.\n\n    let x_intersect, y_intersect;\n    let s = segStart;\n    let e = segEnd;\n    let mse = (e.y - s.y) / (e.x - s.x);\n    if (mse === Number.POSITIVE_INFINITY || mse === Number.NEGATIVE_INFINITY) {\n      // s and e are both on the same y vertical line (same x)      // new GraphPoint(segStart.x, pt.y);\n      x_intersect = segStart.x;\n      y_intersect = pt.y;\n      // 1), 2), 3) all done shortcut\n    } else if (mse === 0 || Geom.isNegativeZero(mse)) {\n      // s and e are both on the same x horizontal line (same y)    // new GraphPoint(pt.x, segStart.y);\n      x_intersect = pt.x;\n      y_intersect = segStart.y;\n      // 1), 2), 3) all done shortcut\n    } else {\n      let q = s.y - mse * s.x; // y = mx + q           q = y-mx\n      // 1) done\n      let pmse = -1 / mse; // perpendicular to mse\n      let pq = pt.y - pmse * pt.x;\n      // 2) done\n      //  m1 * x + q1 = y    -->   m1 * x + q1 = m2 * x + q2    -->    (m1-m2)x = q2-q1      -->     x=(q2-q1)/(m1-m2)\n      x_intersect = (pq - q) / (mse - pmse);\n      y_intersect = mse * x_intersect + q; //  y = mx +q\n      // 3) done\n    }\n    let maxX, minX;\n    let maxY, minY;\n    if (s.x > e.x) {\n      maxX = s.x;\n      minX = e.x;\n    } else {\n      maxX = e.x;\n      minX = s.x;\n    }\n    if (s.y > e.y) {\n      maxY = s.y;\n      minY = e.y;\n    } else {\n      maxY = e.y;\n      minY = s.y;\n    }\n    if (x_intersect >= minX && x_intersect <= maxX && y_intersect >= minY && y_intersect <= maxY) return new GraphPoint(x_intersect, y_intersect);\n    // 4A) IF done\n\n    let sdist = (s.x - x_intersect) ** 2 + (s.y - y_intersect) ** 2; // actual distance is sqrt() of this, but i just need to find closest, not correct distance.\n    let edist = (e.x - x_intersect) ** 2 + (e.y - y_intersect) ** 2;\n    return sdist < edist ? new GraphPoint(s.x, s.y) : new GraphPoint(e.x, e.y);\n    // 4B) ELSE done\n  }\n  static lineToSegmentIntersection(segStart, segEnd, q, m) {\n    if (segStart.x === segEnd.x) {\n      let y = m * segStart.x + q;\n      if (Geom.isNumberBetween(y, segStart.y, segEnd.y)) return new GraphPoint(segStart.x, y);else return undefined;\n    } else if (segStart.y === segEnd.y) {\n      let x = (segStart.y - q) / m;\n      if (Geom.isNumberBetween(x, segStart.x, segEnd.x)) return new GraphPoint(x, segStart.y);else return undefined;\n      //\n    }\n    let m2 = segStart.getM(segEnd);\n    let q2 = IPoint.getQ(segStart, segEnd);\n    if (m === m2) {\n      if (q2 === q) return segStart; // line and segment coincident\n      return undefined; // parallel\n    }\n    let intersect = Geom.lineToLineIntersection(m, q, m2, q2);\n    if (intersect && Geom.isNumberBetween(intersect.x, segStart.x, segEnd.x) && Geom.isNumberBetween(intersect.y, segStart.y, segEnd.y)) return intersect;else return undefined;\n  }\n  static isNumberBetween(target, s, e) {\n    let max = Math.max(s, e);\n    let min = Math.min(s, e);\n    return target >= min && target <= max;\n  }\n  static lineToLineIntersection(m, q, m2, q2) {\n    let retIfParallel = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;\n    let retIfCoincident = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;\n    if (m === m2) {\n      if (q === q2) return retIfCoincident;\n      return retIfParallel;\n    }\n    if (m === Number.POSITIVE_INFINITY || m === Number.NEGATIVE_INFINITY || m2 === Number.POSITIVE_INFINITY || m2 === Number.NEGATIVE_INFINITY) {\n      // m or m2 are a vertical line, Q must be invalid too and i don't have a single point of the line.\n      // it's actually infinite possible vertical parallel lines.\n      return undefined;\n    }\n    /*\r\n        y = mx + q\r\n        y = nx + w\r\n        -->\r\n        mx + q = nx + w\r\n        -->\r\n        mx - nx = w - q\r\n        -->\r\n        x (m - n) = w - q\r\n        -->\r\n        x = (w - q)/(m - n)\r\n    */\n    let x = (q2 - q) / (m - m2);\n    return new GraphPoint(x, m * x + q);\n  }\n  // @param start, end: are for determining direction. every m is a line that can be seen in 2 direction\n  static mToRad(m, start, end) {\n    let rad;\n    if (start.x === end.x) {\n      rad = start.y < end.y ? Math.PI * 3 / 2 : Math.PI / 2;\n    } else {\n      // console.log(\"rad diagonal\", {base:  Math.atan(m), add: start.x > end.x, sx: start.x, ex: end.x});\n      rad = Math.atan(m) + (start.x > end.x ? 0 : Math.PI);\n    }\n    return rad;\n  }\n\n  // intersect a rectangle with a line or segment (if end parameter is specified)\n  // @return: [0, 2] intersections\n  static lineToSizeIntersection_TODO(size, m, startLine, endIfSegment) {\n    // todo: use GraphSize.closestIntersection which is close. it is size-segment returning only the closest intersection\n    return [];\n  }\n}, _class14.GeomTolerance = 0, _class14)) || _class13);\nRuntimeAccessibleClass.set_extend(RuntimeAccessibleClass, Geom);","map":{"version":3,"names":["DPointerTargetable","RuntimeAccessible","windoww","Log","RuntimeAccessibleClass","IPoint","_dec","_class","_class2","getM","firstPt","secondPt","y","x","getQ","m","undefined","constructor","arguments","length","init_constructor","thiss","id","maxID","Date","getTime","className","name","isNaN","cname","raw","toString","letters","separator","JSON","stringify","clone","other","duplicate","ret","new","distanceFromPoint","tentativeEnd","skipSqrt","d_pow2","Math","sqrt","subtract","p2","newInstance","e","p1","add","addAll","p","i","p0","subtractAll","multiply","pt","divide","multiplyScalar","scalar","divideScalar","isInTheMiddleOf","tolleranza","rectangle","Size","fromPoints","tolleranzaX","tolleranzaY","w","h","lineDistance","distanceFromLine","top","bot","abs","equals","moveOnNearestBorder","startVertexSize","graph","debug","tl","tr","bl","br","L","R","T","B","min","GraphPoint","markg","pt2","_IPoint$getM","call","degreeWith","toRadians","directionVector","atan2","U","RadToDegree","absolute","set","move","rad","distance","cos","sin","subclasses","_extends","_dec2","_class3","dontmixwithPoint","fromEvent","Point","pageX","pageY","g","Error","toGraphCoord","_dec3","_class5","dontmixwithGPoint","set_extend","ISize","_dec4","_class7","_class8","json","makePoint","center","relativePoint","xPercent","yPercent","size","minSize","max","maxSize","intersection","startx","starty","endx","endy","doesintersect","contains","isOverlapping","size2","isOverlappingAnyOf","sizes","multiplyPoint","dividePoint","boundary","_dec5","_class9","_class10","dontMixWithGraphSize","of","element0","sizePostTransform","element","document","ww","body","$element","$","tagName","tmp","sizeofvar","createElement","append","isOrphan","parentNode","ancestors","ancestorArray","displayStyles","map","_e$style","style","display","_ancestors$i","_ancestors$i$style","getComputedStyle","offset","left","getBoundingClientRect","width","height","offsetWidth","offsetHeight","_ancestors$i$style2","removeProperty","clear","minX","maxX","minY","maxY","_len","args","Array","_key","$sizeofvar","GraphSize","_dec6","_class11","dontMixWithSize","closestIntersection","targetPt","gridAlign","m0","q0","q","Number","POSITIVE_INFINITY","allowT","allowB","allowL","allowR","intersectionT","intersectionB","intersectionL","intersectionR","Geom","isNumberBetween","lineToSegmentIntersection","closestIntersection_old","prevPt","pt0","closestIntersection0","vertexGSize","NEGATIVE_INFINITY","console","log","closestmix","closest","segStart","segEnd","mode","main","sub","closestmix2","error","vicinanzaT","vicinanzaB","vicinanzaL","vicinanzaR","floorX","floor","ceilX","ceil","closestX","farthestX","floorY","ceilY","closestY","farthestY","_len2","_key2","closestPoint","_dec7","_class13","_class14","isPositiveZero","Object","is","isNegativeZero","TanToRadian","n","DegreeToRad","TanToDegree","window","atan","radians","radToDeg","degree","degToRad","PI","isOnEdge","shape","tolerance","GeomTolerance","isOnHorizontalEdges","isOnVerticalEdges","isOnLeftEdge","isOnRightEdge","isOnTopEdge","isOnBottomEdge","top_closest","closestPointToSegment","bot_closest","left_closest","right_closest","top_distance","bot_distance","left_distance","right_distance","min_distance","isMinusZero","number","Infinity","x_intersect","y_intersect","s","mse","pmse","pq","sdist","edist","m2","q2","intersect","lineToLineIntersection","target","retIfParallel","retIfCoincident","mToRad","start","end","lineToSizeIntersection_TODO","startLine","endIfSegment"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/src/common/Geom.ts"],"sourcesContent":["import type { GObject, Temporary, TODO} from \"../joiner\";\r\nimport {DPointerTargetable, RuntimeAccessible, windoww, Log, RuntimeAccessibleClass} from \"../joiner\";\r\nimport React from \"react\";\r\nimport {radian} from \"../joiner/types\";\r\n\r\n@RuntimeAccessible('IPoint')\r\nexport abstract class IPoint extends RuntimeAccessibleClass {\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    public x!: number;\r\n    public y!: number;\r\n\r\n    // @ts-ignore static getM is not null but must be declared nullable to achieve subclass mixing\r\n    // public static getM? = function(firstPt: IPoint, secondPt: IPoint): number { return (firstPt.y - secondPt.y) / (firstPt.x - secondPt.x); }\r\n    public static getM(firstPt: IPoint, secondPt: IPoint): number { return (firstPt.y - secondPt.y) / (firstPt.x - secondPt.x); }\r\n    public static getQ(firstPt: IPoint, secondPt: IPoint, m?: number): number {\r\n        if (m === undefined) m = IPoint.getM(firstPt, secondPt);\r\n        return firstPt.y - (m * firstPt.x);\r\n    }\r\n\r\n    public constructor(x: number = 0, y: number = 0) {\r\n        super(); // super('dwc');\r\n        IPoint.init_constructor(this, x, y);\r\n    }\r\n\r\n    static init_constructor(thiss: GObject, x: any = 0, y: any = 0, ...a: any): void {\r\n        thiss.id = \"POINT_\" + (DPointerTargetable.maxID++) + \"_\" + new Date().getTime();\r\n        thiss.className = thiss.constructor.name;\r\n        if (x === null || x === undefined) thiss.x = undefined as Temporary;\r\n        else if (isNaN(+x)) { thiss.x = 0; }\r\n        else thiss.x = +x;\r\n        if (y === null || y === undefined) thiss.y = undefined as Temporary;\r\n        else if (isNaN(+y)) { thiss.y = 0; }\r\n        else thiss.y = +y;\r\n        thiss.className = this.cname;\r\n    }\r\n\r\n    public raw(): {x: number, y: number} { return {x: this.x, y: this.y}; }\r\n\r\n    public toString(letters: boolean=true, separator: string = \" \"): string {\r\n        if (letters) return  JSON.stringify({x:this.x, y: this.y});\r\n        else return this.x + separator + this.y + separator;\r\n    }\r\n    public clone(other: { x: number, y: number }): this { this.x = other.x; this.y = other.y; return this; }\r\n\r\n    protected abstract new(): this;\r\n    public duplicate(): this { const ret = this.new(); ret.clone(this); return ret; }\r\n\r\n    public distanceFromPoint(tentativeEnd: IPoint, skipSqrt: boolean = false): number {\r\n        let d_pow2 = (this.x - tentativeEnd.x)**2 + (this.y - tentativeEnd.y)**2;\r\n        return skipSqrt ? d_pow2 : Math.sqrt(d_pow2);\r\n        // return this.subtract(tentativeEnd, true).absolute();\r\n    }\r\n\r\n    public subtract(p2: IPoint, newInstance: boolean): this {\r\n        Log.e(!p2, 'subtract argument must be a valid point: ', p2);\r\n        let p1: this;\r\n        if (!newInstance) { p1 = this; } else { p1 = this.duplicate(); }\r\n        p1.x -= p2.x;\r\n        p1.y -= p2.y;\r\n        return p1; }\r\n\r\n    public add(p2: { x?: number, y?: number }, newInstance: boolean): this {\r\n        Log.e(!p2, 'add argument must be a valid point: ', p2);\r\n        let p1: this;\r\n        if (!newInstance) { p1 = this; } else { p1 = this.duplicate(); }\r\n        if (p2.x !== undefined) p1.x += p2.x;\r\n        if (p2.y !== undefined) p1.y += p2.y;\r\n        return p1; }\r\n\r\n    public addAll(p: IPoint[], newInstance: boolean): this {\r\n        let i;\r\n        let p0: this;\r\n        if (!newInstance) { p0 = this; } else { p0 = this.duplicate(); }\r\n        for (i = 0; i < p.length; i++) { p0.add(p[i], true); }\r\n        return p0; }\r\n\r\n    public subtractAll(p: this[], newInstance: boolean): this {\r\n        let i;\r\n        let p0: this;\r\n        if (!newInstance) { p0 = this; } else { p0 = this.duplicate(); }\r\n        for (i = 0; i < p.length; i++) { p0.subtract(p[i], true); }\r\n        return p0; }\r\n\r\n    public multiply(pt: {x?: number, y?: number} | number, newInstance: boolean = false): this {\r\n        let ret: this = (newInstance ? this.duplicate() : this);\r\n        if (typeof pt === \"number\") {\r\n            ret.x *= pt;\r\n            ret.y *= pt;\r\n        }\r\n        else {\r\n            if (pt.x !== undefined) ret.x *= pt.x;\r\n            if (pt.y !== undefined) ret.y *= pt.y;\r\n        }\r\n        return ret; }\r\n\r\n    public divide(pt: Partial<this> | number, newInstance: boolean = false): this {\r\n        let ret = (newInstance ? this.duplicate() : this);\r\n        if (typeof pt === \"number\") {\r\n            ret.x /= pt;\r\n            ret.y /= pt;\r\n        }\r\n        else {\r\n            ret.x /= pt.x as number;\r\n            ret.y /= pt.y as number;\r\n        }\r\n        return ret; }\r\n\r\n    public multiplyScalar(scalar: number, newInstance: boolean): this {\r\n        Log.e(isNaN(+scalar), 'IPoint.multiply()', 'scalar argument must be a valid number: ', scalar);\r\n        let p1: this;\r\n        if (!newInstance) { p1 = this; } else { p1 = this.duplicate(); }\r\n        p1.x *= scalar;\r\n        p1.y *= scalar;\r\n        return p1; }\r\n\r\n    public divideScalar(scalar: number, newInstance: boolean): this {\r\n        Log.e(isNaN(+scalar), 'IPoint.divide()', 'scalar argument must be a valid number: ', scalar);\r\n        let p1: this;\r\n        if (!newInstance) { p1 = this; } else { p1 = this.duplicate(); }\r\n        p1.x /= scalar;\r\n        p1.y /= scalar;\r\n        return p1; }\r\n\r\n    public isInTheMiddleOf(firstPt: this, secondPt: this, tolleranza: number): boolean {\r\n        const rectangle: Size = Size.fromPoints(firstPt, secondPt);\r\n        const tolleranzaX = tolleranza; // actually should be cos * arctan(m);\r\n        const tolleranzaY = tolleranza; // actually should be sin * arctan(m);\r\n        if (this.x < rectangle.x - tolleranzaX || this.x > rectangle.x + rectangle.w + tolleranzaX) { return false; }\r\n        if (this.y < rectangle.y - tolleranzaX || this.y > rectangle.y + rectangle.h + tolleranzaY) { return false; }\r\n        // const m = IPoint.getM(firstPt, secondPt);\r\n        // const q = IPoint.getQ(firstPt, secondPt);\r\n        const lineDistance = this.distanceFromLine(firstPt, secondPt);\r\n        // console.log('distance:', lineDistance, ', this:', this, ', p1:', firstPt, ', p2:', secondPt);\r\n        return lineDistance <= tolleranza; }\r\n\r\n    public distanceFromLine(p1: IPoint, p2: IPoint): number {\r\n        const top: number =\r\n            + (p2.y - p1.y) * this.x\r\n            - (p2.x - p1.x) * this.y\r\n            + p2.x * p1.y\r\n            - p1.x * p2.y;\r\n        const bot =\r\n            (p2.y - p1.y) * (p2.y - p1.y) +\r\n            (p2.x - p1.x) * (p2.x - p1.x);\r\n        return Math.abs(top) / Math.sqrt(bot);  }\r\n\r\n    public equals(pt: IPoint, tolleranzaX: number = 0, tolleranzaY: number = 0): boolean {\r\n        if (pt === null) { return false; }\r\n        return Math.abs(this.x - pt.x) <= tolleranzaX && Math.abs(this.y - pt.y) <= tolleranzaY; }\r\n\r\n    public moveOnNearestBorder(startVertexSize: ISize, clone: boolean, graph: TODO/*IGraph*/, debug: boolean = true): IPoint {\r\n        const pt: IPoint = clone ? this.duplicate() : this;\r\n        const tl: IPoint = startVertexSize.tl();\r\n        const tr: IPoint = startVertexSize.tr();\r\n        const bl: IPoint = startVertexSize.bl();\r\n        const br: IPoint = startVertexSize.br();\r\n        const L: number = pt.distanceFromLine(tl, bl);\r\n        const R: number = pt.distanceFromLine(tr, br);\r\n        const T: number = pt.distanceFromLine(tl, tr);\r\n        const B: number = pt.distanceFromLine(bl, br);\r\n        const min: number = Math.min(L, R, T, B);\r\n        if (min === L) { pt.x = tl.x; }\r\n        if (min === R) { pt.x = tr.x; }\r\n        if (min === T) { pt.y = tr.y; }\r\n        if (min === B) { pt.y = br.y; }\r\n        if (debug && graph && pt instanceof GraphPoint) { graph.markg(pt, false, 'purple'); }\r\n        return pt; }\r\n\r\n    public getM(pt2: IPoint): number { return IPoint.getM?.(this, pt2) as unknown as number; }\r\n\r\n    public degreeWith(pt2: IPoint, toRadians: boolean): number {\r\n        const directionVector: IPoint = this.subtract(pt2, true);\r\n        const ret: number = Math.atan2(directionVector.y, directionVector.x);\r\n        return toRadians ? ret : windoww.U.RadToDegree(ret); }\r\n\r\n    public absolute(): number { return Math.sqrt(this.x * this.x + this.y * this.y); }\r\n    public set(x: number, y: number) { this.x = x; this.y = y; }\r\n\r\n    // move the point by a vector with direction and distance (module)\r\n    move(rad: radian /*in radians!*/, distance: number, clone:boolean = true): this{\r\n        let pt = clone ? this.duplicate() : this;\r\n        pt.x += distance * Math.cos(rad);\r\n        pt.y += distance * Math.sin(rad);\r\n        return pt;\r\n    }\r\n}\r\n\r\n@RuntimeAccessible('GraphPoint')\r\nexport class GraphPoint extends IPoint{\r\n    private dontmixwithPoint: any;\r\n    public static fromEvent(e: JQuery.ClickEvent | JQuery.MouseMoveEvent | JQuery.MouseUpEvent | JQuery.MouseDownEvent | JQuery.MouseEnterEvent | JQuery.MouseLeaveEvent | JQuery.MouseEventBase)\r\n        : GraphPoint | null {\r\n        if (!e) { return null; }\r\n        const p: Point = new Point(e.pageX, e.pageY);\r\n        const g: any = null;\r\n        throw new Error(\"todo: const g: IGraph = Status.status.getActiveModel().graph;\");\r\n        return g.toGraphCoord(p); }\r\n\r\n    protected new(): this { return new GraphPoint() as this;}\r\n\r\n}\r\n\r\n\r\n@RuntimeAccessible('Point')\r\nexport class Point extends IPoint{\r\n    private dontmixwithGPoint: any;\r\n    /// https://stackoverflow.com/questions/6073505/what-is-the-difference-between-screenx-y-clientx-y-and-pagex-y\r\n    public static fromEvent(e: JQuery.ClickEvent | JQuery.MouseMoveEvent | JQuery.MouseUpEvent | JQuery.MouseDownEvent\r\n        | JQuery.MouseEnterEvent | JQuery.MouseLeaveEvent | JQuery.MouseEventBase | React.MouseEvent)\r\n        : Point {\r\n        const p: Point = new Point(e.pageX, e.pageY);\r\n        return p; }\r\n\r\n    protected new(): this { return new Point() as this;}\r\n}\r\n\r\nRuntimeAccessibleClass.set_extend(RuntimeAccessibleClass, IPoint);\r\nRuntimeAccessibleClass.set_extend(IPoint, GraphPoint);\r\nRuntimeAccessibleClass.set_extend(IPoint, Point);\r\n\r\n@RuntimeAccessible('ISize')\r\nexport abstract class ISize<PT extends IPoint = IPoint> extends RuntimeAccessibleClass {\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    public x!: number;\r\n    public y!: number;\r\n    public w!: number;\r\n    public h!: number;\r\n    public constructor(x: number = 0, y: number = 0, w: number = 0, h: number = 0) {\r\n        super(); // super('dwc');\r\n        // do not override any fields from the DPointerTargetable, otherwise the ! in the override will reinizialize the attribute\r\n        // erasing the value set in super or in the functions called by the constructor as side effect (static_init called from constructor will be overridden too)\r\n        // if need to override types, build the \"new\" static function like in DModelElement\r\n        ISize.init_constructor(this, x, y, w, h);\r\n    }\r\n\r\n    static init_constructor(thiss: GObject, x: any = 0, y: any = 0, w: any = 0, h: any = 0, ...a: any): void {\r\n        thiss.id = \"SIZE_\" + (DPointerTargetable.maxID++) + \"_\" + new Date().getTime();\r\n        thiss.className = (thiss.constructor as typeof RuntimeAccessibleClass).cname;\r\n        if (x === null || x === undefined) thiss.x = undefined as Temporary;\r\n        else if (isNaN(+x)) { thiss.x = 0; }\r\n        else thiss.x = +x;\r\n        if (y === null || y === undefined) thiss.y = undefined as Temporary;\r\n        else if (isNaN(+y)) { thiss.y = 0; }\r\n        else thiss.y = +y;\r\n        if (w === null || w === undefined) thiss.w = undefined as Temporary;\r\n        else if (isNaN(+w)) { thiss.w = 0; }\r\n        else thiss.w = +w;\r\n        if (h === null || h === undefined) thiss.h = undefined as Temporary;\r\n        else if (isNaN(+h)) { thiss.h = 0; }\r\n        else thiss.h = +h;\r\n        thiss.className = this.cname; }\r\n\r\n    public toString(letters: boolean=true, separator: string = \" \"): string {\r\n        if (letters) return JSON.stringify({x: this.x, y: this.y, w: this.w, h: this.h});\r\n        else return this.x + separator + this.y + separator + this.w + separator + this.h;\r\n    }\r\n\r\n    public set(x?: number, y?: number, w?: number, h?: number): void {\r\n        if (x !== undefined) (this.x = +x);\r\n        if (y !== undefined) (this.y = +y);\r\n        if (w !== undefined) (this.w = +w);\r\n        if (h !== undefined) (this.h = +h);\r\n    }\r\n\r\n    protected abstract makePoint(x: number, y: number): PT;\r\n    protected abstract new(...args:any): this;\r\n    public clone(json: this): this { this.x = json.x; this.y = json.y; this.w = json.w; this.h = json.h; return this; }\r\n    public duplicate(): this { return this.new().clone(this); }\r\n\r\n    public add(pt2: number | {x?:number, y?:number, w?:number, h?:number}, newInstance?: boolean): this {\r\n        let thiss = newInstance ? this.duplicate() : this;\r\n        if (typeof pt2 === \"number\") { thiss.x += pt2; thiss.y += pt2; thiss.w += pt2; thiss.h += pt2; return thiss; }\r\n        if (pt2.x !== undefined) thiss.x += pt2.x;\r\n        if (pt2.y !== undefined) thiss.y += pt2.y;\r\n        if (pt2.w !== undefined) thiss.w += pt2.w;\r\n        if (pt2.h !== undefined) thiss.h += pt2.h;\r\n        return thiss; }\r\n\r\n    public subtract(pt2: number | {x?:number, y?:number, w?:number, h?:number}, newInstance?: boolean): this {\r\n        let thiss = newInstance ? this.duplicate() : this;\r\n        if (typeof pt2 === \"number\") { thiss.x -= pt2; thiss.y -= pt2; thiss.w -= pt2; thiss.h -= pt2; return thiss; }\r\n        if (pt2.x !== undefined) thiss.x -= pt2.x;\r\n        if (pt2.y !== undefined) thiss.y -= pt2.y;\r\n        if (pt2.w !== undefined) thiss.w -= pt2.w;\r\n        if (pt2.h !== undefined) thiss.h -= pt2.h;\r\n        return thiss; }\r\n\r\n    public multiply(pt2: number | {x?:number, y?:number, w?:number, h?:number}, newInstance?: boolean): this {\r\n        let thiss = newInstance ? this.duplicate() : this;\r\n        if (typeof pt2 === \"number\") { thiss.x *= pt2; thiss.y *= pt2; thiss.w *= pt2; thiss.h *= pt2; return thiss; }\r\n        if (pt2.x !== undefined) thiss.x *= pt2.x;\r\n        if (pt2.y !== undefined) thiss.y *= pt2.y;\r\n        if (pt2.w !== undefined) thiss.w *= pt2.w;\r\n        if (pt2.h !== undefined) thiss.h *= pt2.h;\r\n        return thiss; }\r\n\r\n    public divide(pt2: number | {x?:number, y?:number, w?:number, h?:number}, newInstance?: boolean): this {\r\n        let thiss = newInstance ? this.duplicate() : this;\r\n        if (typeof pt2 === \"number\") { thiss.x /= pt2; thiss.y /= pt2; thiss.w /= pt2; thiss.h /= pt2; return thiss; }\r\n        if (pt2.x !== undefined) thiss.x /= pt2.x;\r\n        if (pt2.y !== undefined) thiss.y /= pt2.y;\r\n        if (pt2.w !== undefined) thiss.w /= pt2.w;\r\n        if (pt2.h !== undefined) thiss.h /= pt2.h;\r\n        return thiss; }\r\n\r\n\r\n    public tl(): PT {     return this.makePoint(   this.x,                 this.y             ); }\r\n    public tr(): PT {     return this.makePoint(this.x + this.w,        this.y             ); }\r\n    public bl(): PT {     return this.makePoint(   this.x,              this.y + this.h    ); }\r\n    public br(): PT {     return this.makePoint(this.x + this.w,     this.y + this.h    ); }\r\n    public center(): PT { return this.makePoint(this.x + this.w / 2, this.y + this.h / 2); }\r\n    public relativePoint(xPercent: number, yPercent: number): PT { return this.makePoint(this.x + this.w * xPercent, this.y + this.h * yPercent); }\r\n    public equals(size: this): boolean { return this.x === size.x && this.y === size.y && this.w === size.w && this.h === size.h; }\r\n\r\n    /// field-wise Math.min()\r\n    public min(minSize: this, clone: boolean): this {\r\n        const ret: this = clone ? this.new() : this;\r\n        if (!isNaN(minSize.x) && ret.x < minSize.x) { ret.x = minSize.x; }\r\n        if (!isNaN(minSize.y) && ret.y < minSize.y) { ret.y = minSize.y; }\r\n        if (!isNaN(minSize.w) && ret.w < minSize.w) { ret.w = minSize.w; }\r\n        if (!isNaN(minSize.h) && ret.h < minSize.h) { ret.h = minSize.h; }\r\n        return ret; }\r\n    public max(maxSize: this, clone: boolean): this {\r\n        const ret: this = clone ? this.new() : this;\r\n        if (!isNaN(maxSize.x) && ret.x > maxSize.x) { ret.x = maxSize.x; }\r\n        if (!isNaN(maxSize.y) && ret.y > maxSize.y) { ret.y = maxSize.y; }\r\n        if (!isNaN(maxSize.w) && ret.w > maxSize.w) { ret.w = maxSize.w; }\r\n        if (!isNaN(maxSize.h) && ret.h > maxSize.h) { ret.h = maxSize.h; }\r\n        return ret; }\r\n\r\n    public intersection(size: this): this | null {\r\n        if (!size) return null;\r\n        // anche \"isinside\"\r\n        let startx, starty, endx, endy;\r\n        startx = Math.max(this.x, size.x);\r\n        starty = Math.max(this.y, size.y);\r\n        endx = Math.min(this.x + this.w, size.x + size.w);\r\n        endy = Math.min(this.y + this.h, size.y + size.h);\r\n        const intersection: this = this.new();\r\n        // intersection.set(0, 0, 0, 0);\r\n        intersection.x = startx;\r\n        intersection.y = starty;\r\n        intersection.w = endx - startx;\r\n        intersection.h = endy - starty;\r\n        const doesintersect: boolean = intersection.w > 0 && intersection.h > 0;\r\n        return (doesintersect) ? intersection: null; }\r\n\r\n    public contains(pt: PT): boolean {\r\n        return  pt.x >= this.x && pt.x <= this.x + this.w && pt.y >= this.y && pt.y <= this.y + this.h; }\r\n\r\n    public isOverlapping(size2: this): boolean { return !!this.intersection(size2); }\r\n    public isOverlappingAnyOf(sizes: this[]): boolean {\r\n        if (!sizes) return false;\r\n        for (let size of sizes) { if (this.isOverlapping(size)) return true; }\r\n        return false;\r\n    }\r\n\r\n    public multiplyPoint(other: PT, newInstance: boolean): this {\r\n        const ret: this = newInstance ? this.new() : this;\r\n        ret.x *= other.x;\r\n        ret.w *= other.x;\r\n        ret.y *= other.y;\r\n        ret.h *= other.y;\r\n        return ret; }\r\n\r\n    public dividePoint(other: PT, newInstance: boolean): this {\r\n        const ret: this = newInstance ? this.new() : this;\r\n        ret.x /= other.x;\r\n        ret.w /= other.x;\r\n        ret.y /= other.y;\r\n        ret.h /= other.y;\r\n        return ret; }\r\n\r\n    public boundary(size2: this): void {\r\n        /*let minx, maxx, miny, maxy;\r\n        if (size2.y < this.y) { miny = size2.y; /*maxy = this.y;* / } else { miny = this.y; /*maxy = size2.y;* / }\r\n        if (size2.x < this.x) { minx = size2.y; /*maxx = this.x;* / } else { minx = this.x; /*maxy = size2.x;* / }\r\n        if (size2.y + size2.h < this.y + this.h) maxy = this.y + this.h; else maxy = size2.y + size2.h;\r\n        if (size2.x + size2.w < this.x + this.w) maxx = this.x + this.w; else maxx = size2.x + size2.w;\r\n        */\r\n        this.h = (size2.y + size2.h > this.y + this.h ? size2.y + size2.h : this.y + this.h); // -miny\r\n        this.w = (size2.x + size2.w > this.x + this.w ? size2.x + size2.w : this.x + this.w); // -minx\r\n        if (this.y < size2.y) this.y = size2.y;\r\n        if (this.x < size2.x) this.x = size2.x;\r\n        this.h -= this.y;\r\n        this.w -= this.x;\r\n    }\r\n}\r\n\r\n@RuntimeAccessible('Size')\r\nexport class Size extends ISize<Point> {\r\n    static subclasses: any[] = [];\r\n    private static sizeofvar: HTMLElement;\r\n    private static $sizeofvar: JQuery<HTMLElement>;\r\n    private dontMixWithGraphSize: any;\r\n\r\n    /**\r\n     * measure a node size\r\n     * @param {Element} element0 - the emelemnt to measure;\r\n     * @param {boolean} sizePostTransform - includes css transform instructions for computing his size. like transform: scale(1.5)\r\n     * */\r\n    public static of(element0: Element, sizePostTransform: boolean = true): Size {\r\n        let element: HTMLElement = element0 as HTMLElement;\r\n        if (element as unknown === document) {\r\n            Log.ww('trying to measure document, rerouted to measuring body.');\r\n            element = document.body as any;\r\n        }\r\n        const $element = $(element);\r\n        Log.e(!element || element.tagName === 'foreignObject', 'sizeof()', 'SvgForeignElementObject have a bug with size, measure a child instead.', element);\r\n        let tmp;\r\n        let size: Size;\r\n        if (!Size.sizeofvar) {\r\n            Size.sizeofvar = document.createElement('div');\r\n            document.body.append(Size.sizeofvar); }\r\n\r\n        const isOrphan = element.parentNode === null;\r\n        // var visible = element.style.display !== 'none';\r\n        // var visible = $element.is(\":visible\"); crea bug quando un elemento è teoricamente visibile ma orfano\r\n        const ancestors =  windoww.U.ancestorArray(element);\r\n        const displayStyles: string[] = ancestors.map( (e: HTMLElement) => e?.style?.display);\r\n        if (isOrphan) { Size.sizeofvar.append(element); }\r\n        // show all and saveToDB visibility to restore it later\r\n        for (let i = 0; i < ancestors.length; i++) { // document has undefined style\r\n            displayStyles[i] = ancestors[i]?.style?.display;\r\n            if (displayStyles[i] === 'none' || (displayStyles[i] === '' && getComputedStyle(ancestors[i]).display === 'none')) { ancestors[i].style.display = 'block' }\r\n        }\r\n        tmp = $element.offset() as JQuery.Coordinates; // made sure cannot be undefined by removing display:none\r\n        size = new Size(tmp.left, tmp.top, 0, 0);\r\n        if (sizePostTransform) {\r\n            tmp = element.getBoundingClientRect();\r\n            size.w = tmp.width;\r\n            size.h = tmp.height;\r\n        }\r\n        else {\r\n            size.w = element.offsetWidth;\r\n            size.h = element.offsetHeight;\r\n        }\r\n        // restore visibility\r\n        for (let i = 0; i < ancestors.length; i++) {\r\n            if (displayStyles[i] === ancestors[i].style?.display) continue;\r\n            if (displayStyles[i]) ancestors[i].style.display = displayStyles[i];\r\n            else ancestors[i].style.removeProperty('display');\r\n        }\r\n        if (isOrphan) {  windoww.U.clear(Size.sizeofvar); }\r\n        // Status.status.getActiveModel().graph.markS(size, false);\r\n        return size;\r\n    }\r\n\r\n    public static fromPoints(firstPt: IPoint, secondPt: IPoint): Size {\r\n        const minX = Math.min(firstPt.x, secondPt.x);\r\n        const maxX = Math.max(firstPt.x, secondPt.x);\r\n        const minY = Math.min(firstPt.y, secondPt.y);\r\n        const maxY = Math.max(firstPt.y, secondPt.y);\r\n        return new Size(minX, minY, maxX - minX, maxY - minY); }\r\n\r\n    protected makePoint(x: number, y: number): Point { return new Point(x, y); }\r\n    protected new(...args:any): this { return new Size(...args) as this; }\r\n}\r\n\r\n@RuntimeAccessible('GraphSize')\r\nexport class GraphSize extends ISize<GraphPoint> {\r\n    private dontMixWithSize: any;\r\n\r\n    public static fromPoints(firstPt: GraphPoint, secondPt: GraphPoint): GraphSize {\r\n        const minX = Math.min(firstPt.x, secondPt.x);\r\n        const maxX = Math.max(firstPt.x, secondPt.x);\r\n        const minY = Math.min(firstPt.y, secondPt.y);\r\n        const maxY = Math.max(firstPt.y, secondPt.y);\r\n        return new GraphSize(minX, minY, maxX - minX, maxY - minY); }\r\n\r\n    // both pt and targetPt are readonly-safe parameters\r\n    public static closestIntersection(size: GraphSize, pt: GraphPoint, targetPt: GraphPoint, gridAlign?: GraphPoint, m0?:number, q0?:number): GraphPoint | undefined {\r\n        // let pt: GraphPoint = pt0.duplicate();\r\n        const m = m0 || GraphPoint.getM(targetPt, pt);\r\n        const q = q0 || GraphPoint.getQ(targetPt, pt);\r\n        // console.log(\"closestIntersection()\", {size, pt0, targetPt, m, q});\r\n        // if perfectly vertical line\r\n        if (m === Number.POSITIVE_INFINITY/* && q === Number.NEGATIVE_INFINITY*/) {\r\n            // top center\r\n            if (Math.abs(targetPt.y - size.y) <= Math.abs(targetPt.y - size.y - size.h)) return pt;\r\n            // bottom center\r\n            else return new GraphPoint(pt.x, size.y + size.h);\r\n        }\r\n        let tl = size.tl(), tr = size.tr(),\r\n            bl = size.bl(), br = size.br();\r\n        let allowT: boolean, allowB: boolean,\r\n            allowL: boolean, allowR: boolean;\r\n        /*let distanceT: number = Number.POSITIVE_INFINITY, distanceB: number = Number.POSITIVE_INFINITY,\r\n            distanceL: number = Number.POSITIVE_INFINITY, distanceR: number = Number.POSITIVE_INFINITY;*/\r\n        let intersectionT: GraphPoint | undefined, intersectionB: GraphPoint | undefined,\r\n            intersectionL: GraphPoint | undefined, intersectionR: GraphPoint | undefined;\r\n\r\n\r\n        allowT = Geom.isNumberBetween(tl.y, bl.y, targetPt.y);\r\n        allowB = Geom.isNumberBetween(bl.y, tl.y, targetPt.y);\r\n        allowL = Geom.isNumberBetween(tl.x, tr.x, targetPt.x);\r\n        allowR = Geom.isNumberBetween(tr.x, tl.x, targetPt.x);\r\n        // console.log(\"closestIntersection pt0\", {size, targetPt, pt0:pt0.raw(), gridAlign,\r\n        //     corners:{tl:tl.raw(), tr:tr.raw(), bl:bl.raw(), br:br.raw()}, allows:{allowT, allowB, allowL, allowR}});\r\n        if (!(allowT || allowB || allowL || allowR)) return undefined; // point is internal to size\r\n        if (allowT) intersectionT = Geom.lineToSegmentIntersection(tl, tr, q, m); else\r\n        if (allowB) intersectionB = Geom.lineToSegmentIntersection(bl, br, q, m); // NOT else, (T|B) AND (L|R) can happen, or just 1 or 0 of those.\r\n        if (allowL) intersectionL = Geom.lineToSegmentIntersection(tl, bl, q, m); else\r\n        if (allowR) intersectionR = Geom.lineToSegmentIntersection(tr, br, q, m);\r\n\r\n        // console.log(\"closestIntersection pt2\", {intersectionT, intersectionB, intersectionL, intersectionR});\r\n        // only 1 intersection can happen\r\n        return intersectionT || intersectionB || intersectionL || intersectionR;\r\n    }\r\n    public static closestIntersection_old(size: GraphSize, prevPt: GraphPoint, pt0: GraphPoint, gridAlign?: GraphPoint): GraphPoint | null {\r\n        let ret = GraphSize.closestIntersection0(size, prevPt, pt0, gridAlign) as any;\r\n        // Log.exDev(!Geom.isOnEdge(ret, size), 'ClosestIntersection failed. not on Vertex edge.', {ret, size, prevPt, pt0, gridAlign});\r\n        return ret;\r\n    }\r\n    private static closestIntersection0(vertexGSize: GraphSize, prevPt: GraphPoint, pt0: GraphPoint, gridAlign?: GraphPoint): GraphPoint | null {\r\n        let pt: GraphPoint | null = pt0.duplicate();\r\n        const m = GraphPoint.getM(prevPt, pt) as number;\r\n        const q = GraphPoint.getQ(prevPt, pt) as number;\r\n        // U.pe( Math.abs((pt.y - m * pt.x) - (prevPt.y - m * prevPt.x)) > .001, 'wrong math in Q:', (pt.y - m * pt.x), ' vs ', (prevPt.y - m * prevPt.x));\r\n        /*const isL = prevPt.x < pt.x;\r\n    const isT = prevPt.y < pt.y;\r\n    const isR = !isL;\r\n    const isB = !isT; */\r\n        if (m === Number.POSITIVE_INFINITY && q === Number.NEGATIVE_INFINITY) { // bottom middle\r\n            return new GraphPoint(vertexGSize.x + vertexGSize.w / 2, vertexGSize.y + vertexGSize.h); }\r\n        // console.log('pt:', pt, 'm:', m, 'q:', q);\r\n        let L: GraphPoint | null = new GraphPoint(0, 0);\r\n        let T: GraphPoint | null = new GraphPoint(0, 0);\r\n        let R: GraphPoint | null = new GraphPoint(0, 0);\r\n        let B: GraphPoint | null = new GraphPoint(0, 0);\r\n        L.x = vertexGSize.x;\r\n        L.y = m * L.x + q;\r\n        R.x = vertexGSize.x + vertexGSize.w;\r\n        R.y = m * R.x + q;\r\n        T.y = vertexGSize.y;\r\n        T.x = (T.y - q) / m;\r\n        B.y = vertexGSize.y + vertexGSize.h;\r\n        B.x = (B.y - q) / m;\r\n        // prendo solo il compreso pt ~ prevPt (escludo così il \"pierce\" sulla faccia opposta), prendo il più vicino al centro.\r\n        // console.log('4 possibili punti di intersezione (LTBR):', L, T, B, R);\r\n        /* this.owner.mark(this.owner.toHtmlCoord(T), true, 'blue');\r\n    this.owner.mark(this.owner.toHtmlCoord(B), false, 'violet');\r\n    this.owner.mark(this.owner.toHtmlCoord(L), false, 'red');\r\n    this.owner.mark(this.owner.toHtmlCoord(R), false, 'orange');*/\r\n        console.log(\"intersect pt1:\", {T, B, L, R});\r\n        if ( (B.x >= pt.x && B.x <= prevPt.x) || (B.x >= prevPt.x && B.x <= pt.x) ) { } else { B = null; }\r\n        if ( (T.x >= pt.x && T.x <= prevPt.x) || (T.x >= prevPt.x && T.x <= pt.x) ) { } else { T = null; }\r\n        if ( (L.y >= pt.y && L.y <= prevPt.y) || (L.y >= prevPt.y && L.y <= pt.y) ) { } else { L = null; }\r\n        if ( (R.y >= pt.y && R.y <= prevPt.y) || (R.y >= prevPt.y && R.y <= pt.y) ) { } else { R = null; }\r\n        console.log(\"intersect pt2:\", {T, B, L, R});\r\n        function closestmix(pt: GraphPoint, closest: GraphPoint, segStart: GraphPoint, segEnd: GraphPoint, mode: \"TB\" | \"LR\"): void {\r\n            // changes pt\r\n            pt.x = closest.x; pt.y = closest.y; return;\r\n            let main: \"x\" | \"y\", sub: \"x\" | \"y\";\r\n            if (mode === \"TB\") { main = \"y\"; sub = \"x\"; } else { main = \"x\"; sub = \"y\"; }\r\n            pt[main] = closest[main];\r\n            // if T[sub] is inside the top segment, take T[sub], otherwise closest between size.tl[sub] and size.tr[sub]\r\n            // pt[sub] = Math.max(segStart[sub], Math.min(segStart[sub], closest[sub]));\r\n            if (closest[sub] <= segEnd[sub] && closest[sub] >= segStart[sub]) pt[sub] = closest[sub];\r\n            else if (Math.abs(closest[sub]-segEnd[sub]) < Math.abs(closest[sub]-segStart[sub])) pt[sub] = segEnd[sub];\r\n            else pt[sub] = segStart[sub];\r\n        }\r\n        function closestmix2(pt: GraphPoint, closest: GraphPoint, segStart: GraphPoint, segEnd: GraphPoint, mode: \"TB\" | \"LR\"): void {\r\n            // changes closest\r\n            let main: \"x\" | \"y\", sub: \"x\" | \"y\";\r\n            if (mode === \"TB\") { main = \"y\"; sub = \"x\"; } else { main = \"x\"; sub = \"y\"; }\r\n            // closest[main] = pt[main];\r\n            // if T[sub] is inside the top segment, take T[sub], otherwise closest between size.tl[sub] and size.tr[sub]\r\n            // pt[sub] = Math.max(segStart[sub], Math.min(segStart[sub], closest[sub]));\r\n            if (closest[sub] <= segEnd[sub] && closest[sub] >= segStart[sub]) {/*no-op*/}\r\n            else if (Math.abs(closest[sub]-segEnd[sub]) < Math.abs(closest[sub]-segStart[sub])) closest[sub] = segEnd[sub];\r\n            else closest[sub] = segStart[sub];\r\n        }\r\n        console.log(\"intersect pt2.5:\");\r\n        try{\r\n            if(T) closestmix2(pt, T, vertexGSize.tl(), vertexGSize.tr(), \"TB\");\r\n            if(B) closestmix2(pt, B, vertexGSize.bl(), vertexGSize.br(), \"TB\");\r\n            if(R) closestmix2(pt, R, vertexGSize.tr(), vertexGSize.br(), \"LR\");\r\n            if(L) closestmix2(pt, L, vertexGSize.tl(), vertexGSize.bl(), \"LR\");\r\n        } catch(e){ console.error(\"intersect error\",e)}\r\n        // console.log('superstiti step1: (LTBR):', L, T, B, R);\r\n        console.log(\"intersect pt2.9:\");\r\n        const vicinanzaT = !T ? Number.POSITIVE_INFINITY : ((T.x - pt.x) * (T.x - pt.x)) + ((T.y - pt.y) * (T.y - pt.y));\r\n        const vicinanzaB = !B ? Number.POSITIVE_INFINITY : ((B.x - pt.x) * (B.x - pt.x)) + ((B.y - pt.y) * (B.y - pt.y));\r\n        const vicinanzaL = !L ? Number.POSITIVE_INFINITY : ((L.x - pt.x) * (L.x - pt.x)) + ((L.y - pt.y) * (L.y - pt.y));\r\n        const vicinanzaR = !R ? Number.POSITIVE_INFINITY : ((R.x - pt.x) * (R.x - pt.x)) + ((R.y - pt.y) * (R.y - pt.y));\r\n        const closest = Math.min(vicinanzaT, vicinanzaB, vicinanzaL, vicinanzaR);\r\n        console.log(\"intersect pt3:\", {vicinanzaT, vicinanzaB, vicinanzaL, vicinanzaR, closest});\r\n\r\n        // console.log( 'closest:', closest);\r\n        // succede quando pt e prevPt sono entrambi all'interno del rettangolo del vertice.\r\n        // L'edge non è visibile e il valore ritornato è irrilevante.\r\n\r\n        if (closest === Number.POSITIVE_INFINITY) {\r\n            /* top center */\r\n            pt = vertexGSize.tl();\r\n            pt.x += vertexGSize.w / 2; } else\r\n        if (closest === Number.POSITIVE_INFINITY) {\r\n            /* bottom center */\r\n            pt = vertexGSize.br();\r\n            pt.x -= vertexGSize.w / 2; } else\r\n        if (closest === vicinanzaT && T) {\r\n            closestmix(pt, T as any, vertexGSize.tl(), vertexGSize.tr(), \"TB\");\r\n            /*pt.y = T.y;\r\n            // if T.x is inside the top segment, take T.x, otherwise closest between size.tl.x and size.tr.x\r\n            if ((T.x <= tr.x && T.x >= tl.x)) pt.x = T.x;\r\n            else if (Math.abs(T.x-tr.x) < Math.abs(T.x-tl.x)) pt.x = tr.x;\r\n            else pt.x = tl.x;*/\r\n        }\r\n        if (closest === vicinanzaB) { closestmix(pt, B as any, vertexGSize.bl(), vertexGSize.br(), \"TB\"); } else\r\n        if (closest === vicinanzaR) { closestmix(pt, R as any, vertexGSize.tr(), vertexGSize.br(), \"LR\"); } else\r\n        if (closest === vicinanzaL) { closestmix(pt, L as any, vertexGSize.tl(), vertexGSize.bl(), \"LR\"); }\r\n\r\n        if (!gridAlign) { return pt; }\r\n        if (!pt) return null;\r\n        if (gridAlign.x && (pt === T || pt === B || isNaN(closest))) {\r\n            const floorX: number = Math.floor(pt.x / gridAlign.x) * gridAlign.x;\r\n            const ceilX: number = Math.ceil(pt.x / gridAlign.x) * gridAlign.x;\r\n            let closestX;\r\n            let farthestX;\r\n            if (Math.abs(floorX - pt.x) < Math.abs(ceilX - pt.x)) {\r\n                closestX = floorX; farthestX = ceilX;\r\n            } else { closestX = ceilX; farthestX = floorX; }\r\n\r\n            // todo: possibile causa del bug che non allinea punti fake a punti reali. nel calcolo realPT questo non viene fatto.\r\n            // if closest grid intersection is inside the vertex.\r\n            if (closestX >= vertexGSize.x && closestX <= vertexGSize.x + vertexGSize.w) { pt.x = closestX; } else\r\n                // if 2° closer grid intersection is inside the vertex.\r\n            if (closestX >= vertexGSize.x && closestX <= vertexGSize.x + vertexGSize.w) { pt.x = farthestX;\r\n                // if no intersection are inside the vertex (ignore grid)\r\n            } else { /* do nothing */ }\r\n        } else if (gridAlign.y && (pt === L || pt === R)) {\r\n            const floorY: number = Math.floor(pt.y / gridAlign.y) * gridAlign.y;\r\n            const ceilY: number = Math.ceil(pt.y / gridAlign.y) * gridAlign.y;\r\n            let closestY;\r\n            let farthestY;\r\n            if (Math.abs(floorY - pt.y) < Math.abs(ceilY - pt.y)) {\r\n                closestY = floorY; farthestY = ceilY;\r\n            } else { closestY = ceilY; farthestY = floorY; }\r\n\r\n            // if closest grid intersection is inside the vertex.\r\n            if (closestY >= vertexGSize.y && closestY <= vertexGSize.y + vertexGSize.h) { pt.y = closestY; } else\r\n                // if 2° closer grid intersection is inside the vertex.\r\n            if (closestY >= vertexGSize.y && closestY <= vertexGSize.y + vertexGSize.h) { pt.y = farthestY;\r\n                // if no intersection are inside the vertex (ignore grid)\r\n            } else { /* do nothing */ }\r\n        }\r\n        return pt; }\r\n\r\n\r\n    protected new(...args: any): this { return new GraphSize(...args) as this; }\r\n    protected makePoint(x: number, y: number): GraphPoint { return new GraphPoint(x, y) as GraphPoint; }\r\n\r\n    closestPoint(pt: GraphPoint): GraphPoint { return Geom.closestPoint(this, pt); }\r\n}\r\n\r\nRuntimeAccessibleClass.set_extend(RuntimeAccessibleClass, ISize);\r\nRuntimeAccessibleClass.set_extend(ISize, Size);\r\nRuntimeAccessibleClass.set_extend(ISize, GraphSize);\r\n@RuntimeAccessible('Geom')\r\nexport class Geom extends RuntimeAccessibleClass {\r\n\r\n    static isPositiveZero(m: number): boolean {\r\n        if (!!Object.is) { return Object.is(m, +0); }\r\n        return (1 / m === Number.POSITIVE_INFINITY); }\r\n\r\n    static isNegativeZero(m: number): boolean {\r\n        if (!!Object.is) { return Object.is(m, -0); }\r\n        return (1 / m === Number.NEGATIVE_INFINITY); }\r\n\r\n    static TanToRadian(n: number): number { return Geom.DegreeToRad(Geom.TanToDegree(n)); }\r\n    static TanToDegree(n: number): number {\r\n        if (Geom.isPositiveZero(n)) { return 0; }\r\n        if (n === Number.POSITIVE_INFINITY) { return 90; }\r\n        if (Geom.isNegativeZero(n)) { return 180; }\r\n        if (n === Number.POSITIVE_INFINITY) { return 270; }\r\n        return Geom.RadToDegree((window as any).Math.atan(n)); }\r\n\r\n    static RadToDegree(radians: number): number { return Geom.radToDeg(radians); }\r\n    static DegreeToRad(degree: number): number { return Geom.degToRad(degree); }\r\n    static radToDeg(radians: number): number { return radians * (180 / Math.PI); }\r\n    static degToRad(degree: number): number { return degree * (Math.PI / 180); }\r\n\r\n\r\n\r\n    private static GeomTolerance = 0; // 0.001;\r\n    static isOnEdge(pt: GraphPoint, shape: GraphSize, tolerance: number = Geom.GeomTolerance): boolean {\r\n        return Geom.isOnHorizontalEdges(pt, shape, tolerance) || Geom.isOnVerticalEdges(pt, shape, tolerance); }\r\n\r\n    static isOnVerticalEdges(pt: GraphPoint, shape: GraphSize, tolerance: number = Geom.GeomTolerance): boolean {\r\n        return Geom.isOnLeftEdge(pt, shape, tolerance) || Geom.isOnRightEdge(pt, shape, tolerance); }\r\n\r\n    static isOnHorizontalEdges(pt: GraphPoint, shape: GraphSize, tolerance: number = Geom.GeomTolerance): boolean {\r\n        return Geom.isOnTopEdge(pt, shape, tolerance) || Geom.isOnBottomEdge(pt, shape, tolerance); }\r\n\r\n    static isOnRightEdge(pt: GraphPoint, shape: GraphSize, tolerance: number = Geom.GeomTolerance): boolean {\r\n        if (!pt || !shape) { return false; }\r\n        if (tolerance) return Math.abs(pt.x - (shape.x + shape.w)) < tolerance\r\n            && ( pt.y - shape.y > tolerance && pt.y - (shape.y + shape.h) < tolerance);\r\n        return (pt.x === shape.x + shape.w) && (pt.y >= shape.y && pt.y <= shape.y + shape.h);\r\n    }\r\n\r\n    static isOnLeftEdge(pt: GraphPoint, shape: GraphSize, tolerance: number = Geom.GeomTolerance): boolean {\r\n        if (!pt || !shape) { return false; }\r\n        if (tolerance) return Math.abs(pt.x - shape.x) < tolerance\r\n            && (pt.y - shape.y > tolerance && pt.y - (shape.y + shape.h) < tolerance);\r\n        return (pt.x === shape.x) && (pt.y >= shape.y && pt.y <= shape.y + shape.h);\r\n    }\r\n\r\n    static isOnTopEdge(pt: GraphPoint, shape: GraphSize, tolerance: number = Geom.GeomTolerance): boolean {\r\n        if (!pt || !shape) { return false; }\r\n        if (tolerance) return Math.abs(pt.y - shape.y) < tolerance\r\n            && (pt.x - shape.x > tolerance && pt.x - (shape.x + shape.w) < tolerance);\r\n        return (pt.y === shape.y) && (pt.x >= shape.x && pt.x <= shape.x + shape.w);\r\n    }\r\n\r\n    static isOnBottomEdge(pt: GraphPoint, shape: GraphSize, tolerance?: number): boolean {\r\n        if (!pt || !shape) { return false; }\r\n        if (tolerance) return Math.abs(pt.y - shape.y + shape.h) < tolerance\r\n            && (pt.x - shape.x > tolerance && pt.x - (shape.x + shape.w) < tolerance);\r\n        return (pt.y === shape.y + shape.h) && (pt.x >= shape.x && pt.x <= shape.x + shape.w);\r\n    }\r\n\r\n    static closestPoint(size: GraphSize, pt: GraphPoint): GraphPoint {\r\n        let top_closest = Geom.closestPointToSegment(size.tl(), size.tr(), pt);\r\n        let bot_closest = Geom.closestPointToSegment(size.bl(), size.br(), pt);\r\n        let left_closest = Geom.closestPointToSegment(size.tl(), size.bl(), pt);\r\n        let right_closest = Geom.closestPointToSegment(size.tr(), size.br(), pt);\r\n\r\n        let top_distance = top_closest.distanceFromPoint(pt, false);\r\n        let bot_distance = bot_closest.distanceFromPoint(pt, false);\r\n        let left_distance = left_closest.distanceFromPoint(pt, false);\r\n        let right_distance = right_closest.distanceFromPoint(pt, false);\r\n\r\n        let min_distance = Math.min(top_distance, bot_distance, left_distance, right_distance);\r\n        if (min_distance === top_distance) return top_closest;\r\n        if (min_distance === bot_distance) return bot_closest;\r\n        if (min_distance === left_distance) return left_closest;\r\n        return right_closest;\r\n    }\r\n    static isMinusZero(number: number) {return 1/number == -Infinity;}\r\n    static closestPointToSegment(segStart: GraphPoint, segEnd:GraphPoint, pt: GraphPoint): GraphPoint{\r\n        // 1) find equation of line passing for start, end.\r\n        // 2) then find all perpendicular lines, then the perpendicular line that pass through pt\r\n        // 3) find intersection between Line(s,e) and line of point 2.\r\n        // 4A) IF intersection is part of segment(s,e) that is closest.\r\n        // 4B) ELSE, one of the 2 extremes of the segment is closest.\r\n\r\n        let x_intersect: number, y_intersect: number;\r\n        let s = segStart;\r\n        let e = segEnd;\r\n        let mse = (e.y - s.y) / (e.x - s.x);\r\n        if (mse === Number.POSITIVE_INFINITY || mse === Number.NEGATIVE_INFINITY) {\r\n            // s and e are both on the same y vertical line (same x)      // new GraphPoint(segStart.x, pt.y);\r\n            x_intersect = segStart.x;\r\n            y_intersect = pt.y;\r\n            // 1), 2), 3) all done shortcut\r\n        } else if (mse === 0 || Geom.isNegativeZero(mse)) {\r\n            // s and e are both on the same x horizontal line (same y)    // new GraphPoint(pt.x, segStart.y);\r\n            x_intersect = pt.x;\r\n            y_intersect = segStart.y\r\n            // 1), 2), 3) all done shortcut\r\n        }\r\n        else {\r\n            let q = s.y - mse*s.x; // y = mx + q           q = y-mx\r\n            // 1) done\r\n            let pmse = -1/mse; // perpendicular to mse\r\n            let pq = pt.y - pmse*pt.x;\r\n            // 2) done\r\n            //  m1 * x + q1 = y    -->   m1 * x + q1 = m2 * x + q2    -->    (m1-m2)x = q2-q1      -->     x=(q2-q1)/(m1-m2)\r\n            x_intersect = (pq-q)/(mse-pmse);\r\n            y_intersect = mse*(x_intersect) + q; //  y = mx +q\r\n            // 3) done\r\n        }\r\n\r\n        let maxX: number, minX: number;\r\n        let maxY: number, minY: number;\r\n        if (s.x > e.x) { maxX = s.x; minX = e.x; } else {  maxX = e.x; minX = s.x; }\r\n        if (s.y > e.y) { maxY = s.y; minY = e.y; } else {  maxY = e.y; minY = s.y; }\r\n        if (x_intersect >= minX && x_intersect <= maxX && y_intersect >= minY && y_intersect <= maxY) return new GraphPoint(x_intersect, y_intersect);\r\n        // 4A) IF done\r\n\r\n        let sdist = (s.x - x_intersect)**2 + (s.y - y_intersect)**2;  // actual distance is sqrt() of this, but i just need to find closest, not correct distance.\r\n        let edist = (e.x - x_intersect)**2 + (e.y - y_intersect)**2;\r\n        return (sdist < edist) ? new GraphPoint(s.x, s.y) : new GraphPoint(e.x, e.y);\r\n        // 4B) ELSE done\r\n    }\r\n\r\n    static lineToSegmentIntersection(segStart: GraphPoint, segEnd: GraphPoint, q: number, m: number): GraphPoint | undefined {\r\n        if (segStart.x === segEnd.x){\r\n            let y = m*segStart.x + q;\r\n            if (Geom.isNumberBetween(y, segStart.y, segEnd.y)) return new GraphPoint(segStart.x, y);\r\n            else return undefined;\r\n        }\r\n        else if (segStart.y === segEnd.y) {\r\n            let x = (segStart.y-q)/m;\r\n            if (Geom.isNumberBetween(x, segStart.x, segEnd.x)) return new GraphPoint(x, segStart.y);\r\n            else return undefined;\r\n            //\r\n        }\r\n\r\n        let m2 = segStart.getM(segEnd);\r\n        let q2 = IPoint.getQ(segStart, segEnd);\r\n        if (m === m2) {\r\n            if (q2 === q) return segStart; // line and segment coincident\r\n            return undefined; // parallel\r\n        }\r\n        let intersect = Geom.lineToLineIntersection(m, q, m2, q2);\r\n        if (intersect && Geom.isNumberBetween(intersect.x, segStart.x, segEnd.x) && Geom.isNumberBetween(intersect.y, segStart.y, segEnd.y)) return intersect;\r\n        else return undefined;\r\n    }\r\n\r\n    static isNumberBetween(target: number, s: number, e: number): boolean {\r\n        let max = Math.max(s, e);\r\n        let min = Math.min(s, e);\r\n        return target >= min && target <= max; }\r\n\r\n    private static lineToLineIntersection(m: number, q: number, m2: number, q2: number, retIfParallel: any = undefined, retIfCoincident: any = undefined): undefined | GraphPoint {\r\n        if (m === m2) {\r\n            if (q === q2) return retIfCoincident;\r\n            return retIfParallel;\r\n        }\r\n        if (m === Number.POSITIVE_INFINITY || m === Number.NEGATIVE_INFINITY || m2 === Number.POSITIVE_INFINITY || m2 === Number.NEGATIVE_INFINITY) {\r\n            // m or m2 are a vertical line, Q must be invalid too and i don't have a single point of the line.\r\n            // it's actually infinite possible vertical parallel lines.\r\n            return undefined;\r\n        }\r\n        /*\r\n            y = mx + q\r\n            y = nx + w\r\n            -->\r\n            mx + q = nx + w\r\n            -->\r\n            mx - nx = w - q\r\n            -->\r\n            x (m - n) = w - q\r\n            -->\r\n            x = (w - q)/(m - n)\r\n        */\r\n        let x = (q2-q)/(m-m2);\r\n        return new GraphPoint(x, m*x+q); }\r\n    // @param start, end: are for determining direction. every m is a line that can be seen in 2 direction\r\n    static mToRad(m: number, start: GraphPoint, end: GraphPoint): number {\r\n        let rad: number;\r\n        if (start.x === end.x) {\r\n            rad = (start.y < end.y) ? Math.PI * 3/2 :  Math.PI / 2;\r\n        } else {\r\n            // console.log(\"rad diagonal\", {base:  Math.atan(m), add: start.x > end.x, sx: start.x, ex: end.x});\r\n            rad = Math.atan(m) + (start.x > end.x ? 0 : Math.PI);\r\n        }\r\n        return rad; }\r\n\r\n    // intersect a rectangle with a line or segment (if end parameter is specified)\r\n    // @return: [0, 2] intersections\r\n    static lineToSizeIntersection_TODO(size: GraphSize, m: number, startLine: GraphPoint, endIfSegment?: GraphPoint): [] | [GraphPoint] | [GraphPoint, GraphPoint] {\r\n         // todo: use GraphSize.closestIntersection which is close. it is size-segment returning only the closest intersection\r\n        return [];\r\n    }\r\n}\r\n\r\nRuntimeAccessibleClass.set_extend(RuntimeAccessibleClass, Geom);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}