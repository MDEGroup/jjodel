{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SubstringExpression = void 0;\nvar Expression_1 = require(\"../Expression\");\n/**\n * Returns a string containing all characters from self starting from index *start* up to index *end* included.\n * Both *start* and *end* parameters should be contained between *1* and *self.size()* included.\n * *start* cannot be greater than *end*.\n *\n * @oclExpression String::substring (start : Number, end : Number) : String\n * @oclExample self.name.substring(0,2)\n */\nvar SubstringExpression = /** @class */function (_super) {\n  __extends(SubstringExpression, _super);\n  function SubstringExpression() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  SubstringExpression.prototype.evaluate = function (visitor, localVariables) {\n    var source = this.getSource().evaluate(visitor, localVariables);\n    if (!this.getBody()) {\n      return source;\n    }\n    var start;\n    var end;\n    if (Array.isArray(this.getBody())) {\n      start = this.getBody()[0];\n      end = this.getBody()[1];\n    } else {\n      start = this.getBody();\n    }\n    var startIndex = start.evaluate(visitor, localVariables);\n    var endIndex = end ? end.evaluate(visitor, localVariables) : source.length;\n    return source.substring(startIndex, endIndex);\n  };\n  return SubstringExpression;\n}(Expression_1.BodyBasedExpression);\nexports.SubstringExpression = SubstringExpression;","map":{"version":3,"names":["Expression_1","require","SubstringExpression","_super","__extends","prototype","evaluate","visitor","localVariables","source","getSource","getBody","start","end","Array","isArray","startIndex","endIndex","length","substring","BodyBasedExpression","exports"],"sources":["../../../../lib/components/expressions/string/SubstringExpression.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,YAAA,GAAAC,OAAA;AAGA;;;;;;;;AAQA,IAAAC,mBAAA,0BAAAC,MAAA;EAAyCC,SAAA,CAAAF,mBAAA,EAAAC,MAAA;EAAzC,SAAAD,oBAAA;;EAsBA;EArBIA,mBAAA,CAAAG,SAAA,CAAAC,QAAQ,GAAR,UAASC,OAA4B,EAAEC,cAAoB;IACvD,IAAMC,MAAM,GAAG,IAAI,CAACC,SAAS,EAAE,CAACJ,QAAQ,CAACC,OAAO,EAAEC,cAAc,CAAC;IAEjE,IAAI,CAAC,IAAI,CAACG,OAAO,EAAE,EAAE;MACjB,OAAOF,MAAM;;IAGjB,IAAIG,KAAK;IACT,IAAIC,GAAG;IACP,IAAIC,KAAK,CAACC,OAAO,CAAC,IAAI,CAACJ,OAAO,EAAE,CAAC,EAAE;MAC/BC,KAAK,GAAG,IAAI,CAACD,OAAO,EAAE,CAAC,CAAC,CAAC;MACzBE,GAAG,GAAG,IAAI,CAACF,OAAO,EAAE,CAAC,CAAC,CAAC;KAC1B,MAAM;MACHC,KAAK,GAAG,IAAI,CAACD,OAAO,EAAE;;IAG1B,IAAMK,UAAU,GAAGJ,KAAK,CAACN,QAAQ,CAACC,OAAO,EAAEC,cAAc,CAAC;IAC1D,IAAMS,QAAQ,GAAGJ,GAAG,GAAGA,GAAG,CAACP,QAAQ,CAACC,OAAO,EAAEC,cAAc,CAAC,GAAGC,MAAM,CAACS,MAAM;IAE5E,OAAOT,MAAM,CAACU,SAAS,CAACH,UAAU,EAAEC,QAAQ,CAAC;EACjD,CAAC;EACL,OAAAf,mBAAC;AAAD,CAAC,CAtBwCF,YAAA,CAAAoB,mBAAmB;AAA/CC,OAAA,CAAAnB,mBAAA,GAAAA,mBAAA"},"metadata":{},"sourceType":"script"}