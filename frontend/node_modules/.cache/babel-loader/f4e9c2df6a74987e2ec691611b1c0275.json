{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OclEngine = void 0;\nvar pkg = require(\"../../package.json\");\nvar OclParser_1 = require(\"./parser/OclParser\");\nvar Utils_1 = require(\"./Utils\");\nvar OclExecutionContext_1 = require(\"./OclExecutionContext\");\nvar OclResult_1 = require(\"./OclResult\");\n/**\n * The OclEngine class is the main entry point to the OCL.js library.\n *\n * This class allows to add new OCL expressions as well as evaluating given objects agains the saved OCL expressions.\n */\nvar OclEngine = /** @class */function () {\n  function OclEngine() {\n    this.packageDeclarations = [];\n    this.registeredTypes = OclParser_1.OclParser.registeredTypes;\n    this.registeredEnums = OclParser_1.OclParser.registeredEnums;\n  }\n  /**\n   * Static create method.\n   *\n   * @returns a fresh new instance of the OclEngine\n   */\n  OclEngine.create = function () {\n    return new OclEngine();\n  };\n  /**\n   * Set a TypeDeterminer function that receives an object and returns the type of the object.\n   *\n   * @param fn A callback function that is used to determine the type if the object that is passed into the callback function\n   */\n  OclEngine.prototype.setTypeDeterminer = function (fn) {\n    if (typeof fn === 'function') {\n      OclEngine.Utils.typeDeterminerFn = fn;\n    }\n  };\n  /**\n   * Register additional object types in the engine which than can be used for instanceof checking.\n   *\n   * The following build-in JavaScript types are already registered:\n   *  - Array\n   *  - Boolean\n   *  - Function\n   *  - Number\n   *  - Object\n   *  - String\n   *\n   * @param types A list of types to register\n   */\n  OclEngine.prototype.registerTypes = function (types) {\n    this.registeredTypes = __assign(__assign({}, this.registeredTypes), types);\n    OclParser_1.OclParser.registeredTypes = this.registeredTypes;\n  };\n  OclEngine.prototype.registerEnum = function (name, values) {\n    var _a;\n    this.registeredEnums = __assign(__assign({}, this.registeredEnums), (_a = {}, _a[name] = values, _a));\n    OclParser_1.OclParser.registeredEnums = this.registeredEnums;\n  };\n  /**\n   * Register a list of OCL expressions.\n   *\n   * @param oclExpressions The OCL expressions as string list. It will be parsed and added to the list of existing OCL expressions.\n   * @returns the current OclEngine object for chaining\n   * @param labels Add one or multiple lables to an OCL expression. Labels can be used to address particular expressions\n   *               for evaluation.\n   * @throws ParserError\n   */\n  OclEngine.prototype.addOclExpressions = function (oclExpressions, labels) {\n    var _this = this;\n    if (labels === void 0) {\n      labels = [];\n    }\n    oclExpressions.forEach(function (oclExpression) {\n      return _this.addOclExpression(oclExpression, labels);\n    });\n    return this;\n  };\n  /**\n   * Register a new OCL expression.\n   *\n   * Each OCL expression is added to a map of OCL expressions where the context is the key:\n   * <pre>\n   *     context Person inv: ...\n   * </pre>\n   *\n   * Will be sorted into the map using \"Person\" as key. This allows faster lookup of OCL rules that should be applied\n   * when running OclEngine.evaluate.\n   *\n   * @param oclExpression The OCL expression as string. It will be parsed and added to the list of existing OCL expressions.\n   * @param labels Add one or multiple lables to an OCL expression. Labels can be used to address particular expressions\n   *               for evaluation.\n   * @returns the current OclEngine object for chaining\n   * @throws ParserError\n   */\n  OclEngine.prototype.addOclExpression = function (oclExpression, labels) {\n    if (labels === void 0) {\n      labels = [];\n    }\n    try {\n      var parsedExpression = OclEngine.Parser.parse(oclExpression, labels, this.registeredTypes);\n      this.packageDeclarations.push(parsedExpression);\n    } catch (e) {\n      e.oclExpression = oclExpression;\n      throw e;\n    }\n    return this;\n  };\n  /**\n   * Removes the given oclExpression if it has been registered to the OclEngine instance.\n   *\n   * @param oclExpression\n   */\n  OclEngine.prototype.removeOclExpression = function (oclExpression) {\n    this.packageDeclarations = this.packageDeclarations.filter(function (packageDeclaration) {\n      return Utils_1.Utils.hashCode(packageDeclaration.getRawOclExpression()) !== Utils_1.Utils.hashCode(oclExpression);\n    });\n    return this;\n  };\n  /**\n   * Clears all registered OclExpressions from the current OclEngine instance.\n   */\n  OclEngine.prototype.clearAllOclExpressions = function () {\n    this.packageDeclarations.length = 0;\n    return this;\n  };\n  /**\n   * This function actually evaluates the given object against the registered OCL expressions.\n   *\n   * @param obj The object which is going to be evaluated against registered OCL expressions.\n   * @param labels An array of labels that address expressions that should be evaluated.\n   * @returns a result object, which contains the actual result and other info @see OclResult\n   */\n  OclEngine.prototype.evaluate = function (obj, labels) {\n    if (labels === void 0) {\n      labels = [];\n    }\n    var visitor = new OclExecutionContext_1.OclExecutionContext(obj, Array.isArray(labels) ? labels : [labels]);\n    visitor.registerTypes(this.registeredTypes);\n    visitor.setRegisteredEnumerations(this.registeredEnums);\n    this.packageDeclarations.forEach(function (e) {\n      return e.evaluate(visitor);\n    });\n    return new OclResult_1.OclResult(visitor.getFailedInvariants().map(function (inv) {\n      return inv.getName();\n    }), visitor.getEvaluatedContexts());\n  };\n  OclEngine.prototype._inferType = function (obj) {\n    return Utils_1.Utils.getClassName(obj);\n  };\n  /**\n   * Specify a OCL query that can be used to extract information from an object.\n   *\n   * @example oclEngine.createQuery('self.children.name') // Returns an array of the children's names\n   * @param oclExpression An OCL expression that is used to create a query of\n   * @returns Expression The AST of the parsed oclExpresion\n   */\n  OclEngine.prototype.createQuery = function (oclExpression) {\n    return OclEngine.Parser.parseQuery(oclExpression, this.registeredTypes);\n  };\n  /**\n   * Execute a given OCL query on a given object.\n   *\n   * @param obj The object to query\n   * @param oclExpression The query to run on the given object\n   * @returns the result of the provided query.\n   */\n  OclEngine.prototype.evaluateQuery = function (obj, oclExpression) {\n    var visitor = new OclExecutionContext_1.OclExecutionContext(obj);\n    visitor.registerTypes(this.registeredTypes);\n    return oclExpression.evaluate(visitor);\n  };\n  OclEngine.version = pkg.version;\n  OclEngine.Utils = Utils_1.Utils;\n  OclEngine.Parser = OclParser_1.OclParser;\n  return OclEngine;\n}();\nexports.OclEngine = OclEngine;","map":{"version":3,"names":["pkg","require","OclParser_1","Utils_1","OclExecutionContext_1","OclResult_1","OclEngine","packageDeclarations","registeredTypes","OclParser","registeredEnums","create","prototype","setTypeDeterminer","fn","Utils","typeDeterminerFn","registerTypes","types","__assign","registerEnum","name","values","_a","addOclExpressions","oclExpressions","labels","_this","forEach","oclExpression","addOclExpression","parsedExpression","Parser","parse","push","e","removeOclExpression","filter","packageDeclaration","hashCode","getRawOclExpression","clearAllOclExpressions","length","evaluate","obj","visitor","OclExecutionContext","Array","isArray","setRegisteredEnumerations","OclResult","getFailedInvariants","map","inv","getName","getEvaluatedContexts","_inferType","getClassName","createQuery","parseQuery","evaluateQuery","version","exports"],"sources":["../../lib/components/OclEngine.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}