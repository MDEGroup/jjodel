{"ast":null,"code":"/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\nvar docblockRe = /^\\s*(\\/\\*\\*(.|\\r?\\n)*?\\*\\/)/;\nvar ltrimRe = /^\\s*/;\n/**\n * @param {String} contents\n * @return {String}\n */\nfunction extract(contents) {\n  var match = contents.match(docblockRe);\n  if (match) {\n    return match[0].replace(ltrimRe, '') || '';\n  }\n  return '';\n}\nvar commentStartRe = /^\\/\\*\\*?/;\nvar commentEndRe = /\\*+\\/$/;\nvar wsRe = /[\\t ]+/g;\nvar stringStartRe = /(\\r?\\n|^) *\\*/g;\nvar multilineRe = /(?:^|\\r?\\n) *(@[^\\r\\n]*?) *\\r?\\n *([^@\\r\\n\\s][^@\\r\\n]+?) *\\r?\\n/g;\nvar propertyRe = /(?:^|\\r?\\n) *@(\\S+) *([^\\r\\n]*)/g;\n\n/**\n * @param {String} contents\n * @return {Array}\n */\nfunction parse(docblock) {\n  docblock = docblock.replace(commentStartRe, '').replace(commentEndRe, '').replace(wsRe, ' ').replace(stringStartRe, '$1');\n\n  // Normalize multi-line directives\n  var prev = '';\n  while (prev != docblock) {\n    prev = docblock;\n    docblock = docblock.replace(multilineRe, \"\\n$1 $2\\n\");\n  }\n  docblock = docblock.trim();\n  var result = [];\n  var match;\n  while (match = propertyRe.exec(docblock)) {\n    result.push([match[1], match[2]]);\n  }\n  return result;\n}\n\n/**\n * Same as parse but returns an object of prop: value instead of array of paris\n * If a property appers more than once the last one will be returned\n *\n * @param {String} contents\n * @return {Object}\n */\nfunction parseAsObject(docblock) {\n  var pairs = parse(docblock);\n  var result = {};\n  for (var i = 0; i < pairs.length; i++) {\n    result[pairs[i][0]] = pairs[i][1];\n  }\n  return result;\n}\nexports.extract = extract;\nexports.parse = parse;\nexports.parseAsObject = parseAsObject;","map":{"version":3,"names":["docblockRe","ltrimRe","extract","contents","match","replace","commentStartRe","commentEndRe","wsRe","stringStartRe","multilineRe","propertyRe","parse","docblock","prev","trim","result","exec","push","parseAsObject","pairs","i","length","exports"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/node_modules/jstransform/src/docblock.js"],"sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\nvar docblockRe = /^\\s*(\\/\\*\\*(.|\\r?\\n)*?\\*\\/)/;\nvar ltrimRe = /^\\s*/;\n/**\n * @param {String} contents\n * @return {String}\n */\nfunction extract(contents) {\n  var match = contents.match(docblockRe);\n  if (match) {\n    return match[0].replace(ltrimRe, '') || '';\n  }\n  return '';\n}\n\n\nvar commentStartRe = /^\\/\\*\\*?/;\nvar commentEndRe = /\\*+\\/$/;\nvar wsRe = /[\\t ]+/g;\nvar stringStartRe = /(\\r?\\n|^) *\\*/g;\nvar multilineRe = /(?:^|\\r?\\n) *(@[^\\r\\n]*?) *\\r?\\n *([^@\\r\\n\\s][^@\\r\\n]+?) *\\r?\\n/g;\nvar propertyRe = /(?:^|\\r?\\n) *@(\\S+) *([^\\r\\n]*)/g;\n\n/**\n * @param {String} contents\n * @return {Array}\n */\nfunction parse(docblock) {\n  docblock = docblock\n    .replace(commentStartRe, '')\n    .replace(commentEndRe, '')\n    .replace(wsRe, ' ')\n    .replace(stringStartRe, '$1');\n\n  // Normalize multi-line directives\n  var prev = '';\n  while (prev != docblock) {\n    prev = docblock;\n    docblock = docblock.replace(multilineRe, \"\\n$1 $2\\n\");\n  }\n  docblock = docblock.trim();\n\n  var result = [];\n  var match;\n  while (match = propertyRe.exec(docblock)) {\n    result.push([match[1], match[2]]);\n  }\n\n  return result;\n}\n\n/**\n * Same as parse but returns an object of prop: value instead of array of paris\n * If a property appers more than once the last one will be returned\n *\n * @param {String} contents\n * @return {Object}\n */\nfunction parseAsObject(docblock) {\n  var pairs = parse(docblock);\n  var result = {};\n  for (var i = 0; i < pairs.length; i++) {\n    result[pairs[i][0]] = pairs[i][1];\n  }\n  return result;\n}\n\n\nexports.extract = extract;\nexports.parse = parse;\nexports.parseAsObject = parseAsObject;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,UAAU,GAAG,6BAA6B;AAC9C,IAAIC,OAAO,GAAG,MAAM;AACpB;AACA;AACA;AACA;AACA,SAASC,OAAOA,CAACC,QAAQ,EAAE;EACzB,IAAIC,KAAK,GAAGD,QAAQ,CAACC,KAAK,CAACJ,UAAU,CAAC;EACtC,IAAII,KAAK,EAAE;IACT,OAAOA,KAAK,CAAC,CAAC,CAAC,CAACC,OAAO,CAACJ,OAAO,EAAE,EAAE,CAAC,IAAI,EAAE;EAC5C;EACA,OAAO,EAAE;AACX;AAGA,IAAIK,cAAc,GAAG,UAAU;AAC/B,IAAIC,YAAY,GAAG,QAAQ;AAC3B,IAAIC,IAAI,GAAG,SAAS;AACpB,IAAIC,aAAa,GAAG,gBAAgB;AACpC,IAAIC,WAAW,GAAG,kEAAkE;AACpF,IAAIC,UAAU,GAAG,kCAAkC;;AAEnD;AACA;AACA;AACA;AACA,SAASC,KAAKA,CAACC,QAAQ,EAAE;EACvBA,QAAQ,GAAGA,QAAQ,CAChBR,OAAO,CAACC,cAAc,EAAE,EAAE,CAAC,CAC3BD,OAAO,CAACE,YAAY,EAAE,EAAE,CAAC,CACzBF,OAAO,CAACG,IAAI,EAAE,GAAG,CAAC,CAClBH,OAAO,CAACI,aAAa,EAAE,IAAI,CAAC;;EAE/B;EACA,IAAIK,IAAI,GAAG,EAAE;EACb,OAAOA,IAAI,IAAID,QAAQ,EAAE;IACvBC,IAAI,GAAGD,QAAQ;IACfA,QAAQ,GAAGA,QAAQ,CAACR,OAAO,CAACK,WAAW,EAAE,WAAW,CAAC;EACvD;EACAG,QAAQ,GAAGA,QAAQ,CAACE,IAAI,CAAC,CAAC;EAE1B,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIZ,KAAK;EACT,OAAOA,KAAK,GAAGO,UAAU,CAACM,IAAI,CAACJ,QAAQ,CAAC,EAAE;IACxCG,MAAM,CAACE,IAAI,CAAC,CAACd,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EACnC;EAEA,OAAOY,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,aAAaA,CAACN,QAAQ,EAAE;EAC/B,IAAIO,KAAK,GAAGR,KAAK,CAACC,QAAQ,CAAC;EAC3B,IAAIG,MAAM,GAAG,CAAC,CAAC;EACf,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;IACrCL,MAAM,CAACI,KAAK,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGD,KAAK,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC;EACnC;EACA,OAAOL,MAAM;AACf;AAGAO,OAAO,CAACrB,OAAO,GAAGA,OAAO;AACzBqB,OAAO,CAACX,KAAK,GAAGA,KAAK;AACrBW,OAAO,CAACJ,aAAa,GAAGA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script"}