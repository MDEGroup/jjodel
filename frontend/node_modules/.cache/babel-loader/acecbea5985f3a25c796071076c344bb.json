{"ast":null,"code":"import React from 'react';\nimport { DragDropDiv } from \"./dragdrop/DragDropDiv\";\nclass BoxDataCache {\n  constructor(data) {\n    this.beforeSize = 0;\n    this.beforeMinSize = 0;\n    this.afterSize = 0;\n    this.afterMinSize = 0;\n    this.element = data.element;\n    this.beforeDivider = data.beforeDivider;\n    this.afterDivider = data.afterDivider;\n    for (let child of this.beforeDivider) {\n      this.beforeSize += child.size;\n      if (child.minSize > 0) {\n        this.beforeMinSize += child.minSize;\n      }\n    }\n    for (let child of this.afterDivider) {\n      this.afterSize += child.size;\n      if (child.minSize > 0) {\n        this.afterMinSize += child.minSize;\n      }\n    }\n  }\n}\n// split size among children\nfunction spiltSize(newSize, oldSize, children) {\n  let reservedSize = -1;\n  let sizes = [];\n  let requiredMinSize = 0;\n  while (requiredMinSize !== reservedSize) {\n    reservedSize = requiredMinSize;\n    requiredMinSize = 0;\n    let ratio = (newSize - reservedSize) / (oldSize - reservedSize);\n    if (!(ratio >= 0)) {\n      // invalid input\n      break;\n    }\n    for (let i = 0; i < children.length; ++i) {\n      let size = children[i].size * ratio;\n      if (size < children[i].minSize) {\n        size = children[i].minSize;\n        requiredMinSize += size;\n      }\n      sizes[i] = size;\n    }\n  }\n  return sizes;\n}\nexport class Divider extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n    this.startDrag = e => {\n      this.boxData = new BoxDataCache(this.props.getDividerData(this.props.idx));\n      e.startDrag(this.boxData.element, null);\n    };\n    this.dragMove = e => {\n      if (e.event.shiftKey || e.event.ctrlKey || e.event.altKey) {\n        this.dragMoveAll(e, e.dx, e.dy);\n      } else {\n        this.dragMove2(e, e.dx, e.dy);\n      }\n    };\n    this.dragEnd = e => {\n      let {\n        onDragEnd\n      } = this.props;\n      this.boxData = null;\n      if (onDragEnd) {\n        onDragEnd();\n      }\n    };\n  }\n  dragMove2(e, dx, dy) {\n    let {\n      isVertical,\n      changeSizes\n    } = this.props;\n    let {\n      beforeDivider,\n      afterDivider\n    } = this.boxData;\n    if (!(beforeDivider.length && afterDivider.length)) {\n      // invalid input\n      return;\n    }\n    let d = isVertical ? dy : dx;\n    let leftChild = beforeDivider[beforeDivider.length - 1];\n    let rightCild = afterDivider[0];\n    let leftSize = leftChild.size + d;\n    let rightSize = rightCild.size - d;\n    // check min size\n    if (d > 0) {\n      if (rightSize < rightCild.minSize) {\n        rightSize = rightCild.minSize;\n        leftSize = leftChild.size + rightCild.size - rightSize;\n      }\n    } else if (leftSize < leftChild.minSize) {\n      leftSize = leftChild.minSize;\n      rightSize = leftChild.size + rightCild.size - leftSize;\n    }\n    let sizes = beforeDivider.concat(afterDivider).map(child => child.size);\n    sizes[beforeDivider.length - 1] = leftSize;\n    sizes[beforeDivider.length] = rightSize;\n    changeSizes(sizes);\n  }\n  dragMoveAll(e, dx, dy) {\n    let {\n      isVertical,\n      changeSizes\n    } = this.props;\n    let {\n      beforeSize,\n      beforeMinSize,\n      afterSize,\n      afterMinSize,\n      beforeDivider,\n      afterDivider\n    } = this.boxData;\n    let d = isVertical ? dy : dx;\n    let newBeforeSize = beforeSize + d;\n    let newAfterSize = afterSize - d;\n    // check total min size\n    if (d > 0) {\n      if (newAfterSize < afterMinSize) {\n        newAfterSize = afterMinSize;\n        newBeforeSize = beforeSize + afterSize - afterMinSize;\n      }\n    } else if (newBeforeSize < beforeMinSize) {\n      newBeforeSize = beforeMinSize;\n      newAfterSize = beforeSize + afterSize - beforeMinSize;\n    }\n    changeSizes(spiltSize(newBeforeSize, beforeSize, beforeDivider).concat(spiltSize(newAfterSize, afterSize, afterDivider)));\n  }\n  render() {\n    let {\n      className\n    } = this.props;\n    if (!className) {\n      className = 'dock-divider';\n    }\n    return React.createElement(DragDropDiv, {\n      className: className,\n      onDragStartT: this.startDrag,\n      onDragMoveT: this.dragMove,\n      onDragEndT: this.dragEnd\n    });\n  }\n}","map":{"version":3,"names":["React","DragDropDiv","BoxDataCache","constructor","data","beforeSize","beforeMinSize","afterSize","afterMinSize","element","beforeDivider","afterDivider","child","size","minSize","spiltSize","newSize","oldSize","children","reservedSize","sizes","requiredMinSize","ratio","i","length","Divider","PureComponent","arguments","startDrag","e","boxData","props","getDividerData","idx","dragMove","event","shiftKey","ctrlKey","altKey","dragMoveAll","dx","dy","dragMove2","dragEnd","onDragEnd","isVertical","changeSizes","d","leftChild","rightCild","leftSize","rightSize","concat","map","newBeforeSize","newAfterSize","render","className","createElement","onDragStartT","onDragMoveT","onDragEndT"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/node_modules/rc-dock/es/Divider.js"],"sourcesContent":["import React from 'react';\nimport { DragDropDiv } from \"./dragdrop/DragDropDiv\";\nclass BoxDataCache {\n    constructor(data) {\n        this.beforeSize = 0;\n        this.beforeMinSize = 0;\n        this.afterSize = 0;\n        this.afterMinSize = 0;\n        this.element = data.element;\n        this.beforeDivider = data.beforeDivider;\n        this.afterDivider = data.afterDivider;\n        for (let child of this.beforeDivider) {\n            this.beforeSize += child.size;\n            if (child.minSize > 0) {\n                this.beforeMinSize += child.minSize;\n            }\n        }\n        for (let child of this.afterDivider) {\n            this.afterSize += child.size;\n            if (child.minSize > 0) {\n                this.afterMinSize += child.minSize;\n            }\n        }\n    }\n}\n// split size among children\nfunction spiltSize(newSize, oldSize, children) {\n    let reservedSize = -1;\n    let sizes = [];\n    let requiredMinSize = 0;\n    while (requiredMinSize !== reservedSize) {\n        reservedSize = requiredMinSize;\n        requiredMinSize = 0;\n        let ratio = (newSize - reservedSize) / (oldSize - reservedSize);\n        if (!(ratio >= 0)) {\n            // invalid input\n            break;\n        }\n        for (let i = 0; i < children.length; ++i) {\n            let size = children[i].size * ratio;\n            if (size < children[i].minSize) {\n                size = children[i].minSize;\n                requiredMinSize += size;\n            }\n            sizes[i] = size;\n        }\n    }\n    return sizes;\n}\nexport class Divider extends React.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.startDrag = (e) => {\n            this.boxData = new BoxDataCache(this.props.getDividerData(this.props.idx));\n            e.startDrag(this.boxData.element, null);\n        };\n        this.dragMove = (e) => {\n            if (e.event.shiftKey || e.event.ctrlKey || e.event.altKey) {\n                this.dragMoveAll(e, e.dx, e.dy);\n            }\n            else {\n                this.dragMove2(e, e.dx, e.dy);\n            }\n        };\n        this.dragEnd = (e) => {\n            let { onDragEnd } = this.props;\n            this.boxData = null;\n            if (onDragEnd) {\n                onDragEnd();\n            }\n        };\n    }\n    dragMove2(e, dx, dy) {\n        let { isVertical, changeSizes } = this.props;\n        let { beforeDivider, afterDivider } = this.boxData;\n        if (!(beforeDivider.length && afterDivider.length)) {\n            // invalid input\n            return;\n        }\n        let d = isVertical ? dy : dx;\n        let leftChild = beforeDivider[beforeDivider.length - 1];\n        let rightCild = afterDivider[0];\n        let leftSize = leftChild.size + d;\n        let rightSize = rightCild.size - d;\n        // check min size\n        if (d > 0) {\n            if (rightSize < rightCild.minSize) {\n                rightSize = rightCild.minSize;\n                leftSize = leftChild.size + rightCild.size - rightSize;\n            }\n        }\n        else if (leftSize < leftChild.minSize) {\n            leftSize = leftChild.minSize;\n            rightSize = leftChild.size + rightCild.size - leftSize;\n        }\n        let sizes = beforeDivider.concat(afterDivider).map((child) => child.size);\n        sizes[beforeDivider.length - 1] = leftSize;\n        sizes[beforeDivider.length] = rightSize;\n        changeSizes(sizes);\n    }\n    dragMoveAll(e, dx, dy) {\n        let { isVertical, changeSizes } = this.props;\n        let { beforeSize, beforeMinSize, afterSize, afterMinSize, beforeDivider, afterDivider } = this.boxData;\n        let d = isVertical ? dy : dx;\n        let newBeforeSize = beforeSize + d;\n        let newAfterSize = afterSize - d;\n        // check total min size\n        if (d > 0) {\n            if (newAfterSize < afterMinSize) {\n                newAfterSize = afterMinSize;\n                newBeforeSize = beforeSize + afterSize - afterMinSize;\n            }\n        }\n        else if (newBeforeSize < beforeMinSize) {\n            newBeforeSize = beforeMinSize;\n            newAfterSize = beforeSize + afterSize - beforeMinSize;\n        }\n        changeSizes(spiltSize(newBeforeSize, beforeSize, beforeDivider).concat(spiltSize(newAfterSize, afterSize, afterDivider)));\n    }\n    render() {\n        let { className } = this.props;\n        if (!className) {\n            className = 'dock-divider';\n        }\n        return (React.createElement(DragDropDiv, { className: className, onDragStartT: this.startDrag, onDragMoveT: this.dragMove, onDragEndT: this.dragEnd }));\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}