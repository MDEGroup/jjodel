{"ast":null,"code":"// import {\n//     DState,\n//     DUser,\n//     DViewPoint,\n//     LProject,\n//     LUser,\n//     LViewElement,\n//     LViewPoint,\n//     Pointer,\n//     SetFieldAction,\n//     U\n// } from '../../joiner';\n// import {FakeStateProps} from '../../joiner/types';\n// import React, {Component, Dispatch, ReactElement, useState} from 'react';\n// import {connect} from 'react-redux';\n// import './style.scss';\n//\n//\n// function ViewpointsComponent(props: AllProps) {\n//     const {viewpoints, project} = props;\n//     const [clicked, setClicked] = useState({viewpointID: '', x: 0, y: 0});\n//\n//     const create = () => {\n//         setClicked({viewpointID: '', x: 0, y: 0})\n//         let name = 'viewpoint_' + 0;\n//         let viewpointNames: string[] = viewpoints.map(vp => vp && vp.name);\n//         name = U.increaseEndingNumber(name, false, false, newName => viewpointNames.indexOf(newName) >= 0);\n//         DViewPoint.new2(name, '', (d) => { d.isExclusiveView = !(d.isValidation = /*props.validation*/ false); } );\n//     }\n//     const remove = (pointer: Pointer<LViewPoint>) => {\n//         setClicked({viewpointID: '', x: 0, y: 0})\n//         const vp: LViewPoint = LViewPoint.fromPointer(pointer);\n//         SetFieldAction.new(project.id, 'viewpoints', vp.id as any, '-=', false);\n//         vp.subViews.map(v => v.delete());\n//         vp.delete();\n//     }\n//     const select = (pointer: Pointer<LViewPoint>) => {\n//         setClicked({viewpointID: '', x: 0, y: 0})\n//         const vp: LViewPoint = LViewPoint.fromPointer(pointer);\n//         project.activeViewpoint = vp;\n//     }\n//     const duplicate = (pointer: Pointer<LViewPoint>) => {\n//         setClicked({viewpointID: '', x: 0, y: 0})\n//         const vp: LViewPoint = LViewPoint.fromPointer(pointer);\n//         vp.duplicate(true);\n//     }\n//     const exclusive = (pointer: Pointer<LViewPoint>) => {\n//         setClicked({viewpointID: '', x: 0, y: 0})\n//         const vp: LViewPoint = LViewPoint.fromPointer(pointer);\n//         vp.isExclusiveView = !vp.isExclusiveView;\n//     }\n//\n//     return(<section className={'p-2'}>\n//         <div className={'v-container'}>\n//             <label className={'text-primary'} onClick={e => create()}>\n//                 Create new...\n//             </label>\n//         </div>\n//         {viewpoints.map(v => <div className={'v-container'}>\n//             <label className={v.id === clicked.viewpointID ? 'clicked' : ''}\n//                    onClick={e => setClicked({viewpointID: v.id, x: e.clientX, y: e.clientY})}\n//                    onContextMenu={e => setClicked({viewpointID: v.id, x: e.clientX, y: e.clientY})} >\n//                 {v.name}\n//                 {project.activeViewpoint.id === v.id && <i className={'bi bi-check-lg text-success ms-2'} />}\n//                 {v.isExclusiveView && <i className={'bi bi-exclamation-lg text-danger ms-1'} />}\n//             </label>\n//             {clicked.viewpointID === v.id && <div className={'v-panel rounded border p-2 v-menu'}>\n//                 <label className={'v-link'} onClick={e => select(clicked.viewpointID)}>Activate</label>\n//                 <label className={'v-link'} onClick={e => exclusive(clicked.viewpointID)}>Exclusive</label>\n//                 <label className={'v-link'} onClick={e => duplicate(clicked.viewpointID)}>Duplicate</label>\n//                 <label className={'v-link'} onClick={e => remove(clicked.viewpointID)}>Delete</label>\n//                 <label className={'v-link text-danger'} onClick={e => setClicked({viewpointID: '', x: 0, y: 0})}>Close</label>\n//             </div>}\n//         </div>)}\n//     </section>);\n// }\n//\n// interface OwnProps {}\n// interface StateProps {\n//     viewpoints: LViewPoint[]\n//     project: LProject\n// }\n// interface DispatchProps {}\n//\n// type AllProps = OwnProps & StateProps & DispatchProps;\n//\n// function mapStateToProps(state: DState, ownProps: OwnProps): StateProps {\n//     const ret: StateProps = {} as FakeStateProps;\n//     ret.viewpoints = LViewPoint.fromArr(state.viewpoints);\n//     const user = LUser.fromPointer(DUser.current);\n//     ret.project = U.wrapper<LProject>(user.project);\n//     return ret;\n// }\n//\n// function mapDispatchToProps(dispatch: Dispatch<any>): DispatchProps {\n//     const ret: DispatchProps = {} as any;\n//     return ret;\n// }\n//\n//\n// export const ViewpointsConnected = connect<StateProps, DispatchProps, OwnProps, DState>(\n//     mapStateToProps,\n//     mapDispatchToProps\n// )(ViewpointsComponent);\n//\n// export const Viewpoints = (props: OwnProps, children: (string | Component)[] = []): ReactElement => {\n//     return <ViewpointsConnected {...{...props, children}} />;\n// }\n// export default Viewpoints;\nexport const deleted = true;","map":{"version":3,"names":["deleted"],"sources":["C:/d/Programming/web/jodel-mde/src/components/editors/Viewpoints.tsx"],"sourcesContent":["// import {\r\n//     DState,\r\n//     DUser,\r\n//     DViewPoint,\r\n//     LProject,\r\n//     LUser,\r\n//     LViewElement,\r\n//     LViewPoint,\r\n//     Pointer,\r\n//     SetFieldAction,\r\n//     U\r\n// } from '../../joiner';\r\n// import {FakeStateProps} from '../../joiner/types';\r\n// import React, {Component, Dispatch, ReactElement, useState} from 'react';\r\n// import {connect} from 'react-redux';\r\n// import './style.scss';\r\n//\r\n//\r\n// function ViewpointsComponent(props: AllProps) {\r\n//     const {viewpoints, project} = props;\r\n//     const [clicked, setClicked] = useState({viewpointID: '', x: 0, y: 0});\r\n//\r\n//     const create = () => {\r\n//         setClicked({viewpointID: '', x: 0, y: 0})\r\n//         let name = 'viewpoint_' + 0;\r\n//         let viewpointNames: string[] = viewpoints.map(vp => vp && vp.name);\r\n//         name = U.increaseEndingNumber(name, false, false, newName => viewpointNames.indexOf(newName) >= 0);\r\n//         DViewPoint.new2(name, '', (d) => { d.isExclusiveView = !(d.isValidation = /*props.validation*/ false); } );\r\n//     }\r\n//     const remove = (pointer: Pointer<LViewPoint>) => {\r\n//         setClicked({viewpointID: '', x: 0, y: 0})\r\n//         const vp: LViewPoint = LViewPoint.fromPointer(pointer);\r\n//         SetFieldAction.new(project.id, 'viewpoints', vp.id as any, '-=', false);\r\n//         vp.subViews.map(v => v.delete());\r\n//         vp.delete();\r\n//     }\r\n//     const select = (pointer: Pointer<LViewPoint>) => {\r\n//         setClicked({viewpointID: '', x: 0, y: 0})\r\n//         const vp: LViewPoint = LViewPoint.fromPointer(pointer);\r\n//         project.activeViewpoint = vp;\r\n//     }\r\n//     const duplicate = (pointer: Pointer<LViewPoint>) => {\r\n//         setClicked({viewpointID: '', x: 0, y: 0})\r\n//         const vp: LViewPoint = LViewPoint.fromPointer(pointer);\r\n//         vp.duplicate(true);\r\n//     }\r\n//     const exclusive = (pointer: Pointer<LViewPoint>) => {\r\n//         setClicked({viewpointID: '', x: 0, y: 0})\r\n//         const vp: LViewPoint = LViewPoint.fromPointer(pointer);\r\n//         vp.isExclusiveView = !vp.isExclusiveView;\r\n//     }\r\n//\r\n//     return(<section className={'p-2'}>\r\n//         <div className={'v-container'}>\r\n//             <label className={'text-primary'} onClick={e => create()}>\r\n//                 Create new...\r\n//             </label>\r\n//         </div>\r\n//         {viewpoints.map(v => <div className={'v-container'}>\r\n//             <label className={v.id === clicked.viewpointID ? 'clicked' : ''}\r\n//                    onClick={e => setClicked({viewpointID: v.id, x: e.clientX, y: e.clientY})}\r\n//                    onContextMenu={e => setClicked({viewpointID: v.id, x: e.clientX, y: e.clientY})} >\r\n//                 {v.name}\r\n//                 {project.activeViewpoint.id === v.id && <i className={'bi bi-check-lg text-success ms-2'} />}\r\n//                 {v.isExclusiveView && <i className={'bi bi-exclamation-lg text-danger ms-1'} />}\r\n//             </label>\r\n//             {clicked.viewpointID === v.id && <div className={'v-panel rounded border p-2 v-menu'}>\r\n//                 <label className={'v-link'} onClick={e => select(clicked.viewpointID)}>Activate</label>\r\n//                 <label className={'v-link'} onClick={e => exclusive(clicked.viewpointID)}>Exclusive</label>\r\n//                 <label className={'v-link'} onClick={e => duplicate(clicked.viewpointID)}>Duplicate</label>\r\n//                 <label className={'v-link'} onClick={e => remove(clicked.viewpointID)}>Delete</label>\r\n//                 <label className={'v-link text-danger'} onClick={e => setClicked({viewpointID: '', x: 0, y: 0})}>Close</label>\r\n//             </div>}\r\n//         </div>)}\r\n//     </section>);\r\n// }\r\n//\r\n// interface OwnProps {}\r\n// interface StateProps {\r\n//     viewpoints: LViewPoint[]\r\n//     project: LProject\r\n// }\r\n// interface DispatchProps {}\r\n//\r\n// type AllProps = OwnProps & StateProps & DispatchProps;\r\n//\r\n// function mapStateToProps(state: DState, ownProps: OwnProps): StateProps {\r\n//     const ret: StateProps = {} as FakeStateProps;\r\n//     ret.viewpoints = LViewPoint.fromArr(state.viewpoints);\r\n//     const user = LUser.fromPointer(DUser.current);\r\n//     ret.project = U.wrapper<LProject>(user.project);\r\n//     return ret;\r\n// }\r\n//\r\n// function mapDispatchToProps(dispatch: Dispatch<any>): DispatchProps {\r\n//     const ret: DispatchProps = {} as any;\r\n//     return ret;\r\n// }\r\n//\r\n//\r\n// export const ViewpointsConnected = connect<StateProps, DispatchProps, OwnProps, DState>(\r\n//     mapStateToProps,\r\n//     mapDispatchToProps\r\n// )(ViewpointsComponent);\r\n//\r\n// export const Viewpoints = (props: OwnProps, children: (string | Component)[] = []): ReactElement => {\r\n//     return <ViewpointsConnected {...{...props, children}} />;\r\n// }\r\n// export default Viewpoints;\r\nexport const deleted = true;\r\n"],"mappings},"metadata":{},"sourceType":"module"}