@import "./variables";

.REACT-ROOT:not(.debug) .debug{
  display: none;
}
/* classes */
.round { border-radius: $radius; }
.circle { border-radius: 999px !important; }
.bg-smoke { background-color: whitesmoke; }
.class-can-be-extended { border: 2px solid $true !important; border-radius: $radius; }
.class-cannot-be-extended { border: 2px solid $false !important; border-radius: $radius; }
.ui-icon, .ui-widget-content .ui-icon { background-image: none !important; }
.dock-content .dock-tabpane { background-color: whitesmoke; }
.btn-white { background-color: whitesmoke; color: #2e2f34; }
.input { width: 50%; outline: none; font-size: 0.9rem; appearance: none; height: min-content;
  border-radius: $radius; border: 1px solid $border-color; }
.input:focus { border: 1px dashed $border-color; }
.input[type="checkbox"]:focus, .input[type="radio"]:focus { border: none; }
.autosize-input { flex-grow: 1; flex-basis: 10px; }
.hidden-input { border: 1px solid transparent; background-color: transparent; }
.hidden-input:focus { border: 1px dashed $border-color; }
.w-fill { width: $fill; }
.h-fill { height: $fill; }

.autosize-input{
  // opacity:0;
  background: transparent;
  color: transparent;
  caret-color: black;
  position: absolute;
  width: 100%;
  border-color: transparent !important;
  &:focus{ border: 1px solid transparent; }

}
.autosize-input-container.labelstyle{

  &>input,
  &::after{
    margin: 0 !important;
    padding: 0 !important;
    font-weight: lighter;
    height: 21.61px;
  }
  &::after{
    display: block;
    left: -0.91px;
  }
}

.autosize-input-container {
  position: relative;
  &:focus-within{
    border: 1px dashed #0000005c;
    //padding: 0 2.5px; /* input have some margin and border that cannot be erased? always 5?*/
    margin: 0 5px; /* input have some margin and border that cannot be erased? always 5?*/
  }
  &>input,
  &::after{ // input and fake element must have same sizes
    // todo: maybe they can be css variables injected with jsx, so can change ::after css rendering from jsx
    color: transparent !important;
    font-size: 1em !important;
    border-width: 1px !important;
    padding: 0px 2px !important;
    margin: 0 4px !important;
    border-radius: 0.2em !important;
    line-height: 100% !important;
  }
  &::after {
    content: attr(data-value) ' ';
    color: inherit !important;
    border: 1px solid transparent;
    white-space: pre;
    // text-wrap: nowrap; white-space-collapse: pre;

    // below are only necessary for max width
    display: inline-flex;
    max-width: 200px;
    overflow: hidden;
    text-overflow: ellipsis;

  }
}
input[type="color"] {
  cursor: pointer;
  width: 24px;
  height: 24px;
  margin: 0;
  margin-right: 5px;
  vertical-align: middle;
}

input[type="color"] {
  padding: 0;
  vertical-align: middle;
  /*border: none;*/
}

input[type="color"]::-webkit-color-swatch-wrapper {
  /*il "bordo"?*/
  padding: 2px;
}

input[type="color"]::-webkit-color-swatch {
  /*il centro*/
  /*border-radius: 100%;*/
  border: none;
}
input[type='checkbox'] { // was .input as class
  background-image: url("../static/svg/toggle-off.svg");
  background-repeat: no-repeat; background-size: cover;
  width: min-content;
  cursor: pointer;
  padding: 0.9em; // above this, the total height become bigger than a char because of some input native stylings
  scale: 0.9;
  background-color: transparent;
  border: none;
}
input[type='checkbox']:checked { // was .input as class
  background-image: url("../static/svg/toggle-on.svg");
}

.switch {
  background-image: url("../static/svg/switch-off.svg") !important;
}
.switch:checked {
  background-image: url("../static/svg/switch-on.svg") !important;
}

.select {
  width: 50%;
  outline: none;
  font-size: 0.9rem;
  height: min-content;
  border-radius: $radius;
  border: 1px solid $border-color;
}
.select:focus { border: 1px dashed $border-color; }

.btn {
  padding: 0.3em;
  height: min-content; width: fit-content;
  margin-top: auto; margin-bottom: auto;
  line-height: normal;
  border-radius: 0.4em;
}

[data-nodetype="EdgePoint"]{
  pointer-events: all; // fix because edge root have pointerEvents none, and this is contained in edge
}
[data-nodetype="Edge"]{
  position: absolute;
  overflow: visible;
  top: 0;
  height: 0;
}

/* tags */
hr { margin: 0 0 !important; }
label {
  height: min-content;
  font-weight: lighter;
  margin-top: auto; margin-bottom: auto;
}
b {
  height: min-content;
  font-size: 0.9rem;
  font-weight: bolder;
  margin-top: auto; margin-bottom: auto;
}

[rad]{
  transform-origin: center;
  transform: rotate(attr(rad)); // not working properly
}
/*
button:hover{// experimental, doesn't go well because it applies to N parent elements before applying to last node, so it is applied a ton of times.
  filter: hue-rotate(5deg);
}
*/
.button-add{
  background: var(--background-color-add);
  border-color: var(--border-color-1);
  color: var(--palette-w);

  // override bootstrap hover
  // --bs-btn-hover-bg: var(--background-color-add);
  --bs-btn-hover-bg: var(--palette-1);
  --bs-btn-hover-color: var(--palette-w);
  &:hover{
    color: var(--palette-w-hover);
    background: var(--palette-1);
    // filter: hue-rotate(45deg);
  }

}

.monaco-editor-wrapper {
  margin: 5px;
  background: white;
  border-radius: 4px;
}

label.jj-editor-title {
  color: var(--palette-w);
  background-color: var(--palette-3);
  width: fit-content;
  padding: 2px 12px 2px 12px;
  border-radius: 0.4em;
  font-weight: 200;
  // font-size: 1rem;
  //margin-bottom: 6px!important;
}

i.bi {
  color: var(--font-color-1);
  &:hover{
    color: var(--palette-1-hover);
  }
}
.btn i.bi, .bg i.bi{
  color: var(--palette-w);
}
/*
.jj-btn-info, .jj-btn-view, .jj-btn-up, .jj-btn-back {
  font-size: 24px;
  color: var(--font-color-1);
}

.jj-btn-view {
  margin-right: 10px!important;
}

.jj-btn-add {
  margin: 0px !important;
  margin-top: 3px!important;
  margin-right: -9px!important;
  border: none;
  font-size: 24px;
  color: #00A896;
}

.jj-btn-delete {
  margin: 0px !important;
  margin-top: 0px!important;
  font-size: 24px;
  color: #db504a;
  border: none;
  background-color:none;
}*/


.btn-back{
  color: var(--palette-w);
  background: var(--palette-1);
  &:hover{
    color: var(--palette-w-hover);
    background: var(--palette-1-hover);
  }
  i::before{
    scale: 1.4;
  }
  border: none;
  padding: 0;
  width: 1.9em;
  height: 1.9em;
  border-radius: 0.4rem;
  font-size: 1rem;
  line-height: 1.9em;
}

.btn-delete, .btn-clipboard{
  color: var(--palette-w);
  background: var(--palette-g);
  &.btn-delete:hover{
   color: var(--palette-w-hover);
   background: var(--palette-r);
  }
  &.btn-clipboard:hover{
   color: var(--palette-w-hover);
   background: var(--palette-gg);
  }

  border: none;
  padding: 0;
  width: 1.9em;
  height: 1.9em;
  border-radius: 0.4rem;
  font-size: 1rem;
  line-height: 1.9em;

  i::before{
    scale: 1.5;
  }

 }



.jj-conf-area {
  border: none;
  border-radius: 4px;
  padding-left: 10px;
}
