{"ast":null,"code":"class DSL{static parser(jsx){jsx=DSL.loop('Children',jsx);return jsx;}static loop(component,jsx){let tag=DSL[component](jsx);while(tag){jsx=tag;tag=DSL[component](tag);}return jsx;}static Children(jsx){const params=DSL.extractParameters(jsx,'Children');if(!params)return undefined;const includes=DSL.extractParameter(params,'includes')||'[]';const excludes=DSL.extractParameter(params,'excludes')||'[]';const includesJsx=includes!=='[]'?\".filter(c => c.name && \".concat(includes,\".includes(c.name))\"):'';const excludesJsx=excludes!=='[]'?\".filter(c => c.name && !\".concat(excludes,\".includes(c.name))\"):'';const dsl=\"<div className={'children'}>\\n                {data.children\\n                    \".concat(includesJsx,\"\\n                    \").concat(excludesJsx,\"\\n                    .map(c => <DefaultNode key={c.id} data={c} />)\\n                }\\n        </div>\");return DSL.replace(jsx,'Children',dsl);}static extractParameters(jsx,component){const regex=new RegExp(\"<\".concat(component,\"(.*?)\\\\/>\"));const match=jsx.match(regex);if(match&&match[1])return match[1];else return undefined;}static extractParameter(params,name){const regex=new RegExp(\"\".concat(name,\"={(.*?)}\"));const match=params.match(regex);if(match&&match[1])return match[1];else return undefined;}static replace(jsx,component,dsl){const regex=new RegExp(\"<\".concat(component,\"(.*?)\\\\/>\"));return jsx.replace(regex,dsl);}}export default DSL;","map":{"version":3,"names":["DSL","parser","jsx","loop","component","tag","Children","params","extractParameters","undefined","includes","extractParameter","excludes","includesJsx","concat","excludesJsx","dsl","replace","regex","RegExp","match","name"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/src/DSL/DSL.ts"],"sourcesContent":["class DSL {\r\n    public static parser(jsx: string): string {\r\n        jsx = DSL.loop('Children', jsx);\r\n        return jsx;\r\n    }\r\n\r\n    private static loop(component: 'Children', jsx: string): string {\r\n        let tag = DSL[component](jsx);\r\n        while(tag) {\r\n            jsx = tag;\r\n            tag = DSL[component](tag);\r\n        }\r\n        return jsx;\r\n    }\r\n\r\n    private static Children(jsx: string): string|undefined {\r\n        const params = DSL.extractParameters(jsx, 'Children');\r\n        if(!params) return undefined;\r\n        const includes = DSL.extractParameter(params, 'includes') || '[]';\r\n        const excludes = DSL.extractParameter(params, 'excludes') || '[]';\r\n        const includesJsx = (includes !== '[]') ? `.filter(c => c.name && ${includes}.includes(c.name))` : '';\r\n        const excludesJsx = (excludes !== '[]') ? `.filter(c => c.name && !${excludes}.includes(c.name))` : '';\r\n        const dsl = `<div className={'children'}>\r\n                {data.children\r\n                    ${includesJsx}\r\n                    ${excludesJsx}\r\n                    .map(c => <DefaultNode key={c.id} data={c} />)\r\n                }\r\n        </div>`;\r\n        return DSL.replace(jsx, 'Children', dsl);\r\n    }\r\n\r\n    private static extractParameters(jsx: string, component: string): string|undefined {\r\n        const regex = new RegExp(`<${component}(.*?)\\\\/>`);\r\n        const match = jsx.match(regex);\r\n        if (match && match[1]) return match[1];\r\n        else return undefined;\r\n    }\r\n\r\n    private static extractParameter(params: string, name: string): string|undefined {\r\n        const regex = new RegExp(`${name}={(.*?)}`);\r\n        const match = params.match(regex);\r\n        if (match && match[1]) return match[1];\r\n        else return undefined;\r\n    }\r\n\r\n    private static replace(jsx: string, component: string, dsl: string): string {\r\n        const regex = new RegExp(`<${component}(.*?)\\\\/>`);\r\n        return jsx.replace(regex, dsl);\r\n    }\r\n\r\n}\r\n\r\nexport default DSL;\r\n"],"mappings":"AAAA,KAAM,CAAAA,GAAI,CACN,MAAc,CAAAC,MAAMA,CAACC,GAAW,CAAU,CACtCA,GAAG,CAAGF,GAAG,CAACG,IAAI,CAAC,UAAU,CAAED,GAAG,CAAC,CAC/B,MAAO,CAAAA,GAAG,CACd,CAEA,MAAe,CAAAC,IAAIA,CAACC,SAAqB,CAAEF,GAAW,CAAU,CAC5D,GAAI,CAAAG,GAAG,CAAGL,GAAG,CAACI,SAAS,CAAC,CAACF,GAAG,CAAC,CAC7B,MAAMG,GAAG,CAAE,CACPH,GAAG,CAAGG,GAAG,CACTA,GAAG,CAAGL,GAAG,CAACI,SAAS,CAAC,CAACC,GAAG,CAAC,CAC7B,CACA,MAAO,CAAAH,GAAG,CACd,CAEA,MAAe,CAAAI,QAAQA,CAACJ,GAAW,CAAoB,CACnD,KAAM,CAAAK,MAAM,CAAGP,GAAG,CAACQ,iBAAiB,CAACN,GAAG,CAAE,UAAU,CAAC,CACrD,GAAG,CAACK,MAAM,CAAE,MAAO,CAAAE,SAAS,CAC5B,KAAM,CAAAC,QAAQ,CAAGV,GAAG,CAACW,gBAAgB,CAACJ,MAAM,CAAE,UAAU,CAAC,EAAI,IAAI,CACjE,KAAM,CAAAK,QAAQ,CAAGZ,GAAG,CAACW,gBAAgB,CAACJ,MAAM,CAAE,UAAU,CAAC,EAAI,IAAI,CACjE,KAAM,CAAAM,WAAW,CAAIH,QAAQ,GAAK,IAAI,2BAAAI,MAAA,CAA8BJ,QAAQ,uBAAuB,EAAE,CACrG,KAAM,CAAAK,WAAW,CAAIH,QAAQ,GAAK,IAAI,4BAAAE,MAAA,CAA+BF,QAAQ,uBAAuB,EAAE,CACtG,KAAM,CAAAI,GAAG,sFAAAF,MAAA,CAEKD,WAAW,2BAAAC,MAAA,CACXC,WAAW,2GAGlB,CACP,MAAO,CAAAf,GAAG,CAACiB,OAAO,CAACf,GAAG,CAAE,UAAU,CAAEc,GAAG,CAAC,CAC5C,CAEA,MAAe,CAAAR,iBAAiBA,CAACN,GAAW,CAAEE,SAAiB,CAAoB,CAC/E,KAAM,CAAAc,KAAK,CAAG,GAAI,CAAAC,MAAM,KAAAL,MAAA,CAAKV,SAAS,aAAW,CAAC,CAClD,KAAM,CAAAgB,KAAK,CAAGlB,GAAG,CAACkB,KAAK,CAACF,KAAK,CAAC,CAC9B,GAAIE,KAAK,EAAIA,KAAK,CAAC,CAAC,CAAC,CAAE,MAAO,CAAAA,KAAK,CAAC,CAAC,CAAC,CAAC,IAClC,OAAO,CAAAX,SAAS,CACzB,CAEA,MAAe,CAAAE,gBAAgBA,CAACJ,MAAc,CAAEc,IAAY,CAAoB,CAC5E,KAAM,CAAAH,KAAK,CAAG,GAAI,CAAAC,MAAM,IAAAL,MAAA,CAAIO,IAAI,YAAU,CAAC,CAC3C,KAAM,CAAAD,KAAK,CAAGb,MAAM,CAACa,KAAK,CAACF,KAAK,CAAC,CACjC,GAAIE,KAAK,EAAIA,KAAK,CAAC,CAAC,CAAC,CAAE,MAAO,CAAAA,KAAK,CAAC,CAAC,CAAC,CAAC,IAClC,OAAO,CAAAX,SAAS,CACzB,CAEA,MAAe,CAAAQ,OAAOA,CAACf,GAAW,CAAEE,SAAiB,CAAEY,GAAW,CAAU,CACxE,KAAM,CAAAE,KAAK,CAAG,GAAI,CAAAC,MAAM,KAAAL,MAAA,CAAKV,SAAS,aAAW,CAAC,CAClD,MAAO,CAAAF,GAAG,CAACe,OAAO,CAACC,KAAK,CAAEF,GAAG,CAAC,CAClC,CAEJ,CAEA,cAAe,CAAAhB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module"}