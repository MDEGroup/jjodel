{"ast":null,"code":"import Fetch from '../fetch';\nimport { Load } from './load';\nimport { Save } from './save';\nimport { BEGIN, CreateElementAction, DProject, DUser, END, LProject, LUser, SetRootFieldAction, U } from '../../joiner';\nimport { Delete } from './delete';\nclass PersistanceApi {\n  static async responseHandler(response) {\n    if (!response) return {\n      code: 400,\n      body: 'Connection Error'\n    };\n    if (response.ok) return {\n      code: 200,\n      body: await response.json()\n    };\n    return {\n      code: response.status,\n      body: await response.text()\n    };\n  }\n  static async login(email, password) {\n    const response = await Fetch.post(this.url + 'auth/login', {\n      email,\n      password\n    });\n    return await this.responseHandler(response);\n  }\n  static async register(username, email, password) {\n    const response = await Fetch.post(this.url + 'auth/register', {\n      username,\n      email,\n      password\n    });\n    return await this.responseHandler(response);\n  }\n  static async logout() {\n    await Fetch.get(this.url + 'auth/logout');\n    window.location.reload();\n  }\n  static async saveProject(p) {\n    const user = LUser.fromPointer(DUser.current);\n    const project = p || user.project;\n    if (!project) return;\n    SetRootFieldAction.new('isLoading', true);\n    await Save.project(project);\n    SetRootFieldAction.new('isLoading', false);\n  }\n  static async deleteProject(id) {\n    SetRootFieldAction.new('isLoading', true);\n    await Delete.project(id);\n    SetRootFieldAction.new('isLoading', false);\n  }\n  static async loadMyProjects() {\n    SetRootFieldAction.new('isLoading', true);\n    const user = LUser.fromPointer(DUser.current);\n    user.project = null;\n    user.projects.map(p => p && p.delete());\n    const _response = await Fetch.get(this.url + `users/${DUser.current}/projects`);\n    const response = await this.responseHandler(_response);\n    if (response.code !== 200) return;\n    const projects = U.wrapper(response.body);\n    BEGIN();\n    for (let project of projects) await Load.project(project);\n    END();\n    user.projects = LProject.fromArr(projects);\n    SetRootFieldAction.new('isLoading', false);\n  }\n  static async getProjectById(id) {\n    SetRootFieldAction.new('isLoading', true);\n    const request = await Fetch.get(`/persistance/projects/${id}`);\n    const response = await PersistanceApi.responseHandler(request);\n    if (response.code !== 200) return null;\n    const project = U.wrapper(response.body);\n    console.log('Getting Project From Server', project);\n    BEGIN();\n    await Load.project(project);\n    END();\n    CreateElementAction.new(project);\n    SetRootFieldAction.new('isLoading', false);\n    return DProject.fromPointer(project.id);\n  }\n  static async getUserByEmail(email) {\n    SetRootFieldAction.new('isLoading', true);\n    const request = await Fetch.get(`/persistance/users?email=${email}`);\n    const response = await PersistanceApi.responseHandler(request);\n    if (response.code !== 200) return null;\n    const user = U.wrapper(response.body);\n    SetRootFieldAction.new('isLoading', false);\n    CreateElementAction.new(user);\n    return DUser.fromPointer(user.id);\n  }\n}\nPersistanceApi.url = '/persistance/';\nexport default PersistanceApi;","map":{"version":3,"names":["Fetch","Load","Save","BEGIN","CreateElementAction","DProject","DUser","END","LProject","LUser","SetRootFieldAction","U","Delete","PersistanceApi","responseHandler","response","code","body","ok","json","status","text","login","email","password","post","url","register","username","logout","get","window","location","reload","saveProject","p","user","fromPointer","current","project","new","deleteProject","id","loadMyProjects","projects","map","delete","_response","wrapper","fromArr","getProjectById","request","console","log","getUserByEmail"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/src/api/persistance/index.ts"],"sourcesContent":["import Fetch from '../fetch';\r\nimport {Load} from './load';\r\nimport {Save} from './save';\r\nimport {\r\n    ApiResponse,\r\n    BEGIN,\r\n    CreateElementAction,\r\n    DProject,\r\n    DUser,\r\n    END,\r\n    LProject,\r\n    LUser,\r\n    Pointer,\r\n    SetRootFieldAction, U\r\n} from '../../joiner';\r\nimport {Delete} from './delete';\r\n\r\nclass PersistanceApi {\r\n    private static url = '/persistance/';\r\n\r\n    static async responseHandler(response: Response|null): Promise<ApiResponse> {\r\n        if(!response) return {code: 400, body: 'Connection Error'};\r\n        if(response.ok) return {code: 200, body: await response.json()};\r\n        return {code: response.status, body: await response.text()};\r\n    }\r\n\r\n    static async login(email: string, password: string): Promise<ApiResponse> {\r\n        const response = await Fetch.post(this.url + 'auth/login', {email, password});\r\n        return await this.responseHandler(response);\r\n    }\r\n    static async register(username: string, email: string, password: string): Promise<ApiResponse> {\r\n        const response = await Fetch.post(this.url + 'auth/register', {username, email, password});\r\n        return await this.responseHandler(response);\r\n    }\r\n    static async logout(): Promise<void> {\r\n        await Fetch.get(this.url + 'auth/logout');\r\n        window.location.reload();\r\n    }\r\n    static async saveProject(p?: LProject): Promise<void> {\r\n        const user = LUser.fromPointer(DUser.current);\r\n        const project = p || user.project;\r\n        if (!project) return;\r\n        SetRootFieldAction.new('isLoading', true);\r\n        await Save.project(project);\r\n        SetRootFieldAction.new('isLoading', false);\r\n    }\r\n    static async deleteProject(id: Pointer<DProject>): Promise<void> {\r\n        SetRootFieldAction.new('isLoading', true);\r\n        await Delete.project(id);\r\n        SetRootFieldAction.new('isLoading', false);\r\n    }\r\n\r\n    static async loadMyProjects(): Promise<void> {\r\n        SetRootFieldAction.new('isLoading', true);\r\n        const user = LUser.fromPointer(DUser.current);\r\n        user.project = null; user.projects.map(p => p && p.delete());\r\n        const _response = await Fetch.get(this.url + `users/${DUser.current}/projects`);\r\n        const response = await this.responseHandler(_response);\r\n        if(response.code !== 200) return;\r\n        const projects = U.wrapper<DProject[]>(response.body);\r\n        BEGIN(); for(let project of projects) await Load.project(project); END();\r\n        user.projects = LProject.fromArr(projects);\r\n        SetRootFieldAction.new('isLoading', false);\r\n    }\r\n    static async getProjectById(id: string): Promise<LProject|null> {\r\n        SetRootFieldAction.new('isLoading', true);\r\n        const request = await Fetch.get(`/persistance/projects/${id}`)\r\n        const response = await PersistanceApi.responseHandler(request);\r\n        if(response.code !== 200) return null;\r\n        const project = U.wrapper<DProject>(response.body);\r\n        console.log('Getting Project From Server', project);\r\n        BEGIN(); await Load.project(project); END();\r\n        CreateElementAction.new(project);\r\n        SetRootFieldAction.new('isLoading', false);\r\n        return DProject.fromPointer(project.id);\r\n    }\r\n    static async getUserByEmail(email: string): Promise<LUser|null> {\r\n        SetRootFieldAction.new('isLoading', true);\r\n        const request = await Fetch.get(`/persistance/users?email=${email}`);\r\n        const response = await PersistanceApi.responseHandler(request);\r\n        if(response.code !== 200) return null;\r\n        const user = U.wrapper<DUser>(response.body);\r\n        SetRootFieldAction.new('isLoading', false);\r\n        CreateElementAction.new(user);\r\n        return DUser.fromPointer(user.id);\r\n    }\r\n}\r\n\r\nexport default PersistanceApi;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}