{"ast":null,"code":"var _jsxFileName = \"C:\\\\0Programmi\\\\Dev\\\\projects\\\\frontend\\\\jjodel\\\\src\\\\view\\\\viewElement\\\\view.tsx\",\n  _dec,\n  _class,\n  _class2,\n  _dec2,\n  _class3,\n  _class4,\n  _dec3,\n  _class5,\n  _class6,\n  _dec4,\n  _class7,\n  _class8;\nimport { BEGIN, Constructors, CoordinateMode, Debug, DPointerTargetable, EdgeBendingMode, EGraphElements, EModelElements, END, GraphPoint, GraphSize, Log, LPointerTargetable, LViewPoint, MyProxyHandler, RuntimeAccessible, RuntimeAccessibleClass, SetFieldAction, ShortAttribETypes, TRANSACTION, U, windoww, EdgeGapMode, Pointers } from \"../../joiner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport let DViewElement = (_dec = RuntimeAccessible('DViewElement'), _dec(_class = (_class2 = class DViewElement extends DPointerTargetable {\n  constructor() {\n    super(...arguments);\n    this.id = void 0;\n    this.name = void 0;\n    this.constants = void 0;\n    this._parsedConstants = void 0;\n    this.preRenderFunc = void 0;\n    this.jsxString = void 0;\n    this.usageDeclarations = void 0;\n    this.forceNodeType = void 0;\n    this.scalezoomx = false;\n    this.scalezoomy = false;\n    this.storeTemporaryPositions = false;\n    this.appliableToClasses = void 0;\n    this.appliableTo = void 0;\n    this.subViews = void 0;\n    this.oclCondition = void 0;\n    this.explicitApplicationPriority = void 0;\n    this.defaultVSize = void 0;\n    this.adaptHeight = void 0;\n    this.adaptWidth = void 0;\n    this.width = void 0;\n    this.height = void 0;\n    this.draggable = void 0;\n    this.resizable = void 0;\n    this.viewpoint = void 0;\n    this.display = void 0;\n    this.constraints = void 0;\n    this.onDataUpdate = void 0;\n    this.onDragStart = void 0;\n    this.onDragEnd = void 0;\n    this.whileDragging = void 0;\n    this.onResizeStart = void 0;\n    this.onResizeEnd = void 0;\n    this.whileResizing = void 0;\n    this.onRotationStart = void 0;\n    this.onRotationEnd = void 0;\n    this.whileRotating = void 0;\n    this.bendingMode = void 0;\n    this.edgeGapMode = void 0;\n    this.storeSize = void 0;\n    this.size = void 0;\n    this.lazySizeUpdate = void 0;\n    this.edgeStartOffset = void 0;\n    this.edgeEndOffset = void 0;\n    this.edgeStartOffset_isPercentage = void 0;\n    this.edgeEndOffset_isPercentage = void 0;\n    this.edgeStartStopAtBoundaries = void 0;\n    this.edgeEndStopAtBoundaries = void 0;\n    this.edgePointCoordMode = void 0;\n    this.edgeHeadSize = void 0;\n    this.edgeTailSize = void 0;\n  } // static singleton: LViewElement;\n  // static logic: typeof LViewDViewElementElement;\n  // static structure: typeof DViewElement;\n  // inherited redefine\n  // public __raw!: DViewElement;\n  // own properties\n  // evaluate 1 sola volta all'applicazione della vista o all'editing del campo\n  // should be protected but LView is not subclass\n  // evaluate tutte le volte che l'elemento viene aggiornato (il model o la view cambia).\n  // l'html template\n  // whether to resize the element normally using width-height or resize it using zoom-scale css\n  // not persistent, some not shared. deve essere diverso da utente ad utente perchÃ¨ dipende dal pan e zoom nel grafo dell'utente attuale.\n  // facendo pan su grafo html sposti gli elementi, per simulare uno spostamento del grafo e farlo sembrare illimitato.\n  // __transient: DViewTransientProperties;\n  // if true updates vertex position every X millisecond while dragging, if false updates it once when the vertex is released.\n  // class names: DModel, DPackage, DAttribute...\n  // ocl selector\n  // priority of the view, if a node have multiple applicable views, the view with highest priority is applied.\n  // | 'fit-content' | '-webkit-fill-available';\n  //useSizeFrom!: EuseSizeFrom;\n  static new(name, jsxString, defaultVSize) {\n    let usageDeclarations = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n    let constants = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n    let preRenderFunc = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';\n    let appliableToClasses = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];\n    let oclCondition = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : '';\n    let priority = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;\n    let persist = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : true;\n    let isDefaultView = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : false;\n    let vp = arguments.length > 11 ? arguments[11] : undefined;\n    let id = isDefaultView ? 'Pointer_View' + name : undefined;\n    return new Constructors(new DViewElement('dwc'), undefined, persist, undefined, id).DPointerTargetable().DViewElement(name, jsxString, vp, defaultVSize, usageDeclarations, constants, preRenderFunc, appliableToClasses, oclCondition, priority).end();\n  }\n  static new2(name, jsxString, callback) {\n    let persist = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    let vp = arguments.length > 4 ? arguments[4] : undefined;\n    let id = arguments.length > 5 ? arguments[5] : undefined;\n    // let id = isDefaultView ? 'Pointer_View' + name : undefined;\n    return new Constructors(new DViewElement('dwc'), undefined, persist, undefined, id).DPointerTargetable().DViewElement(name, jsxString, vp).end(callback);\n  }\n}, _class2.subclasses = [], _class2._extends = [], _class2)) || _class);\nexport let LViewElement = (_dec2 = RuntimeAccessible('LViewElement'), _dec2(_class3 = (_class4 = class LViewElement extends LPointerTargetable {\n  constructor() {\n    super(...arguments);\n    this.__raw = void 0;\n    this.id = void 0;\n    this.name = void 0;\n    this.__info_of__name = {\n      isGlobal: true,\n      type: ShortAttribETypes.EString,\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Name of the view\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 83\n      }, this)\n    };\n    this.constants = void 0;\n    this.__info_of__constants = {\n      todo: true,\n      isGlobal: true,\n      type: \"Function():Object\",\n      label: \"constants declaration\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Data used in the visual representation, meant to be static values evaluated only once when the view is first applied.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 135\n        }, this), \"Check default value view for an example.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 49\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }, this)\n    };\n    this.preRenderFunc = void 0;\n    this.__info_of__preRenderFunc = {\n      isGlobal: true,\n      obsolete: true,\n      type: \"Function():Object\",\n      label: \"pre-render function\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Data used in the visual representation, meant to be dynamic values evaluated every time the visual representation is updated.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 143\n        }, this), \"Replaced by usageDeclarations.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }, this)\n    };\n    this.jsxString = void 0;\n    this.__info_of__jsxString = {\n      isGlobal: true,\n      type: \"text\",\n      label: \"JSX template\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"The main ingredient, a \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://react.dev/learn/writing-markup-with-jsx\",\n          children: \"JSX template\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 41\n        }, this), \" that will be visualized in the graph.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }, this)\n    };\n    this.usageDeclarations = void 0;\n    this.__info_of__usageDeclarations = {\n      todo: false,\n      isGlobal: true,\n      type: \"Function():Object\",\n      label: \"usage declarations\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Subset of the global or elements's data state that is graphically used.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this), \"If specified the element will only update when one of those has changed.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, this), \"Can optimize performance and ensure the node is updated even when navigating remote properties that\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this), \"    don\\\\'t belong to this element, like visualizing the name of an object pointed by a reference.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this), \"Context: it has the usual variables present in a JSX template (data, view, node...)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this), \"    plus a special variable \\\"ret\\\" where dependencies are registered.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this), \"Usage Example: see the default view for value.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 14\n      }, this)\n    };\n    this.forceNodeType = void 0;\n    this.__info_of__forceNodeType = {\n      isGlobal: true,\n      type: \"EGraphElements\",\n      enum: EGraphElements,\n      label: \"force node type\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Forces this element to be rendered with your component of choice instead of automatic selection when generated by a <DefaultNode> tag.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }, this)\n    };\n    this.zoom = void 0;\n    this.__info_of__zoom = {\n      todo: true,\n      isNode: true,\n      type: GraphPoint.cname,\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Zooms in or out the element using css scale.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 84\n      }, this)\n    };\n    this.appliableToClasses = void 0;\n    this.__info_of__appliableToClasses = {\n      isGlobal: true,\n      type: \"EModelElements | EGraphElements\",\n      enum: {\n        ...EModelElements,\n        ...EGraphElements,\n        cname: \"EModelElements | EGraphElements\"\n      },\n      label: \"applicable to\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Do a low priority match with elements of this type.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this), \"This is just a shortcut with a lower priority than a OCL match.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this), \"The same result can be obtained through OCL.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 14\n      }, this)\n    };\n    this.appliableTo = void 0;\n    this.subViews = void 0;\n    this.__info_of__subViews = {\n      isGlobal: true,\n      hidden: true,\n      type: \"DViewElement[]\",\n      label: \"sub-views\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Views that are suggested to render elements contained in the current one with a higher match priority.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this), \"Like a package view giving priority to a specific Class or Enum view to render his contained Classifiers in a common theme.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }, this)\n    };\n    this.explicitApplicationPriority = void 0;\n    this.__info_of__explicitApplicationPriority = {\n      isGlobal: true,\n      type: ShortAttribETypes.EByte,\n      label: \"explicit priority\",\n      txt: 'Application priority of view. If multiple views match an element, the highest priority will render the main jsx,' + 'lowest priorities will only inject css and secondary jsx decorators (this part is still to do)'\n    };\n    this.defaultVSize = void 0;\n    this.__info_of__defaultVSize = {\n      isNode: true,\n      type: \"GraphSize\",\n      label: \"default size\",\n      txt: 'starting size of the node'\n    };\n    this.adaptWidth = void 0;\n    this.__info_of__adaptWidth = {\n      isNode: true,\n      type: ShortAttribETypes.EBoolean,\n      label: \"adapt width\",\n      txt: 'Whether the element should expand his width to accomodate his own contents.'\n    };\n    this.adaptHeight = void 0;\n    this.__info_of__adaptHeight = {\n      isNode: true,\n      type: ShortAttribETypes.EBoolean,\n      label: \"adapt height\",\n      txt: 'Whether the element should expand his height to accomodate his own contents.'\n    };\n    this.draggable = void 0;\n    this.__info_of__draggable = {\n      isNode: true,\n      type: ShortAttribETypes.EBoolean,\n      txt: 'if the element can be dragged'\n    };\n    this.resizable = void 0;\n    this.__info_of__resizable = {\n      isNode: true,\n      type: ShortAttribETypes.EBoolean,\n      txt: 'if the element can be resized'\n    };\n    this.oclCondition = void 0;\n    this.__info_of__oclCondition = {\n      isGlobal: true,\n      hidden: true,\n      label: \"OCL apply condition\",\n      type: \"text\",\n      // TODO: what's the difference with this.query?\n      txt: 'OCL Query selector to determine which nodes or model elements should apply this view'\n    };\n    this.viewpoint = void 0;\n    this.__info_of__viewpoint = {\n      hidden: true,\n      type: LViewPoint.cname,\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"The collection of views containing this one, useful to activate multiple views at once.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 78\n      }, this)\n    };\n    this.display = void 0;\n    this.__info_of__display = {\n      obsolete: true,\n      isNode: true,\n      type: ShortAttribETypes.EString,\n      txt: 'complete css injection instead'\n    };\n    this.onDragStart = void 0;\n    this.__info_of__onDragStart = {\n      isNode: true,\n      type: \"Function():void\",\n      txt: 'Custom event activated when a node begins being dragged.'\n    };\n    this.onDragEnd = void 0;\n    this.__info_of__onDragEnd = {\n      isNode: true,\n      type: \"Function():void\",\n      txt: 'Custom event activated when a node finishes being dragged.'\n    };\n    this.whileDragging = void 0;\n    this.__info_of__whileDragging = {\n      isNode: true,\n      type: \"Function():void\",\n      txt: 'Custom event activated multiple times when mouse is moved while a node is being dragged.'\n    };\n    this.onResizeStart = void 0;\n    this.__info_of__onResizeStart = {\n      isNode: true,\n      type: \"Function():void\",\n      txt: 'Custom event activated when a node begins being resized.'\n    };\n    this.onResizeEnd = void 0;\n    this.__info_of__onResizeEnd = {\n      isNode: true,\n      type: \"Function():void\",\n      txt: 'Custom event activated when a node finishes being resized.'\n    };\n    this.whileResizing = void 0;\n    this.__info_of__whileResizing = {\n      isNode: true,\n      type: \"Function():void\",\n      txt: 'Custom event activated multiple times when mouse is moved while a node is being resized.'\n    };\n    this.onRotationStart = void 0;\n    this.__info_of__onRotationStart = {\n      isNode: true,\n      type: \"Function():void\",\n      txt: 'Custom event activated when a node begins being rotated.'\n    };\n    this.onRotationEnd = void 0;\n    this.__info_of__onRotationEnd = {\n      isNode: true,\n      type: \"Function():void\",\n      txt: 'Custom event activated when a node finishes being rotated.'\n    };\n    this.whileRotating = void 0;\n    this.__info_of__whileRotating = {\n      isNode: true,\n      type: \"Function():void\",\n      txt: 'Custom event activated multiple times when mouse is moved while a node is being rotated.'\n    };\n    this.onDataUpdate = void 0;\n    this.__info_of__onDataUpdate = {\n      isNode: true,\n      type: \"Function():void\",\n      txt: 'Custom event activated every time a property of his model, node or view is changed while the element is visibly rendered in a graph.\\n<br>Caution! this might cause loops.'\n    };\n    this.constraints = void 0;\n    this.__info_of__constraints = {\n      todo: true,\n      isNode: true,\n      type: \"Function():void\",\n      txt: 'not supported yet'\n    };\n    this.bendingMode = void 0;\n    this.__info_of__bendingMode = {\n      isEdge: true,\n      enum: EdgeBendingMode,\n      type: '\"L\" | \"Q\" | \"C\" | \"T\" | \"S\" | \"A\" | \"QT\" | \"CS\"',\n      label: \"path mode\",\n      txt: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"How Svg path should use the EdgePoints to bend his shape\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 16\n        }, this)\n      }, void 0, false)\n    };\n    this.edgeGapMode = void 0;\n    this.__info_of__edgeGapMode = {\n      isEdge: true,\n      enum: EdgeGapMode,\n      type: '\"gap\" | \"average\" | \"autoFill\" | \"lineFill\" | \"arcFill\"',\n      label: \"gap mode\",\n      txt: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"How the segment should treat the EdgePoint interruptions.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 78\n          }, this), \"\\\"gap\\\" leaves an empty space to not overlap the EdgePoint,\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 13\n          }, this), \"\\\"linefill\\\" makes the edge stop at the EdgePoint borders, but then connects the gap with a line.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 16\n        }, this)\n      }, void 0, false)\n    };\n    this.storeSize = void 0;\n    this.__info_of__storeSize = {\n      isNode: true,\n      type: ShortAttribETypes.EBoolean,\n      label: \"bind sizes to view\",\n      txt: \"Active: the node position depends from the view currently displayed.Inactive: it depends from the graph.\"\n    };\n    this.lazySizeUpdate = void 0;\n    this.__info_of__lazySizeUpdate = {\n      isNode: true,\n      type: ShortAttribETypes.EBoolean,\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"If true updates the node position only when the drag action is finished. (best performance)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 93\n      }, this)\n    };\n    this.edgeStartOffset = void 0;\n    this.__info_of__edgeStartOffset = {\n      isEdge: true,\n      type: GraphPoint.cname,\n      label: \"start offset\",\n      txt: \"Location where outgoing edges should start their path, relative to top-upper corner of the element.\"\n    };\n    this.edgeEndOffset = void 0;\n    this.__info_of__edgeEndOffset = {\n      isEdge: true,\n      type: GraphPoint.cname,\n      label: \"end offset\",\n      txt: 'Same as this.edgeStartOffset'\n    };\n    this.edgeStartOffset_isPercentage = void 0;\n    this.__info_of__edgeStartOffset_isPercentage = {\n      isEdge: true,\n      type: ShortAttribETypes.EBoolean,\n      label: \"start offset is a %\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Whether edgeStartOffset is an absolute value or a percentage.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 80\n        }, this), \"(eg: 50% of element width, vs 50 pixels flat).\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 14\n      }, this)\n    };\n    this.edgeEndOffset_isPercentage = void 0;\n    this.__info_of__edgeEndOffset_isPercentage = {\n      isEdge: true,\n      type: ShortAttribETypes.EBoolean,\n      label: \"end offset is a %\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Whether edgeStartOffset is an absolute value or a percentage.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 80\n        }, this), \"(eg: 50% of element width, vs 50 pixels flat).\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 14\n      }, this)\n    };\n    this.edgeStartStopAtBoundaries = void 0;\n    this.__info_of__edgeStartStopAtBoundaries = {\n      isEdge: true,\n      type: ShortAttribETypes.EBoolean,\n      label: \"start cannot cross boundaries\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Whether outgoing edges should cross the node boundaries overlapping the node\\\\'s html or stop at them.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 120\n        }, this), \"Edge arrows might enter the node if this is on.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 14\n      }, this)\n    };\n    this.edgeEndStopAtBoundaries = void 0;\n    this.__info_of__edgeEndStopAtBoundaries = {\n      isEdge: true,\n      type: ShortAttribETypes.EBoolean,\n      label: \"end cannot cross boundaries\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Whether incoming edges should cross the node boundaries overlapping the node\\\\'s html or stop at them.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 120\n        }, this), \"Edge arrows might enter the node if this is on.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 14\n      }, this)\n    };\n    this.edgePointCoordMode = void 0;\n    this.__info_of__edgePointCoordMode = {\n      isEdgePoint: true,\n      type: \"CoordinateMode\",\n      enum: CoordinateMode,\n      label: \"coordinate mode\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Store coordinates as absolute coordinates or relative to start/end nodes.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 13\n      }, this)\n    };\n    this.edgeHeadSize = void 0;\n    this.__info_of__edgeHeadSize = {\n      isEdge: true,\n      type: GraphPoint.cname,\n      label: \"head decorator size\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Size of the edge head decorator if present.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 108\n      }, this)\n    };\n    this.edgeTailSize = void 0;\n    this.__info_of__edgeTailSize = {\n      isEdge: true,\n      type: GraphPoint.cname,\n      label: \"tail decorator size\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Size of the tail head decorator if present.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 108\n      }, this)\n    };\n    this.size = void 0;\n    this.__info_of__size = {\n      isNode: true,\n      hidden: true,\n      type: ShortAttribETypes.EInt,\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Do not use directly, contains all the sizes stored in this view. use getSize, updateSize instead.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 13\n      }, this)\n    };\n    this.__info_of__updateSize = {\n      isNode: true,\n      hidden: true,\n      type: \"Function(Pointer<GraphElement | ModelElement>, GraphSize) => GraphSize\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Updates the size stored in this view for target element.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 74\n        }, this), \"@returns: the delta of the change between old value and new value.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 13\n      }, this)\n    };\n    this.__info_of__getSize = {\n      isNode: true,\n      hidden: true,\n      type: \"Function(Pointer<GraphElement | ModelElement>) => GraphSize\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Gets the size stored in this view for target element.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 13\n      }, this)\n    };\n    this._parsedConstants = void 0;\n  } // MixOnlyFuncs(DViewElement, LPointerTargetable)\n  // static singleton: LViewElement;\n  // static logic: typeof LViewElement;\n  // static structure: typeof DViewElement;\n  // inherited redefine\n  // own properties\n  // Example 1: <code>{'{color:\"red\", background: \"gray\"}'}</code><br/>\n  // Example 2: <code>{'function(){\\n    let fib = [1,1]; for (let i = 2; i < 100) { fib[i] = fib[i-2]+fib[i-1]; }\\n    return fib; }'}</code><br/>\n  // evalutate tutte le volte che l'elemento viene aggiornato (il model o la view cambia)\n  get_usageDeclarations(c) {\n    return c.data.usageDeclarations || \"(ret)=>{ // scope contains: data, node, view, constants, state\\n\" + \"// ** preparations and default behaviour here ** //\\n\" + \"ret.data = data\\n\" + \"ret.node = node\\n\" + \"ret.view = view\\n\" + \"// data, node, view are dependencies by default. delete them above if you want to remove them.\\n\" +\n    // if you want your node re-rendered every time, add a dependency to ret.state = state; or ret.update = Math.random();\n    \"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\" + \"// ** declarations here ** //\\n\" + \"}\";\n  }\n\n  /*\r\n  scalezoomx!: boolean; // whether to resize the element normally using width-height or resize it using zoom-scale css\r\n  __info_of__scalezoomx: Info = {isNode: true, isEdge: false, isEdgePoint: false, txt:<div></div>}\r\n    scalezoomy!: boolean;\r\n  __info_of__scalezoomy: Info = {isNode: true, isEdge: false, isEdgePoint: false, txt:<div></div>}*/\n\n  // not persistent, some not shared. deve essere diverso da utente ad utente perchÃ¨ dipende dal pan e zoom nel grafo dell'utente attuale.\n  // facendo pan su grafo html sposti gli elementi, per simulare uno spostamento del grafo e farlo sembrare illimitato.\n  // __transient: DViewTransientProperties;\n\n  // class names: DModel, DPackage, DAttribute...\n\n  // priority of the view, if a node have multiple applicable views, the view with highest priority is applied.\n\n  // ocl selector\n\n  // todo: how about allowing a view to be part in multiple vp's? so this reference would be an array or removed, and you navigate only from vp to v.\n\n  /*\r\n  bindVertexSizeToView!: boolean;\r\n  __info_of__bindVertexSizeToView: Info = {isNode:true, type:ShortAttribETypes.EBoolean, label:\"bind sizes to view\",\r\n      txt: <div>Store the vertex size inside the view instead of inside the vertex.\r\n          <br/>This causes the vertex to have different positions according to the view currently appied to it.</div>}*/\n\n  // use getSize, updateSize;\n\n  get__parsedConstants(c) {\n    return c.data._parsedConstants || {};\n  }\n  get_constants(c) {\n    return c.data.constants;\n  }\n  static parseConstants(funcCode) {\n    if (!funcCode) return {};\n    let parsedConstants = {};\n    let context = {\n      __param: parsedConstants\n    };\n    context.__proto__ = windoww.defaultContext;\n    try {\n      U.evalInContextAndScopeNew(\"(\" + funcCode + \")(this.__param)\", context, true, false, false);\n    } catch (e) {\n      Log.w(\"Attempted to save an invalid view.constant setup. Cause:\\n\" + e.message.split(\"\\n\")[0], e);\n      return undefined;\n    }\n    return parsedConstants;\n  }\n  set_constants(value, c) {\n    if (value === c.data.constants) return true;\n    let parsedConstants = LViewElement.parseConstants(value) || {};\n    BEGIN();\n    SetFieldAction.new(c.data.id, 'constants', value, '', false);\n    SetFieldAction.new(c.data.id, '_parsedConstants', parsedConstants, '', false);\n    END();\n    return true;\n  }\n  get_preRenderFunc(c) {\n    return c.data.preRenderFunc;\n  }\n  set_preRenderFunc(value, c) {\n    const _value = value ? value : '() => {}';\n    return SetFieldAction.new(c.data.id, 'preRenderFunc', _value, '', false);\n  }\n  get_edgeHeadSize(c) {\n    return new GraphPoint(c.data.edgeHeadSize.x, c.data.edgeHeadSize.y);\n  }\n  get_edgeTailSize(c) {\n    return new GraphPoint(c.data.edgeTailSize.x, c.data.edgeTailSize.y);\n  }\n  set_edgeHeadSize(v, c) {\n    let s = c.data.edgeHeadSize || new GraphPoint(0, 0);\n    if (!(\"x\" in v)) v.x = s.x;\n    if (!(\"y\" in v)) v.y = s.y;\n    return SetFieldAction.new(c.data.id, \"edgeHeadSize\", v, '', false);\n  }\n  set_edgeTailSize(v, c) {\n    let s = c.data.edgeTailSize || new GraphPoint(0, 0);\n    if (!(\"x\" in v)) v.x = s.x;\n    if (!(\"y\" in v)) v.y = s.y;\n    return SetFieldAction.new(c.data.id, \"edgeTailSize\", v, '', false);\n  }\n  get_viewpoint(context) {\n    return LViewPoint.fromPointer(context.data.viewpoint);\n  }\n  set_subViews(v, context) {\n    return this.cannotSet('subViews, call set_viewpoint on the sub-elements instead.');\n  }\n  set_viewpoint(v, context, manualDview) {\n    let atIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n    let ret = false;\n    let vpid = Pointers.from(v);\n    let id = (manualDview || context.data).id;\n    let oldvpid = (manualDview || context.data).viewpoint;\n    if (vpid === oldvpid) return true;\n    TRANSACTION(() => {\n      ret = SetFieldAction.new(id, \"viewpoint\", vpid, '', true);\n      oldvpid && SetFieldAction.new(oldvpid, \"subViews\", id, '-=', true);\n      if (atIndex === -1) {\n        SetFieldAction.new(vpid, \"subViews\", id, '+=', true);\n      } else {\n        let oldSubViews = [...DPointerTargetable.fromPointer(vpid).subViews];\n        oldSubViews.splice(atIndex, 0, id);\n        SetFieldAction.new(vpid, \"subViews\", oldSubViews, '', true);\n      }\n    });\n    return ret;\n  }\n  get_subViews(context, key) {\n    let subViewsPointers = context.data.subViews;\n    let subViews = [];\n    for (let pointer of subViewsPointers) {\n      let item = MyProxyHandler.wrap(pointer);\n      if (item !== undefined) subViews.push(item);\n    }\n    return subViews;\n  }\n\n  // returns the delta of change\n  updateSize(id, size) {\n    return this.wrongAccessMessage(\"updateSize\");\n  }\n  get_updateSize(context) {\n    return (id, size) => {\n      let vp = context.proxyObject.viewpoint;\n      if (!context.data.storeSize) {\n        if (vp === null || vp === void 0 ? void 0 : vp.storeSize) return vp.updateSize(id, size);\n        return false;\n      }\n      let vsize = context.data.size[id] || (vp === null || vp === void 0 ? void 0 : vp.__raw.size[id]) || context.data.defaultVSize || (vp === null || vp === void 0 ? void 0 : vp.__raw.defaultVSize);\n      let newSize = new GraphSize();\n      newSize.x = (size === null || size === void 0 ? void 0 : size.x) !== undefined ? size.x : vsize.x;\n      newSize.y = (size === null || size === void 0 ? void 0 : size.y) !== undefined ? size.y : vsize.y;\n      newSize.w = (size === null || size === void 0 ? void 0 : size.w) !== undefined ? size.w : vsize.w;\n      newSize.h = (size === null || size === void 0 ? void 0 : size.h) !== undefined ? size.h : vsize.h;\n      if (!newSize.equals(vsize)) SetFieldAction.new(context.data.id, \"size.\" + id, newSize);\n      return true;\n    };\n  }\n  get_defaultVSize(context) {\n    return context.data.defaultVSize;\n  }\n  getSize(id) {\n    return this.wrongAccessMessage(\"getSize\");\n  }\n  get_getSize(context) {\n    function impl_getSize(id) {\n      if (typeof id === \"object\") id = id.id;\n      let view = context.data;\n      let ret;\n      if (view.storeSize) {\n        ret = view.size[id];\n        if (ret) return ret;\n      }\n      let vp = context.proxyObject.viewpoint;\n      if (vp && view.id !== vp.id && vp.storeSize) {\n        ret = vp.size[id];\n        if (ret) return ret;\n      }\n      return undefined;\n    }\n    return impl_getSize;\n  }\n  set_generic_entry(context, key, val) {\n    console.log('set_generic_entry', {\n      context,\n      key,\n      val\n    });\n    SetFieldAction.new(context.data, key, val);\n    return true;\n  }\n  get_children(context) {\n    return [];\n  }\n  get_lazySizeUpdate(context) {\n    return Debug.lightMode || context.data.lazySizeUpdate;\n  }\n  set_lazySizeUpdate(val, context) {\n    return Debug.lightMode || this.set_generic_entry(context, 'lazySizeUpdate', val);\n  }\n  get_bendingMode(context) {\n    return context.data.bendingMode;\n  }\n  set_bendingMode(val, context) {\n    return this.set_generic_entry(context, 'bendingMode', val);\n  }\n  get_appliableToClasses(context) {\n    return context.data.appliableToClasses || [];\n  }\n  set_appliableToClasses(val, context) {\n    if (!val) val = [];else if (!Array.isArray(val)) val = [val];\n    return this.set_generic_entry(context, \"appliableToClasses\", val);\n  }\n  set_defaultVSize(val, context) {\n    console.log('set_defaultVSize', {\n      context,\n      val\n    });\n    return this.set_generic_entry(context, 'defaultVSize', val);\n  }\n  /*\r\n      get___transient(context: LogicContext<this>): LViewTransientProperties {\r\n          return DPointerTargetable.wrap<DViewTransientProperties, LViewTransientProperties>(context.data.__transient, context.data,\r\n              // @ts-ignore for $ at end of getpath\r\n              'idlookup.' + context.data.id + '.' + (getPath as LViewElement).__transient.$); }*/\n\n  duplicate() {\n    let deep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    return this.wrongAccessMessage(this.constructor.cname + \"duplicate()\");\n  }\n  get_duplicate(c) {\n    var _this = this;\n    return function () {\n      let deep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      let lview = undefined;\n      TRANSACTION(() => {\n        let vpid = c.data.viewpoint;\n        const dclone = DViewElement.new2(`${c.data.name} Copy`, '', undefined, true, 'skip');\n        lview = LPointerTargetable.fromD(dclone);\n        for (let key in c.data) {\n          if (key !== 'id' && key !== 'name' && key !== \"pointedBy\" && key !== 'viewpoint' && key !== 'subViews') {\n            // @ts-ignore\n            lview[key] = c.data[key];\n          }\n        }\n\n        // insert in viewpoint.subview\n        //let defaultViews: Dictionary<Pointer, boolean> = Defaults.defaultViewsMap;\n        let vp = c.proxyObject.viewpoint;\n        let oldViews = Pointers.from(vp.__raw.subViews);\n        // if (Defaults.viewpoints.indexOf(vpid)) oldViews = oldViews.filter( vid => !defaultViews[vid]);\n        let i = oldViews.indexOf(c.data.id);\n        _this.set_viewpoint(vpid, undefined, dclone, i === -1 ? -1 : i + 1); // insert in-place right after the cloned view\n        /*\r\n        if (i === -1) oldViews.push(dclone.id);\r\n        else oldViews.splice(i+1, 0, dclone.id); // insert in-place right after the cloned view\r\n        vp.subViews = oldViews as any;*/\n        // SetRootFieldAction.new('stackViews', dview.id, '+=', true);\n      });\n      return lview;\n    };\n  }\n}, _class4.subclasses = [], _class4._extends = [], _class4)) || _class3);\nRuntimeAccessibleClass.set_extend(DPointerTargetable, DViewElement);\nRuntimeAccessibleClass.set_extend(LPointerTargetable, LViewElement);\nexport let DViewTransientProperties = (_dec3 = RuntimeAccessible('DViewTransientProperties'), _dec3(_class5 = (_class6 = class DViewTransientProperties extends RuntimeAccessibleClass {\n  constructor() {\n    super(...arguments);\n    this._isDViewTransientProperties = void 0;\n  } // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\n  // private: DViewPrivateTransientProperties;\n}, _class6.logic = void 0, _class6)) || _class5);\nRuntimeAccessibleClass.set_extend(RuntimeAccessibleClass, DViewTransientProperties);\nexport let LViewTransientProperties = (_dec4 = RuntimeAccessible('LViewTransientProperties'), _dec4(_class7 = (_class8 = class LViewTransientProperties extends LPointerTargetable {\n  constructor() {\n    super(...arguments);\n    this._isLViewTransientProperties = void 0;\n  } // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\n  // private!: LViewPrivateTransientProperties;\n  /*\r\n      get_private(context: LogicContext<DViewTransientProperties>): LViewPrivateTransientProperties {\r\n          return LViewTransientProperties.wrap(context.data.private, context.proxy.baseObjInLookup, context.proxy.additionalPath + '.private'); }*/\n  /*\r\n      get_isSelected(logicContext: LogicContext<TargetableProxyHandler<DViewTransientProperties>, DViewTransientProperties>): Proxyfied<Dictionary> {\r\n          // @ts-ignore for $ at end of getpath\r\n          console.log('GET_ISSELECTED handler func');\r\n          return TargetableProxyHandler.getMap(logicContext.data.isSelected, logicContext, logicContext.proxy.additionalPath + '.' + (getPath as this).isSelected.$);\r\n      }*/\n}, _class8.structure = void 0, _class8.singleton = void 0, _class8)) || _class7);\nRuntimeAccessibleClass.set_extend(DPointerTargetable, DViewTransientProperties);\nRuntimeAccessibleClass.set_extend(LPointerTargetable, LViewTransientProperties);\n\n/*\r\n\r\n@RuntimeAccessible\r\nexport class DViewPrivateTransientProperties extends DPointerTargetable{\r\n    static logic: typeof LViewPrivateTransientProperties;\r\n\r\n    public size: GraphSize\r\n    constructor(size?: GraphSize) {\r\n        super();\r\n        this.size = size || defaultVSize;\r\n    }\r\n}\r\n\r\n@RuntimeAccessible\r\nexport class LViewPrivateTransientProperties extends DViewPrivateTransientProperties{\r\n    static structure: typeof DViewPrivateTransientProperties;\r\n    static singleton: LViewPrivateTransientProperties;\r\n\r\n}*/\n// shapeless component, receive jsx from redux\n// can access any of the redux state, but will usually access 1-2 var among many,\n// how can i dynamically mapStateToProps to map only the required ones?","map":{"version":3,"names":["BEGIN","Constructors","CoordinateMode","Debug","DPointerTargetable","EdgeBendingMode","EGraphElements","EModelElements","END","GraphPoint","GraphSize","Log","LPointerTargetable","LViewPoint","MyProxyHandler","RuntimeAccessible","RuntimeAccessibleClass","SetFieldAction","ShortAttribETypes","TRANSACTION","U","windoww","EdgeGapMode","Pointers","jsxDEV","_jsxDEV","Fragment","_Fragment","DViewElement","_dec","_class","_class2","constructor","arguments","id","name","constants","_parsedConstants","preRenderFunc","jsxString","usageDeclarations","forceNodeType","scalezoomx","scalezoomy","storeTemporaryPositions","appliableToClasses","appliableTo","subViews","oclCondition","explicitApplicationPriority","defaultVSize","adaptHeight","adaptWidth","width","height","draggable","resizable","viewpoint","display","constraints","onDataUpdate","onDragStart","onDragEnd","whileDragging","onResizeStart","onResizeEnd","whileResizing","onRotationStart","onRotationEnd","whileRotating","bendingMode","edgeGapMode","storeSize","size","lazySizeUpdate","edgeStartOffset","edgeEndOffset","edgeStartOffset_isPercentage","edgeEndOffset_isPercentage","edgeStartStopAtBoundaries","edgeEndStopAtBoundaries","edgePointCoordMode","edgeHeadSize","edgeTailSize","new","length","undefined","priority","persist","isDefaultView","vp","end","new2","callback","subclasses","_extends","LViewElement","_dec2","_class3","_class4","__raw","__info_of__name","isGlobal","type","EString","txt","children","fileName","_jsxFileName","lineNumber","columnNumber","__info_of__constants","todo","label","__info_of__preRenderFunc","obsolete","__info_of__jsxString","href","__info_of__usageDeclarations","__info_of__forceNodeType","enum","zoom","__info_of__zoom","isNode","cname","__info_of__appliableToClasses","__info_of__subViews","hidden","__info_of__explicitApplicationPriority","EByte","__info_of__defaultVSize","__info_of__adaptWidth","EBoolean","__info_of__adaptHeight","__info_of__draggable","__info_of__resizable","__info_of__oclCondition","__info_of__viewpoint","__info_of__display","__info_of__onDragStart","__info_of__onDragEnd","__info_of__whileDragging","__info_of__onResizeStart","__info_of__onResizeEnd","__info_of__whileResizing","__info_of__onRotationStart","__info_of__onRotationEnd","__info_of__whileRotating","__info_of__onDataUpdate","__info_of__constraints","__info_of__bendingMode","isEdge","__info_of__edgeGapMode","__info_of__storeSize","__info_of__lazySizeUpdate","__info_of__edgeStartOffset","__info_of__edgeEndOffset","__info_of__edgeStartOffset_isPercentage","__info_of__edgeEndOffset_isPercentage","__info_of__edgeStartStopAtBoundaries","__info_of__edgeEndStopAtBoundaries","__info_of__edgePointCoordMode","isEdgePoint","__info_of__edgeHeadSize","__info_of__edgeTailSize","__info_of__size","EInt","__info_of__updateSize","__info_of__getSize","get_usageDeclarations","c","data","get__parsedConstants","get_constants","parseConstants","funcCode","parsedConstants","context","__param","__proto__","defaultContext","evalInContextAndScopeNew","e","w","message","split","set_constants","value","get_preRenderFunc","set_preRenderFunc","_value","get_edgeHeadSize","x","y","get_edgeTailSize","set_edgeHeadSize","v","s","set_edgeTailSize","get_viewpoint","fromPointer","set_subViews","cannotSet","set_viewpoint","manualDview","atIndex","ret","vpid","from","oldvpid","oldSubViews","splice","get_subViews","key","subViewsPointers","pointer","item","wrap","push","updateSize","wrongAccessMessage","get_updateSize","proxyObject","vsize","newSize","h","equals","get_defaultVSize","getSize","get_getSize","impl_getSize","view","set_generic_entry","val","console","log","get_children","get_lazySizeUpdate","lightMode","set_lazySizeUpdate","get_bendingMode","set_bendingMode","get_appliableToClasses","set_appliableToClasses","Array","isArray","set_defaultVSize","duplicate","deep","get_duplicate","_this","lview","dclone","fromD","oldViews","i","indexOf","set_extend","DViewTransientProperties","_dec3","_class5","_class6","_isDViewTransientProperties","logic","LViewTransientProperties","_dec4","_class7","_class8","_isLViewTransientProperties","structure","singleton"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/src/view/viewElement/view.tsx"],"sourcesContent":["import type {\r\n    GObject,\r\n    Info,\r\n    LogicContext,\r\n    Pointer,\r\n    Dictionary\r\n} from \"../../joiner\";\r\nimport {\r\n    BEGIN,\r\n    Constructors,\r\n    CoordinateMode,\r\n    CreateElementAction,\r\n    Debug, Defaults,\r\n    DGraphElement,\r\n    DModelElement,\r\n    DocString,\r\n    DPointerTargetable,\r\n    DViewPoint,\r\n    EdgeBendingMode,\r\n    EGraphElements,\r\n    EModelElements,\r\n    END,\r\n    getWParams,\r\n    GraphPoint,\r\n    GraphSize,\r\n    Log,\r\n    LPointerTargetable,\r\n    LViewPoint,\r\n    MyProxyHandler,\r\n    RuntimeAccessible,\r\n    RuntimeAccessibleClass,\r\n    SetFieldAction,\r\n    SetRootFieldAction,\r\n    ShortAttribETypes,\r\n    TRANSACTION,\r\n    U,\r\n    windoww,\r\n    EdgeGapMode, Pointers\r\n} from \"../../joiner\";\r\n\r\n@RuntimeAccessible('DViewElement')\r\nexport class DViewElement extends DPointerTargetable {\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    // static singleton: LViewElement;\r\n    // static logic: typeof LViewDViewElementElement;\r\n    // static structure: typeof DViewElement;\r\n\r\n    // inherited redefine\r\n    // public __raw!: DViewElement;\r\n    id!: Pointer<DViewElement, 1, 1, LViewElement>;\r\n\r\n\r\n    // own properties\r\n    name!: string;\r\n\r\n    // evaluate 1 sola volta all'applicazione della vista o all'editing del campo\r\n    constants?: string;\r\n    _parsedConstants?: GObject; // should be protected but LView is not subclass\r\n\r\n    // evaluate tutte le volte che l'elemento viene aggiornato (il model o la view cambia).\r\n    preRenderFunc!: string;\r\n\r\n    jsxString!: string; // l'html template\r\n    usageDeclarations?: string;\r\n\r\n    forceNodeType?: DocString<'component name (Vertex, Field, GraphVertex, Graph)'>;\r\n    scalezoomx: boolean = false; // whether to resize the element normally using width-height or resize it using zoom-scale css\r\n    scalezoomy: boolean = false;\r\n    // not persistent, some not shared. deve essere diverso da utente ad utente perchÃ¨ dipende dal pan e zoom nel grafo dell'utente attuale.\r\n    // facendo pan su grafo html sposti gli elementi, per simulare uno spostamento del grafo e farlo sembrare illimitato.\r\n    // __transient: DViewTransientProperties;\r\n    storeTemporaryPositions: boolean = false; // if true updates vertex position every X millisecond while dragging, if false updates it once when the vertex is released.\r\n    appliableToClasses!: string[]; // class names: DModel, DPackage, DAttribute...\r\n    appliableTo!: 'node'|'edge'|'edgePoint';\r\n    subViews!: Pointer<DViewElement, 0, 'N', LViewElement>;\r\n    oclCondition!: string; // ocl selector\r\n    explicitApplicationPriority!: number; // priority of the view, if a node have multiple applicable views, the view with highest priority is applied.\r\n    defaultVSize!: GraphSize;\r\n    adaptHeight!: boolean;// | 'fit-content' | '-webkit-fill-available';\r\n    adaptWidth!: boolean;\r\n    width!: number;\r\n    height!: number;\r\n    draggable!: boolean;\r\n    resizable!: boolean;\r\n    viewpoint!: Pointer<DViewPoint>;\r\n    display!: 'block'|'contents'|'flex'|string;\r\n    constraints!: GObject<\"todo, used in Vertex. they are triggered by events (view.onDragStart....) and can bound the size of the vertex\">[];\r\n    onDataUpdate!: string;\r\n    onDragStart!: string;\r\n    onDragEnd!: string;\r\n    whileDragging!: string;\r\n    onResizeStart!: string;\r\n    onResizeEnd!: string;\r\n    whileResizing!: string;\r\n    onRotationStart!: string;\r\n    onRotationEnd!: string;\r\n    whileRotating!: string;\r\n    bendingMode!: EdgeBendingMode;\r\n    edgeGapMode!: EdgeGapMode;\r\n    //useSizeFrom!: EuseSizeFrom;\r\n    storeSize!: boolean;\r\n    size!: Dictionary<Pointer<DModelElement> | Pointer<DGraphElement>, GraphSize>;\r\n    lazySizeUpdate!: boolean;\r\n    edgeStartOffset!: GraphPoint;\r\n    edgeEndOffset!: GraphPoint;\r\n    edgeStartOffset_isPercentage!: boolean;\r\n    edgeEndOffset_isPercentage!: boolean;\r\n    edgeStartStopAtBoundaries!: boolean;\r\n    edgeEndStopAtBoundaries!: boolean;\r\n    edgePointCoordMode!: CoordinateMode;\r\n    edgeHeadSize!: GraphPoint;\r\n    edgeTailSize!: GraphPoint;\r\n\r\n    public static new(name: string, jsxString: string, defaultVSize?: GraphSize, usageDeclarations: string = '', constants: string = '',\r\n                      preRenderFunc: string = '', appliableToClasses: string[] = [], oclCondition: string = '',\r\n                      priority: number = 1 , persist: boolean = true, isDefaultView: boolean = false, vp?: Pointer<DViewPoint>): DViewElement {\r\n        let id = isDefaultView ? 'Pointer_View' + name : undefined;\r\n        return new Constructors(new DViewElement('dwc'), undefined, persist, undefined, id).DPointerTargetable().DViewElement(name, jsxString, vp, defaultVSize, usageDeclarations, constants,\r\n            preRenderFunc, appliableToClasses, oclCondition, priority).end();\r\n\r\n    }\r\n    public static new2(name: string, jsxString: string, callback?: (d:DViewElement)=>void, persist: boolean = true, vp?: Pointer<DViewPoint>, id?: string): DViewElement {\r\n        // let id = isDefaultView ? 'Pointer_View' + name : undefined;\r\n        return new Constructors(new DViewElement('dwc'), undefined, persist, undefined, id)\r\n            .DPointerTargetable().DViewElement(name, jsxString, vp).end(callback);\r\n    }\r\n}\r\n\r\n@RuntimeAccessible('LViewElement')\r\nexport class LViewElement<Context extends LogicContext<DViewElement, LViewElement> = any, D extends DViewElement = any>\r\n    extends LPointerTargetable { // MixOnlyFuncs(DViewElement, LPointerTargetable)\r\n\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    // static singleton: LViewElement;\r\n    // static logic: typeof LViewElement;\r\n    // static structure: typeof DViewElement;\r\n\r\n    // inherited redefine\r\n    public __raw!: DViewElement;\r\n    id!: Pointer<DViewElement, 1, 1, LViewElement>;\r\n\r\n\r\n\r\n    // own properties\r\n\r\n    name!: string;\r\n    __info_of__name: Info = {isGlobal: true, type: ShortAttribETypes.EString, txt:<div>Name of the view</div>}\r\n\r\n    constants?: string;\r\n    __info_of__constants: Info = {todo:true, isGlobal: true, type: \"Function():Object\", label:\"constants declaration\",\r\n        txt:<div>Data used in the visual representation, meant to be static values evaluated only once when the view is first applied.<br/>\r\n        Check default value view for an example.<br/>\r\n    </div>}\r\n    // Example 1: <code>{'{color:\"red\", background: \"gray\"}'}</code><br/>\r\n    // Example 2: <code>{'function(){\\n    let fib = [1,1]; for (let i = 2; i < 100) { fib[i] = fib[i-2]+fib[i-1]; }\\n    return fib; }'}</code><br/>\r\n\r\n    preRenderFunc?: string; // evalutate tutte le volte che l'elemento viene aggiornato (il model o la view cambia)\r\n    __info_of__preRenderFunc: Info = {isGlobal: true, obsolete: true, type: \"Function():Object\", label:\"pre-render function\",\r\n        txt:<div>Data used in the visual representation, meant to be dynamic values evaluated every time the visual representation is updated.<br/>Replaced by usageDeclarations.</div>}\r\n\r\n    jsxString!: string;\r\n    __info_of__jsxString: Info = {isGlobal: true, type: \"text\", label:\"JSX template\",\r\n        txt:<div>The main ingredient, a <a href={\"https://react.dev/learn/writing-markup-with-jsx\"}>JSX template</a> that will be visualized in the graph.</div>}\r\n\r\n    usageDeclarations?: string;\r\n    __info_of__usageDeclarations: Info = {todo: false, isGlobal: true, type: \"Function():Object\", label:\"usage declarations\",\r\n        txt: <div>Subset of the global or elements's data state that is graphically used.\r\n            <br/>If specified the element will only update when one of those has changed.\r\n            <br/>Can optimize performance and ensure the node is updated even when navigating remote properties that\r\n            <br/>    don\\'t belong to this element, like visualizing the name of an object pointed by a reference.\r\n            <br/>Context: it has the usual variables present in a JSX template (data, view, node...)\r\n            <br/>    plus a special variable \"ret\" where dependencies are registered.{/*and a \"state\" variable containing the entire application state.*/}\r\n            <br/>Usage Example: see the default view for value.\r\n    </div>}\r\n    get_usageDeclarations(c: Context): this[\"usageDeclarations\"]{\r\n        return c.data.usageDeclarations || \"(ret)=>{ // scope contains: data, node, view, constants, state\\n\" +\r\n            \"// ** preparations and default behaviour here ** //\\n\" +\r\n            \"ret.data = data\\n\" +\r\n            \"ret.node = node\\n\" +\r\n            \"ret.view = view\\n\" +\r\n            \"// data, node, view are dependencies by default. delete them above if you want to remove them.\\n\" +\r\n            // if you want your node re-rendered every time, add a dependency to ret.state = state; or ret.update = Math.random();\r\n            \"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\" +\r\n            \"// ** declarations here ** //\\n\" +\r\n            \"}\";\r\n    }\r\n\r\n    forceNodeType?: DocString<'component name'>;\r\n    __info_of__forceNodeType: Info = {isGlobal:true, type: \"EGraphElements\", enum: EGraphElements, label:\"force node type\",\r\n        txt:<div>Forces this element to be rendered with your component of choice instead of automatic selection when generated by a &lt;DefaultNode&gt; tag.</div>}\r\n\r\n    zoom!: GraphPoint;\r\n    __info_of__zoom: Info = {todo: true, isNode: true, type: GraphPoint.cname, txt:<div>Zooms in or out the element using css scale.</div>}\r\n    /*\r\n    scalezoomx!: boolean; // whether to resize the element normally using width-height or resize it using zoom-scale css\r\n    __info_of__scalezoomx: Info = {isNode: true, isEdge: false, isEdgePoint: false, txt:<div></div>}\r\n\r\n    scalezoomy!: boolean;\r\n    __info_of__scalezoomy: Info = {isNode: true, isEdge: false, isEdgePoint: false, txt:<div></div>}*/\r\n\r\n    // not persistent, some not shared. deve essere diverso da utente ad utente perchÃ¨ dipende dal pan e zoom nel grafo dell'utente attuale.\r\n    // facendo pan su grafo html sposti gli elementi, per simulare uno spostamento del grafo e farlo sembrare illimitato.\r\n    // __transient: DViewTransientProperties;\r\n\r\n    appliableToClasses!: string[]; // class names: DModel, DPackage, DAttribute...\r\n    __info_of__appliableToClasses: Info = {isGlobal: true, type: \"EModelElements | EGraphElements\",\r\n        enum: {...EModelElements, ...EGraphElements, cname:\"EModelElements | EGraphElements\"}, label:\"applicable to\",\r\n        txt: <div>Do a low priority match with elements of this type.\r\n            <br/>This is just a shortcut with a lower priority than a OCL match.\r\n            <br/>The same result can be obtained through OCL.</div>}\r\n\r\n    appliableTo!: 'node'|'edge'|'edgePoint';\r\n\r\n    subViews!: LViewElement[];\r\n    __info_of__subViews: Info = {isGlobal: true, hidden: true, type: \"DViewElement[]\", label:\"sub-views\",\r\n        txt:<div>Views that are suggested to render elements contained in the current one with a higher match priority.\r\n            <br/>Like a package view giving priority to a specific Class or Enum view to render his contained Classifiers in a common theme.</div>}\r\n\r\n\r\n    explicitApplicationPriority!: number; // priority of the view, if a node have multiple applicable views, the view with highest priority is applied.\r\n    __info_of__explicitApplicationPriority: Info = {isGlobal: true, type: ShortAttribETypes.EByte, label:\"explicit priority\",\r\n        txt: 'Application priority of view. If multiple views match an element, the highest priority will render the main jsx,' +\r\n            'lowest priorities will only inject css and secondary jsx decorators (this part is still to do)'}\r\n\r\n    defaultVSize!: GraphSize;\r\n    __info_of__defaultVSize: Info = {isNode:true, type: \"GraphSize\", label:\"default size\", txt: 'starting size of the node'}\r\n\r\n    adaptWidth!: boolean;\r\n    __info_of__adaptWidth: Info = {isNode:true, type: ShortAttribETypes.EBoolean, label:\"adapt width\",\r\n        txt: 'Whether the element should expand his width to accomodate his own contents.'}\r\n\r\n    adaptHeight!: boolean;\r\n    __info_of__adaptHeight: Info = {isNode:true, type: ShortAttribETypes.EBoolean, label:\"adapt height\",\r\n        txt: 'Whether the element should expand his height to accomodate his own contents.'}\r\n\r\n    draggable!: boolean;\r\n    __info_of__draggable: Info = {isNode: true, type: ShortAttribETypes.EBoolean, txt: 'if the element can be dragged'}\r\n\r\n    resizable!: boolean;\r\n    __info_of__resizable: Info = {isNode: true, type: ShortAttribETypes.EBoolean, txt: 'if the element can be resized'}\r\n\r\n    oclCondition!: string; // ocl selector\r\n    __info_of__oclCondition: Info = {isGlobal: true, hidden:true, label:\"OCL apply condition\", type: \"text\", // TODO: what's the difference with this.query?\r\n        txt: 'OCL Query selector to determine which nodes or model elements should apply this view'}\r\n\r\n    // todo: how about allowing a view to be part in multiple vp's? so this reference would be an array or removed, and you navigate only from vp to v.\r\n    viewpoint!: LViewPoint;\r\n    __info_of__viewpoint: Info = {hidden: true, type: LViewPoint.cname, txt: <div>The collection of views containing this one, useful to activate multiple views at once.</div>}\r\n\r\n    display!: 'block'|'contents';\r\n    __info_of__display: Info = {obsolete: true, isNode: true, type: ShortAttribETypes.EString,\r\n        txt: 'complete css injection instead'}\r\n\r\n    onDragStart!: string;\r\n    __info_of__onDragStart: Info = {isNode: true, type: \"Function():void\",\r\n        txt: 'Custom event activated when a node begins being dragged.'}\r\n\r\n    onDragEnd!: string;\r\n    __info_of__onDragEnd: Info = {isNode: true, type: \"Function():void\",\r\n        txt: 'Custom event activated when a node finishes being dragged.'}\r\n\r\n    whileDragging!: string;\r\n    __info_of__whileDragging: Info = {isNode: true, type: \"Function():void\",\r\n        txt: 'Custom event activated multiple times when mouse is moved while a node is being dragged.'}\r\n\r\n    onResizeStart!: string;\r\n    __info_of__onResizeStart: Info = {isNode: true, type: \"Function():void\",\r\n    txt: 'Custom event activated when a node begins being resized.'}\r\n\r\n    onResizeEnd!: string;\r\n    __info_of__onResizeEnd: Info = {isNode: true, type: \"Function():void\",\r\n        txt: 'Custom event activated when a node finishes being resized.'}\r\n\r\n    whileResizing!: string;\r\n    __info_of__whileResizing: Info = {isNode: true, type: \"Function():void\",\r\n        txt: 'Custom event activated multiple times when mouse is moved while a node is being resized.'}\r\n\r\n    onRotationStart!: string;\r\n    __info_of__onRotationStart: Info = {isNode: true, type: \"Function():void\",\r\n    txt: 'Custom event activated when a node begins being rotated.'}\r\n\r\n    onRotationEnd!: string;\r\n    __info_of__onRotationEnd: Info = {isNode: true, type: \"Function():void\",\r\n        txt: 'Custom event activated when a node finishes being rotated.'}\r\n\r\n    whileRotating!: string;\r\n    __info_of__whileRotating: Info = {isNode: true, type: \"Function():void\",\r\n        txt: 'Custom event activated multiple times when mouse is moved while a node is being rotated.'}\r\n\r\n    onDataUpdate!: string;\r\n    __info_of__onDataUpdate: Info = {isNode: true, type: \"Function():void\",\r\n        txt: 'Custom event activated every time a property of his model, node or view is changed while the element is visibly rendered in a graph.\\n<br>Caution! this might cause loops.'}\r\n\r\n    constraints!: GObject<\"todo, used in Vertex. they are triggered by events (view.onDragStart....) and can bound the size of the vertex\">[];\r\n    __info_of__constraints: Info = {todo: true, isNode: true, type: \"Function():void\",\r\n        txt: 'not supported yet'}\r\n\r\n\r\n    bendingMode!: EdgeBendingMode;\r\n    __info_of__bendingMode: Info = {isEdge: true, enum: EdgeBendingMode, type: '\"L\" | \"Q\" | \"C\" | \"T\" | \"S\" | \"A\" | \"QT\" | \"CS\"',\r\n        label:\"path mode\",\r\n        txt: <><div>How Svg path should use the EdgePoints to bend his shape{/*<a href={\"https://css-tricks.com/svg-path-syntax-illustrated-guide/\"}>to bend his shape</a>*/}</div></>}\r\n\r\n    edgeGapMode!: EdgeGapMode;\r\n    __info_of__edgeGapMode: Info = {isEdge: true, enum: EdgeGapMode, type: '\"gap\" | \"average\" | \"autoFill\" | \"lineFill\" | \"arcFill\"',\r\n        label:\"gap mode\",\r\n        txt: <><div>How the segment should treat the EdgePoint interruptions.<br/>\"gap\" leaves an empty space to not overlap the EdgePoint,\r\n            <br/>\"linefill\" makes the edge stop at the EdgePoint borders, but then connects the gap with a line.</div></>}\r\n\r\n    /*\r\n    bindVertexSizeToView!: boolean;\r\n    __info_of__bindVertexSizeToView: Info = {isNode:true, type:ShortAttribETypes.EBoolean, label:\"bind sizes to view\",\r\n        txt: <div>Store the vertex size inside the view instead of inside the vertex.\r\n            <br/>This causes the vertex to have different positions according to the view currently appied to it.</div>}*/\r\n    storeSize!: boolean;\r\n    __info_of__storeSize: Info = {isNode: true, type: ShortAttribETypes.EBoolean, label:\"bind sizes to view\",\r\n        txt: \"Active: the node position depends from the view currently displayed.Inactive: it depends from the graph.\"}\r\n\r\n    lazySizeUpdate!: boolean;\r\n    __info_of__lazySizeUpdate: Info = {isNode: true, type: ShortAttribETypes.EBoolean, txt: <div>If true updates the node position only when the drag action is finished. (best performance)</div>}\r\n\r\n    edgeStartOffset!: GraphPoint;\r\n    __info_of__edgeStartOffset: Info = {isEdge: true, type: GraphPoint.cname, label:\"start offset\",\r\n        txt: \"Location where outgoing edges should start their path, relative to top-upper corner of the element.\"}\r\n\r\n    edgeEndOffset!: GraphPoint;\r\n    __info_of__edgeEndOffset: Info = {isEdge: true,  type: GraphPoint.cname, label:\"end offset\",\r\n        txt: 'Same as this.edgeStartOffset'}\r\n\r\n\r\n    edgeStartOffset_isPercentage!: boolean;\r\n    __info_of__edgeStartOffset_isPercentage: Info = {isEdge: true, type:ShortAttribETypes.EBoolean, label:\"start offset is a %\",\r\n        txt: <div>Whether edgeStartOffset is an absolute value or a percentage.<br/>(eg: 50% of element width, vs 50 pixels flat).</div>}\r\n\r\n    edgeEndOffset_isPercentage!: boolean;\r\n    __info_of__edgeEndOffset_isPercentage: Info = {isEdge: true, type:ShortAttribETypes.EBoolean, label:\"end offset is a %\",\r\n        txt: <div>Whether edgeStartOffset is an absolute value or a percentage.<br/>(eg: 50% of element width, vs 50 pixels flat).</div>}\r\n\r\n\r\n    edgeStartStopAtBoundaries!: boolean;\r\n    __info_of__edgeStartStopAtBoundaries: Info = {isEdge: true, type:ShortAttribETypes.EBoolean, label:\"start cannot cross boundaries\",\r\n        txt: <div>Whether outgoing edges should cross the node boundaries overlapping the node\\'s html or stop at them.<br/>Edge arrows might enter the node if this is on.</div>}\r\n\r\n    edgeEndStopAtBoundaries!: boolean;\r\n    __info_of__edgeEndStopAtBoundaries: Info = {isEdge: true, type: ShortAttribETypes.EBoolean, label:\"end cannot cross boundaries\",\r\n        txt: <div>Whether incoming edges should cross the node boundaries overlapping the node\\'s html or stop at them.<br/>Edge arrows might enter the node if this is on.</div>}\r\n\r\n\r\n    edgePointCoordMode!: CoordinateMode;\r\n    __info_of__edgePointCoordMode: Info = {isEdgePoint: true, type: \"CoordinateMode\", enum: CoordinateMode, label:\"coordinate mode\",\r\n        txt:<div>Store coordinates as absolute coordinates or relative to start/end nodes.</div>}\r\n\r\n    edgeHeadSize!: GraphPoint;\r\n    __info_of__edgeHeadSize: Info = {isEdge: true, type:GraphPoint.cname, label:\"head decorator size\", txt:<div>Size of the edge head decorator if present.</div>}\r\n\r\n    edgeTailSize!: GraphPoint;\r\n    __info_of__edgeTailSize: Info = {isEdge: true, type:GraphPoint.cname, label:\"tail decorator size\", txt:<div>Size of the tail head decorator if present.</div>}\r\n\r\n    protected size!: Dictionary<Pointer<DModelElement> | Pointer<DGraphElement>, GraphSize>; // use getSize, updateSize;\r\n    __info_of__size: Info = {isNode: true, hidden:true, type: ShortAttribETypes.EInt,\r\n        txt:<div>Do not use directly, contains all the sizes stored in this view. use getSize, updateSize instead.</div>}\r\n\r\n\r\n    __info_of__updateSize: Info = {isNode:true, hidden:true, type:\"Function(Pointer<GraphElement | ModelElement>, GraphSize) => GraphSize\",\r\n        txt:<div>Updates the size stored in this view for target element.<br/>@returns: the delta of the change between old value and new value.</div>}\r\n    __info_of__getSize: Info = {isNode:true, hidden:true, type:\"Function(Pointer<GraphElement | ModelElement>) => GraphSize\",\r\n        txt:<div>Gets the size stored in this view for target element.</div>}\r\n\r\n    public _parsedConstants!: GObject;\r\n    public get__parsedConstants(c: Context): this['_parsedConstants'] { return c.data._parsedConstants || {}; }\r\n\r\n    public get_constants(c: Context): this['constants'] {\r\n        return c.data.constants;\r\n    }\r\n\r\n\r\n    public static parseConstants(funcCode?: string): GObject | undefined {\r\n        if (!funcCode) return {};\r\n        let parsedConstants: GObject = {};\r\n        let context: GObject = {__param: parsedConstants};\r\n        context.__proto__ = windoww.defaultContext;\r\n        try{\r\n            U.evalInContextAndScopeNew( \"(\"+funcCode+\")(this.__param)\", context, true, false, false);\r\n        } catch (e: any) {\r\n            Log.w(\"Attempted to save an invalid view.constant setup. Cause:\\n\" + e.message.split(\"\\n\")[0], e)\r\n            return undefined;\r\n        }\r\n        return parsedConstants;\r\n    }\r\n\r\n    public set_constants(value: this['constants'], c: Context): boolean {\r\n        if (value === c.data.constants) return true;\r\n        let parsedConstants: GObject | undefined = LViewElement.parseConstants(value) || {};\r\n        BEGIN();\r\n        SetFieldAction.new(c.data.id, 'constants', value, '', false);\r\n        SetFieldAction.new(c.data.id, '_parsedConstants', parsedConstants, '', false);\r\n        END()\r\n        return true;\r\n    }\r\n\r\n    public get_preRenderFunc(c: Context): this['preRenderFunc'] {\r\n        return c.data.preRenderFunc;\r\n    }\r\n    public set_preRenderFunc(value: this['preRenderFunc'], c: Context): boolean {\r\n        const _value = value ? value : '() => {}';\r\n        return SetFieldAction.new(c.data.id, 'preRenderFunc', _value, '', false);\r\n    }\r\n\r\n    public get_edgeHeadSize(c: Context): this[\"edgeHeadSize\"] { return new GraphPoint(c.data.edgeHeadSize.x, c.data.edgeHeadSize.y); }\r\n    public get_edgeTailSize(c: Context): this[\"edgeTailSize\"] { return new GraphPoint(c.data.edgeTailSize.x, c.data.edgeTailSize.y); }\r\n    public set_edgeHeadSize(v: Partial<this[\"edgeHeadSize\"]>, c: Context): boolean {\r\n        let s = c.data.edgeHeadSize || new GraphPoint(0, 0);\r\n        if (!(\"x\" in v)) v.x = s.x;\r\n        if (!(\"y\" in v)) v.y = s.y;\r\n        return SetFieldAction.new(c.data.id, \"edgeHeadSize\", v as GraphPoint, '', false); }\r\n    public set_edgeTailSize(v: Partial<this[\"edgeTailSize\"]>, c: Context): boolean {\r\n        let s = c.data.edgeTailSize || new GraphPoint(0, 0);\r\n        if (!(\"x\" in v)) v.x = s.x;\r\n        if (!(\"y\" in v)) v.y = s.y;\r\n        return SetFieldAction.new(c.data.id, \"edgeTailSize\", v as GraphPoint, '', false); }\r\n\r\n    public get_viewpoint(context: Context): this[\"viewpoint\"] {\r\n        return (LViewPoint.fromPointer(context.data.viewpoint as Pointer<DViewPoint>));\r\n    }\r\n    public set_subViews(v: Pointer<DViewPoint>[], context: Context): boolean { return this.cannotSet('subViews, call set_viewpoint on the sub-elements instead.'); }\r\n    public set_viewpoint(v: Pointer<DViewPoint>, context: Context, manualDview?: DViewElement, atIndex: number = -1): boolean {\r\n        let ret = false;\r\n        let vpid: Pointer<DViewPoint> = Pointers.from(v);\r\n        let id = (manualDview || context.data).id;\r\n        let oldvpid: Pointer<DViewPoint> = (manualDview || context.data).viewpoint;\r\n        if (vpid === oldvpid) return true;\r\n\r\n        TRANSACTION(()=>{\r\n            ret = SetFieldAction.new(id, \"viewpoint\", vpid, '', true);\r\n            oldvpid && SetFieldAction.new(oldvpid, \"subViews\", id as any, '-=', true);\r\n\r\n            if (atIndex === -1) {\r\n                SetFieldAction.new(vpid, \"subViews\", id, '+=', true);\r\n            } else {\r\n                let oldSubViews = [...DPointerTargetable.fromPointer(vpid).subViews];\r\n                oldSubViews.splice(atIndex, 0, id);\r\n                SetFieldAction.new(vpid, \"subViews\", oldSubViews, '', true);\r\n            }\r\n        })\r\n        return ret;\r\n    }\r\n\r\n\r\n    public get_subViews(context: Context, key: string): LViewElement[]{\r\n        let subViewsPointers = context.data.subViews;\r\n        let subViews: LViewElement[] = [];\r\n        for(let pointer of subViewsPointers){\r\n            let item: LViewElement = MyProxyHandler.wrap(pointer);\r\n            if(item !== undefined) subViews.push(item);\r\n        }\r\n        return subViews;\r\n    }\r\n\r\n    // returns the delta of change\r\n    public updateSize(id: Pointer<DModelElement> | Pointer<DGraphElement>, size: Partial<GraphSize>): boolean { return this.wrongAccessMessage(\"updateSize\"); }\r\n    public get_updateSize(context: Context): this[\"updateSize\"] {\r\n        return (id: Pointer<DModelElement> | Pointer<DGraphElement>, size: Partial<GraphSize>) => {\r\n            let vp = context.proxyObject.viewpoint;\r\n            if (!context.data.storeSize) {\r\n                if (vp?.storeSize) return vp.updateSize(id, size);\r\n                return false;\r\n            }\r\n            let vsize = context.data.size[id] || vp?.__raw.size[id] || context.data.defaultVSize || vp?.__raw.defaultVSize;\r\n            let newSize: GraphSize = new GraphSize();\r\n            newSize.x = size?.x !== undefined ? size.x : vsize.x;\r\n            newSize.y = size?.y !== undefined ? size.y : vsize.y;\r\n            newSize.w = size?.w !== undefined ? size.w : vsize.w;\r\n            newSize.h = size?.h !== undefined ? size.h : vsize.h;\r\n            if (!newSize.equals(vsize)) SetFieldAction.new(context.data.id, \"size.\" + id as any, newSize);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    public get_defaultVSize(context: Context): this[\"defaultVSize\"]{ return context.data.defaultVSize; }\r\n    public getSize(id: Pointer<DModelElement> | Pointer<DGraphElement>): GraphSize | undefined{ return this.wrongAccessMessage(\"getSize\"); }\r\n    public get_getSize(context: Context): ((...a:Parameters<this[\"getSize\"]>)=>ReturnType<LViewElement[\"getSize\"]>) {\r\n        function impl_getSize(id: Pointer<DModelElement> | Pointer<DGraphElement>): ReturnType<LViewElement[\"getSize\"]> {\r\n            if (typeof id === \"object\") id = (id as any).id;\r\n            let view = context.data;\r\n            let ret: GraphSize;\r\n            if (view.storeSize){\r\n                ret = view.size[id];\r\n                if(ret) return ret; }\r\n            let vp = context.proxyObject.viewpoint;\r\n            if (vp && view.id !== vp.id && vp.storeSize){\r\n                ret = vp.size[id];\r\n                if(ret) return ret; }\r\n            return undefined;\r\n        }\r\n\r\n        return impl_getSize; }\r\n\r\n    set_generic_entry(context: Context, key: keyof DViewElement, val: any): boolean {\r\n        console.log('set_generic_entry', {context, key, val});\r\n        SetFieldAction.new(context.data, key, val);\r\n        return true;\r\n    }\r\n\r\n    get_children(context: Context): never[] { return []; }\r\n\r\n\r\n    get_lazySizeUpdate(context: Context): D[\"lazySizeUpdate\"] { return Debug.lightMode || context.data.lazySizeUpdate; }\r\n    set_lazySizeUpdate(val: D[\"lazySizeUpdate\"], context: Context): boolean {\r\n        return Debug.lightMode || this.set_generic_entry(context, 'lazySizeUpdate', val);\r\n    }\r\n\r\n    get_bendingMode(context: Context): D[\"bendingMode\"] { return context.data.bendingMode; }\r\n    set_bendingMode(val: D[\"bendingMode\"], context: Context): boolean {\r\n        return this.set_generic_entry(context, 'bendingMode', val);\r\n    }\r\n\r\n    get_appliableToClasses(context: Context): this[\"appliableToClasses\"] { return context.data.appliableToClasses || []; }\r\n    set_appliableToClasses(val: this[\"appliableToClasses\"], context: Context): boolean {\r\n        if (!val) val = [];\r\n        else if (!Array.isArray(val)) val = [val];\r\n        return this.set_generic_entry(context, \"appliableToClasses\", val); }\r\n\r\n    set_defaultVSize(val: GraphSize, context: Context): boolean {\r\n        console.log('set_defaultVSize', {context, val});\r\n        return this.set_generic_entry(context, 'defaultVSize', val); }\r\n    /*\r\n        get___transient(context: LogicContext<this>): LViewTransientProperties {\r\n            return DPointerTargetable.wrap<DViewTransientProperties, LViewTransientProperties>(context.data.__transient, context.data,\r\n                // @ts-ignore for $ at end of getpath\r\n                'idlookup.' + context.data.id + '.' + (getPath as LViewElement).__transient.$); }*/\r\n\r\n    public duplicate(deep: boolean = true): this {\r\n        return this.wrongAccessMessage( (this.constructor as typeof RuntimeAccessibleClass).cname + \"duplicate()\"); }\r\n    protected get_duplicate(c: Context): ((deep?: boolean) => LViewElement) {\r\n        return (deep: boolean = false) => {\r\n            let lview: LViewElement = undefined as any;\r\n            TRANSACTION( () => {\r\n                let vpid: Pointer<DViewPoint> = c.data.viewpoint as Pointer<DViewPoint>;\r\n                const dclone: DViewElement = DViewElement.new2(`${c.data.name} Copy`, '', undefined, true, 'skip');\r\n                lview = LPointerTargetable.fromD(dclone);\r\n                for (let key in c.data) {\r\n                    if (key !== 'id' && key !== 'name' && key !== \"pointedBy\" && key !== 'viewpoint' && key !== 'subViews') {\r\n                        // @ts-ignore\r\n                        lview[key] = c.data[key];\r\n                    }\r\n                }\r\n\r\n                // insert in viewpoint.subview\r\n                //let defaultViews: Dictionary<Pointer, boolean> = Defaults.defaultViewsMap;\r\n                let vp: LViewPoint = c.proxyObject.viewpoint;\r\n                let oldViews: Pointer<DViewElement>[] = Pointers.from(vp.__raw.subViews);\r\n                // if (Defaults.viewpoints.indexOf(vpid)) oldViews = oldViews.filter( vid => !defaultViews[vid]);\r\n                let i: number = oldViews.indexOf(c.data.id);\r\n                this.set_viewpoint(vpid, undefined as any, dclone, i === -1 ? -1 : i+1); // insert in-place right after the cloned view\r\n                /*\r\n                if (i === -1) oldViews.push(dclone.id);\r\n                else oldViews.splice(i+1, 0, dclone.id); // insert in-place right after the cloned view\r\n                vp.subViews = oldViews as any;*/\r\n                // SetRootFieldAction.new('stackViews', dview.id, '+=', true);\r\n            })\r\n            return lview;\r\n        }\r\n    }\r\n}\r\nRuntimeAccessibleClass.set_extend(DPointerTargetable, DViewElement);\r\nRuntimeAccessibleClass.set_extend(LPointerTargetable, LViewElement);\r\nexport type WViewElement = getWParams<LViewElement, DPointerTargetable>;\r\n\r\n@RuntimeAccessible('DViewTransientProperties')\r\nexport class DViewTransientProperties extends RuntimeAccessibleClass{\r\n    static logic: typeof LPointerTargetable;\r\n    _isDViewTransientProperties!: true;\r\n    // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\r\n    // private: DViewPrivateTransientProperties;\r\n}\r\n\r\nRuntimeAccessibleClass.set_extend(RuntimeAccessibleClass, DViewTransientProperties);\r\n@RuntimeAccessible('LViewTransientProperties')\r\nexport class LViewTransientProperties extends LPointerTargetable{\r\n    static structure: typeof DPointerTargetable;\r\n    static singleton: LViewTransientProperties;\r\n    _isLViewTransientProperties!: true;\r\n\r\n    // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\r\n    // private!: LViewPrivateTransientProperties;\r\n    /*\r\n        get_private(context: LogicContext<DViewTransientProperties>): LViewPrivateTransientProperties {\r\n            return LViewTransientProperties.wrap(context.data.private, context.proxy.baseObjInLookup, context.proxy.additionalPath + '.private'); }*/\r\n    /*\r\n        get_isSelected(logicContext: LogicContext<TargetableProxyHandler<DViewTransientProperties>, DViewTransientProperties>): Proxyfied<Dictionary> {\r\n            // @ts-ignore for $ at end of getpath\r\n            console.log('GET_ISSELECTED handler func');\r\n            return TargetableProxyHandler.getMap(logicContext.data.isSelected, logicContext, logicContext.proxy.additionalPath + '.' + (getPath as this).isSelected.$);\r\n        }*/\r\n}\r\n\r\nRuntimeAccessibleClass.set_extend(DPointerTargetable, DViewTransientProperties);\r\nRuntimeAccessibleClass.set_extend(LPointerTargetable, LViewTransientProperties);\r\nexport type WViewTransientProperties = getWParams<LViewTransientProperties, DViewTransientProperties>;\r\n\r\n/*\r\n\r\n@RuntimeAccessible\r\nexport class DViewPrivateTransientProperties extends DPointerTargetable{\r\n    static logic: typeof LViewPrivateTransientProperties;\r\n\r\n    public size: GraphSize\r\n    constructor(size?: GraphSize) {\r\n        super();\r\n        this.size = size || defaultVSize;\r\n    }\r\n}\r\n\r\n@RuntimeAccessible\r\nexport class LViewPrivateTransientProperties extends DViewPrivateTransientProperties{\r\n    static structure: typeof DViewPrivateTransientProperties;\r\n    static singleton: LViewPrivateTransientProperties;\r\n\r\n}*/\r\n// shapeless component, receive jsx from redux\r\n// can access any of the redux state, but will usually access 1-2 var among many,\r\n// how can i dynamically mapStateToProps to map only the required ones?\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}