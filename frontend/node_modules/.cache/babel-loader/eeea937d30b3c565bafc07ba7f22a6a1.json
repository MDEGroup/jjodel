{"ast":null,"code":"var _dec,_class;import{DViewElement,EdgeBendingMode,EdgeHead,LPointerTargetable,RuntimeAccessible,U,Measurable}from'../joiner';import React from\"react\";import\"./error.scss\";// const beautify = require('js-beautify').html; // BEWARE: this adds some newline that might be breaking and introduce syntax errors in our JSX parser\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const beautify=s=>s;let ShortAttribETypes=window.ShortAttribETypes;export let DV=(_dec=RuntimeAccessible('DV'),_dec(_class=class DV{static invisibleJsx(){return'';}static modelView(){return beautify(DefaultView.model());}static packageView(){return beautify(DefaultView.package());}static classView(){return beautify(DefaultView.class());}static attributeView(){return beautify(DefaultView.feature());}static referenceView(){return beautify(DefaultView.feature());}static enumeratorView(){return beautify(DefaultView.enum());}static literalView(){return beautify(DefaultView.literal());}static fallbackView(){return beautify(DefaultView.void());}static operationView(){return beautify(DefaultView.operation());}static parameterView(){return beautify(DefaultView.parameter());}// i want to keep it because it will be useful for a candidate next feature in m1 & layoutable elements\n// it is still work in progress.\nstatic operationViewm1(){return beautify(DefaultView.operationm1());}static objectView(){return beautify(DefaultView.object());}static valueView(){return beautify(DefaultView.value());}static singletonView(){return beautify(DefaultView.singleton());}static defaultPackage(){return beautify(DefaultView.defaultPackage());}static errorView(publicmsg,debughiddenmsg,errortype,data,node,v){let visibleMessage=publicmsg&&typeof publicmsg===\"string\"?U.replaceAll(publicmsg,\"Parse Error:\",\"\").trim():publicmsg;console.error(\"error in view:\",{publicmsg,debuginfo:debughiddenmsg});return DefaultView.error(visibleMessage,errortype,data,node,v);}static errorView_string(publicmsg,debughiddenmsg,errortype,data,node,v){let visibleMessage=publicmsg&&typeof publicmsg===\"string\"?U.replaceAll(publicmsg,\"Parse Error:\",\"\").trim():publicmsg;console.error(\"error in view:\",{publicmsg,debuginfo:debughiddenmsg});return DefaultView.error_string(visibleMessage,errortype,data,node,v);}// {ancors.map( a => <EdgePoint view={\"aaaaa\"} initialSize={{x: node.w * a.x, y: node.h * a.y}}/>)}\nstatic anchorJSX(){return\"\\n<div className={\\\"overlap\\\"}>\\n{Object.keys(anchors).map( (k) => { let a = anchors[k]; return(\\n<div className={\\\"anchor draggable resizable\\\"} data-anchorName={a.name} data-anchorKey={k}\\n    onDragEnd={(coords/*Point*/)=>node.events.dragAnchor(coords, k)} onMouseUp={()=>{node.events.assignAnchor(k)}}\\n    style={{left: 100*a.x+'%', top:100*a.y+'%', width:a.w+'px', height:a.h+'px'}} />)})\\n}</div>\\n\";}static edgePointView(){return beautify(\"<div className={\\\"edgePoint\\\"} tabIndex=\\\"-1\\\">\\n    {decorators}\\n</div>\");}static edgePointViewSVG(){return beautify(\"<ellipse stroke={\\\"black\\\"} fill={\\\"red\\\"} cx={\\\"50\\\"} cy={\\\"50\\\"} rx={\\\"20\\\"} ry={\\\"20\\\"} />\"//`<ellipse stroke={\"black\"} fill={\"red\"} cx={props.node.x} cy={props.node.y} rx={props.node.w} ry={props.node.h} />`\n);}static svgHeadTail(head,type){let ret;let headstr=head===\"head\"?\"segments.head\":\"segments.tail\";let styleTranslateRotate='transform:\"translate(\" + '+headstr+'.x + \"px, \" + '+headstr+'.y + \"px) rotate(\" + ('+headstr+'.rad) + \"rad)\",'+' \"transformOrigin\":'+headstr+'.w/2+\"px \"+ '+headstr+'.h/2+\"px\"';let attrs=\"\\n\\t\\t\\t\\tstyle={{\"+styleTranslateRotate+\"}}\\n\\t\\t\\t\\tclassName={\\\"\"+head+\" \"+type+\" preview\\\"} />\\n\";let path;let hoverAttrs=\"\\n\\t\\t\\t\\tstyle={{\"+styleTranslateRotate+\"}}\\n\\t\\t\\t\\tclassName={\\\"\"+head+\" \"+type+\" clickable content\\\"} tabIndex=\\\"-1\\\" />\\n\";let d;switch(type){default:ret=\"edge '\"+head+\"' with type: '\"+type+\"' not found\";break;case EdgeHead.extend://if (head === \"tail\") return undefined;\nd=\"M 0 0   L x y/2   L 0 y   Z\";path=\"<path  \";ret=path+attrs+\"\\n\\t\\t\\t\\t\"+path+hoverAttrs;break;case EdgeHead.reference://if (head === \"tail\") return undefined;\nd=\"M 0 0   L x y/2   L 0 y\";path=\"<path  \";ret=path+attrs+\"\\n\\t\\t\\t\\t\"+path+hoverAttrs;break;case EdgeHead.aggregation://if (head === \"head\") return undefined;\nd=\"M 0 y/2   L x/2 0   L x y/2   L x/2 y   Z\";path=\"<path  \";ret=path+attrs+\"\\n\\t\\t\\t\\t\"+path+hoverAttrs;break;case EdgeHead.composition://if (head === \"head\") return undefined;\nd=\"M 0 y/2   L x/2 0   L x y/2   L x/2 y   Z\";path=\"<path  \";ret=path+attrs+\"\\n\\t\\t\\t\\t\"+path+hoverAttrs;break;/* `<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" style={overflow: \"visible\"}>\r\n                                            <path d={\"M 10 0 L 0 20 L 20 20 Z\"} fill=\"#ffffff\" stroke=\"#808080\" strokeWidth=\"1\"></path>\r\n                                         </svg>`;*/ //  style={transform: \"rotate3d(xcenter, ycenter, zcenter??, 90deg)\"}\n}//  transform={\"rotate(\"+`+headstr+`.rad+\"rad \"+ segments.all[0].start.pt.toString(false, \" \")}\nreturn ret;// no wrap because of .hoverable > .preview  on root & subelements must be consecutive\n// return `<g className=\"edge`+head + ` ` + type +`\" style={` + styleTranslate + `}>\\n`+ ret +`</g>`\n}// about label rotation in .edge > foreignObect > div (label)\n// first transform is h-center. second is rotate, third adds [0, 50%] of 50% vertical offset AFTER rotation to take label out of edge. fourth is to add a margin.\nstatic edgeView(modename,headSize,tailSize,dashing,vp,name){let fill;switch(modename){case EdgeHead.reference:default:fill='#fff0';break;case EdgeHead.composition:fill='#000';break;case EdgeHead.aggregation:case EdgeHead.extend:fill='#fff';break;}const agglabel=\"◇ Aggregation / Composition\";const extendlabel=\"△ \"+EdgeHead.extend;const asslabel=\"Λ \"+EdgeHead.reference;let headdict={[asslabel]:'M 0 0   L x y/2   L 0 y',[extendlabel]:'M 0 0   L x y/2   L 0 y   Z',[agglabel]:'M 0 y/2   L x/2 0   L x y/2   L x/2 y   Z'};let predefinedPaths=Object.entries(headdict).map(e=>({k:e[0],v:e[1]}));let headPath='',tailPath='';switch(modename){default:break;case EdgeHead.extend:headPath=extendlabel;break;case EdgeHead.reference:headPath=asslabel;break;case EdgeHead.aggregation:tailPath=agglabel;break;case EdgeHead.composition:tailPath=agglabel;break;}headPath=headdict[headPath]||'';tailPath=headdict[tailPath]||'';let palette={'anchorSize':{type:'number',value:20,unit:'px'},'dashing':{value:dashing||'',type:\"text\"},'stroke-color':U.hexToPalette('#777'),'stroke-width':{value:1,type:'number',unit:'px'},'stroke-color-hover':U.hexToPalette('#000'),'stroke-width-hover':{value:3,type:'number',unit:'px'},'head':{type:'path',value:headPath,options:predefinedPaths,x:'edgeHeadSize.x',y:'edgeHeadSize.y'},'tail':{type:'path',value:tailPath,options:predefinedPaths,x:'edgeTailSize.x',y:'edgeTailSize.y'},'fill':U.hexToPalette(fill)};let css=\".edge-anchor{\"+\"\\n\\tcursor: crosshair;\"+\"\\n\\tstroke: transparent;\"+\"\\n\\tfill: none;\"+\"\\n\\tr:var(--anchorSize);\"+\"\\n\\toutline: var(--stroke-width) solid var(--stroke-color);\"+\"\\n\\toutline-offset: calc(var(--stroke-width) * -1);\"+\"\\n\\tborder-radius: 100%;\"+\"\\n}\"+\"\\n.clickthrough, .unclickable{\"+\"\\n\\tpointer-events: none;\"+\"\\n}\"+\"\\n.clickable{\"+\"\\n\\tpointer-events: all;\"+\"\\n}\"+\"\\n.fullscreen{\"+\"\\n\\toverflow: visible;\"+\"\\n\\twidth: 100vw;\"+\"\\n\\theight: 100vh;\"+\"\\n}\"+\"\\npath{\"+\"\\n\\tfill: none;\"+\"\\n\\tstroke-dasharray: var(--dashing);\"+\"\\n\\t&.head{\"+\"\\n\\t\\td: path(var(--head));\"+\"\\n\\t}\"+\"\\n\\t&.tail{\"+\"\\n\\t\\td: path(var(--tail));\"+\"\\n\\t}\"+\"\\n}\"+\"\\npath.edge.full, path.tail, path.head{\"+\"\\n\\tstroke: var(--stroke-color);\"+\"\\n\\tstroke-width: var(--stroke-width);\"+\"\\n}\"+\"\\npath.tail, path.head{\"+\"\\n\\tfill:var(--fill);\"+\"\\n}\"+\"\\npath.edge.full.hover-activator{\"+\"\\n\\tstroke-width: var(--stroke-width-hover);\"+\"\\n\\tstroke: none;\"+\"\\n}\"+\"\\npath.content{\"+\"\\n\\tstroke: var(--stroke-color-hover);\"+\"\\n\\tstroke-width: var(--stroke-width-hover);\"+\"\\n}\"+\"\\n.label-text{\"+\"\\n\\tcolor: var(--stroke-color);\"+\"\\n}\"+\"\\nforeignObject.label{\"+\"\\n\\toverflow: visible;\"+\"\\n\\tcolor: var(--stroke-color);\"+\"\\n\\twidth: 0;\"+\"\\n\\theight: 0;\"+\"\\n\\twhite-space: pre;\"+\"\\n\\t> div{\"+\"\\n\\t\\twidth: fit-content;\"+\"\\n\\t}\"+\"\\n}\"+\"\\n\\t\"+\"\\n\\t\"+\"\";let head=DV.svgHeadTail(\"head\",modename)||'';let tail=DV.svgHeadTail(\"tail\",modename)||'';let jsx=beautify(\"<div className={\\\"edge hoverable hide-ep clickthrough fullscreen \"+modename+\"\\\"}>\\n            <svg className={\\\"clickthrough fullscreen\\\"}>\\n                { /* edge full paths\\n               \\n                 first is preview path, normally seen\\n                 third (segmented) is path onHover\\n                 second is to enlarge the hover area of path.preview to the same as path.content, so i avoid hover loop enter-leave and graphical flashing\\n                \\n                */ }\\n                <path className={\\\"preview edge full\"+(dashing?' dashed':'')+\"\\\"} d={this.edge.d} />\\n                <path className={\\\"preview edge full hover-activator\\\"} d={this.edge.d} />\\n                { /* edge separate segments */ }\\n                {segments && segments.all && segments.all.flatMap(s => [\\n                    <path tabIndex=\\\"-1\\\" className={\\\"clickable content segment\\\"} d={s.dpart}></path>,\\n                    s.label && <foreignObject className=\\\"label\\\" x={(s.start.pt.x + s.end.pt.x)/2+\\\"px\\\"} y={(s.start.pt.y + s.end.pt.y)/2+\\\"px\\\"}>\\n                    <div className={\\\"label-text\\\"}\\n                     style={{transform: \\\"translate(-50%, 0%) rotate(\\\"+s.radLabels+\\\"rad) translate(0%, -\\\"+(1-0.5*Math.abs(Math.abs(s.radLabels)%Math.PI)/(Math.PI/2))*100+\\\"%)\\\"+\\n                     \\\" translate(0%, -5px\\\"}}>{s.label}</div>\\n                    </foreignObject>\\n                ])}\\n                { /* edge head */ }\\n                \"+head+\"\\n                { /* edge tail */ }\\n                \"+tail+\"\\n                { /* edge anchor start */ }\\n                {edge.start && <circle className=\\\"edge-anchor content clickable no-drag\\\"\\n                 style={{transform: \\\"translate(\\\" + segments.all[0].start.pt.x +\\\"px, \\\" + segments.all[0].start.pt.y +\\\"px)\\\"}}\\n                 onMouseDown={()=> edge.startFollow=true}\\n                 onMouseUp={()=> edge.startfollow=false} />}\\n                { /* edge anchor end */ }\\n                {edge.end && <circle className=\\\"edge-anchor content clickable no-drag\\\" \"+// cx={0*segments.all.last().end.pt.x} cy={0*segments.all.last().end.pt.y}\n\"style={{transform: \\\"translate(\\\" + segments.all.last().end.pt.x +\\\"px, \\\" + segments.all.last().end.pt.y +\\\"px)\\\"}}\\n                 onMouseDown={()=> edge.endFollow=true}\\n                 onMouseUp={()=> edge.endfollow=false} />}\\n\\n            </svg>\\n            { /* interactively added edgepoints */ }\\n            {\\n                edge.midPoints.map( m => <EdgePoint data={edge.father.model.id} initialSize={m} key={m.id} view={\\\"EdgePoint\\\"} /> )\\n            }\\n            {decorators}\\n        </div>\");let edgePrerenderFunc=\"(ret)=>{\\n\"+\"// ** preparations and default behaviour here ** //\\n\"+\"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\"+\"// ** declarations here ** //\\n\"+\"\\n\"+\"}\";let edgeUsageDeclarations=\"(ret)=>{\\n\"+\"// ** preparations and default behaviour here ** //\\n\"+\"// ret.data = data\\n\"+\"ret.edgeview = edge.view.id\\n\"+\"ret.view = view\\n\"+\"// data, edge, view are dependencies by default. delete them above if you want to remove them.\\n\"+\"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\"+\"// ** declarations here ** //\\n\"+\"ret.start = edge.start\\n\"+\"ret.end = edge.end\\n\"+\"ret.segments = edge.segments\\n\"+\"}\";let ev=DViewElement.new2(\"Edge\"+name,jsx,vp,v=>{// v.appliableToClasses = [DVoidEdge.cname];\nv.appliableTo='Edge';v.bendingMode=EdgeBendingMode.Line;v.edgeHeadSize=headSize;v.edgeTailSize=tailSize;//v.constants = edgeConstants;\nv.palette=palette;v.css=css;v.usageDeclarations=edgeUsageDeclarations;v.preRenderFunc=edgePrerenderFunc;},false,'Pointer_ViewEdge'+name);return ev;}/*\r\n    {\r\n        false && edge.end.model.attributes.map( (m, index, arr) => <EdgePoint data={m.id} initialSize={(parent) => {\r\n            let segs = parent.segments.segments;\r\n            let pos = segs[0].start.pt.multiply(1-(index+1)/(arr.length+1), true).add(segs[segs.length-1].end.pt.multiply((index+1)/(arr.length+1), true));\r\n            // console.trace(\"initial ep\", {segs, pos, ratio:(index+1)/(arr.length+1), s:segs[0].start.pt, e:segs[segs.length-1].end.pt});\r\n            return {...pos, w:55, h:55}}} key={m.id} view={\"Pointer_ViewEdgePoint\"} /> )\r\n    }{\r\n        false && <EdgePoint key={\"midnode1\"} view={\"Pointer_ViewEdgePoint\"} />\r\n    }{\r\n        false && <EdgePoint key={\"midnode2\"} view={\"Pointer_ViewEdgePoint\"} />\r\n    }{\r\n        false && props.children && \"this would cause loop no idea why, needs to be fixed to allow passing EdgeNodes here\" || []\r\n    }\r\n    */static semanticErrorOverlay_old(){return\"<section className=\\\"overlap\\\">\\n    <div className=\\\"error-message\\\">Lowerbound violation</div>\\n</section>\";}static semanticErrorOverlay(){return\"<section className=\\\"overlap\\\">\\n    <div className=\\\"error-message\\\">{errors.join(<br/>)}</div>\\n</section>\";}})||_class);// DV class end\nlet valuecolormap={};valuecolormap[ShortAttribETypes.EBoolean]=\"orange\";valuecolormap[ShortAttribETypes.EByte]=\"orange\";valuecolormap[ShortAttribETypes.EShort]=\"orange\";valuecolormap[ShortAttribETypes.EInt]=\"orange\";valuecolormap[ShortAttribETypes.ELong]=\"orange\";valuecolormap[ShortAttribETypes.EFloat]=\"orange\";valuecolormap[ShortAttribETypes.EDouble]=\"orange\";valuecolormap[ShortAttribETypes.EDate]=\"green\";valuecolormap[ShortAttribETypes.EString]=\"green\";valuecolormap[ShortAttribETypes.EChar]=\"green\";valuecolormap[ShortAttribETypes.EVoid]=\"gray\";let valuecolormap_str=JSON.stringify(valuecolormap);// can this be declared inside view.constants ?\nexport class DefaultView{/* MODEL */static model(){return\"<View className={'root model'}>\\n<Scrollable graph={node}>\\n    {!data && \\\"Model data missing.\\\"}\\n\\n    {/* metamodel */}\\n    {data.isMetamodel && \\n        [<div className={'edges'}>\\n            {[\\n                refEdges.map(se => <Edge data={se.start} start={se.startNode.father} end={se.endNode} anchorStart={0} anchorEnd={0} key={se.id} isReference={true} \\n                view={'Edge' + (se.start.composition ? 'Composition' : (se.start.aggregation ? 'Aggregation' : 'Association'))} />),\\n                extendEdges.map(se => <Edge data={se.start} start={se.startNode} end={se.endNode} view={'EdgeInheritance'} isExtend={true} key={se.id} />)\\n            ]}\\n        </div>,\\n        otherPackages.filter(p => p).map(pkg => <DefaultNode key={pkg.id} data={pkg} />),\\n        level >= 1 && firstPackage && firstPackage.children.filter(c => c).map(classifier => <DefaultNode key={classifier.id} data={classifier} />)]\\n    }\\n\\n    {/* model */}\\n    {level >= 1 && m1Objects.filter(o => o).map(m1object => <DefaultNode key={m1object.id} data={m1object} />)}\\n    {decorators}\\n</Scrollable>\\n\\n{/* language designer defined controls */}\\n<Control title={'Semantic'} payoff={'Zooming'}>\\n    <Slider name={'level'} title={'Detail level '} node={node} max={3} />\\n</Control>\\n</View>\";}static void(){return\"<div className={'root void model-less round bg-white p-1'}>\\n    <div>voidvertex element test</div>\\n    <div>data: {props.data ? props.data.name : \\\"empty\\\"}</div>\\n    {decorators}\\n</div>\";}/* PACKAGE */static package(){return\"<View className={'root package'}>\\n    <Measurable draggable={true} resizable={true}><div>draggable resizable</div></Measurable>\\n    <Measurable draggable={true}><div>draggable</div></Measurable>\\n    <div className={'package-children'}>\\n        {upperLevel >= 1 ? [\\n            <label className={\\\"detail-level\\\"}>\\n                <input onChange={(e)=>{node.state = {level:+e.target.value}}} min=\\\"0\\\" max=\\\"3\\\" type=\\\"range\\\" step=\\\"1\\\" value={level}/>\\n                <div>Detail level:{level}</div>\\n            </label>,\\n            data.children.map(c => <DefaultNode key={c.id} data={c} />)\\n        ] :\\n        [\\n            <div className={\\\"summary\\\"}><b>URI:</b><span className={\\\"ms-1\\\"}>{data.uri}</span></div>,\\n            <div className={\\\"summary\\\"}>{[\\n                data.classes.length ? data.classes.length + \\\" classes\\\" : '',\\n                data.enumerators.length ? data.enumerators.length + \\\" enumerators\\\" : ''\\n               ].filter(v=>!!v).join(',')}</div>\\n        ]}\\n    </div>\\n    {decorators}\\n</View>\";}static defaultPackage(){return\"<div className={'root package'}>\\n    <div className={'package-children'}>\\n        {data.children.map(c => <DefaultNode key={c.id} data={c} />)}\\n    </div>\\n    {decorators}\\n</div>\";}/* CLASS */ // <View className={\"root class \" + (level === 1 && abstract ? \"abstract\")} + onClick={()=>{/*node.events.e1(Math.random().toFixed(3))*/}}>\nstatic class(){return\"<View className={\\\"root class\\\"} onClick={()=>{/*node.events.e1(Math.random().toFixed(3))*/}}>\\n<div className={'header'}>\\n    {data.isSingleton && <i className='bi bi-1-square'>&nbsp;</i>}\\n    {level > 1 && <b className={'class-name'}>{interface ? 'Interface' : abstract ? 'Abstract Class' : 'Class'}: </b>}    \\n    {level === 1 && <i className=\\\"bi bi-c-square-fill\\\"></i>}<Input data={data} field={'name'} hidden={true} autosize={true} />\\n</div>\\n\\n{level > 2 && data.children.length > 0 && <hr/>}\\n\\n{level > 2 && \\n    <div className={'class-children'}>\\n        {level >= 2 && [\\n            attributes.map(c => <DefaultNode key={c.id} data={c} />),\\n            references.map(c => <DefaultNode key={c.id} data={c} />),\\n            operations.map(c => <DefaultNode key={c.id} data={c} />)\\n        ]\\n        || [\\n        <div className={\\\"summary\\\"}>{[\\n            attributes.length ? attributes.length + \\\" attributes\\\" : '',\\n            references.length ? references.length + \\\" references\\\" : '',\\n            operations.length ? operations.length + \\\" operations\\\" : '',\\n            !(attributes.length + references.length + operations.length) ? '- empty -' : ''\\n            ].filter(v=>!!v).join(',')}</div>\\n        ]\\n        }\\n    </div>\\n}\\n\\n{decorators}\\n</View>\";}/* ENUM */static enum(){return\"<View className={'root enumerator'}>\\n    <div className={'header'}>\\n        {level > 1 && <b className={'enumerator-name'}>Enum:</b>}\\n        {level == 1 && <i className=\\\"bi bi-explicit-fill\\\"></i>}<Input data={data} field={'name'} hidden={true} autosize={true} />\\n    </div>\\n    {level > 1 && <hr />}\\n    <div className={'enumerator-children'}>\\n        {level >= 2 && literals.map(c => <DefaultNode key={c.id} data={c}/>)}\\n    </div>\\n    {decorators}\\n</View>\";}/* FEATURE */static feature(){return\"<View className={'root feature w-100'}>\\n    <span className={'feature-name'}>{data.name}:</span>\\n    <Select data={data} field={'type'} />\\n    {decorators}\\n</View>\";}/* LITERAL */static literal(){return\"<label className={'root literal d-block text-center'}>\\n    {data.name}\\n    {decorators}\\n</label>\";}/* OPERATION */static operation(){return\"<View className={'root operation w-100 hoverable'}>\\n        <span className={'feature-name'}>{data.name + ' =>'}</span>\\n        <Select data={data} field={'type'} />\\n    <div className={\\\"parameters content\\\"}>\\n    {data.exceptions.length ? \\\" throws \\\" + data.exceptions.join(\\\", \\\") : ''}\\n    {\\n        level >= 3 && data.parameters.map(p => <DefaultNode data={p} key={p.id} />)\\n    }</div>\\n    {decorators}\\n</View>\";}/* PARAMETER */static parameter(){return\"<View className={'root parameter w-100'}>\\n    <span className={'feature-name'}>\\n        {data.name + '' + (data.lowerBound === 0 ? '?:' : ':' )}\\n    </span>\\n    <Select data={data} field={'type'} />\\n    <span className={\\\"modifier\\\"}>{data.upperBound > 1 || data.upperBound === -1 ? '[]' : ''}</span>\\n    {decorators}\\n</View>\";}// i want to keep it because it will be useful for a candidate next feature in m1 & layoutable elements\n// it is still work in progress.\nstatic operationm1(){return\"<div className={'d-flex root operationm1'} style={{paddingRight: \\\"6px\\\"}}>\\n    <label className={'d-block ms-1'}>{this.props.data.instanceof.name}</label>\\n    <label className={'d-block ms-auto hover-root'} style={{color:\"+valuecolormap_str+\"[this.props.data.values.type] || \\\"gray\\\"}}>\\n        \\u2192\\u2192\\u2192\\n        <div className=\\\"hover-content\\\">\\n            <ParameterForm operation={this.props.data.id} vertical={true} />\\n        </div>\\n    </label>\\n    {decorators}\\n</div>\";}static objectOld(){return\"<div className={'round bg-white root class'}>\\n    <label className={'ms-1'}>\\n        <Input jsxLabel={<b className={'object-name'}>{data.instanceof ? data.instanceof.name : \\\"Object\\\"}:</b>} \\n           data={data} field={'name'} hidden={true} autosize={true}/>\\n    </label>\\n    <hr />\\n    <div className={'object-children'}>\\n        { features.map(c => <DefaultNode key={c.id} data={c} />) }\\n    </div>\\n    {decorators}\\n</div>\";}//     public static object(): string { return (\n// `<View className={'root object'}>\n//     <b className={'object-name'}>{data.instanceof ? data.instanceof.name : 'Object'}:</b>\n//     <Input data={data} field={'name'} hidden={true} autosize={true} />\n//     <hr/>\n//     <div className={'object-children'}>\n//         {level >= 2 && data.features.map(f => <DefaultNode key={f.id} data={f} />)}\n//     </div>\n//     {decorators}\n// </View>`\n// );}\n/* OBJECT */static object(){return\"<View className={'root object'}>\\n    <b className={'object-name'}>{data.instanceof ? data.instanceof.name : 'Object'}:</b>\\n    <Input data={data} field={'name'} hidden={true} autosize={true} />\\n    <hr/>\\n    <div className={'object-children'}>\\n        {level >= 2 && data.features.map(f => <DefaultNode key={f.id} data={f} />)}\\n    </div>\\n    {decorators}\\n</View>\";}/* VALUE */static value(){return\"<View className={'root value d-flex'}>\\n    {instanceofname && <label className={'d-block ms-1 name'}>{instanceofname}</label>}\\n    {!instanceofname && <Input className='name' data={data} field={'name'} hidden={true} autosize={true} />}\\n    <label className={'d-block m-auto values_str'} style={{color: constants[typeString] || 'gray'}}>\\n        : {valuesString}\\n    </label>\\n    {decorators}\\n</View>\";}/* SINGLETON OBJECT */static singleton(){return\"<div className={'singleton'}>\\n        <div className={'header'}>\\n            {data.name}        \\n        </div>\\n    </div>\";}/* ERROR */static error(msg,errortype,data,node,v){var _lv$viewpoint;let dname=data&&(data.name||data.className.substring(1));if(dname&&dname.length>=10)dname=dname.substring(0,7)+'…';let nodename=((node===null||node===void 0?void 0:node.className)||'').replace(/[^A-Z]+/g,\"\").substring(1);let on=dname&&nodename?\" on \"+dname+\" / \"+nodename:dname||nodename?\" on \"+(dname||nodename):'';let lv=v?v.__isProxy?v:LPointerTargetable.wrap(v):undefined;let viewpointname=(lv===null||lv===void 0?void 0:(_lv$viewpoint=lv.viewpoint)===null||_lv$viewpoint===void 0?void 0:_lv$viewpoint.name)||'';return/*#__PURE__*/_jsx(Measurable,{draggable:true,resizable:true,children:/*#__PURE__*/_jsxs(\"div\",{className:'error-notification',children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Something Went Wrong...\"}),v&&/*#__PURE__*/_jsxs(\"h2\",{children:[\"Error in \\\"\",v===null||v===void 0?void 0:v.name,\"\\\" syntax view definition\",viewpointname?' in viewpoint '+viewpointname:'',\".\"]}),/*#__PURE__*/_jsx(\"div\",{className:'error-type',children:/*#__PURE__*/_jsxs(\"b\",{\"data-dname\":dname,\"data-nodename\":nodename,\"data-str\":false,children:[errortype,\" Error \",on,false&&v&&/*#__PURE__*/_jsxs(\"div\",{children:[\"While applying view \\\"\",v===null||v===void 0?void 0:v.name,\"\\\"\"]})]})}),/*#__PURE__*/_jsx(\"div\",{className:'error-details',children:msg})]})});}static error_string(msg,errortype,data,node,v){var _lv$viewpoint2;let dname=data&&(data.name||data.className.substring(1));if(dname&&dname.length>=10)dname=dname.substring(0,7)+'…';let nodename=((node===null||node===void 0?void 0:node.className)||'').replace(/[^A-Z]+/g,\"\").substring(1);let on=dname&&nodename?\" on \"+dname+\" / \"+nodename:dname||nodename?\" on \"+(dname||nodename):'';let lv=v?v.__isProxy?v:LPointerTargetable.wrap(v):undefined;let viewpointname=(lv===null||lv===void 0?void 0:(_lv$viewpoint2=lv.viewpoint)===null||_lv$viewpoint2===void 0?void 0:_lv$viewpoint2.name)||'';// <div className={'w-100 h-100 round bg-white border border-danger'} style={{minHeight:\"50px\", overflow:\"scroll\"}}>\n//     <div className={'text-center text-danger'} tabIndex={-1} style={{background:\"#fff\", overflow: 'visible', zIndex:100, minWidth:\"min-content\"}}>\n//         <b>{errortype}_ERROR` + on + `</b>\n//         <hr/>\n//         <label className={'text-center mx-1 d-block'}>\n//             While applying view \"${v?.name}\"\n//         </label>\n//         {${msg} && <label className={'text-center mx-1 d-block'} style={{color:\"black\"}}>${msg}</label>}\n//     </div>\n// </div>\nreturn\"<Measurable draggable={true} resizable={true}><div className={'error-notification'}>\\n            <h1>Something Went Wrong...</h1>\\n            \"+(v&&\"<h2>Error in \\\"\".concat(v===null||v===void 0?void 0:v.name,\"\\\" syntax view definition\").concat(viewpointname?' in viewpoint '+viewpointname:'',\".</h2>\"))+\"\\n            <div className={'error-type'}>\\n                <b data-dname=\".concat(dname,\" data-nodename=\").concat(nodename,\" data-str={true}>\\n                    \").concat(errortype,\" Error \").concat(on,\"\\n                    {false && v && <div>While applying view \\\"\").concat(v===null||v===void 0?void 0:v.name,\"\\\"</div>}\\n                </b>\\n            </div>\\n            <div className={'error-details'}>\").concat(msg,\"</div>\\n        </div></Measurable>)\");}}","map":{"version":3,"names":["DViewElement","EdgeBendingMode","EdgeHead","LPointerTargetable","RuntimeAccessible","U","Measurable","React","jsx","_jsx","jsxs","_jsxs","beautify","s","ShortAttribETypes","window","DV","_dec","_class","invisibleJsx","modelView","DefaultView","model","packageView","package","classView","class","attributeView","feature","referenceView","enumeratorView","enum","literalView","literal","fallbackView","void","operationView","operation","parameterView","parameter","operationViewm1","operationm1","objectView","object","valueView","value","singletonView","singleton","defaultPackage","errorView","publicmsg","debughiddenmsg","errortype","data","node","v","visibleMessage","replaceAll","trim","console","error","debuginfo","errorView_string","error_string","anchorJSX","edgePointView","edgePointViewSVG","svgHeadTail","head","type","ret","headstr","styleTranslateRotate","attrs","path","hoverAttrs","d","extend","reference","aggregation","composition","edgeView","modename","headSize","tailSize","dashing","vp","name","fill","agglabel","extendlabel","asslabel","headdict","predefinedPaths","Object","entries","map","e","k","headPath","tailPath","palette","unit","hexToPalette","options","x","y","css","tail","edgePrerenderFunc","edgeUsageDeclarations","ev","new2","appliableTo","bendingMode","Line","edgeHeadSize","edgeTailSize","usageDeclarations","preRenderFunc","semanticErrorOverlay_old","semanticErrorOverlay","valuecolormap","EBoolean","EByte","EShort","EInt","ELong","EFloat","EDouble","EDate","EString","EChar","EVoid","valuecolormap_str","JSON","stringify","objectOld","msg","_lv$viewpoint","dname","className","substring","length","nodename","replace","on","lv","__isProxy","wrap","undefined","viewpointname","viewpoint","draggable","resizable","children","_lv$viewpoint2","concat"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/src/common/DV.tsx"],"sourcesContent":["import {\r\n    DGraphElement, Dictionary,\r\n    DModelElement,\r\n    DViewElement,\r\n    DViewPoint,\r\n    DVoidEdge,\r\n    EdgeBendingMode,\r\n    EdgeHead,\r\n    GObject,\r\n    GraphPoint, LPointerTargetable, LViewElement,\r\n    Pointer,\r\n    RuntimeAccessible,\r\n    ShortAttribETypes as SAType,\r\n    U, Draggable, Measurable\r\n} from '../joiner';\r\nimport React, {ReactNode} from \"react\";\r\nimport {PaletteType} from \"../view/viewElement/view\";\r\nimport \"./error.scss\";\r\n\r\n\r\n\r\n// const beautify = require('js-beautify').html; // BEWARE: this adds some newline that might be breaking and introduce syntax errors in our JSX parser\r\nconst beautify = (s: string) => s;\r\nlet ShortAttribETypes: typeof SAType = (window as any).ShortAttribETypes;\r\n\r\n\r\n\r\n@RuntimeAccessible('DV')\r\nexport class DV {\r\n    public static invisibleJsx(): string { return ''; }\r\n    public static modelView(): string { return beautify(DefaultView.model()); }\r\n    public static packageView(): string { return beautify(DefaultView.package()); }\r\n    public static classView(): string { return beautify(DefaultView.class()); }\r\n    public static attributeView(): string { return beautify(DefaultView.feature()); }\r\n    public static referenceView(): string { return beautify(DefaultView.feature()); }\r\n    public static enumeratorView(): string { return beautify(DefaultView.enum()); }\r\n    public static literalView(): string { return beautify(DefaultView.literal()); }\r\n    public static fallbackView(): string { return beautify(DefaultView.void()); }\r\n    public static operationView(): string { return beautify(DefaultView.operation()); }\r\n    public static parameterView(): string { return beautify(DefaultView.parameter()); }\r\n\r\n    // i want to keep it because it will be useful for a candidate next feature in m1 & layoutable elements\r\n    // it is still work in progress.\r\n    public static operationViewm1(): string { return beautify(DefaultView.operationm1()); }\r\n    public static objectView(): string { return beautify(DefaultView.object()); }\r\n    public static valueView(): string { return beautify(DefaultView.value()); }\r\n    public static singletonView(): string { return beautify(DefaultView.singleton()); }\r\n    public static defaultPackage(): string { return beautify(DefaultView.defaultPackage()); }\r\n\r\n    public static errorView(publicmsg: ReactNode, debughiddenmsg:any, errortype: string, data?: DModelElement | undefined, node?: DGraphElement | undefined, v?: LViewElement|DViewElement): React.ReactNode {\r\n        let visibleMessage = publicmsg && typeof publicmsg === \"string\" ? U.replaceAll(publicmsg, \"Parse Error:\", \"\").trim() : publicmsg;\r\n        console.error(\"error in view:\", {publicmsg, debuginfo:debughiddenmsg});\r\n        return DefaultView.error(visibleMessage, errortype, data, node, v); }\r\n    public static errorView_string(publicmsg: string, debughiddenmsg:any, errortype: string, data?: DModelElement | undefined, node?: DGraphElement | undefined, v?: LViewElement|DViewElement): React.ReactNode {\r\n        let visibleMessage = publicmsg && typeof publicmsg === \"string\" ? U.replaceAll(publicmsg, \"Parse Error:\", \"\").trim() : publicmsg;\r\n        console.error(\"error in view:\", {publicmsg, debuginfo:debughiddenmsg});\r\n        return DefaultView.error_string(visibleMessage, errortype, data, node, v); }\r\n\r\n    // {ancors.map( a => <EdgePoint view={\"aaaaa\"} initialSize={{x: node.w * a.x, y: node.h * a.y}}/>)}\r\n    public static anchorJSX(): string { return (`\r\n<div className={\"overlap\"}>\r\n{Object.keys(anchors).map( (k) => { let a = anchors[k]; return(\r\n<div className={\"anchor draggable resizable\"} data-anchorName={a.name} data-anchorKey={k}\r\n    onDragEnd={(coords/*Point*/)=>node.events.dragAnchor(coords, k)} onMouseUp={()=>{node.events.assignAnchor(k)}}\r\n    style={{left: 100*a.x+'%', top:100*a.y+'%', width:a.w+'px', height:a.h+'px'}} />)})\r\n}</div>\r\n`);}\r\n    static edgePointView(): string { return beautify((\r\n`<div className={\"edgePoint\"} tabIndex=\"-1\">\r\n    {decorators}\r\n</div>`\r\n))}\r\n    static edgePointViewSVG(): string { return beautify(\r\n        `<ellipse stroke={\"black\"} fill={\"red\"} cx={\"50\"} cy={\"50\"} rx={\"20\"} ry={\"20\"} />`\r\n        //`<ellipse stroke={\"black\"} fill={\"red\"} cx={props.node.x} cy={props.node.y} rx={props.node.w} ry={props.node.h} />`\r\n    )}\r\n\r\n    static svgHeadTail(head: \"head\" | \"tail\", type: EdgeHead): string | undefined {\r\n        let ret: string;\r\n        let headstr = head===\"head\" ? \"segments.head\" : \"segments.tail\";\r\n        let styleTranslateRotate = 'transform:\"translate(\" + ' + headstr + '.x + \"px, \" + ' + headstr + '.y + \"px) rotate(\" + (' + headstr + '.rad) + \"rad)\",' +\r\n            ' \"transformOrigin\":'+headstr+'.w/2+\"px \"+ '+headstr+'.h/2+\"px\"';\r\n        let attrs = `\\n\\t\\t\\t\\tstyle={{`+styleTranslateRotate +`}}\\n\\t\\t\\t\\tclassName={\"` + head + ` ` + type +` preview\"} />\\n`;\r\n        let path: string;\r\n        let hoverAttrs = `\\n\\t\\t\\t\\tstyle={{`+styleTranslateRotate +`}}\\n\\t\\t\\t\\tclassName={\"` + head + ` ` + type +` clickable content\"} tabIndex=\"-1\" />\\n`;\r\n        let d: string;\r\n        switch (type) {\r\n            default:\r\n                ret = \"edge '\" + head + \"' with type: '\" +type + \"' not found\";\r\n                break;\r\n            case EdgeHead.extend:\r\n                //if (head === \"tail\") return undefined;\r\n                d = `M 0 0   L x y/2   L 0 y   Z`;\r\n                path = `<path  `;\r\n                ret = path + attrs + \"\\n\\t\\t\\t\\t\" + path + hoverAttrs;\r\n                break;\r\n            case EdgeHead.reference:\r\n                //if (head === \"tail\") return undefined;\r\n                d = `M 0 0   L x y/2   L 0 y`;\r\n                path = `<path  `;\r\n                ret = path + attrs + \"\\n\\t\\t\\t\\t\" + path + hoverAttrs;\r\n                break;\r\n            case EdgeHead.aggregation:\r\n                //if (head === \"head\") return undefined;\r\n                d = `M 0 y/2   L x/2 0   L x y/2   L x/2 y   Z`;\r\n                path = `<path  `;\r\n                ret = path + attrs + \"\\n\\t\\t\\t\\t\" + path + hoverAttrs;\r\n                break;\r\n            case EdgeHead.composition:\r\n                //if (head === \"head\") return undefined;\r\n                d = `M 0 y/2   L x/2 0   L x y/2   L x/2 y   Z`;\r\n                path = `<path  `;\r\n                ret = path + attrs + \"\\n\\t\\t\\t\\t\" + path + hoverAttrs;\r\n                break;\r\n                /* `<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" style={overflow: \"visible\"}>\r\n                                            <path d={\"M 10 0 L 0 20 L 20 20 Z\"} fill=\"#ffffff\" stroke=\"#808080\" strokeWidth=\"1\"></path>\r\n                                         </svg>`;*/\r\n                //  style={transform: \"rotate3d(xcenter, ycenter, zcenter??, 90deg)\"}\r\n        }\r\n        //  transform={\"rotate(\"+`+headstr+`.rad+\"rad \"+ segments.all[0].start.pt.toString(false, \" \")}\r\n        return ret; // no wrap because of .hoverable > .preview  on root & subelements must be consecutive\r\n        // return `<g className=\"edge`+head + ` ` + type +`\" style={` + styleTranslate + `}>\\n`+ ret +`</g>`\r\n    }\r\n\r\n    // about label rotation in .edge > foreignObect > div (label)\r\n    // first transform is h-center. second is rotate, third adds [0, 50%] of 50% vertical offset AFTER rotation to take label out of edge. fourth is to add a margin.\r\n    static edgeView(modename: EdgeHead, headSize: GraphPoint, tailSize: GraphPoint, dashing: string | undefined, vp: DViewElement, name: string): DViewElement {\r\n        let fill: string;\r\n        switch (modename){\r\n            case EdgeHead.reference:\r\n            default: fill = '#fff0'; break;\r\n            case EdgeHead.composition: fill = '#000'; break;\r\n            case EdgeHead.aggregation:\r\n            case EdgeHead.extend: fill = '#fff'; break;\r\n        }\r\n\r\n        const agglabel = \"◇ Aggregation / Composition\";\r\n        const extendlabel = \"△ \"+EdgeHead.extend;\r\n        const asslabel = \"Λ \"+EdgeHead.reference;\r\n        let headdict: Dictionary<string, string> = {\r\n            [asslabel]: 'M 0 0   L x y/2   L 0 y',\r\n            [extendlabel]: 'M 0 0   L x y/2   L 0 y   Z',\r\n            [agglabel]: 'M 0 y/2   L x/2 0   L x y/2   L x/2 y   Z',\r\n        };\r\n        let predefinedPaths: {k:string, v:string}[] = Object.entries(headdict).map((e)=>({k:e[0], v:e[1]}));\r\n\r\n        let headPath: string = '', tailPath: string = '';\r\n        switch (modename) {\r\n            default: break;\r\n            case EdgeHead.extend: headPath = extendlabel; break;\r\n            case EdgeHead.reference: headPath = asslabel; break;\r\n            case EdgeHead.aggregation: tailPath = agglabel; break;\r\n            case EdgeHead.composition: tailPath = agglabel; break;\r\n        }\r\n        headPath = headdict[headPath] || '';\r\n        tailPath = headdict[tailPath] || '';\r\n\r\n        let palette: PaletteType = {\r\n            'anchorSize': {type: 'number', value:20, unit:'px'},\r\n            'dashing': {value:dashing || '', type: \"text\"},\r\n            'stroke-color': U.hexToPalette('#777'),\r\n            'stroke-width': {value:1, type: 'number', unit: 'px'},\r\n            'stroke-color-hover': U.hexToPalette('#000'),\r\n            'stroke-width-hover': {value:3, type: 'number', unit: 'px'},\r\n            'head': {type:'path', value:headPath, options: predefinedPaths, x:'edgeHeadSize.x', y:'edgeHeadSize.y'},\r\n            'tail': {type:'path', value:tailPath, options: predefinedPaths, x:'edgeTailSize.x', y:'edgeTailSize.y'},\r\n            'fill': U.hexToPalette(fill),\r\n        };\r\n\r\n        let css = \".edge-anchor{\" +\r\n        \"\\n\\tcursor: crosshair;\" +\r\n        \"\\n\\tstroke: transparent;\" +\r\n        \"\\n\\tfill: none;\" +\r\n        \"\\n\\tr:var(--anchorSize);\" +\r\n        \"\\n\\toutline: var(--stroke-width) solid var(--stroke-color);\"+\r\n        \"\\n\\toutline-offset: calc(var(--stroke-width) * -1);\" +\r\n        \"\\n\\tborder-radius: 100%;\" +\r\n        \"\\n}\" +\r\n        \"\\n.clickthrough, .unclickable{\" +\r\n        \"\\n\\tpointer-events: none;\" +\r\n        \"\\n}\" +\r\n        \"\\n.clickable{\" +\r\n        \"\\n\\tpointer-events: all;\" +\r\n        \"\\n}\" +\r\n        \"\\n.fullscreen{\" +\r\n        \"\\n\\toverflow: visible;\" +\r\n        \"\\n\\twidth: 100vw;\" +\r\n        \"\\n\\theight: 100vh;\" +\r\n        \"\\n}\" +\r\n        \"\\npath{\" +\r\n        \"\\n\\tfill: none;\" +\r\n        \"\\n\\tstroke-dasharray: var(--dashing);\" +\r\n        \"\\n\\t&.head{\" +\r\n        \"\\n\\t\\td: path(var(--head));\" +\r\n        \"\\n\\t}\" +\r\n        \"\\n\\t&.tail{\" +\r\n        \"\\n\\t\\td: path(var(--tail));\" +\r\n        \"\\n\\t}\" +\r\n        \"\\n}\" +\r\n        \"\\npath.edge.full, path.tail, path.head{\" +\r\n        \"\\n\\tstroke: var(--stroke-color);\" +\r\n        \"\\n\\tstroke-width: var(--stroke-width);\" +\r\n        \"\\n}\" +\r\n        \"\\npath.tail, path.head{\" +\r\n        \"\\n\\tfill:var(--fill);\" +\r\n        \"\\n}\" +\r\n        \"\\npath.edge.full.hover-activator{\" +\r\n        \"\\n\\tstroke-width: var(--stroke-width-hover);\" +\r\n        \"\\n\\tstroke: none;\" +\r\n        \"\\n}\" +\r\n        \"\\npath.content{\" +\r\n        \"\\n\\tstroke: var(--stroke-color-hover);\" +\r\n        \"\\n\\tstroke-width: var(--stroke-width-hover);\" +\r\n        \"\\n}\" +\r\n        \"\\n.label-text{\" +\r\n        \"\\n\\tcolor: var(--stroke-color);\" +\r\n        \"\\n}\" +\r\n        \"\\nforeignObject.label{\" +\r\n        \"\\n\\toverflow: visible;\" +\r\n        \"\\n\\tcolor: var(--stroke-color);\" +\r\n        \"\\n\\twidth: 0;\" +\r\n        \"\\n\\theight: 0;\" +\r\n        \"\\n\\twhite-space: pre;\" +\r\n        \"\\n\\t> div{\" +\r\n        \"\\n\\t\\twidth: fit-content;\" +\r\n        \"\\n\\t}\" +\r\n        \"\\n}\" +\r\n        \"\\n\\t\" +\r\n        \"\\n\\t\" +\r\n        \"\";\r\n        let head = DV.svgHeadTail(\"head\", modename) || '';\r\n        let tail = DV.svgHeadTail(\"tail\", modename) || '';\r\n        let jsx = beautify(\r\n        `<div className={\"edge hoverable hide-ep clickthrough fullscreen ` + modename + `\"}>\r\n            <svg className={\"clickthrough fullscreen\"}>\r\n                { /* edge full paths\r\n               \r\n                 first is preview path, normally seen\r\n                 third (segmented) is path onHover\r\n                 second is to enlarge the hover area of path.preview to the same as path.content, so i avoid hover loop enter-leave and graphical flashing\r\n                \r\n                */ }\r\n                <path className={\"preview edge full` + (dashing ? ' dashed' : '') + `\"} d={this.edge.d} />\r\n                <path className={\"preview edge full hover-activator\"} d={this.edge.d} />\r\n                { /* edge separate segments */ }\r\n                {segments && segments.all && segments.all.flatMap(s => [\r\n                    <path tabIndex=\"-1\" className={\"clickable content segment\"} d={s.dpart}></path>,\r\n                    s.label && <foreignObject className=\"label\" x={(s.start.pt.x + s.end.pt.x)/2+\"px\"} y={(s.start.pt.y + s.end.pt.y)/2+\"px\"}>\r\n                    <div className={\"label-text\"}\r\n                     style={{transform: \"translate(-50%, 0%) rotate(\"+s.radLabels+\"rad) translate(0%, -\"+(1-0.5*Math.abs(Math.abs(s.radLabels)%Math.PI)/(Math.PI/2))*100+\"%)\"+\r\n                     \" translate(0%, -5px\"}}>{s.label}</div>\r\n                    </foreignObject>\r\n                ])}\r\n                { /* edge head */ }\r\n                ` + head + `\r\n                { /* edge tail */ }\r\n                ` + tail + `\r\n                { /* edge anchor start */ }\r\n                {edge.start && <circle className=\"edge-anchor content clickable no-drag\"\r\n                 style={{transform: \"translate(\" + segments.all[0].start.pt.x +\"px, \" + segments.all[0].start.pt.y +\"px)\"}}\r\n                 onMouseDown={()=> edge.startFollow=true}\r\n                 onMouseUp={()=> edge.startfollow=false} />}\r\n                { /* edge anchor end */ }\r\n                {edge.end && <circle className=\"edge-anchor content clickable no-drag\" `+ // cx={0*segments.all.last().end.pt.x} cy={0*segments.all.last().end.pt.y}\r\n                `style={{transform: \"translate(\" + segments.all.last().end.pt.x +\"px, \" + segments.all.last().end.pt.y +\"px)\"}}\r\n                 onMouseDown={()=> edge.endFollow=true}\r\n                 onMouseUp={()=> edge.endfollow=false} />}\r\n\r\n            </svg>\r\n            { /* interactively added edgepoints */ }\r\n            {\r\n                edge.midPoints.map( m => <EdgePoint data={edge.father.model.id} initialSize={m} key={m.id} view={\"EdgePoint\"} /> )\r\n            }\r\n            {decorators}\r\n        </div>`\r\n    );\r\n        let edgePrerenderFunc: string = \"(ret)=>{\\n\" +\r\n            \"// ** preparations and default behaviour here ** //\\n\" +\r\n            \"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\" +\r\n            \"// ** declarations here ** //\\n\" +\r\n            \"\\n\"+\r\n            \"}\";\r\n\r\n        let edgeUsageDeclarations = \"(ret)=>{\\n\" +\r\n            \"// ** preparations and default behaviour here ** //\\n\" +\r\n            \"// ret.data = data\\n\" +\r\n            \"ret.edgeview = edge.view.id\\n\" +\r\n            \"ret.view = view\\n\" +\r\n            \"// data, edge, view are dependencies by default. delete them above if you want to remove them.\\n\" +\r\n            \"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\" +\r\n            \"// ** declarations here ** //\\n\" +\r\n            \"ret.start = edge.start\\n\"+\r\n            \"ret.end = edge.end\\n\"+\r\n            \"ret.segments = edge.segments\\n\"+\r\n            \"}\";\r\n        let ev = DViewElement.new2(\"Edge\"+name, jsx, vp,\r\n            (v: DViewElement) => {\r\n                // v.appliableToClasses = [DVoidEdge.cname];\r\n                v.appliableTo = 'Edge';\r\n                v.bendingMode = EdgeBendingMode.Line;\r\n                v.edgeHeadSize = headSize;\r\n                v.edgeTailSize = tailSize;\r\n                //v.constants = edgeConstants;\r\n                v.palette = palette;\r\n                v.css = css\r\n                v.usageDeclarations = edgeUsageDeclarations;\r\n                v.preRenderFunc = edgePrerenderFunc;\r\n            }, false, 'Pointer_ViewEdge' + name);\r\n        return ev;\r\n    }\r\n    /*\r\n    {\r\n        false && edge.end.model.attributes.map( (m, index, arr) => <EdgePoint data={m.id} initialSize={(parent) => {\r\n            let segs = parent.segments.segments;\r\n            let pos = segs[0].start.pt.multiply(1-(index+1)/(arr.length+1), true).add(segs[segs.length-1].end.pt.multiply((index+1)/(arr.length+1), true));\r\n            // console.trace(\"initial ep\", {segs, pos, ratio:(index+1)/(arr.length+1), s:segs[0].start.pt, e:segs[segs.length-1].end.pt});\r\n            return {...pos, w:55, h:55}}} key={m.id} view={\"Pointer_ViewEdgePoint\"} /> )\r\n    }{\r\n        false && <EdgePoint key={\"midnode1\"} view={\"Pointer_ViewEdgePoint\"} />\r\n    }{\r\n        false && <EdgePoint key={\"midnode2\"} view={\"Pointer_ViewEdgePoint\"} />\r\n    }{\r\n        false && props.children && \"this would cause loop no idea why, needs to be fixed to allow passing EdgeNodes here\" || []\r\n    }\r\n    */\r\n    static semanticErrorOverlay_old() { return (\r\n`<section className=\"overlap\">\r\n    <div className=\"error-message\">Lowerbound violation</div>\r\n</section>`\r\n)}    static semanticErrorOverlay() { return (\r\n`<section className=\"overlap\">\r\n    <div className=\"error-message\">{errors.join(<br/>)}</div>\r\n</section>`\r\n)}\r\n\r\n\r\n} // DV class end\r\n\r\nlet valuecolormap: GObject = {};\r\nvaluecolormap[ShortAttribETypes.EBoolean] = \"orange\";\r\nvaluecolormap[ShortAttribETypes.EByte] = \"orange\";\r\nvaluecolormap[ShortAttribETypes.EShort] = \"orange\";\r\nvaluecolormap[ShortAttribETypes.EInt] = \"orange\";\r\nvaluecolormap[ShortAttribETypes.ELong] = \"orange\";\r\nvaluecolormap[ShortAttribETypes.EFloat] = \"orange\";\r\nvaluecolormap[ShortAttribETypes.EDouble] = \"orange\";\r\nvaluecolormap[ShortAttribETypes.EDate] = \"green\";\r\nvaluecolormap[ShortAttribETypes.EString] = \"green\";\r\nvaluecolormap[ShortAttribETypes.EChar] = \"green\";\r\nvaluecolormap[ShortAttribETypes.EVoid] = \"gray\";\r\n\r\nlet valuecolormap_str = JSON.stringify(valuecolormap); // can this be declared inside view.constants ?\r\n\r\n\r\ntype ErrorProps = {\r\n    dname: any,\r\n    nodename: any,\r\n    errortype: any,\r\n    on: any,\r\n    v: any,\r\n    msg: any\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport class DefaultView {\r\n\r\n    /* MODEL */\r\n\r\n    public static model(): string { return (\r\n`<View className={'root model'}>\r\n<Scrollable graph={node}>\r\n    {!data && \"Model data missing.\"}\r\n\r\n    {/* metamodel */}\r\n    {data.isMetamodel && \r\n        [<div className={'edges'}>\r\n            {[\r\n                refEdges.map(se => <Edge data={se.start} start={se.startNode.father} end={se.endNode} anchorStart={0} anchorEnd={0} key={se.id} isReference={true} \r\n                view={'Edge' + (se.start.composition ? 'Composition' : (se.start.aggregation ? 'Aggregation' : 'Association'))} />),\r\n                extendEdges.map(se => <Edge data={se.start} start={se.startNode} end={se.endNode} view={'EdgeInheritance'} isExtend={true} key={se.id} />)\r\n            ]}\r\n        </div>,\r\n        otherPackages.filter(p => p).map(pkg => <DefaultNode key={pkg.id} data={pkg} />),\r\n        level >= 1 && firstPackage && firstPackage.children.filter(c => c).map(classifier => <DefaultNode key={classifier.id} data={classifier} />)]\r\n    }\r\n\r\n    {/* model */}\r\n    {level >= 1 && m1Objects.filter(o => o).map(m1object => <DefaultNode key={m1object.id} data={m1object} />)}\r\n    {decorators}\r\n</Scrollable>\r\n\r\n{/* language designer defined controls */}\r\n<Control title={'Semantic'} payoff={'Zooming'}>\r\n    <Slider name={'level'} title={'Detail level '} node={node} max={3} />\r\n</Control>\r\n</View>`\r\n);}\r\n\r\n\r\n    public static void(): string { return (\r\n`<div className={'root void model-less round bg-white p-1'}>\r\n    <div>voidvertex element test</div>\r\n    <div>data: {props.data ? props.data.name : \"empty\"}</div>\r\n    {decorators}\r\n</div>`\r\n);}\r\n\r\n    /* PACKAGE */\r\n\r\n    public static package(): string { return (\r\n`<View className={'root package'}>\r\n    <Measurable draggable={true} resizable={true}><div>draggable resizable</div></Measurable>\r\n    <Measurable draggable={true}><div>draggable</div></Measurable>\r\n    <div className={'package-children'}>\r\n        {upperLevel >= 1 ? [\r\n            <label className={\"detail-level\"}>\r\n                <input onChange={(e)=>{node.state = {level:+e.target.value}}} min=\"0\" max=\"3\" type=\"range\" step=\"1\" value={level}/>\r\n                <div>Detail level:{level}</div>\r\n            </label>,\r\n            data.children.map(c => <DefaultNode key={c.id} data={c} />)\r\n        ] :\r\n        [\r\n            <div className={\"summary\"}><b>URI:</b><span className={\"ms-1\"}>{data.uri}</span></div>,\r\n            <div className={\"summary\"}>{[\r\n                data.classes.length ? data.classes.length + \" classes\" : '',\r\n                data.enumerators.length ? data.enumerators.length + \" enumerators\" : ''\r\n               ].filter(v=>!!v).join(',')}</div>\r\n        ]}\r\n    </div>\r\n    {decorators}\r\n</View>`\r\n);}\r\n\r\n    public static defaultPackage(): string { return (\r\n`<div className={'root package'}>\r\n    <div className={'package-children'}>\r\n        {data.children.map(c => <DefaultNode key={c.id} data={c} />)}\r\n    </div>\r\n    {decorators}\r\n</div>`\r\n);}\r\n\r\n    /* CLASS */\r\n\r\n// <View className={\"root class \" + (level === 1 && abstract ? \"abstract\")} + onClick={()=>{/*node.events.e1(Math.random().toFixed(3))*/}}>\r\n\r\npublic static class(): string { return (`<View className={\"root class\"} onClick={()=>{/*node.events.e1(Math.random().toFixed(3))*/}}>\r\n<div className={'header'}>\r\n    {data.isSingleton && <i className='bi bi-1-square'>&nbsp;</i>}\r\n    {level > 1 && <b className={'class-name'}>{interface ? 'Interface' : abstract ? 'Abstract Class' : 'Class'}: </b>}    \r\n    {level === 1 && <i className=\"bi bi-c-square-fill\"></i>}<Input data={data} field={'name'} hidden={true} autosize={true} />\r\n</div>\r\n\r\n{level > 2 && data.children.length > 0 && <hr/>}\r\n\r\n{level > 2 && \r\n    <div className={'class-children'}>\r\n        {level >= 2 && [\r\n            attributes.map(c => <DefaultNode key={c.id} data={c} />),\r\n            references.map(c => <DefaultNode key={c.id} data={c} />),\r\n            operations.map(c => <DefaultNode key={c.id} data={c} />)\r\n        ]\r\n        || [\r\n        <div className={\"summary\"}>{[\r\n            attributes.length ? attributes.length + \" attributes\" : '',\r\n            references.length ? references.length + \" references\" : '',\r\n            operations.length ? operations.length + \" operations\" : '',\r\n            !(attributes.length + references.length + operations.length) ? '- empty -' : ''\r\n            ].filter(v=>!!v).join(',')}</div>\r\n        ]\r\n        }\r\n    </div>\r\n}\r\n\r\n{decorators}\r\n</View>`);}\r\n\r\n\r\n    /* ENUM */\r\n\r\npublic static enum(): string { return (\r\n`<View className={'root enumerator'}>\r\n    <div className={'header'}>\r\n        {level > 1 && <b className={'enumerator-name'}>Enum:</b>}\r\n        {level == 1 && <i className=\"bi bi-explicit-fill\"></i>}<Input data={data} field={'name'} hidden={true} autosize={true} />\r\n    </div>\r\n    {level > 1 && <hr />}\r\n    <div className={'enumerator-children'}>\r\n        {level >= 2 && literals.map(c => <DefaultNode key={c.id} data={c}/>)}\r\n    </div>\r\n    {decorators}\r\n</View>`\r\n);}\r\n\r\n    /* FEATURE */\r\n\r\n    public static feature(): string { return (\r\n`<View className={'root feature w-100'}>\r\n    <span className={'feature-name'}>{data.name}:</span>\r\n    <Select data={data} field={'type'} />\r\n    {decorators}\r\n</View>`\r\n);}\r\n\r\n    /* LITERAL */\r\n\r\n    public static literal(): string { return (\r\n`<label className={'root literal d-block text-center'}>\r\n    {data.name}\r\n    {decorators}\r\n</label>`\r\n);}\r\n\r\n    /* OPERATION */\r\n\r\n    public static operation(): string { return (\r\n`<View className={'root operation w-100 hoverable'}>\r\n        <span className={'feature-name'}>{data.name + ' =>'}</span>\r\n        <Select data={data} field={'type'} />\r\n    <div className={\"parameters content\"}>\r\n    {data.exceptions.length ? \" throws \" + data.exceptions.join(\", \") : ''}\r\n    {\r\n        level >= 3 && data.parameters.map(p => <DefaultNode data={p} key={p.id} />)\r\n    }</div>\r\n    {decorators}\r\n</View>`\r\n);}\r\n\r\n    /* PARAMETER */\r\n\r\npublic static parameter(): string { return (\r\n`<View className={'root parameter w-100'}>\r\n    <span className={'feature-name'}>\r\n        {data.name + '' + (data.lowerBound === 0 ? '?:' : ':' )}\r\n    </span>\r\n    <Select data={data} field={'type'} />\r\n    <span className={\"modifier\"}>{data.upperBound > 1 || data.upperBound === -1 ? '[]' : ''}</span>\r\n    {decorators}\r\n</View>`\r\n);}\r\n\r\n    // i want to keep it because it will be useful for a candidate next feature in m1 & layoutable elements\r\n    // it is still work in progress.\r\n    public static operationm1(): string { return (\r\n`<div className={'d-flex root operationm1'} style={{paddingRight: \"6px\"}}>\r\n    <label className={'d-block ms-1'}>{this.props.data.instanceof.name}</label>\r\n    <label className={'d-block ms-auto hover-root'} style={{color:` + valuecolormap_str + `[this.props.data.values.type] || \"gray\"}}>\r\n        →→→\r\n        <div className=\"hover-content\">\r\n            <ParameterForm operation={this.props.data.id} vertical={true} />\r\n        </div>\r\n    </label>\r\n    {decorators}\r\n</div>`\r\n);}\r\n\r\n    public static objectOld(): string { return (\r\n`<div className={'round bg-white root class'}>\r\n    <label className={'ms-1'}>\r\n        <Input jsxLabel={<b className={'object-name'}>{data.instanceof ? data.instanceof.name : \"Object\"}:</b>} \r\n           data={data} field={'name'} hidden={true} autosize={true}/>\r\n    </label>\r\n    <hr />\r\n    <div className={'object-children'}>\r\n        { features.map(c => <DefaultNode key={c.id} data={c} />) }\r\n    </div>\r\n    {decorators}\r\n</div>`);\r\n}\r\n\r\n//     public static object(): string { return (\r\n// `<View className={'root object'}>\r\n//     <b className={'object-name'}>{data.instanceof ? data.instanceof.name : 'Object'}:</b>\r\n//     <Input data={data} field={'name'} hidden={true} autosize={true} />\r\n//     <hr/>\r\n//     <div className={'object-children'}>\r\n//         {level >= 2 && data.features.map(f => <DefaultNode key={f.id} data={f} />)}\r\n//     </div>\r\n//     {decorators}\r\n// </View>`\r\n// );}\r\n\r\n/* OBJECT */\r\n\r\npublic static object(): string { return (\r\n`<View className={'root object'}>\r\n    <b className={'object-name'}>{data.instanceof ? data.instanceof.name : 'Object'}:</b>\r\n    <Input data={data} field={'name'} hidden={true} autosize={true} />\r\n    <hr/>\r\n    <div className={'object-children'}>\r\n        {level >= 2 && data.features.map(f => <DefaultNode key={f.id} data={f} />)}\r\n    </div>\r\n    {decorators}\r\n</View>`\r\n);}\r\n\r\n    /* VALUE */\r\n\r\n    public static value() { return (\r\n`<View className={'root value d-flex'}>\r\n    {instanceofname && <label className={'d-block ms-1 name'}>{instanceofname}</label>}\r\n    {!instanceofname && <Input className='name' data={data} field={'name'} hidden={true} autosize={true} />}\r\n    <label className={'d-block m-auto values_str'} style={{color: constants[typeString] || 'gray'}}>\r\n        : {valuesString}\r\n    </label>\r\n    {decorators}\r\n</View>`\r\n);}\r\n\r\n    /* SINGLETON OBJECT */\r\n\r\n    public static singleton(): string { return (\r\n    `<div className={'singleton'}>\r\n        <div className={'header'}>\r\n            {data.name}        \r\n        </div>\r\n    </div>`);}\r\n\r\n    /* ERROR */\r\n\r\n    public static error(msg: undefined | ReactNode, errortype: string | \"SYNTAX\" | \"RUNTIME\",\r\n                        data?: DModelElement | undefined, node?: DGraphElement | undefined, v?: LViewElement|DViewElement): React.ReactNode {\r\n\r\n        let dname: string | undefined = data && ((data as any).name || data.className.substring(1));\r\n        if (dname && dname.length >= 10) dname = dname.substring(0, 7) + '…';\r\n        let nodename: string = (node?.className || '').replace(/[^A-Z]+/g, \"\").substring(1);\r\n        let on = dname && nodename ? \" on \" + dname + \" / \" + nodename : (dname || nodename ? \" on \" + (dname || nodename) : '');\r\n\r\n        let lv: LViewElement | undefined = v ? ((v as any).__isProxy ? v as LViewElement : LPointerTargetable.wrap(v)) : undefined;\r\n        let viewpointname = lv?.viewpoint?.name ||'';\r\n\r\n        return (<Measurable draggable={true} resizable={true}><div className={'error-notification'}>\r\n            <h1>Something Went Wrong...</h1>\r\n            {v && <h2>Error in \"{v?.name}\" syntax view definition{viewpointname? ' in viewpoint ' + viewpointname : ''}.</h2>}\r\n            <div className={'error-type'}>\r\n                <b data-dname={dname} data-nodename={nodename} data-str={false}>\r\n                    {errortype} Error {on}\r\n                    {false && v && <div>While applying view \"{v?.name}\"</div>}\r\n                </b>\r\n            </div>\r\n            <div className={'error-details'}>{msg}</div>\r\n        </div></Measurable>);\r\n    }\r\n\r\n    public static error_string(msg: undefined | ReactNode, errortype: string | \"SYNTAX\" | \"RUNTIME\", data?: DModelElement | undefined,\r\n                               node?: DGraphElement | undefined, v?: LViewElement|DViewElement) {\r\n        let dname: string | undefined = data && ((data as any).name || data.className.substring(1));\r\n        if (dname && dname.length >= 10) dname = dname.substring(0, 7) + '…';\r\n        let nodename: string = (node?.className || '').replace(/[^A-Z]+/g, \"\").substring(1);\r\n        let on = dname && nodename ? \" on \" + dname + \" / \" + nodename : (dname || nodename ? \" on \" + (dname || nodename) : '');\r\n\r\n        let lv: LViewElement | undefined = v ? ((v as any).__isProxy ? v as LViewElement : LPointerTargetable.wrap(v)) : undefined;\r\n        let viewpointname = lv?.viewpoint?.name ||'';\r\n        // <div className={'w-100 h-100 round bg-white border border-danger'} style={{minHeight:\"50px\", overflow:\"scroll\"}}>\r\n        //     <div className={'text-center text-danger'} tabIndex={-1} style={{background:\"#fff\", overflow: 'visible', zIndex:100, minWidth:\"min-content\"}}>\r\n        //         <b>{errortype}_ERROR` + on + `</b>\r\n        //         <hr/>\r\n        //         <label className={'text-center mx-1 d-block'}>\r\n        //             While applying view \"${v?.name}\"\r\n        //         </label>\r\n        //         {${msg} && <label className={'text-center mx-1 d-block'} style={{color:\"black\"}}>${msg}</label>}\r\n        //     </div>\r\n        // </div>\r\n        return `<Measurable draggable={true} resizable={true}><div className={'error-notification'}>\r\n            <h1>Something Went Wrong...</h1>\r\n            `+ (v && `<h2>Error in \"${v?.name}\" syntax view definition${viewpointname ? ' in viewpoint ' + viewpointname : ''}.</h2>`)+`\r\n            <div className={'error-type'}>\r\n                <b data-dname=${dname} data-nodename=${nodename} data-str={true}>\r\n                    ${errortype} Error ${on}\r\n                    {false && v && <div>While applying view \"${v?.name}\"</div>}\r\n                </b>\r\n            </div>\r\n            <div className={'error-details'}>${msg}</div>\r\n        </div></Measurable>)`;\r\n    }\r\n\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}