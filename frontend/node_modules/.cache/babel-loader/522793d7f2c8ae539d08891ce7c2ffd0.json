{"ast":null,"code":"var _jsxFileName = \"C:\\\\d\\\\Programming\\\\web\\\\jodel-mde\\\\src\\\\components\\\\toolbar\\\\ToolBar.tsx\",\n  _s = $RefreshSig$(),\n  _this = this;\nimport React, { useEffect, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./style.scss\";\nimport { LGraphElement, LModel, SetFieldAction, DVoidEdge, DEdge, DEdgePoint, Constructors, Log, U, SetRootFieldAction } from \"../../joiner\";\nimport ModellingIcon from \"../forEndUser/ModellingIcon\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet ti = 0; // tabindex counter\n\nfunction toolbarClick(item_dname, data, myDictValidator, node) {\n  switch (item_dname) {\n    case DVoidEdge.cname:\n    case DEdge.cname:\n      // no add edges through toolbar for now\n      break;\n    case DEdgePoint.cname:\n      let ledge = node.edge;\n      let dedge = ledge.__raw;\n      let wedge = ledge;\n      // if (!myDictValidator[item_dname]) return;\n      let longestSeg = undefined; // just because compiler does not know it is always found through the for loop\n      let longestIndex = 0;\n      let segms = ledge.segments.segments;\n      // longestIndex = segms.length - 1;// i just put it at end because this edgepoint\n      for (; longestIndex < segms.length; longestIndex++) if (segms[longestIndex].isLongest) {\n        longestSeg = segms[longestIndex];\n        break;\n      }\n      // let index = edge.segments.all.findIndex((s: EdgeSegment) => s.isLongest);\n      let newmp = {\n        ...longestSeg.start.pt.add(longestSeg.end.pt, true).divide(2),\n        w: 15,\n        h: 15,\n        index: longestIndex\n      };\n      // @ts-ignore\n      newmp.x -= newmp.w / 2;\n      newmp.y -= newmp.h / 2;\n      newmp.id = Constructors.makeID();\n      let subelements = [...dedge.subElements];\n      let prevNodeid = longestSeg.start.ge.id;\n      let prevnodeindex = subelements.indexOf(prevNodeid);\n      if (prevnodeindex === -1) {\n        if (prevNodeid === dedge.start) prevnodeindex = 0; // first and last are not subelements\n        else if (prevNodeid === dedge.end) prevnodeindex = subelements.length;else Log.exDevv(\"edgepoint insert position not found\", {\n          subelements,\n          prevNodeid,\n          longestSeg,\n          dedge,\n          ledge\n        });\n      } else prevnodeindex += 1;\n      let goodway = true; // not working// todo: keep his true branch and remove this when finished debug. false crashed for missing father on subelements, guess i need more delay??\n      if (goodway) newmp.index = prevnodeindex;\n      // delete (newmp as any).id;\n      let mp = [...dedge.midPoints];\n      mp.splice(longestIndex, 0, newmp);\n      wedge.midPoints = mp;\n      //\n      let olddebug = [...subelements];\n      subelements.splice(prevnodeindex, 0, newmp.id);\n      console.log(\"injecting ep\", {\n        prevnodeindex,\n        newmp,\n        prevNodeid,\n        longestSeg,\n        old: olddebug,\n        new: subelements,\n        ledge,\n        dedge\n      });\n      // this might break pointers too\n      let fixorder = () => {\n        wedge.subElements = subelements;\n      };\n      if (!goodway) setTimeout(fixorder, 1); // need to wait edgepoint creation\n      // selectNode(newmp);\n      break;\n    default:\n      if (!data || !myDictValidator) return;\n      let item = item_dname.substring(1).toLowerCase();\n      let d = data.addChild(item);\n      try {\n        let d2 = d();\n        if (myDictValidator[item_dname]) select(d2);\n      } catch (e) {\n        if (myDictValidator[item_dname]) select(d);\n      }\n      break;\n  }\n}\nlet n_agonSides = 10; //this shuld be in react.setState(), but the function handling it is outside a component, so i don't wanna rewrite it.\n// it should be fine, except for the input value being shared on different sidebar components, which might even be better.\nfunction getItems(data, myDictValidator, items, node) {\n  const reactNodes = [];\n  // todo: does myDictValidator have any reason to exist? if something is invalid it should not make it on toolbar jsx generated list\n  for (let item_dname of items) {\n    if (item_dname[0] == \"_\") {\n      var _data;\n      item_dname = item_dname.substring(2);\n      data = ((_data = data) === null || _data === void 0 ? void 0 : _data.father) || data;\n    }\n    let item = item_dname.substring(1).toLowerCase();\n    reactNodes.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'toolbar-item',\n      tabIndex: ti,\n      style: {\n        cursor: \"pointer\"\n      },\n      onClick: () => toolbarClick(item_dname, data, myDictValidator, node),\n      children: [/*#__PURE__*/_jsxDEV(ModellingIcon, {\n        name: item\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: 'ms-1 my-auto text-capitalize',\n        children: item\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this)]\n    }, item_dname, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 25\n    }, this));\n  }\n  return reactNodes;\n}\nfunction select(dl) {\n  let d = (dl === null || dl === void 0 ? void 0 : dl.__raw) || dl;\n  console.log(\"selecting\", {\n    d,\n    dl,\n    selector: \".Graph [data-dataid='\" + (d === null || d === void 0 ? void 0 : d.id) + \"']\",\n    $: $(\".Graph [data-dataid='\" + (d === null || d === void 0 ? void 0 : d.id) + \"']\")\n  });\n  if (d && d.id) setTimeout(() => $(\".Graph [data-dataid='\" + (d === null || d === void 0 ? void 0 : d.id) + \"']\").trigger(\"click\"), 10);\n  return d;\n}\nfunction selectNode(d) {\n  if (d && d.id) setTimeout(() => $(\".Graph [data-nodeid='\" + (d === null || d === void 0 ? void 0 : d.id) + \"']\").trigger(\"click\"), 10);\n  return d;\n}\nfunction ToolBarComponent(props, state) {\n  _s();\n  const node = props.node;\n  const htmlref = useRef(null);\n  useEffect(() => {\n    if (!htmlref.current) return;\n    let draggableOptions = {\n      cursor: 'grabbing',\n      containment: 'parent',\n      opacity: 0.0,\n      distance: 0\n      // helper: 'clone'\n    };\n\n    $(htmlref.current).draggable(draggableOptions);\n  }, [htmlref.current]);\n  if (!node) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'toolbar'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 23\n  }, this);\n  const data = node.model ? node.model : LModel.fromPointer(props.model);\n  const isMetamodel = props.isMetamodel;\n  const metamodel = props.metamodel;\n  const downward = {};\n  const addChildren = items => items ? getItems(data, downward, [...new Set(items)], node) : [];\n\n  // downward[\"DModel\"] = [\"DPackage\"];\n  downward[\"DPackage\"] = [\"DPackage\", \"DClass\", \"DEnumerator\"];\n  downward[\"DClass\"] = [\"DAttribute\", \"DReference\", \"DOperation\"];\n  downward[\"DEnumerator\"] = [\"DLiteral\"];\n  downward[\"DOperation\"] = [\"DParameter\", \"DException\"];\n\n  // nodes\n  downward[\"DEdge\"] = [\"DEdgePoint\"];\n  downward[\"DVoidEdge\"] = [\"DEdgePoint\"];\n\n  // for (let parentKey in downward) myDictValidator.set(parentKey, addChildren(\"package\"));\n  let upward = {};\n  for (let parentKey in downward) {\n    let vals = downward[parentKey];\n    if (!vals) continue;\n    for (let child of vals) {\n      if (!upward[child]) upward[child] = [];\n      upward[child].push(parentKey);\n      upward[child].push(...(downward[parentKey] || []));\n    }\n  }\n  downward[\"DModel\"] = downward[\"DPackage\"];\n\n  // exceptions:\n  upward[\"DPackage\"] = [\"_pDPackage\"]; //, \"DModel\"]; because from a package, i don't want to prompt the user to create a model in toolbar.\n  upward[\"DEdgePoint\"] = [\"DEdgePoint\"]; //, \"DEdge\", \"DVoidEdge\"]; because from a edgeNode, i don't want to prompt the user to create a edge in toolbar.\n  // upward[\"DClass\"] = [\"_pDPackage\", \"DClass\", \"DEnumerator\"];\n\n  let content;\n  // if (RuntimeAccessibleClass.extends(props.selected?.node?.className, DVoidEdge)) { }\n  if (isMetamodel) {\n    let siblings = data ? addChildren(upward[data.className]) : [];\n    if (node) siblings.push(...addChildren(upward[node.className]));\n    let subelements = data ? addChildren(downward[data.className]) : [];\n    content = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [siblings.length > 0 && [/*#__PURE__*/_jsxDEV(\"b\", {\n        className: 'toolbar-section-label',\n        children: \"Add sibling\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 18\n      }, this), siblings], siblings.length > 0 && subelements.length > 0 && /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: 'my-2'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 63\n      }, this), subelements.length > 0 && [/*#__PURE__*/_jsxDEV(\"b\", {\n        className: 'toolbar-section-label',\n        children: \"Add sublevel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 18\n      }, this), subelements]]\n    }, void 0, true);\n  } else {\n    const classes = metamodel === null || metamodel === void 0 ? void 0 : metamodel.classes;\n    const model = LModel.fromPointer(props.model);\n    const lobj = data.className === \"DObject\" ? data : undefined;\n    const lfeat = data.className === \"DValue\" ? data : undefined;\n    let subleveloptions = [];\n    if (lobj && (!lobj.instanceof || lobj.partial)) subleveloptions.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbar-item feature\",\n      tabIndex: ti,\n      onClick: () => {\n        lobj.addValue();\n      },\n      children: \"+Feature\"\n    }, \"Feature\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }, this));\n    if (lfeat && lfeat.values.length < lfeat.upperBound) subleveloptions.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbar-item value\",\n      tabIndex: ti,\n      onClick: () => {\n        SetFieldAction.new(lfeat.id, 'value', undefined, '+=', false);\n      },\n      children: [/*#__PURE__*/_jsxDEV(ModellingIcon, {\n        name: 'value'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: 'ms-1 my-auto text-capitalize',\n        children: \"value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }, this)]\n    }, \"Value\", true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }, this));\n    if (node) subleveloptions.push(...addChildren(downward[node.className]));\n    content = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        className: 'toolbar-section-label',\n        children: \"Add root level\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 13\n      }, this), classes === null || classes === void 0 ? void 0 : classes.filter(lClass => {\n        return !lClass.abstract && !lClass.interface;\n      }).map((lClass, index) => {\n        let dclass = lClass.__raw;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          onMouseEnter: e => SetRootFieldAction.new('tooltip', lClass.annotations.map(a => a.source).join(' ')),\n          onMouseLeave: e => SetRootFieldAction.new('tooltip', ''),\n          className: \"toolbar-item LObject\",\n          tabIndex: ti,\n          onClick: () => select(model.addObject({}, lClass)),\n          children: [dclass._state.icon ? /*#__PURE__*/_jsxDEV(ModellingIcon, {\n            src: dclass._state.icon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 43\n          }, this) : /*#__PURE__*/_jsxDEV(ModellingIcon, {\n            name: 'object'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 87\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: 'ms-1 my-auto text-capitalize',\n            children: U.stringMiddleCut(dclass.name, 14)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 21\n          }, this)]\n        }, \"LObject_\" + dclass.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 24\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'toolbar-item',\n        tabIndex: ti,\n        onClick: () => select(model.addObject({}, null)),\n        children: [/*#__PURE__*/_jsxDEV(ModellingIcon, {\n          name: 'object'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: 'ms-1 my-auto text-capitalize',\n          children: \"Object\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 17\n        }, this)]\n      }, \"RawObject\", true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 13\n      }, this), subleveloptions.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"hr\", {\n          className: 'my-2'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n          className: 'toolbar-section-label',\n          children: \"Add sublevel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 17\n        }, this), subleveloptions]\n      }, void 0, true)]\n    }, void 0, true);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"toolbar mt-2 hoverable\",\n    ref: htmlref,\n    tabIndex: 0 // refuses to focus without event...\n    ,\n    onClick: e => {\n      if (htmlref.current) htmlref.current.focus();\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"drag-handle dark\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"preview toolbar-section-label mb-0 mx-1\",\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content inline\",\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 280,\n    columnNumber: 9\n  }, this);\n}\n_s(ToolBarComponent, \"DbCYTPzcC58LOlsROBmYPQ00b6Y=\");\n_c = ToolBarComponent;\n//* 23/11 versione giordano\nfunction mapStateToProps(state, ownProps) {\n  var _state$_lastSelected;\n  const ret = {};\n  const nodeid = (_state$_lastSelected = state._lastSelected) === null || _state$_lastSelected === void 0 ? void 0 : _state$_lastSelected.node;\n  if (nodeid) ret.node = LGraphElement.fromPointer(nodeid);else ret.node = null;\n  if (ownProps.metamodelId) {\n    ret.metamodel = LModel.fromPointer(ownProps.metamodelId);\n  }\n  return ret;\n}\n/*\r\nfunction mapStateToProps(state: DState, ownProps: OwnProps): StateProps {\r\n    const ret: StateProps = {} as any;\r\n    ret.selectedid = state._lastSelected;\r\n    ret.selected = ret.selectedid && {\r\n        node: LPointerTargetable.from(ret.selectedid.node, state) as LGraphElement,\r\n        view: LPointerTargetable.from(ret.selectedid.view, state) as LViewElement,\r\n        modelElement: ret.selectedid.modelElement ? LPointerTargetable.from(ret.selectedid.modelElement, state) : undefined\r\n    };\r\n    if (ownProps.metamodelId) { ret.metamodel = LModel.fromPointer(ownProps.metamodelId); }\r\n    return ret;\r\n}*/\n\nfunction mapDispatchToProps(dispatch) {\n  const ret = {};\n  return ret;\n}\nexport const ToolBarConnected = connect(mapStateToProps, mapDispatchToProps)(ToolBarComponent);\nexport const ToolBar = function (props) {\n  let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return /*#__PURE__*/_jsxDEV(ToolBarConnected, {\n    ...props,\n    children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 335,\n    columnNumber: 12\n  }, _this);\n};\n_c2 = ToolBar;\nexport default ToolBar;\nvar _c, _c2;\n$RefreshReg$(_c, \"ToolBarComponent\");\n$RefreshReg$(_c2, \"ToolBar\");","map":{"version":3,"names":["React","useEffect","useRef","connect","LGraphElement","LModel","SetFieldAction","DVoidEdge","DEdge","DEdgePoint","Constructors","Log","U","SetRootFieldAction","ModellingIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","ti","toolbarClick","item_dname","data","myDictValidator","node","cname","ledge","edge","dedge","__raw","wedge","longestSeg","undefined","longestIndex","segms","segments","length","isLongest","newmp","start","pt","add","end","divide","w","h","index","x","y","id","makeID","subelements","subElements","prevNodeid","ge","prevnodeindex","indexOf","exDevv","goodway","mp","midPoints","splice","olddebug","console","log","old","new","fixorder","setTimeout","item","substring","toLowerCase","d","addChild","d2","select","e","n_agonSides","getItems","items","reactNodes","_data","father","push","className","tabIndex","style","cursor","onClick","children","name","fileName","_jsxFileName","lineNumber","columnNumber","dl","selector","$","trigger","selectNode","ToolBarComponent","props","state","_s","htmlref","current","draggableOptions","containment","opacity","distance","draggable","model","fromPointer","isMetamodel","metamodel","downward","addChildren","Set","upward","parentKey","vals","child","content","siblings","classes","lobj","lfeat","subleveloptions","instanceof","partial","addValue","values","upperBound","filter","lClass","abstract","interface","map","dclass","onMouseEnter","annotations","a","source","join","onMouseLeave","addObject","_state","icon","src","stringMiddleCut","ref","focus","_c","mapStateToProps","ownProps","_state$_lastSelected","ret","nodeid","_lastSelected","metamodelId","mapDispatchToProps","dispatch","ToolBarConnected","ToolBar","arguments","_this","_c2","$RefreshReg$"],"sources":["C:/d/Programming/web/jodel-mde/src/components/toolbar/ToolBar.tsx"],"sourcesContent":["import React, {Dispatch, ReactElement, ReactNode, useEffect, useRef} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport \"./style.scss\";\r\nimport {\r\n    DState,\r\n    DGraphElement,\r\n    Dictionary,\r\n    DModel,\r\n    DModelElement,\r\n    DNamedElement,\r\n    DObject,\r\n    DocString,\r\n    DPointerTargetable,\r\n    DViewElement,\r\n    LGraphElement,\r\n    LModel,\r\n    LModelElement,\r\n    LObject,\r\n    LValue,\r\n    LViewElement,\r\n    MyProxyHandler,\r\n    Pointer,\r\n    SetFieldAction,\r\n    RuntimeAccessibleClass,\r\n    DVoidEdge,\r\n    DEdge,\r\n    DEdgePoint,\r\n    EdgeSegment,\r\n    LVoidEdge,\r\n    Constructors,\r\n    WVoidEdge,\r\n    Log,\r\n    LEdgePoint, DUser,\r\n    U, LPointerTargetable, SetRootFieldAction, GObject, EMeasurableEvents, TRANSACTION\r\n} from \"../../joiner\";\r\nimport {InitialVertexSizeObj} from \"../../joiner/types\";\r\nimport ModellingIcon from \"../forEndUser/ModellingIcon\";\r\n\r\ninterface ThisState {}\r\n\r\nlet ti = 0; // tabindex counter\r\n\r\nfunction toolbarClick(item_dname: string, data: LModelElement|undefined, myDictValidator: Dictionary<DocString<\"DClassName\">, DocString<\"hisChildren\">[]>, node?:LGraphElement) {\r\n    switch(item_dname){\r\n        case DVoidEdge.cname:\r\n        case DEdge.cname:\r\n            // no add edges through toolbar for now\r\n            break;\r\n        case DEdgePoint.cname:\r\n            let ledge: LVoidEdge = (node as LEdgePoint | LVoidEdge).edge;\r\n            let dedge: DVoidEdge = ledge.__raw;\r\n            let wedge: WVoidEdge = ledge as any;\r\n            // if (!myDictValidator[item_dname]) return;\r\n            let longestSeg: EdgeSegment = undefined as any; // just because compiler does not know it is always found through the for loop\r\n            let longestIndex: number = 0;\r\n            let segms = ledge.segments.segments;\r\n            // longestIndex = segms.length - 1;// i just put it at end because this edgepoint\r\n            for (; longestIndex < segms.length; longestIndex++) if (segms[longestIndex].isLongest) { longestSeg = segms[longestIndex]; break;}\r\n            // let index = edge.segments.all.findIndex((s: EdgeSegment) => s.isLongest);\r\n            let newmp: InitialVertexSizeObj = {...(longestSeg.start.pt.add(longestSeg.end.pt, true).divide(2)), w: 15, h: 15, index:longestIndex};\r\n            // @ts-ignore\r\n            newmp.x -= newmp.w/2; newmp.y -= newmp.h/2;\r\n\r\n            newmp.id = Constructors.makeID();\r\n            let subelements = [...dedge.subElements];\r\n            let prevNodeid = longestSeg.start.ge.id;\r\n            let prevnodeindex = subelements.indexOf(prevNodeid);\r\n            if (prevnodeindex === -1) {\r\n                if (prevNodeid === dedge.start) prevnodeindex = 0; // first and last are not subelements\r\n                else if (prevNodeid === dedge.end) prevnodeindex = subelements.length;\r\n                else Log.exDevv(\"edgepoint insert position not found\", {subelements, prevNodeid, longestSeg, dedge, ledge});\r\n            } else prevnodeindex += 1;\r\n            let goodway = true; // not working// todo: keep his true branch and remove this when finished debug. false crashed for missing father on subelements, guess i need more delay??\r\n            if (goodway) newmp.index = prevnodeindex;\r\n            // delete (newmp as any).id;\r\n            let mp = [...dedge.midPoints];\r\n            mp.splice(longestIndex, 0, newmp);\r\n            wedge.midPoints = mp;\r\n            //\r\n            let olddebug = [...subelements];\r\n            subelements.splice(prevnodeindex, 0, newmp.id as string);\r\n            console.log(\"injecting ep\", {prevnodeindex, newmp, prevNodeid, longestSeg, old: olddebug, new: subelements, ledge, dedge});\r\n            // this might break pointers too\r\n            let fixorder = () => { wedge.subElements = subelements; }\r\n            if (!goodway) setTimeout( fixorder, 1); // need to wait edgepoint creation\r\n            // selectNode(newmp);\r\n            break;\r\n        default:\r\n            if (!data || !myDictValidator) return;\r\n            let item = item_dname.substring(1).toLowerCase();\r\n            let d = data.addChild(item);\r\n            try {\r\n                let d2 = (d as any)();\r\n                if (myDictValidator[item_dname]) select(d2);\r\n            } catch(e) {\r\n                if (myDictValidator[item_dname]) select(d);\r\n            }\r\n            break;\r\n    }\r\n}\r\nlet n_agonSides = 10; //this shuld be in react.setState(), but the function handling it is outside a component, so i don't wanna rewrite it.\r\n// it should be fine, except for the input value being shared on different sidebar components, which might even be better.\r\nfunction getItems(data: LModelElement|undefined, myDictValidator: Dictionary<DocString<\"DClassName\">, DocString<\"hisChildren\">[]>, items: DocString<\"D-ClassNames\">[], node?:LGraphElement): ReactNode[] {\r\n    const reactNodes: ReactNode[] = [];\r\n    // todo: does myDictValidator have any reason to exist? if something is invalid it should not make it on toolbar jsx generated list\r\n    for (let item_dname of items) {\r\n        if (item_dname[0]==\"_\") {\r\n            item_dname = item_dname.substring(2);\r\n            data = data?.father || data;\r\n        }\r\n        let item = item_dname.substring(1).toLowerCase();\r\n        reactNodes.push(<div className={'toolbar-item'} tabIndex={ti} style={{cursor:\"pointer\"}} key={item_dname} onClick={()=>toolbarClick(item_dname, data, myDictValidator, node)}>\r\n            <ModellingIcon name={item} />\r\n            <span className={'ms-1 my-auto text-capitalize'}>{item}</span>\r\n            {/*\r\n            <i className=\"bi bi-arrow-right-short hoverable\">\r\n                <ul className={\"content\"}>\r\n                    <li className={\"hoverable\"}>\r\n                        <span className={'ms-1 my-auto text-capitalize'}>Polygon</span>\r\n                        <i className=\"bi bi-arrow-right-short hoverable\">\r\n                            <ul className={\"content\"}>\r\n                                <span className={'ms-1 my-auto text-capitalize'}>Triangle</span>\r\n                                <span className={'ms-1 my-auto text-capitalize'}>Pentagon</span>\r\n                                <span className={'ms-1 my-auto text-capitalize'}>Hexagon</span>\r\n                                <span className={'ms-1 my-auto text-capitalize'}>Octagon</span>\r\n                                <span className={'ms-1 my-auto text-capitalize'}>\r\n                                    <input className={\"autosize-input\"} type={\"number\"} min={3} step={1}\r\n                                           value={n_agonSides} onClick{(evt) => { evt.stopPropagation()}}\r\n                                        onChange={(evt) => {\r\n                                            n_agonSides = +evt.target.value || 10;\r\n                                            if (n_agonSides<3) n_agonSides = 10;\r\n                                        }}\r\n                                    />-agon</span>\r\n                            </ul>\r\n                        </i>\r\n                    </li>\r\n                </ul>\r\n            </i>\r\n            <i className=\"bi bi-arrow-right-short hoverable\">\r\n                <ul className={\"content\"}>\r\n                    <li className={\"hoverable\"}>\r\n                        <span className={'ms-1 my-auto text-capitalize'}>Polygon</span>\r\n                    </li>\r\n                </ul>\r\n            </i>\r\n                */\r\n            }\r\n\r\n        </div>);\r\n    }\r\n    return reactNodes;\r\n}\r\nfunction select(dl: DModelElement | LModelElement): DModelElement {\r\n    let d: DModelElement = (dl as LModelElement)?.__raw || dl as DModelElement;\r\n    console.log(\"selecting\", {d, dl, selector:\".Graph [data-dataid='\"+d?.id+\"']\", $:$(\".Graph [data-dataid='\"+d?.id+\"']\")});\r\n    if (d && d.id) setTimeout(()=>$(\".Graph [data-dataid='\"+d?.id+\"']\").trigger(\"click\"), 10);\r\n    return d; }\r\nfunction selectNode(d: DGraphElement|{id: string}): any {\r\n    if (d && d.id) setTimeout(()=>$(\".Graph [data-nodeid='\"+d?.id+\"']\").trigger(\"click\"), 10);\r\n    return d; }\r\n\r\nfunction ToolBarComponent(props: AllProps, state: ThisState) {\r\n    const node = props.node;\r\n\r\n    const htmlref: React.MutableRefObject<null | HTMLDivElement>= useRef(null);\r\n    useEffect(() => {\r\n        if (!htmlref.current) return;\r\n        let draggableOptions = {\r\n            cursor: 'grabbing',\r\n            containment: 'parent',\r\n            opacity: 0.0,\r\n            distance: 0,\r\n            // helper: 'clone'\r\n        };\r\n        ($(htmlref.current) as GObject<'JQuery + ui plugin'>).draggable(draggableOptions);\r\n    }, [htmlref.current]);\r\n\r\n    if (!node) return(<div className={'toolbar'}></div>);\r\n    const data: LModelElement|LModel = (node.model) ? node.model : LModel.fromPointer(props.model);\r\n\r\n    const isMetamodel: boolean = props.isMetamodel;\r\n    const metamodel: LModel|undefined = props.metamodel;\r\n    const downward: Dictionary<DocString<\"DClassName\">, DocString<\"hisChildren\">[]> = {}\r\n    const addChildren = (items: string[]) => items ? getItems(data, downward, [...new Set(items)], node) : [];\r\n\r\n    // downward[\"DModel\"] = [\"DPackage\"];\r\n    downward[\"DPackage\"] = [\"DPackage\", \"DClass\", \"DEnumerator\"];\r\n    downward[\"DClass\"] = [\"DAttribute\", \"DReference\", \"DOperation\"];\r\n    downward[\"DEnumerator\"] = [\"DLiteral\"];\r\n    downward[\"DOperation\"] = [\"DParameter\", \"DException\"];\r\n\r\n\r\n    // nodes\r\n    downward[\"DEdge\"] = [\"DEdgePoint\"]\r\n    downward[\"DVoidEdge\"] = [\"DEdgePoint\"]\r\n\r\n    // for (let parentKey in downward) myDictValidator.set(parentKey, addChildren(\"package\"));\r\n    let upward: Dictionary<DocString<\"DClassName (model)\">, DocString<\"hisDParents\">[]> = {};\r\n    for (let parentKey in downward){\r\n        let vals = downward[parentKey];\r\n        if(!vals) continue;\r\n        for (let child of vals) {\r\n            if (!upward[child]) upward[child] = [];\r\n            upward[child].push(parentKey)\r\n            upward[child].push(...(downward[parentKey]||[]));\r\n        }\r\n    }\r\n    downward[\"DModel\"] = downward[\"DPackage\"];\r\n\r\n    // exceptions:\r\n    upward[\"DPackage\"] = [\"_pDPackage\"]; //, \"DModel\"]; because from a package, i don't want to prompt the user to create a model in toolbar.\r\n    upward[\"DEdgePoint\"] = [\"DEdgePoint\"]; //, \"DEdge\", \"DVoidEdge\"]; because from a edgeNode, i don't want to prompt the user to create a edge in toolbar.\r\n    // upward[\"DClass\"] = [\"_pDPackage\", \"DClass\", \"DEnumerator\"];\r\n\r\n    let content: ReactNode;\r\n    // if (RuntimeAccessibleClass.extends(props.selected?.node?.className, DVoidEdge)) { }\r\n    if (isMetamodel) {\r\n        let siblings = data ? addChildren(upward[data.className]) : [];\r\n        if (node) siblings.push(...addChildren(upward[node.className]));\r\n        let subelements = data ? addChildren(downward[data.className]) : [];\r\n        content = (<>\r\n            {siblings.length > 0 &&\r\n                [<b className={'toolbar-section-label'}>Add sibling</b>, siblings]\r\n            }\r\n            {siblings.length > 0 && subelements.length > 0 && <hr className={'my-2'} />}\r\n            {subelements.length > 0 &&\r\n                [<b className={'toolbar-section-label'}>Add sublevel</b>, subelements]\r\n            }\r\n            {/*<hr className={'my-2'} />\r\n            <b className={'d-block text-center text-uppercase mb-1'}>Add shape</b>\r\n            {node && addChildren(downward[node.className])}\r\n            {/*<div className={\"toolbar-item annotation\"} tabIndex={ti} onClick={() => select(lModelElement.addChild(\"annotation\"))}>+annotation</div>* /}\r\n            <hr className={'my-2'} />\r\n            */}\r\n        </>);\r\n    }\r\n    else {\r\n        const classes = metamodel?.classes;\r\n        const model: LModel = LModel.fromPointer(props.model);\r\n        const lobj: LObject | undefined = data.className === \"DObject\" ? data as LObject : undefined;\r\n        const lfeat: LValue | undefined = data.className === \"DValue\" ? data as LValue : undefined;\r\n\r\n        let subleveloptions = [];\r\n        if (lobj && (!lobj.instanceof || lobj.partial)) subleveloptions.push(\r\n            <div key={\"Feature\"} className={\"toolbar-item feature\"} tabIndex={ti} onClick={() => { lobj.addValue(); }}>+Feature</div>\r\n        );\r\n        if (lfeat && lfeat.values.length < lfeat.upperBound) subleveloptions.push(\r\n            <div key={\"Value\"} className={\"toolbar-item value\"} tabIndex={ti} onClick={() => {SetFieldAction.new(lfeat.id, 'value' as any, undefined, '+=', false); }}>\r\n                <ModellingIcon name={'value'} />\r\n                <span className={'ms-1 my-auto text-capitalize'}>value</span>\r\n            </div>\r\n        );\r\n        if (node) subleveloptions.push(...addChildren(downward[node.className]));\r\n        content = (<>\r\n            <b className={'toolbar-section-label'}>Add root level</b>\r\n            {classes?.filter((lClass) => {return !lClass.abstract && !lClass.interface}).map((lClass, index) => {\r\n                let dclass = lClass.__raw;\r\n                return <div\r\n                    onMouseEnter={e => SetRootFieldAction.new('tooltip', lClass.annotations.map(a => a.source).join(' '))}\r\n                    onMouseLeave={e => SetRootFieldAction.new('tooltip', '')}\r\n                    key={\"LObject_\"+dclass.id} className={\"toolbar-item LObject\"} tabIndex={ti} onClick={()=>select(model.addObject({}, lClass)) }>\r\n                    {dclass._state.icon ? <ModellingIcon src={dclass._state.icon}/> : <ModellingIcon name={'object'} />}\r\n                    <span className={'ms-1 my-auto text-capitalize'}>{U.stringMiddleCut(dclass.name, 14)}</span>\r\n                </div>\r\n            })}\r\n            <div key={\"RawObject\"} className={'toolbar-item'} tabIndex={ti} onClick={()=>select(model.addObject({}, null))}>\r\n                <ModellingIcon name={'object'} />\r\n                <span className={'ms-1 my-auto text-capitalize'}>Object</span>\r\n            </div>\r\n            { subleveloptions.length > 0 && <>\r\n                <hr className={'my-2'} />\r\n                <b className={'toolbar-section-label'}>Add sublevel</b>\r\n                {subleveloptions}\r\n            </>}\r\n            {/*<hr className={'my-2'} />*/}\r\n        </>);\r\n    }\r\n\r\n    return (\r\n        <div className={\"toolbar mt-2 hoverable\"} ref={htmlref} tabIndex={0} // refuses to focus without event...\r\n             onClick={(e)=>{ if (htmlref.current) htmlref.current.focus()}}>\r\n            <div className={\"drag-handle dark\"} />\r\n            <div className={\"preview toolbar-section-label mb-0 mx-1\"}>Add</div>\r\n            <div className={\"content inline\"}>{content}</div>\r\n        </div>);\r\n}\r\n\r\ninterface OwnProps {\r\n    model: Pointer<DModel, 1, 1, LModel>;\r\n    isMetamodel: boolean;\r\n    metamodelId?: Pointer<DModelElement, 1, 1, LModelElement>;\r\n}\r\n\r\ninterface StateProps {\r\n    node: LGraphElement|null;\r\n    metamodel?: LModel;\r\n}\r\ninterface DispatchProps {}\r\ntype AllProps = OwnProps & StateProps & DispatchProps;\r\n\r\n//* 23/11 versione giordano\r\nfunction mapStateToProps(state: DState, ownProps: OwnProps): StateProps {\r\n    const ret: StateProps = {} as any;\r\n    const nodeid = state._lastSelected?.node;\r\n    if(nodeid) ret.node = LGraphElement.fromPointer(nodeid);\r\n    else ret.node = null;\r\n    if(ownProps.metamodelId) { ret.metamodel = LModel.fromPointer(ownProps.metamodelId); }\r\n    return ret;\r\n}\r\n/*\r\nfunction mapStateToProps(state: DState, ownProps: OwnProps): StateProps {\r\n    const ret: StateProps = {} as any;\r\n    ret.selectedid = state._lastSelected;\r\n    ret.selected = ret.selectedid && {\r\n        node: LPointerTargetable.from(ret.selectedid.node, state) as LGraphElement,\r\n        view: LPointerTargetable.from(ret.selectedid.view, state) as LViewElement,\r\n        modelElement: ret.selectedid.modelElement ? LPointerTargetable.from(ret.selectedid.modelElement, state) : undefined\r\n    };\r\n    if (ownProps.metamodelId) { ret.metamodel = LModel.fromPointer(ownProps.metamodelId); }\r\n    return ret;\r\n}*/\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<any>): DispatchProps {\r\n    const ret: DispatchProps = {} as any;\r\n    return ret;\r\n}\r\n\r\n\r\nexport const ToolBarConnected = connect<StateProps, DispatchProps, OwnProps, DState>(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ToolBarComponent);\r\n\r\nexport const ToolBar = (props: OwnProps, children: (string | React.Component)[] = []): ReactElement => {\r\n    return <ToolBarConnected {...{...props, children}} />;\r\n}\r\nexport default ToolBar;\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}