{"ast":null,"code":"import React,{PureComponent}from\"react\";import{connect}from\"react-redux\";// import './graph.scss';\nimport{LGraph,LPointerTargetable}from\"../../joiner\";// private\nimport{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";export class GraphsContainerComponent extends PureComponent{constructor(props,context){super(props,context);}// todo: per ogni vista crea un set di opzioni {enableAutocorrect: \"boolean(true)\", displayEdges: \"boolean(true)\", maximumGraphWidth: \"number(2000)\"} specificate dall\\'utente che deve specificare sia il tipo (Come se osse una funzione) che il valore predefinito\n// il grafo deve leggere l'oggetto di opzioni e creare un menù che consente di cambiarle (una checkbox al posto dell'enableAutocorrect (bool), uno spinner per maximumGraphWidth (number...)\nrender(){// const editinput = \"<input onChange={(e) => this.data.name = e.target.value } value={this.data.name} />\";\n// const editinput = \"\";\n// todo: rendi opzionale obj = this.data.id se non è specificato.\n// const editinput = \"<Input obj={this.data.id} field={'name'} getter={val => val.toUpperCase()} setter={(val) => val.toLowerCase()} />\";\n// \"<Input obj={this.data} field={'name'} getter={val => val.toUpperCase()} setter={(val) => val.toLowerCase()} />\";\nreturn/*#__PURE__*/_jsx(_Fragment,{children:this.props.graphs.map(m=>/*#__PURE__*/_jsx(_Fragment,{children:this.props.children/*<QA />*/}))});}}// private\nGraphsContainerComponent.cname=\"GraphsContainerComponent\";// private\n// private\n// private\n////// mapper func\nfunction mapStateToProps(state,ownProps){const ret={};console.log('mapStateToProps',{ret,state,ownProps,models:state.models});ret.models=state.models.length?LPointerTargetable.fromArr(state.models,state):[];ret.graphs=state.graphs.length?LGraph.fromArr(state.graphs,state):[];/// to fill\nreturn ret;}function mapDispatchToProps(dispatch){const ret={};/// to fill\nreturn ret;}const GraphsContainerConnected=connect(mapStateToProps,mapDispatchToProps)(GraphsContainerComponent);export const GraphsContainer=function(props){let children=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];return/*#__PURE__*/_jsx(GraphsContainerConnected,{...props,children});};GraphsContainer.cname=\"GraphsContainer\";GraphsContainerConnected.cname=\"GraphsContainerConnected\";GraphsContainerComponent.cname=\"GraphsContainerComponent\";","map":{"version":3,"names":["React","PureComponent","connect","LGraph","LPointerTargetable","Fragment","_Fragment","jsx","_jsx","GraphsContainerComponent","constructor","props","context","render","children","graphs","map","m","cname","mapStateToProps","state","ownProps","ret","console","log","models","length","fromArr","mapDispatchToProps","dispatch","GraphsContainerConnected","GraphsContainer","arguments","undefined"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/src/graph/graph/graphContainer.tsx"],"sourcesContent":["import React, {Dispatch, PureComponent, ReactElement, ReactNode} from \"react\";\r\nimport {connect} from \"react-redux\";\r\n// import './graph.scss';\r\nimport {DGraph, DModel, DPointerTargetable, DState, LGraph, LModel, LPointerTargetable} from \"../../joiner\";\r\n\r\n\r\n// private\r\ninterface ThisState { }\r\n\r\nexport class GraphsContainerComponent extends PureComponent<AllProps, ThisState>{\r\n    public static cname: string = \"GraphsContainerComponent\";\r\n    constructor(props: AllProps, context: any) {\r\n        super(props, context);\r\n    }\r\n\r\n    // todo: per ogni vista crea un set di opzioni {enableAutocorrect: \"boolean(true)\", displayEdges: \"boolean(true)\", maximumGraphWidth: \"number(2000)\"} specificate dall\\'utente che deve specificare sia il tipo (Come se osse una funzione) che il valore predefinito\r\n    // il grafo deve leggere l'oggetto di opzioni e creare un menù che consente di cambiarle (una checkbox al posto dell'enableAutocorrect (bool), uno spinner per maximumGraphWidth (number...)\r\n\r\n    render(): ReactNode {\r\n        // const editinput = \"<input onChange={(e) => this.data.name = e.target.value } value={this.data.name} />\";\r\n        // const editinput = \"\";\r\n        // todo: rendi opzionale obj = this.data.id se non è specificato.\r\n        // const editinput = \"<Input obj={this.data.id} field={'name'} getter={val => val.toUpperCase()} setter={(val) => val.toLowerCase()} />\";\r\n        // \"<Input obj={this.data} field={'name'} getter={val => val.toUpperCase()} setter={(val) => val.toLowerCase()} />\";\r\n        return (<>\r\n            {\r\n                this.props.graphs.map( (m: LGraph) => (\r\n                    <>\r\n                        {/*<svg style={{backgroundColor: 'red'}}>\r\n                        <Overlap style={{width: '100px'}}>\r\n                            success, now i can test resize handler overlayed to content and dragndrop dnd\r\n                            <foreignObject className={\"rectangle\"} />\r\n                            <foreignObject className={\"ellipse\"} />\r\n                            <foreignObject className={\"point\"} />\r\n                        </Overlap>\r\n                        </svg><svg style={{backgroundColor: 'red'}}>\r\n                            <Overlap>\r\n                                <foreignObject className={\"rectangle\"} style={{width: '100px'}}/>\r\n                                <foreignObject className={\"ellipse\"} style={{width: '300px'}}/>\r\n                                <foreignObject className={\"point\"} />\r\n                            </Overlap>\r\n                        </svg>* /}\r\n                        <GraphElement data={m} />*/}\r\n                        {/*\r\n                            Giordano comment this problem with model's children\r\n                            <Graph graphid={m.id} data={m.model} view={undefined}>\r\n                                <Vertex data={m.model}/>\r\n                            </Graph>\r\n\r\n                        */}\r\n                        {this.props.children/*<QA />*/}\r\n                    </>)\r\n                )\r\n            }\r\n        </>); }\r\n}\r\n\r\n// private\r\ninterface OwnProps {\r\n    // propsRequestedFromHtmlAsAttributes: string;\r\n}\r\n// private\r\ninterface StateProps {\r\n    models: LModel[];\r\n    graphs: LGraph[];\r\n    // propsFromReduxStateOrOtherKindOfStateManagement: boolean; // flux or custom things too, unrelated to this.state of react.\r\n}\r\n\r\n// private\r\ninterface DispatchProps {\r\n    // propsFromReduxActions: typeof funzioneTriggeraAzioneDaImportare;\r\n}\r\n\r\n\r\n// private\r\ntype AllProps = OwnProps & StateProps & DispatchProps;\r\n\r\n////// mapper func\r\n\r\nfunction mapStateToProps(state: DState, ownProps: OwnProps): StateProps {\r\n    const ret: StateProps = {} as any;\r\n    console.log('mapStateToProps', {ret, state, ownProps, models: state.models})\r\n    ret.models = state.models.length ? LPointerTargetable.fromArr(state.models, state) as LModel[] : [];\r\n    ret.graphs = state.graphs.length ? LGraph.fromArr(state.graphs, state) as LGraph[] : [];\r\n    /// to fill\r\n    return ret; }\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<any>): DispatchProps {\r\n    const ret: DispatchProps = {} as any;\r\n    /// to fill\r\n    return ret; }\r\n\r\n\r\nconst GraphsContainerConnected = connect<StateProps, DispatchProps, OwnProps, DState>(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(GraphsContainerComponent);\r\n\r\nexport const GraphsContainer = (props: OwnProps, children: (string | React.Component)[] = []): ReactElement => {\r\n    return <GraphsContainerConnected {...{...props, children}} />; }\r\n\r\n\r\nGraphsContainer.cname = \"GraphsContainer\";\r\nGraphsContainerConnected.cname = \"GraphsContainerConnected\";\r\nGraphsContainerComponent.cname = \"GraphsContainerComponent\";\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAaC,aAAa,KAAgC,OAAO,CAC7E,OAAQC,OAAO,KAAO,aAAa,CACnC;AACA,OAAoDC,MAAM,CAAUC,kBAAkB,KAAO,cAAc,CAG3G;AAAA,OAAAC,QAAA,IAAAC,SAAA,gCAAAC,GAAA,IAAAC,IAAA,yBAGA,MAAO,MAAM,CAAAC,wBAAwB,QAAS,CAAAR,aAAkC,CAE5ES,WAAWA,CAACC,KAAe,CAAEC,OAAY,CAAE,CACvC,KAAK,CAACD,KAAK,CAAEC,OAAO,CAAC,CACzB,CAEA;AACA;AAEAC,MAAMA,CAAA,CAAc,CAChB;AACA;AACA;AACA;AACA;AACA,mBAAQL,IAAA,CAAAF,SAAA,EAAAQ,QAAA,CAEA,IAAI,CAACH,KAAK,CAACI,MAAM,CAACC,GAAG,CAAGC,CAAS,eAC7BT,IAAA,CAAAF,SAAA,EAAAQ,QAAA,CAuBK,IAAI,CAACH,KAAK,CAACG,QAAQ,WACtB,CACN,CAAC,CAEP,CAAC,CAAG,CACd,CAEA;AAhDaL,wBAAwB,CACnBS,KAAK,CAAW,0BAA0B,CAmD5D;AAOA;AAMA;AAGA;AAEA,QAAS,CAAAC,eAAeA,CAACC,KAAa,CAAEC,QAAkB,CAAc,CACpE,KAAM,CAAAC,GAAe,CAAG,CAAC,CAAQ,CACjCC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAE,CAACF,GAAG,CAAEF,KAAK,CAAEC,QAAQ,CAAEI,MAAM,CAAEL,KAAK,CAACK,MAAM,CAAC,CAAC,CAC5EH,GAAG,CAACG,MAAM,CAAGL,KAAK,CAACK,MAAM,CAACC,MAAM,CAAGtB,kBAAkB,CAACuB,OAAO,CAACP,KAAK,CAACK,MAAM,CAAEL,KAAK,CAAC,CAAe,EAAE,CACnGE,GAAG,CAACP,MAAM,CAAGK,KAAK,CAACL,MAAM,CAACW,MAAM,CAAGvB,MAAM,CAACwB,OAAO,CAACP,KAAK,CAACL,MAAM,CAAEK,KAAK,CAAC,CAAe,EAAE,CACvF;AACA,MAAO,CAAAE,GAAG,CAAE,CAEhB,QAAS,CAAAM,kBAAkBA,CAACC,QAAuB,CAAiB,CAChE,KAAM,CAAAP,GAAkB,CAAG,CAAC,CAAQ,CACpC;AACA,MAAO,CAAAA,GAAG,CAAE,CAGhB,KAAM,CAAAQ,wBAAwB,CAAG5B,OAAO,CACpCiB,eAAe,CACfS,kBACJ,CAAC,CAACnB,wBAAwB,CAAC,CAE3B,MAAO,MAAM,CAAAsB,eAAe,CAAG,QAAAA,CAACpB,KAAe,CAAgE,IAA9D,CAAAG,QAAsC,CAAAkB,SAAA,CAAAN,MAAA,IAAAM,SAAA,MAAAC,SAAA,CAAAD,SAAA,IAAG,EAAE,CACxF,mBAAOxB,IAAA,CAACsB,wBAAwB,EAAM,GAAGnB,KAAK,CAAEG,QAAQ,CAAI,CAAC,CAAE,CAAC,CAGpEiB,eAAe,CAACb,KAAK,CAAG,iBAAiB,CACzCY,wBAAwB,CAACZ,KAAK,CAAG,0BAA0B,CAC3DT,wBAAwB,CAACS,KAAK,CAAG,0BAA0B","ignoreList":[]},"metadata":{},"sourceType":"module"}