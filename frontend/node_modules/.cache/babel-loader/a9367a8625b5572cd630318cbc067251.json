{"ast":null,"code":"var _jsxFileName = \"C:\\\\d\\\\Programming\\\\web\\\\jodel-mde\\\\src\\\\graph\\\\vertex\\\\Vertex.tsx\",\n  _this = this;\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Debug, DEdgePoint, DGraph, DGraphElement, DGraphVertex, DVertex, DVoidVertex, EMeasurableEvents, GraphElementComponent, GraphElementDispatchProps, GraphElementStatee, Log, LPointerTargetable, RuntimeAccessibleClass, Size, TRANSACTION, U } from '../../joiner';\nimport $ from 'jquery';\nimport 'jqueryui';\nimport 'jqueryui/jquery-ui.css';\nimport { lightModeAllowedElements } from '../graphElement/graphElement';\nimport { VertexStateProps } from '../graphElement/sharedTypes/sharedTypes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst superclassGraphElementComponent = RuntimeAccessibleClass.classes.GraphElementComponent;\nclass ThisStatee extends GraphElementStatee {\n  constructor() {\n    super(...arguments);\n    this.forceupdate = void 0;\n  }\n}\nconst dragHelper = document.createElement('div');\ndragHelper.style.backgroundColor = 'transparent';\ndragHelper.style.outline = '1px dashed black'; // '4px dashed #333';\ndragHelper.style.zIndex = '9999';\nexport class VertexComponent extends superclassGraphElementComponent {\n  constructor(props, context) {\n    super(props, context);\n    this.draggableOptions = void 0;\n    this.resizableOptions = void 0;\n    this.rotableOptions = void 0;\n    this.oldHtml = null;\n    this.nodeType = void 0;\n    this.getSize = this.getSize.bind(this);\n    this.setSize = this.setSize.bind(this);\n    // this.state={forceupdate:1};\n    /*// remove this?\r\n    setTimeout(()=>{\r\n        this.getSize = this.getSize.bind(this);\r\n        this.setSize = this.setSize.bind(this);\r\n        // this.get_size = console.error as any;\r\n        // this.r = (<RootVertex props={this.props} render={super.render()} super={this} />);\r\n        this.forceUpdate();\r\n        this.setState({forceupdate:2});\r\n    },1)*/\n  }\n  /*\r\n      onViewChangeOld(): void {\r\n          super.onViewChangeOld();\r\n          this.draggableOptions = undefined;\r\n          this.resizableOptions = undefined;\r\n          this.rotableOptions = undefined;\r\n      }*/\n\n  onHtmlNodeChange() {\n    this.draggableOptions = undefined;\n    this.resizableOptions = undefined;\n    this.rotableOptions = undefined;\n    this.oldHtml = this.html.current;\n  }\n  setVertexProperties() {\n    if (!this.props.node || !this.html.current) return;\n    switch (this.nodeType) {\n      case 'GraphVertex':\n      case 'Vertex':\n      case 'VoidVertex':\n      case 'EdgePoint':\n        break;\n      default:\n        return;\n    }\n    let html = this.html.current;\n    const $measurable = $(html); // todo: install typings\n\n    let view = this.props.view;\n    let isDraggable = view.draggable;\n    let isResizable = view.resizable;\n    let allviews = [view, ...this.props.views].map(v => v.id);\n    // $element = $(html).find('.measurable').addBack();\n    try {\n      if (!isDraggable) {\n        if ($measurable.data(\"uiDraggable\")) $measurable.draggable('disable');\n      } else if (this.draggableOptions) {\n        if ($measurable.data(\"uiDraggable\")) $measurable.draggable('enable');\n        // NB: this check is to see if draggable has been setup. i think if 2 refreshes happens to fast it can\n        // happen that this.draggableOptions i set, but jqui didn't set up the draggable infos and throws warnings.\n      } else {\n        // first setup only\n        this.draggableOptions = {\n          cursor: 'grabbing',\n          containment: 'parent',\n          opacity: 0.0,\n          disabled: !isDraggable,\n          // this does not work, i think because once set the first time the whole declaration is not re-applied. would need to undo draggable\n          distance: 5,\n          helper: () => {\n            // or 'clone'\n            // dragHelper.style.display='block';\n            let size = this.getSize();\n            // let actualSize = Size.of(html);\n            // if (size.w !== actualSize.w || size.h !== actualSize.h) this.setSize({w:actualSize.w, h:actualSize.h});\n            dragHelper.style.width = size.w + 'px';\n            dragHelper.style.height = size.h + 'px';\n            dragHelper.style.opacity = '1'; // this.props.view.constraints.length ? '1' : '0.5';\n            if (this.props.view.lazySizeUpdate) dragHelper.classList.add('lazySizeUpdate');else dragHelper.classList.remove('lazySizeUpdate');\n            return dragHelper;\n          },\n          // disabled: !(view.draggable),\n          start: (event, obj) => {\n            for (let vid of allviews) this.doMeasurableEvent(EMeasurableEvents.onDragStart, vid);\n          },\n          drag: (event, obj) => {\n            TRANSACTION(() => {\n              console.log('Vertex.setsize', obj);\n              if (!this.props.view.lazySizeUpdate) this.setSize({\n                x: obj.position.left,\n                y: obj.position.top\n              });\n              for (let vid of allviews) this.doMeasurableEvent(EMeasurableEvents.whileDragging, vid);\n            });\n          },\n          stop: (event, obj) => {\n            TRANSACTION(() => {\n              this.setSize({\n                x: obj.position.left,\n                y: obj.position.top\n              });\n              for (let vid of allviews) this.doMeasurableEvent(EMeasurableEvents.onDragEnd, vid);\n            });\n          }\n        };\n        $measurable.draggable(this.draggableOptions);\n      }\n    } catch (e) {\n      this.draggableOptions = undefined;\n      Log.ee(\"failed to setup / update draggable uptions\", e, this, this.props.node, this.props.data);\n      return;\n      // might throw error if element is not visible or in the dom or similar, but i won't care in that case.\n      // but i reset draggableOptions so it can retry later if element enters the DOM instead of thinking it is already finished setup\n    }\n    try {\n      if (!isResizable) {\n        if ($measurable.data(\"uiResizable\")) $measurable.resizable('disable');\n      } else if (this.resizableOptions) {\n        if ($measurable.data(\"uiResizable\")) $measurable.resizable('enable');\n      }\n      if (!this.resizableOptions) {\n        this.resizableOptions = {\n          helper: 'selected-by-me',\n          start: (event, obj) => {\n            TRANSACTION(() => {\n              if (!this.props.node.isResized) this.props.node.isResized = true; // set only on manual resize, so here and not on setSize()\n              for (let vid of allviews) this.doMeasurableEvent(EMeasurableEvents.onResizeStart, vid);\n            });\n          },\n          resize: (event, obj) => {\n            TRANSACTION(() => {\n              if (!this.props.view.lazySizeUpdate) this.setSize({\n                w: obj.position.width,\n                h: obj.position.height\n              });\n              for (let vid of allviews) this.doMeasurableEvent(EMeasurableEvents.whileResizing, vid);\n            });\n          },\n          stop: (event, obj) => {\n            if (!this.state.classes.includes('resized')) this.setState({\n              classes: [...this.state.classes, 'resized']\n            });\n            // if (!withSetSize) { node.width = obj.size.width; node.height = obj.size.height; } else {\n            let absolutemode = true; // this one is less tested and safe, but should work even if html container is sized 0. best if made to work\n            let newSize;\n            if (absolutemode) {\n              let nativeevt = event.originalEvent.originalEvent;\n              let htmlSize = Size.of(event.target, false);\n              newSize = this.props.node.graph.translateHtmlSize(htmlSize);\n              /*n\r\n              this is some pixels off, i think because inner coords are post the border of the container element,\r\n               and the innermost graph size have coords before his borders, so the translation is off by the amount\r\n                of border width of the innermost graph (and package default view does have a border)\r\n                 so in graph coord translate function should add: outersize.add( x: innergraph.html.getFinalComputedCSS('border-width-left'), y: ...border-width-top\r\n              let cursorSize = new GraphSize(0, 0, nativeevt.clientX, nativeevt.clientY);//\r\n              newSize = htmlSize.duplicate() as any; // .subtract( {w:cursorSize.x, h:cursorSize.y}, true);\r\n              let handleClasses: string[] = [...event.originalEvent.target.classList];\r\n              let handleKeyLength = 14; // equal to 'ui-resizable-'.length + 1;\r\n              let handleClassName = handleClasses.find( // i check both length and indexOf, because i must match 'ui-resizable-se' but not 'ui-resizable-handle'\r\n              (e) => (e.length === handleKeyLength || e.length === handleKeyLength + 1) && e.indexOf('ui-resizable-')===0);\r\n                let handleType = handleClassName ? handleClassName.substring(13) : '';\r\n              switch (handleType) {\r\n                  default: case '': case 'se':\r\n                      delete newSize.x;\r\n                      delete newSize.y;\r\n                      newSize.w = cursorSize.w - htmlSize.x;\r\n                      newSize.h = cursorSize.h - htmlSize.y;\r\n                      break;\r\n                  case 'n': case 's':\r\n                      delete newSize.x;\r\n                      delete newSize.y;\r\n                      delete newSize.w;\r\n                      newSize.h = cursorSize.h - htmlSize.y;\r\n                      break;\r\n                  case 'e': case 'W':\r\n                      delete newSize.x;\r\n                      delete newSize.y;\r\n                      newSize.w = cursorSize.w - htmlSize.x;\r\n                      delete newSize.h;\r\n                      break;\r\n                  case 'nw':\r\n                      let br = htmlSize.br();\r\n                      newSize.x = cursorSize.x;\r\n                      newSize.y = cursorSize.y;\r\n                      newSize.w = br.x - cursorSize.w;\r\n                      newSize.h = br.y - cursorSize.h;\r\n                      break;\r\n                  case 'ne':\r\n                      delete newSize.x;\r\n                      newSize.y = cursorSize.y;\r\n                      delete newSize.w;\r\n                      delete newSize.h;\r\n                  case '?':\r\n                      delete newSize.x;\r\n                      delete newSize.y;\r\n                      delete newSize.w;\r\n                      delete newSize.h;\r\n                      break;\r\n              }*/\n              // n, e, s, w, ne, se, sw, nw\n              console.log('resizing', {\n                newSize,\n                htmlSize,\n                event,\n                nativeevt,\n                sizeof_with_transforms: Size.of(event.target, true)\n              });\n            } else newSize = {\n              w: obj.size.width,\n              h: obj.size.height\n            };\n            // evt coordinates: clientX, layerX, offsetX, pageX, screenX\n            TRANSACTION(() => {\n              this.setSize(newSize);\n              // console.log('resize setsize:', obj, {w:obj.size.width, h:obj.size.height});\n              for (let vid of allviews) this.doMeasurableEvent(EMeasurableEvents.onResizeEnd, vid);\n            });\n          }\n        };\n        $measurable.resizable(this.resizableOptions);\n      }\n    } catch (e) {\n      // check draggable catch comment\n      this.resizableOptions = undefined;\n      Log.ee(\"failed to setup / update resizable uptions\", e, this, this.props.node, this.props.data);\n      return;\n    }\n    try {\n      // edit dynamic draggable options post-setup\n      if (this.draggableOptions) {\n        // none so far?\n      }\n      // edit dynamic resizable options post-setup\n      if (this.resizableOptions) {\n        var _this$resizableOption, _this$resizableOption2;\n        let lazySizeUpdate = view.lazySizeUpdate;\n        let containment = lazySizeUpdate ? false : 'parent';\n        let helper = lazySizeUpdate ? 'resizable-helper-bad' : 'original';\n        // helper does not accept a func or htmlElem, but only a classname...\n        // and makes his own empty proxy element to resize in his place. inchoherent.\n        if (((_this$resizableOption = this.resizableOptions) === null || _this$resizableOption === void 0 ? void 0 : _this$resizableOption.containment) !== containment) {\n          this.resizableOptions.containment = containment;\n          $measurable.draggable('option', 'containment', containment);\n        }\n        if (((_this$resizableOption2 = this.resizableOptions) === null || _this$resizableOption2 === void 0 ? void 0 : _this$resizableOption2.helper) !== helper) {\n          this.resizableOptions.helper = helper;\n          $measurable.resizable('option', 'helper', helper);\n        }\n      }\n    } catch (e) {\n      // check draggable catch comment\n      this.draggableOptions = undefined;\n      this.resizableOptions = undefined;\n      this.rotableOptions = undefined;\n      Log.ee(\"failed to update measurable uptions\", e, this, this.props.node, this.props.data);\n      return;\n    }\n  }\n  getSize() {\n    var _this$props$data, _this$props$node;\n    return this.props.node.getSize(false, !this.props.node.isResized && this.props.view.adaptWidth);\n    /*console.log('get_size('+(this.props?.data as any).name+')', {\r\n        view:this.props.view.getSize(this.props.dataid || this.props.nodeid as string),\r\n        node:this.props.node?.size,\r\n        default: this.props.view.defaultVSize});*/\n    let ret = this.props.view.getSize(((_this$props$data = this.props.data) === null || _this$props$data === void 0 ? void 0 : _this$props$data.id) || this.props.nodeid) || ((_this$props$node = this.props.node) === null || _this$props$node === void 0 ? void 0 : _this$props$node.size) || this.props.view.defaultVSize;\n    if (this.props.node.isResized) return ret;\n    let actualSize = this.html.current ? Size.of(this.html.current) : {\n      w: 0,\n      h: 0\n    };\n    if (this.props.view.adaptWidth && ret.w !== actualSize.w) {\n      this.setSize({\n        w: actualSize.w\n      });\n      ret.w = actualSize.w;\n    }\n    if (this.props.view.adaptHeight && ret.h !== actualSize.h) {\n      this.setSize({\n        h: actualSize.h\n      });\n      ret.h = actualSize.h;\n    }\n    return ret;\n  }\n  // setSize(x_or_size_or_point: number, y?: number, w?:number, h?:number): void;\n\n  // setSize(x_or_size_or_point: number | GraphSize | GraphPoint, y?: number, w?:number, h?:number): void;\n  setSize(size0) {\n    let size = size0;\n    if (size.w !== undefined && size.w < 0) size.w = 0;\n    if (size.h !== undefined && size.h < 0) size.h = 0;\n    console.log('L.setsize', size, size0);\n    return this.props.node.size = size;\n    // console.log('setSize('+(this.props?.data as any).name+') thisss', this);\n    if (this.props.view.storeSize) {\n      var _this$props$data2;\n      let id = ((_this$props$data2 = this.props.data) === null || _this$props$data2 === void 0 ? void 0 : _this$props$data2.id) || this.props.nodeid;\n      this.props.view.updateSize(id, size);\n      return;\n    }\n    let olds = this.props.node.size;\n    size.x = size.x === undefined ? olds === null || olds === void 0 ? void 0 : olds.x : size.x;\n    size.y = size.y === undefined ? olds === null || olds === void 0 ? void 0 : olds.y : size.y;\n    size.w = size.w === undefined ? olds === null || olds === void 0 ? void 0 : olds.w : size.w;\n    size.h = size.h === undefined ? olds === null || olds === void 0 ? void 0 : olds.h : size.h;\n    this.props.node.size = size;\n  }\n  render() {\n    if (Debug.lightMode && (!this.props.data || !lightModeAllowedElements.includes(this.props.data.className))) {\n      return this.props.data ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" \" + this.props.data.name, \":\", this.props.data.className]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 38\n      }, this) : undefined;\n    }\n    if (!this.props.node) return 'Loading Node...';\n    if (this.html.current !== this.oldHtml) {\n      this.onHtmlNodeChange();\n    }\n    const cssOverride = [];\n    // const selected = this.props.selected;\n    // if (selected && selected.id === this.props.nodeid) cssOverride.push('selected-by-me');\n\n    // if(!windoww.cpts) windoww.cpts = {};\n    // windoww.cpts[this.props.nodeid]=this;\n    // console.log('updated');\n    //return this.r || <div>loading...</div>;\n\n    // set classes\n    this.nodeType = 'NODE_TYPE_ERROR';\n    if (this.props.isEdgePoint) this.nodeType = 'EdgePoint';else if (this.props.isGraph && this.props.isVertex) this.nodeType = 'GraphVertex';else if (this.props.isGraph && !this.props.isVertex) this.nodeType = 'Graph';else if (!this.props.isGraph && this.props.isVertex && (this.props.isVoid || !this.props.data)) this.nodeType = 'VoidVertex';else if (!this.props.isGraph && this.props.isVertex) this.nodeType = 'Vertex';else if (!this.props.isGraph && !this.props.isVertex) this.nodeType = 'Field';\n\n    // const named: LNamedElement = this.props.data as LNamedElement; // LNamedElement.fromPointer(this.props.dataid);\n    const classesOverride = [this.nodeType, ...cssOverride]; // , (named?.name === 'default') ? 'default' : ''];\n    const styleOverride = {};\n    // set classes end\n    const size = this.getSize();\n    switch (this.nodeType) {\n      case 'GraphVertex':\n      case 'Vertex':\n      case 'VoidVertex':\n      case 'EdgePoint':\n        styleOverride.top = size.y + 'px';\n        styleOverride.left = size.x + 'px';\n        let isResized = this.props.node.isResized;\n        if (isResized || !this.props.view.adaptWidth) styleOverride.width = size.w + 'px';else styleOverride.width = undefined;\n        if (isResized || !this.props.view.adaptHeight) styleOverride.height = size.h + 'px';else styleOverride.height = undefined; // todo: the goal is to reset jqui inline style, but not override user-defined inline style\n        break;\n      default:\n        break;\n    }\n    return super.render(this.nodeType, styleOverride, classesOverride);\n    // return <RootVertex props={this.props} render={super.render()} super={this} key={this.props.nodeid+'.'+this.state?.forceupdate} />;\n  }\n  select(forUser) {\n    super.select(forUser);\n  }\n  componentDidMount() {\n    this.setVertexProperties();\n  }\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    this.setVertexProperties();\n  }\n}\nVertexComponent.cname = 'VertexComponent';\nclass DispatchProps extends GraphElementDispatchProps {}\nfunction mapStateToProps(state, ownProps) {\n  let DGraphElementClass;\n  if (ownProps.isEdgePoint) DGraphElementClass = DEdgePoint;else if (ownProps.isVertex && ownProps.isGraph) DGraphElementClass = DGraphVertex;else if (ownProps.isVertex && !ownProps.isGraph) DGraphElementClass = DVertex;else if (!ownProps.isVertex && ownProps.isGraph) DGraphElementClass = DGraph;else DGraphElementClass = DGraphElement; // DField;\n\n  if (DGraphElementClass === DVertex && ownProps.isVoid) DGraphElementClass = DVoidVertex;\n  const superret = GraphElementComponent.mapStateToProps(state, ownProps, DGraphElementClass, {\n    ...ownProps\n  });\n  // superret.lastSelected = state._lastSelected?.modelElement;\n  // superret.lastSelected = state._lastSelected ? LPointerTargetable.from(state._lastSelected.modelElement) : null;\n\n  // change current to correct user ID when authentication is implemented.\n  // const selected = state.selected[DUser.current];\n  // uperret.selected = (selected) ? LGraphElement.fromPointer(selected) : null;\n  /*  Uncomment this when we have user authentication.\r\n  superret.selected = {};\r\n  for(let user of Object.keys(selected)) {\r\n      const pointer = selected[user];\r\n      if (pointer) superret.selected[user] = LModelElement.fromPointer(pointer);\r\n      else superret.selected[user] = null;\r\n  }\r\n  */\n\n  superret.isEdgePending = {\n    user: LPointerTargetable.from(state.isEdgePending.user),\n    source: LPointerTargetable.from(state.isEdgePending.source)\n  };\n  // superret.viewpoint = LViewPoint.fromPointer(state.viewpoint);\n  const ret = new VertexStateProps();\n  U.objectMergeInPlace(superret, ret);\n  U.removeEmptyObjectKeys(superret);\n  return superret;\n}\nfunction mapDispatchToProps(dispatch) {\n  const superret = GraphElementComponent.mapDispatchToProps(dispatch);\n  const ret = new GraphElementDispatchProps();\n  U.objectMergeInPlace(superret, ret);\n  U.removeEmptyObjectKeys(superret);\n  return superret;\n}\nexport const VertexConnected = connect(mapStateToProps, mapDispatchToProps)(VertexComponent);\nexport const Vertex = function (props) {\n  let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  //  children: (string | React.Component)[]\n  return /*#__PURE__*/_jsxDEV(VertexConnected, {\n    ...props,\n    children,\n    isGraph: false,\n    isVertex: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 468,\n    columnNumber: 12\n  }, _this);\n};\n_c = Vertex;\nexport const VoidVertex = function (props) {\n  let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return /*#__PURE__*/_jsxDEV(VertexConnected, {\n    ...props,\n    children,\n    isGraph: false,\n    isVertex: true,\n    isVoid: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 471,\n    columnNumber: 12\n  }, _this);\n};\n_c2 = VoidVertex;\nexport const EdgePoint = function EdgePoint(props) {\n  let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return /*#__PURE__*/_jsxDEV(VertexConnected, {\n    ...props,\n    children,\n    isGraph: false,\n    isEdgePoint: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 474,\n    columnNumber: 12\n  }, this);\n};\n// todo: name them all or verify the name is still usable.\n_c3 = EdgePoint;\nexport const Graph = function (props) {\n  let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return /*#__PURE__*/_jsxDEV(VertexConnected, {\n    ...props,\n    children,\n    isGraph: true,\n    isVertex: false\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 479,\n    columnNumber: 12\n  }, _this);\n};\n_c4 = Graph;\nexport const GraphVertex = function (props) {\n  let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return /*#__PURE__*/_jsxDEV(VertexConnected, {\n    ...props,\n    children,\n    isGraph: true,\n    isVertex: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 483,\n    columnNumber: 12\n  }, _this);\n};\n_c5 = GraphVertex;\nexport const Field = function (props) {\n  let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return /*#__PURE__*/_jsxDEV(VertexConnected, {\n    ...props,\n    children,\n    isGraph: false,\n    isVertex: false\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 487,\n    columnNumber: 12\n  }, _this);\n};\n_c6 = Field;\nwindow.componentdebug = {\n  Graph,\n  GraphVertex,\n  Field,\n  Vertex,\n  VoidVertex,\n  EdgePoint,\n  VertexConnected,\n  VertexComponent\n};\nGraph.cname = 'Graph';\nGraphVertex.cname = 'GraphVertex';\nField.cname = 'Field';\nVertex.cname = 'Vertex';\nVoidVertex.cname = 'VoidVertex';\nEdgePoint.cname = 'EdgePoint';\n\n// GraphConnected.cname = 'GraphConnected';\n// GraphVertexConnected.cname = 'GraphVertexConnected';\n// FieldConnected.cname = 'FieldConnected';\nVertexConnected.cname = 'VertexConnected';\n// VoidVertexConnected.cname = 'VoidVertexConnected';\n// EdgePointConnected.cname = 'EdgePointConnected';\n\n// GraphComponent.cname = 'GraphComponent';\n// GraphVertexComponent.cname = 'GraphVertexComponent';\n// FieldComponent.cname = 'FieldComponent';\nVertexComponent.cname = 'VertexComponent';\n// VoidVertexComponent.cname = 'VoidVertexComponent';\n// EdgePointComponent.cname = 'EdgePointComponent';\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"Vertex\");\n$RefreshReg$(_c2, \"VoidVertex\");\n$RefreshReg$(_c3, \"EdgePoint\");\n$RefreshReg$(_c4, \"Graph\");\n$RefreshReg$(_c5, \"GraphVertex\");\n$RefreshReg$(_c6, \"Field\");","map":{"version":3,"names":["React","connect","Debug","DEdgePoint","DGraph","DGraphElement","DGraphVertex","DVertex","DVoidVertex","EMeasurableEvents","GraphElementComponent","GraphElementDispatchProps","GraphElementStatee","Log","LPointerTargetable","RuntimeAccessibleClass","Size","TRANSACTION","U","$","lightModeAllowedElements","VertexStateProps","jsxDEV","_jsxDEV","superclassGraphElementComponent","classes","ThisStatee","constructor","arguments","forceupdate","dragHelper","document","createElement","style","backgroundColor","outline","zIndex","VertexComponent","props","context","draggableOptions","resizableOptions","rotableOptions","oldHtml","nodeType","getSize","bind","setSize","onHtmlNodeChange","undefined","html","current","setVertexProperties","node","$measurable","view","isDraggable","draggable","isResizable","resizable","allviews","views","map","v","id","data","cursor","containment","opacity","disabled","distance","helper","size","width","w","height","h","lazySizeUpdate","classList","add","remove","start","event","obj","vid","doMeasurableEvent","onDragStart","drag","console","log","x","position","left","y","top","whileDragging","stop","onDragEnd","e","ee","isResized","onResizeStart","resize","whileResizing","state","includes","setState","absolutemode","newSize","nativeevt","originalEvent","htmlSize","of","target","graph","translateHtmlSize","sizeof_with_transforms","onResizeEnd","_this$resizableOption","_this$resizableOption2","_this$props$data","_this$props$node","adaptWidth","ret","nodeid","defaultVSize","actualSize","adaptHeight","size0","storeSize","_this$props$data2","updateSize","olds","render","lightMode","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","cssOverride","isEdgePoint","isGraph","isVertex","isVoid","classesOverride","styleOverride","select","forUser","componentDidMount","componentDidUpdate","prevProps","prevState","snapshot","cname","DispatchProps","mapStateToProps","ownProps","DGraphElementClass","superret","isEdgePending","user","from","source","objectMergeInPlace","removeEmptyObjectKeys","mapDispatchToProps","dispatch","VertexConnected","Vertex","length","_this","_c","VoidVertex","_c2","EdgePoint","_c3","Graph","_c4","GraphVertex","_c5","Field","_c6","window","componentdebug","$RefreshReg$"],"sources":["C:/d/Programming/web/jodel-mde/src/graph/vertex/Vertex.tsx"],"sourcesContent":["import React, {Dispatch, ReactElement, ReactNode} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    Debug,\r\n    DEdgePoint,\r\n    DGraph,\r\n    DGraphElement,\r\n    DGraphVertex,\r\n    DState, DUser,\r\n    DVertex, DViewElement,\r\n    DVoidVertex,\r\n    EMeasurableEvents,\r\n    GObject,\r\n    GraphElementComponent,\r\n    GraphElementDispatchProps,\r\n    GraphElementOwnProps,\r\n    GraphElementReduxStateProps,\r\n    GraphElementStatee,\r\n    GraphPoint,\r\n    GraphSize,\r\n    LClass, LGraph, LGraphElement,\r\n    LModelElement, LNamedElement,\r\n    Log,\r\n    LPointerTargetable,\r\n    LUser, LViewElement,\r\n    LViewPoint,\r\n    LVoidVertex, Pointer,\r\n    RuntimeAccessibleClass,\r\n    SetRootFieldAction,\r\n    Size,\r\n    TRANSACTION,\r\n    U,\r\n} from '../../joiner';\r\nimport $ from 'jquery';\r\nimport 'jqueryui';\r\nimport 'jqueryui/jquery-ui.css';\r\nimport { lightModeAllowedElements } from '../graphElement/graphElement';\r\nimport ContextMenu from \"../../components/contextMenu/ContextMenu\";\r\nimport {VertexOwnProps, VertexStateProps} from '../graphElement/sharedTypes/sharedTypes';\r\n\r\nconst superclassGraphElementComponent: typeof GraphElementComponent = RuntimeAccessibleClass.classes.GraphElementComponent as any as typeof GraphElementComponent;\r\nclass ThisStatee extends GraphElementStatee { forceupdate?: number }\r\n\r\nconst dragHelper = document.createElement('div');\r\ndragHelper.style.backgroundColor = 'transparent';\r\ndragHelper.style.outline = '1px dashed black'; // '4px dashed #333';\r\ndragHelper.style.zIndex = '9999';\r\n\r\n\r\nexport class VertexComponent<AllProps extends AllPropss = AllPropss, ThisState extends ThisStatee = ThisStatee>\r\n    extends superclassGraphElementComponent<AllProps, ThisState> {\r\n    public static cname: string = 'VertexComponent';\r\n    draggableOptions: GObject | undefined;\r\n    resizableOptions: GObject | undefined;\r\n    rotableOptions: GObject | undefined;\r\n\r\n    constructor(props: AllProps, context: any) {\r\n        super(props, context);\r\n        this.getSize = this.getSize.bind(this);\r\n        this.setSize = this.setSize.bind(this);\r\n        // this.state={forceupdate:1};\r\n        /*// remove this?\r\n        setTimeout(()=>{\r\n            this.getSize = this.getSize.bind(this);\r\n            this.setSize = this.setSize.bind(this);\r\n            // this.get_size = console.error as any;\r\n            // this.r = (<RootVertex props={this.props} render={super.render()} super={this} />);\r\n            this.forceUpdate();\r\n            this.setState({forceupdate:2});\r\n        },1)*/\r\n    }\r\n/*\r\n    onViewChangeOld(): void {\r\n        super.onViewChangeOld();\r\n        this.draggableOptions = undefined;\r\n        this.resizableOptions = undefined;\r\n        this.rotableOptions = undefined;\r\n    }*/\r\n\r\n    onHtmlNodeChange(){\r\n        this.draggableOptions = undefined;\r\n        this.resizableOptions = undefined;\r\n        this.rotableOptions = undefined;\r\n        this.oldHtml = this.html.current;\r\n    }\r\n\r\n    setVertexProperties(){\r\n        if (!this.props.node || !this.html.current) return;\r\n        switch (this.nodeType){\r\n            case 'GraphVertex':\r\n            case 'Vertex':\r\n            case 'VoidVertex':\r\n            case 'EdgePoint': break;\r\n            default: return;\r\n        }\r\n\r\n        let html = this.html.current;\r\n        const $measurable: GObject<'JQuery + ui plugin'> = $(html); // todo: install typings\r\n\r\n        let view: LViewElement = this.props.view;\r\n        let isDraggable: boolean = view.draggable;\r\n        let isResizable: boolean = view.resizable;\r\n        let allviews: Pointer<DViewElement>[] = [view, ...this.props.views].map(v=>v.id);\r\n        // $element = $(html).find('.measurable').addBack();\r\n        try {\r\n        if (!isDraggable) {\r\n            if ($measurable.data(\"uiDraggable\")) $measurable.draggable('disable');\r\n        }\r\n        else if (this.draggableOptions) {\r\n            if ($measurable.data(\"uiDraggable\")) $measurable.draggable('enable');\r\n            // NB: this check is to see if draggable has been setup. i think if 2 refreshes happens to fast it can\r\n            // happen that this.draggableOptions i set, but jqui didn't set up the draggable infos and throws warnings.\r\n        }\r\n        else {\r\n            // first setup only\r\n            this.draggableOptions = {\r\n                cursor: 'grabbing',\r\n                containment: 'parent',\r\n                opacity: 0.0,\r\n                disabled: !(isDraggable), // this does not work, i think because once set the first time the whole declaration is not re-applied. would need to undo draggable\r\n                distance: 5,\r\n                helper: () => { // or 'clone'\r\n                    // dragHelper.style.display='block';\r\n                    let size = this.getSize();\r\n                    // let actualSize = Size.of(html);\r\n                    // if (size.w !== actualSize.w || size.h !== actualSize.h) this.setSize({w:actualSize.w, h:actualSize.h});\r\n                    dragHelper.style.width = size.w + 'px';\r\n                    dragHelper.style.height = size.h + 'px';\r\n                    dragHelper.style.opacity = '1'; // this.props.view.constraints.length ? '1' : '0.5';\r\n                    if (this.props.view.lazySizeUpdate) dragHelper.classList.add('lazySizeUpdate');\r\n                    else dragHelper.classList.remove('lazySizeUpdate');\r\n                    return dragHelper;\r\n                },\r\n                // disabled: !(view.draggable),\r\n                start: (event: GObject, obj: GObject) => {\r\n                    for (let vid of allviews) this.doMeasurableEvent(EMeasurableEvents.onDragStart, vid);\r\n                },\r\n                drag: (event: GObject, obj: GObject) => {\r\n                    TRANSACTION(()=>{\r\n                        console.log('Vertex.setsize', obj);\r\n                        if (!this.props.view.lazySizeUpdate) this.setSize({x:obj.position.left, y:obj.position.top});\r\n                        for (let vid of allviews) this.doMeasurableEvent(EMeasurableEvents.whileDragging, vid);\r\n                    })\r\n                },\r\n                stop: (event: GObject, obj: GObject) => {\r\n                    TRANSACTION(()=>{\r\n                        this.setSize({x:obj.position.left, y:obj.position.top});\r\n                        for (let vid of allviews) this.doMeasurableEvent(EMeasurableEvents.onDragEnd, vid);\r\n                    })\r\n                }\r\n            };\r\n            $measurable.draggable(this.draggableOptions);\r\n        }\r\n        } catch(e) {\r\n            this.draggableOptions = undefined;\r\n            Log.ee(\"failed to setup / update draggable uptions\", e, this, this.props.node, this.props.data);\r\n            return;\r\n            // might throw error if element is not visible or in the dom or similar, but i won't care in that case.\r\n            // but i reset draggableOptions so it can retry later if element enters the DOM instead of thinking it is already finished setup\r\n        }\r\n\r\n        try{\r\n        if (!isResizable) {\r\n            if ($measurable.data(\"uiResizable\")) $measurable.resizable('disable');\r\n        }\r\n        else if (this.resizableOptions) {\r\n            if ($measurable.data(\"uiResizable\")) $measurable.resizable('enable');\r\n        }\r\n        if (!this.resizableOptions) {\r\n            this.resizableOptions = {\r\n                helper: 'selected-by-me',\r\n                start: (event: GObject, obj: GObject) => {\r\n                    TRANSACTION(()=>{\r\n                        if (!this.props.node.isResized) this.props.node.isResized = true; // set only on manual resize, so here and not on setSize()\r\n                        for (let vid of allviews) this.doMeasurableEvent(EMeasurableEvents.onResizeStart, vid);\r\n                    })\r\n                },\r\n                resize: (event: GObject, obj: GObject) => {\r\n                    TRANSACTION(()=>{\r\n                        if (!this.props.view.lazySizeUpdate) this.setSize({w:obj.position.width, h:obj.position.height});\r\n                        for (let vid of allviews) this.doMeasurableEvent(EMeasurableEvents.whileResizing, vid);\r\n                    })\r\n                },\r\n                stop: (event: GObject, obj: GObject) => {\r\n                    if (!this.state.classes.includes('resized')) this.setState({classes:[...this.state.classes, 'resized']});\r\n                    // if (!withSetSize) { node.width = obj.size.width; node.height = obj.size.height; } else {\r\n                    let absolutemode = true; // this one is less tested and safe, but should work even if html container is sized 0. best if made to work\r\n                    let newSize: Partial<GraphSize>;\r\n                    if (absolutemode) {\r\n                        let nativeevt: MouseEvent = event.originalEvent.originalEvent;\r\n                        let htmlSize = Size.of(event.target, false);\r\n                        newSize = this.props.node.graph.translateHtmlSize(htmlSize);\r\n                        /*n\r\n                        this is some pixels off, i think because inner coords are post the border of the container element,\r\n                         and the innermost graph size have coords before his borders, so the translation is off by the amount\r\n                          of border width of the innermost graph (and package default view does have a border)\r\n                           so in graph coord translate function should add: outersize.add( x: innergraph.html.getFinalComputedCSS('border-width-left'), y: ...border-width-top\r\n\r\n                    let cursorSize = new GraphSize(0, 0, nativeevt.clientX, nativeevt.clientY);//\r\n                    newSize = htmlSize.duplicate() as any; // .subtract( {w:cursorSize.x, h:cursorSize.y}, true);\r\n                    let handleClasses: string[] = [...event.originalEvent.target.classList];\r\n                    let handleKeyLength = 14; // equal to 'ui-resizable-'.length + 1;\r\n                    let handleClassName = handleClasses.find( // i check both length and indexOf, because i must match 'ui-resizable-se' but not 'ui-resizable-handle'\r\n                        (e) => (e.length === handleKeyLength || e.length === handleKeyLength + 1) && e.indexOf('ui-resizable-')===0);\r\n\r\n                        let handleType = handleClassName ? handleClassName.substring(13) : '';\r\n                        switch (handleType) {\r\n                            default: case '': case 'se':\r\n                                delete newSize.x;\r\n                                delete newSize.y;\r\n                                newSize.w = cursorSize.w - htmlSize.x;\r\n                                newSize.h = cursorSize.h - htmlSize.y;\r\n                                break;\r\n                            case 'n': case 's':\r\n                                delete newSize.x;\r\n                                delete newSize.y;\r\n                                delete newSize.w;\r\n                                newSize.h = cursorSize.h - htmlSize.y;\r\n                                break;\r\n                            case 'e': case 'W':\r\n                                delete newSize.x;\r\n                                delete newSize.y;\r\n                                newSize.w = cursorSize.w - htmlSize.x;\r\n                                delete newSize.h;\r\n                                break;\r\n                            case 'nw':\r\n                                let br = htmlSize.br();\r\n                                newSize.x = cursorSize.x;\r\n                                newSize.y = cursorSize.y;\r\n                                newSize.w = br.x - cursorSize.w;\r\n                                newSize.h = br.y - cursorSize.h;\r\n                                break;\r\n                            case 'ne':\r\n                                delete newSize.x;\r\n                                newSize.y = cursorSize.y;\r\n                                delete newSize.w;\r\n                                delete newSize.h;\r\n                            case '?':\r\n                                delete newSize.x;\r\n                                delete newSize.y;\r\n                                delete newSize.w;\r\n                                delete newSize.h;\r\n                                break;\r\n                        }*/\r\n                        // n, e, s, w, ne, se, sw, nw\r\n                        console.log('resizing', {newSize, htmlSize, event, nativeevt, sizeof_with_transforms: Size.of(event.target, true)});\r\n                    }\r\n                    else newSize = {w:obj.size.width, h:obj.size.height};\r\n                    // evt coordinates: clientX, layerX, offsetX, pageX, screenX\r\n                    TRANSACTION(()=>{\r\n\r\n                        this.setSize(newSize);\r\n                        // console.log('resize setsize:', obj, {w:obj.size.width, h:obj.size.height});\r\n                        for (let vid of allviews) this.doMeasurableEvent(EMeasurableEvents.onResizeEnd, vid);\r\n                    })\r\n\r\n                }\r\n            }\r\n            $measurable.resizable(this.resizableOptions);\r\n        }\r\n        } catch(e){\r\n            // check draggable catch comment\r\n            this.resizableOptions = undefined;\r\n            Log.ee(\"failed to setup / update resizable uptions\", e, this, this.props.node, this.props.data);\r\n            return;\r\n        }\r\n\r\n        try{\r\n            // edit dynamic draggable options post-setup\r\n            if (this.draggableOptions) {\r\n                // none so far?\r\n            }\r\n            // edit dynamic resizable options post-setup\r\n            if (this.resizableOptions) {\r\n                let lazySizeUpdate = view.lazySizeUpdate;\r\n                let containment = lazySizeUpdate ? false : 'parent';\r\n                let helper = lazySizeUpdate ? 'resizable-helper-bad' : 'original';\r\n                // helper does not accept a func or htmlElem, but only a classname...\r\n                // and makes his own empty proxy element to resize in his place. inchoherent.\r\n                if (this.resizableOptions?.containment !== containment){\r\n                    this.resizableOptions.containment = containment;\r\n                    $measurable.draggable( 'option', 'containment', containment);\r\n                }\r\n                if (this.resizableOptions?.helper !== helper){\r\n                    this.resizableOptions.helper = helper;\r\n                    $measurable.resizable( 'option', 'helper', helper);\r\n                }\r\n            }\r\n        } catch(e) {\r\n            // check draggable catch comment\r\n            this.draggableOptions = undefined;\r\n            this.resizableOptions = undefined;\r\n            this.rotableOptions = undefined;\r\n            Log.ee(\"failed to update measurable uptions\", e, this, this.props.node, this.props.data);\r\n            return;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    getSize(): Readonly<GraphSize> {\r\n        return this.props.node.getSize(false, !this.props.node.isResized && this.props.view.adaptWidth);\r\n        /*console.log('get_size('+(this.props?.data as any).name+')', {\r\n            view:this.props.view.getSize(this.props.dataid || this.props.nodeid as string),\r\n            node:this.props.node?.size,\r\n            default: this.props.view.defaultVSize});*/\r\n        let ret = this.props.view.getSize(this.props.data?.id || this.props.nodeid as string)\r\n            || this.props.node?.size\r\n            || this.props.view.defaultVSize;\r\n        if (this.props.node.isResized) return ret;\r\n        let actualSize: Partial<Size>&{w:number, h:number} = this.html.current ? Size.of(this.html.current as Element) : {w:0, h:0};\r\n        if (this.props.view.adaptWidth && ret.w !== actualSize.w) {\r\n            this.setSize({w:actualSize.w});\r\n            ret.w = actualSize.w;\r\n        }\r\n        if (this.props.view.adaptHeight && ret.h !== actualSize.h) {\r\n            this.setSize({h:actualSize.h});\r\n            ret.h = actualSize.h;\r\n        }\r\n        return ret;\r\n    }\r\n    // setSize(x_or_size_or_point: number, y?: number, w?:number, h?:number): void;\r\n    setSize(x_or_size_or_point: Partial<GraphPoint>): void;\r\n    setSize(x_or_size_or_point: Partial<GraphSize>): void;\r\n    // setSize(x_or_size_or_point: number | GraphSize | GraphPoint, y?: number, w?:number, h?:number): void;\r\n    setSize(size0: Partial<GraphSize> | Partial<GraphPoint>): void {\r\n        let size: {x?:number, y?: number, w?:number, h?:number} = size0;\r\n        if (size.w !== undefined && size.w < 0) size.w = 0;\r\n        if (size.h !== undefined && size.h < 0) size.h = 0;\r\n\r\n        console.log('L.setsize', size, size0);\r\n        return this.props.node.size = size as any;\r\n        // console.log('setSize('+(this.props?.data as any).name+') thisss', this);\r\n        if (this.props.view.storeSize) {\r\n            let id = (this.props.data?.id || this.props.nodeid) as string;\r\n            this.props.view.updateSize(id, size);\r\n            return;\r\n        }\r\n        let olds = this.props.node.size;\r\n        size.x = size.x === undefined ? olds?.x : size.x;\r\n        size.y = size.y === undefined ? olds?.y : size.y;\r\n        size.w = size.w === undefined ? olds?.w : size.w;\r\n        size.h = size.h === undefined ? olds?.h : size.h;\r\n        this.props.node.size = size as GraphSize;\r\n    }\r\n\r\n    oldHtml?: Element | null = null;\r\n    nodeType!: string;\r\n    render(): ReactNode {\r\n        if (Debug.lightMode && (!this.props.data || !(lightModeAllowedElements.includes(this.props.data.className)))){\r\n            return this.props.data ? <div>{\" \" + ((this.props.data as any).name)}:{this.props.data.className}</div> : undefined;\r\n        }\r\n        if (!this.props.node) return 'Loading Node...';\r\n\r\n        if (this.html.current !== this.oldHtml){ this.onHtmlNodeChange(); }\r\n\r\n        const cssOverride: string[] = [];\r\n        // const selected = this.props.selected;\r\n        // if (selected && selected.id === this.props.nodeid) cssOverride.push('selected-by-me');\r\n\r\n        // if(!windoww.cpts) windoww.cpts = {};\r\n        // windoww.cpts[this.props.nodeid]=this;\r\n        // console.log('updated');\r\n        //return this.r || <div>loading...</div>;\r\n\r\n        // set classes\r\n        this.nodeType = 'NODE_TYPE_ERROR';\r\n        if ( this.props.isEdgePoint) this.nodeType = 'EdgePoint'; else\r\n        if ( this.props.isGraph &&  this.props.isVertex) this.nodeType = 'GraphVertex'; else\r\n        if ( this.props.isGraph && !this.props.isVertex) this.nodeType = 'Graph'; else\r\n        if (!this.props.isGraph &&  this.props.isVertex && (this.props.isVoid || !this.props.data)) this.nodeType = 'VoidVertex'; else\r\n        if (!this.props.isGraph &&  this.props.isVertex) this.nodeType = 'Vertex'; else\r\n        if (!this.props.isGraph && !this.props.isVertex) this.nodeType = 'Field';\r\n\r\n        // const named: LNamedElement = this.props.data as LNamedElement; // LNamedElement.fromPointer(this.props.dataid);\r\n        const classesOverride = [this.nodeType, ...cssOverride]; // , (named?.name === 'default') ? 'default' : ''];\r\n        const styleOverride: React.CSSProperties = {};\r\n        // set classes end\r\n        const size: Readonly<GraphSize> = this.getSize();\r\n\r\n        switch (this.nodeType) {\r\n            case 'GraphVertex':\r\n            case 'Vertex':\r\n            case 'VoidVertex':\r\n            case 'EdgePoint':\r\n                styleOverride.top = size.y + 'px';\r\n                styleOverride.left = size.x + 'px';\r\n                let isResized = this.props.node.isResized;\r\n                if (isResized || !this.props.view.adaptWidth) styleOverride.width = size.w+'px';\r\n                else styleOverride.width = undefined;\r\n                if (isResized || !this.props.view.adaptHeight) styleOverride.height = size.h+'px';\r\n                else styleOverride.height = undefined; // todo: the goal is to reset jqui inline style, but not override user-defined inline style\r\n                break;\r\n            default: break;\r\n        }\r\n\r\n\r\n        return super.render(this.nodeType, styleOverride, classesOverride);\r\n        // return <RootVertex props={this.props} render={super.render()} super={this} key={this.props.nodeid+'.'+this.state?.forceupdate} />;\r\n    }\r\n\r\n    select(forUser?: Pointer<DUser>): void{\r\n        super.select(forUser);\r\n    }\r\n    componentDidMount(){\r\n        this.setVertexProperties();\r\n    }\r\n    componentDidUpdate(prevProps: Readonly<AllProps>, prevState: Readonly<ThisState>, snapshot?: any) {\r\n        this.setVertexProperties();\r\n    }\r\n}\r\n\r\n\r\nclass DispatchProps extends GraphElementDispatchProps {\r\n}\r\n\r\nexport type AllPropss = VertexOwnProps & VertexStateProps & DispatchProps;\r\n\r\nfunction mapStateToProps(state: DState, ownProps: VertexOwnProps): VertexStateProps {\r\n    let DGraphElementClass: typeof DGraphElement;\r\n    if (ownProps.isEdgePoint) DGraphElementClass = DEdgePoint; else\r\n    if (ownProps.isVertex && ownProps.isGraph) DGraphElementClass = DGraphVertex; else\r\n    if (ownProps.isVertex && !ownProps.isGraph) DGraphElementClass = DVertex; else\r\n    if (!ownProps.isVertex && ownProps.isGraph) DGraphElementClass = DGraph;\r\n    else DGraphElementClass = DGraphElement; // DField;\r\n\r\n    if (DGraphElementClass === DVertex && ownProps.isVoid) DGraphElementClass = DVoidVertex;\r\n    const superret: VertexStateProps = GraphElementComponent.mapStateToProps(state, ownProps, DGraphElementClass, {...ownProps}) as VertexStateProps;\r\n    // superret.lastSelected = state._lastSelected?.modelElement;\r\n    // superret.lastSelected = state._lastSelected ? LPointerTargetable.from(state._lastSelected.modelElement) : null;\r\n\r\n    // change current to correct user ID when authentication is implemented.\r\n    // const selected = state.selected[DUser.current];\r\n    // uperret.selected = (selected) ? LGraphElement.fromPointer(selected) : null;\r\n    /*  Uncomment this when we have user authentication.\r\n    superret.selected = {};\r\n    for(let user of Object.keys(selected)) {\r\n        const pointer = selected[user];\r\n        if (pointer) superret.selected[user] = LModelElement.fromPointer(pointer);\r\n        else superret.selected[user] = null;\r\n    }\r\n    */\r\n\r\n    superret.isEdgePending = {\r\n        user: LPointerTargetable.from(state.isEdgePending.user),\r\n        source: LPointerTargetable.from(state.isEdgePending.source)\r\n    };\r\n    // superret.viewpoint = LViewPoint.fromPointer(state.viewpoint);\r\n    const ret: VertexStateProps = new VertexStateProps();\r\n    U.objectMergeInPlace(superret, ret);\r\n    U.removeEmptyObjectKeys(superret);\r\n    return superret;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<any>): DispatchProps {\r\n    const superret: GraphElementDispatchProps = GraphElementComponent.mapDispatchToProps(dispatch);\r\n    const ret: GraphElementDispatchProps = new GraphElementDispatchProps();\r\n    U.objectMergeInPlace(superret, ret);\r\n    U.removeEmptyObjectKeys(superret);\r\n    return superret;\r\n}\r\nexport const VertexConnected = connect<VertexStateProps, DispatchProps, VertexOwnProps, DState>(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(VertexComponent as any);\r\n\r\nexport const Vertex = (props: VertexOwnProps, children: ReactNode | undefined = []): ReactElement => { //  children: (string | React.Component)[]\r\n    return <VertexConnected {...{...props, children}} isGraph={false} isVertex={true}/>;\r\n}\r\nexport const VoidVertex = (props: VertexOwnProps, children: ReactNode | undefined = []): ReactElement => {\r\n    return <VertexConnected {...{...props, children}} isGraph={false} isVertex={true} isVoid={true}/>;\r\n}\r\nexport const EdgePoint = function EdgePoint (props: VertexOwnProps, children: ReactNode | undefined = []): ReactElement {\r\n    return <VertexConnected {...{...props, children}} isGraph={false} isEdgePoint={true}/>;\r\n}\r\n// todo: name them all or verify the name is still usable.\r\n\r\nexport const Graph = (props: VertexOwnProps, children: ReactNode | undefined = []): ReactElement => {\r\n    return <VertexConnected {...{...props, children}} isGraph={true} isVertex={false} />;\r\n}\r\n\r\nexport const GraphVertex = (props: VertexOwnProps, children: ReactNode | undefined = []): ReactElement => {\r\n    return <VertexConnected {...{...props, children}} isGraph={true} isVertex={true} />;\r\n}\r\n\r\nexport const Field = (props: VertexOwnProps, children: ReactNode | undefined = []): ReactElement => {\r\n    return <VertexConnected {...{...props, children}} isGraph={false} isVertex={false} />;\r\n}\r\n(window as any).componentdebug = {Graph, GraphVertex, Field, Vertex, VoidVertex, EdgePoint, VertexConnected, VertexComponent};\r\n\r\n\r\nGraph.cname = 'Graph';\r\nGraphVertex.cname = 'GraphVertex';\r\nField.cname = 'Field';\r\nVertex.cname = 'Vertex';\r\nVoidVertex.cname = 'VoidVertex';\r\nEdgePoint.cname = 'EdgePoint';\r\n\r\n// GraphConnected.cname = 'GraphConnected';\r\n// GraphVertexConnected.cname = 'GraphVertexConnected';\r\n// FieldConnected.cname = 'FieldConnected';\r\nVertexConnected.cname = 'VertexConnected';\r\n// VoidVertexConnected.cname = 'VoidVertexConnected';\r\n// EdgePointConnected.cname = 'EdgePointConnected';\r\n\r\n// GraphComponent.cname = 'GraphComponent';\r\n// GraphVertexComponent.cname = 'GraphVertexComponent';\r\n// FieldComponent.cname = 'FieldComponent';\r\nVertexComponent.cname = 'VertexComponent';\r\n// VoidVertexComponent.cname = 'VoidVertexComponent';\r\n// EdgePointComponent.cname = 'EdgePointComponent';\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}