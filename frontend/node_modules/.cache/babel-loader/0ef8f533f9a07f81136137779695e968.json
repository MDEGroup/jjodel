{"ast":null,"code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n  var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n  var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;\n  var util = require('./util');\n\n  // Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n  // operating systems these days (capturing the result).\n  var REGEX_NEWLINE = /(\\r?\\n)/;\n\n  // Newline character code for charCodeAt() comparisons\n  var NEWLINE_CODE = 10;\n\n  // Private symbol for identifying `SourceNode`s when multiple versions of\n  // the source-map library are loaded. This MUST NOT CHANGE across\n  // versions!\n  var isSourceNode = \"$$$isSourceNode$$$\";\n\n  /**\n   * SourceNodes provide a way to abstract over interpolating/concatenating\n   * snippets of generated JavaScript source code while maintaining the line and\n   * column information associated with the original source code.\n   *\n   * @param aLine The original line number.\n   * @param aColumn The original column number.\n   * @param aSource The original source's filename.\n   * @param aChunks Optional. An array of strings which are snippets of\n   *        generated JS, or other SourceNodes.\n   * @param aName The original identifier.\n   */\n  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n    this.children = [];\n    this.sourceContents = {};\n    this.line = aLine == null ? null : aLine;\n    this.column = aColumn == null ? null : aColumn;\n    this.source = aSource == null ? null : aSource;\n    this.name = aName == null ? null : aName;\n    this[isSourceNode] = true;\n    if (aChunks != null) this.add(aChunks);\n  }\n\n  /**\n   * Creates a SourceNode from generated code and a SourceMapConsumer.\n   *\n   * @param aGeneratedCode The generated code\n   * @param aSourceMapConsumer The SourceMap for the generated code\n   * @param aRelativePath Optional. The path that relative sources in the\n   *        SourceMapConsumer should be relative to.\n   */\n  SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n    // The SourceNode we want to fill with the generated code\n    // and the SourceMap\n    var node = new SourceNode();\n\n    // All even indices of this array are one line of the generated code,\n    // while all odd indices are the newlines between two adjacent lines\n    // (since `REGEX_NEWLINE` captures its match).\n    // Processed fragments are removed from this array, by calling `shiftNextLine`.\n    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n    var shiftNextLine = function () {\n      var lineContents = remainingLines.shift();\n      // The last line of a file might not have a newline.\n      var newLine = remainingLines.shift() || \"\";\n      return lineContents + newLine;\n    };\n\n    // We need to remember the position of \"remainingLines\"\n    var lastGeneratedLine = 1,\n      lastGeneratedColumn = 0;\n\n    // The generate SourceNodes we need a code range.\n    // To extract it current and last mapping is used.\n    // Here we store the last mapping.\n    var lastMapping = null;\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      if (lastMapping !== null) {\n        // We add the code from \"lastMapping\" to \"mapping\":\n        // First check if there is a new line in between.\n        if (lastGeneratedLine < mapping.generatedLine) {\n          var code = \"\";\n          // Associate first line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n          lastGeneratedLine++;\n          lastGeneratedColumn = 0;\n          // The remaining code is added without mapping\n        } else {\n          // There is no new line in between.\n          // Associate the code between \"lastGeneratedColumn\" and\n          // \"mapping.generatedColumn\" with \"lastMapping\"\n          var nextLine = remainingLines[0];\n          var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);\n          remainingLines[0] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n          addMappingWithCode(lastMapping, code);\n          // No more remaining code, continue\n          lastMapping = mapping;\n          return;\n        }\n      }\n      // We add the generated code until the first mapping\n      // to the SourceNode without any mapping.\n      // Each line is added as separate string.\n      while (lastGeneratedLine < mapping.generatedLine) {\n        node.add(shiftNextLine());\n        lastGeneratedLine++;\n      }\n      if (lastGeneratedColumn < mapping.generatedColumn) {\n        var nextLine = remainingLines[0];\n        node.add(nextLine.substr(0, mapping.generatedColumn));\n        remainingLines[0] = nextLine.substr(mapping.generatedColumn);\n        lastGeneratedColumn = mapping.generatedColumn;\n      }\n      lastMapping = mapping;\n    }, this);\n    // We have processed all mappings.\n    if (remainingLines.length > 0) {\n      if (lastMapping) {\n        // Associate the remaining code in the current line with \"lastMapping\"\n        addMappingWithCode(lastMapping, shiftNextLine());\n      }\n      // and add the remaining lines without any mapping\n      node.add(remainingLines.join(\"\"));\n    }\n\n    // Copy sourcesContent into SourceNode\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aRelativePath != null) {\n          sourceFile = util.join(aRelativePath, sourceFile);\n        }\n        node.setSourceContent(sourceFile, content);\n      }\n    });\n    return node;\n    function addMappingWithCode(mapping, code) {\n      if (mapping === null || mapping.source === undefined) {\n        node.add(code);\n      } else {\n        var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;\n        node.add(new SourceNode(mapping.originalLine, mapping.originalColumn, source, code, mapping.name));\n      }\n    }\n  };\n\n  /**\n   * Add a chunk of generated JS to this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  SourceNode.prototype.add = function SourceNode_add(aChunk) {\n    if (Array.isArray(aChunk)) {\n      aChunk.forEach(function (chunk) {\n        this.add(chunk);\n      }, this);\n    } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      if (aChunk) {\n        this.children.push(aChunk);\n      }\n    } else {\n      throw new TypeError(\"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk);\n    }\n    return this;\n  };\n\n  /**\n   * Add a chunk of generated JS to the beginning of this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {\n    if (Array.isArray(aChunk)) {\n      for (var i = aChunk.length - 1; i >= 0; i--) {\n        this.prepend(aChunk[i]);\n      }\n    } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      this.children.unshift(aChunk);\n    } else {\n      throw new TypeError(\"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk);\n    }\n    return this;\n  };\n\n  /**\n   * Walk over the tree of JS snippets in this node and its children. The\n   * walking function is called once for each snippet of JS and is passed that\n   * snippet and the its original associated source's line/column location.\n   *\n   * @param aFn The traversal function.\n   */\n  SourceNode.prototype.walk = function SourceNode_walk(aFn) {\n    var chunk;\n    for (var i = 0, len = this.children.length; i < len; i++) {\n      chunk = this.children[i];\n      if (chunk[isSourceNode]) {\n        chunk.walk(aFn);\n      } else {\n        if (chunk !== '') {\n          aFn(chunk, {\n            source: this.source,\n            line: this.line,\n            column: this.column,\n            name: this.name\n          });\n        }\n      }\n    }\n  };\n\n  /**\n   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n   * each of `this.children`.\n   *\n   * @param aSep The separator.\n   */\n  SourceNode.prototype.join = function SourceNode_join(aSep) {\n    var newChildren;\n    var i;\n    var len = this.children.length;\n    if (len > 0) {\n      newChildren = [];\n      for (i = 0; i < len - 1; i++) {\n        newChildren.push(this.children[i]);\n        newChildren.push(aSep);\n      }\n      newChildren.push(this.children[i]);\n      this.children = newChildren;\n    }\n    return this;\n  };\n\n  /**\n   * Call String.prototype.replace on the very right-most source snippet. Useful\n   * for trimming whitespace from the end of a source node, etc.\n   *\n   * @param aPattern The pattern to replace.\n   * @param aReplacement The thing to replace the pattern with.\n   */\n  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {\n    var lastChild = this.children[this.children.length - 1];\n    if (lastChild[isSourceNode]) {\n      lastChild.replaceRight(aPattern, aReplacement);\n    } else if (typeof lastChild === 'string') {\n      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n    } else {\n      this.children.push(''.replace(aPattern, aReplacement));\n    }\n    return this;\n  };\n\n  /**\n   * Set the source content for a source file. This will be added to the SourceMapGenerator\n   * in the sourcesContent field.\n   *\n   * @param aSourceFile The filename of the source file\n   * @param aSourceContent The content of the source file\n   */\n  SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n  };\n\n  /**\n   * Walk over the tree of SourceNodes. The walking function is called for each\n   * source file content and is passed the filename and source content.\n   *\n   * @param aFn The traversal function.\n   */\n  SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {\n    for (var i = 0, len = this.children.length; i < len; i++) {\n      if (this.children[i][isSourceNode]) {\n        this.children[i].walkSourceContents(aFn);\n      }\n    }\n    var sources = Object.keys(this.sourceContents);\n    for (var i = 0, len = sources.length; i < len; i++) {\n      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n    }\n  };\n\n  /**\n   * Return the string representation of this source node. Walks over the tree\n   * and concatenates all the various snippets together to one string.\n   */\n  SourceNode.prototype.toString = function SourceNode_toString() {\n    var str = \"\";\n    this.walk(function (chunk) {\n      str += chunk;\n    });\n    return str;\n  };\n\n  /**\n   * Returns the string representation of this source node along with a source\n   * map.\n   */\n  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {\n    var generated = {\n      code: \"\",\n      line: 1,\n      column: 0\n    };\n    var map = new SourceMapGenerator(aArgs);\n    var sourceMappingActive = false;\n    var lastOriginalSource = null;\n    var lastOriginalLine = null;\n    var lastOriginalColumn = null;\n    var lastOriginalName = null;\n    this.walk(function (chunk, original) {\n      generated.code += chunk;\n      if (original.source !== null && original.line !== null && original.column !== null) {\n        if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n        lastOriginalSource = original.source;\n        lastOriginalLine = original.line;\n        lastOriginalColumn = original.column;\n        lastOriginalName = original.name;\n        sourceMappingActive = true;\n      } else if (sourceMappingActive) {\n        map.addMapping({\n          generated: {\n            line: generated.line,\n            column: generated.column\n          }\n        });\n        lastOriginalSource = null;\n        sourceMappingActive = false;\n      }\n      for (var idx = 0, length = chunk.length; idx < length; idx++) {\n        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n          generated.line++;\n          generated.column = 0;\n          // Mappings end at eol\n          if (idx + 1 === length) {\n            lastOriginalSource = null;\n            sourceMappingActive = false;\n          } else if (sourceMappingActive) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n        } else {\n          generated.column++;\n        }\n      }\n    });\n    this.walkSourceContents(function (sourceFile, sourceContent) {\n      map.setSourceContent(sourceFile, sourceContent);\n    });\n    return {\n      code: generated.code,\n      map: map\n    };\n  };\n  exports.SourceNode = SourceNode;\n});","map":{"version":3,"names":["define","require","module","exports","SourceMapGenerator","util","REGEX_NEWLINE","NEWLINE_CODE","isSourceNode","SourceNode","aLine","aColumn","aSource","aChunks","aName","children","sourceContents","line","column","source","name","add","fromStringWithSourceMap","SourceNode_fromStringWithSourceMap","aGeneratedCode","aSourceMapConsumer","aRelativePath","node","remainingLines","split","shiftNextLine","lineContents","shift","newLine","lastGeneratedLine","lastGeneratedColumn","lastMapping","eachMapping","mapping","generatedLine","code","addMappingWithCode","nextLine","substr","generatedColumn","length","join","sources","forEach","sourceFile","content","sourceContentFor","setSourceContent","undefined","originalLine","originalColumn","prototype","SourceNode_add","aChunk","Array","isArray","chunk","push","TypeError","prepend","SourceNode_prepend","i","unshift","walk","SourceNode_walk","aFn","len","SourceNode_join","aSep","newChildren","replaceRight","SourceNode_replaceRight","aPattern","aReplacement","lastChild","replace","SourceNode_setSourceContent","aSourceFile","aSourceContent","toSetString","walkSourceContents","SourceNode_walkSourceContents","Object","keys","fromSetString","toString","SourceNode_toString","str","toStringWithSourceMap","SourceNode_toStringWithSourceMap","aArgs","generated","map","sourceMappingActive","lastOriginalSource","lastOriginalLine","lastOriginalColumn","lastOriginalName","original","addMapping","idx","charCodeAt","sourceContent"],"sources":["C:/d/Programming/web/jodel-mde/node_modules/jstransform/node_modules/source-map/lib/source-map/source-node.js"],"sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;\n  var util = require('./util');\n\n  // Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n  // operating systems these days (capturing the result).\n  var REGEX_NEWLINE = /(\\r?\\n)/;\n\n  // Newline character code for charCodeAt() comparisons\n  var NEWLINE_CODE = 10;\n\n  // Private symbol for identifying `SourceNode`s when multiple versions of\n  // the source-map library are loaded. This MUST NOT CHANGE across\n  // versions!\n  var isSourceNode = \"$$$isSourceNode$$$\";\n\n  /**\n   * SourceNodes provide a way to abstract over interpolating/concatenating\n   * snippets of generated JavaScript source code while maintaining the line and\n   * column information associated with the original source code.\n   *\n   * @param aLine The original line number.\n   * @param aColumn The original column number.\n   * @param aSource The original source's filename.\n   * @param aChunks Optional. An array of strings which are snippets of\n   *        generated JS, or other SourceNodes.\n   * @param aName The original identifier.\n   */\n  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n    this.children = [];\n    this.sourceContents = {};\n    this.line = aLine == null ? null : aLine;\n    this.column = aColumn == null ? null : aColumn;\n    this.source = aSource == null ? null : aSource;\n    this.name = aName == null ? null : aName;\n    this[isSourceNode] = true;\n    if (aChunks != null) this.add(aChunks);\n  }\n\n  /**\n   * Creates a SourceNode from generated code and a SourceMapConsumer.\n   *\n   * @param aGeneratedCode The generated code\n   * @param aSourceMapConsumer The SourceMap for the generated code\n   * @param aRelativePath Optional. The path that relative sources in the\n   *        SourceMapConsumer should be relative to.\n   */\n  SourceNode.fromStringWithSourceMap =\n    function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n      // The SourceNode we want to fill with the generated code\n      // and the SourceMap\n      var node = new SourceNode();\n\n      // All even indices of this array are one line of the generated code,\n      // while all odd indices are the newlines between two adjacent lines\n      // (since `REGEX_NEWLINE` captures its match).\n      // Processed fragments are removed from this array, by calling `shiftNextLine`.\n      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n      var shiftNextLine = function() {\n        var lineContents = remainingLines.shift();\n        // The last line of a file might not have a newline.\n        var newLine = remainingLines.shift() || \"\";\n        return lineContents + newLine;\n      };\n\n      // We need to remember the position of \"remainingLines\"\n      var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n\n      // The generate SourceNodes we need a code range.\n      // To extract it current and last mapping is used.\n      // Here we store the last mapping.\n      var lastMapping = null;\n\n      aSourceMapConsumer.eachMapping(function (mapping) {\n        if (lastMapping !== null) {\n          // We add the code from \"lastMapping\" to \"mapping\":\n          // First check if there is a new line in between.\n          if (lastGeneratedLine < mapping.generatedLine) {\n            var code = \"\";\n            // Associate first line with \"lastMapping\"\n            addMappingWithCode(lastMapping, shiftNextLine());\n            lastGeneratedLine++;\n            lastGeneratedColumn = 0;\n            // The remaining code is added without mapping\n          } else {\n            // There is no new line in between.\n            // Associate the code between \"lastGeneratedColumn\" and\n            // \"mapping.generatedColumn\" with \"lastMapping\"\n            var nextLine = remainingLines[0];\n            var code = nextLine.substr(0, mapping.generatedColumn -\n                                          lastGeneratedColumn);\n            remainingLines[0] = nextLine.substr(mapping.generatedColumn -\n                                                lastGeneratedColumn);\n            lastGeneratedColumn = mapping.generatedColumn;\n            addMappingWithCode(lastMapping, code);\n            // No more remaining code, continue\n            lastMapping = mapping;\n            return;\n          }\n        }\n        // We add the generated code until the first mapping\n        // to the SourceNode without any mapping.\n        // Each line is added as separate string.\n        while (lastGeneratedLine < mapping.generatedLine) {\n          node.add(shiftNextLine());\n          lastGeneratedLine++;\n        }\n        if (lastGeneratedColumn < mapping.generatedColumn) {\n          var nextLine = remainingLines[0];\n          node.add(nextLine.substr(0, mapping.generatedColumn));\n          remainingLines[0] = nextLine.substr(mapping.generatedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n        }\n        lastMapping = mapping;\n      }, this);\n      // We have processed all mappings.\n      if (remainingLines.length > 0) {\n        if (lastMapping) {\n          // Associate the remaining code in the current line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n        }\n        // and add the remaining lines without any mapping\n        node.add(remainingLines.join(\"\"));\n      }\n\n      // Copy sourcesContent into SourceNode\n      aSourceMapConsumer.sources.forEach(function (sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          if (aRelativePath != null) {\n            sourceFile = util.join(aRelativePath, sourceFile);\n          }\n          node.setSourceContent(sourceFile, content);\n        }\n      });\n\n      return node;\n\n      function addMappingWithCode(mapping, code) {\n        if (mapping === null || mapping.source === undefined) {\n          node.add(code);\n        } else {\n          var source = aRelativePath\n            ? util.join(aRelativePath, mapping.source)\n            : mapping.source;\n          node.add(new SourceNode(mapping.originalLine,\n                                  mapping.originalColumn,\n                                  source,\n                                  code,\n                                  mapping.name));\n        }\n      }\n    };\n\n  /**\n   * Add a chunk of generated JS to this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  SourceNode.prototype.add = function SourceNode_add(aChunk) {\n    if (Array.isArray(aChunk)) {\n      aChunk.forEach(function (chunk) {\n        this.add(chunk);\n      }, this);\n    }\n    else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      if (aChunk) {\n        this.children.push(aChunk);\n      }\n    }\n    else {\n      throw new TypeError(\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n      );\n    }\n    return this;\n  };\n\n  /**\n   * Add a chunk of generated JS to the beginning of this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {\n    if (Array.isArray(aChunk)) {\n      for (var i = aChunk.length-1; i >= 0; i--) {\n        this.prepend(aChunk[i]);\n      }\n    }\n    else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      this.children.unshift(aChunk);\n    }\n    else {\n      throw new TypeError(\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n      );\n    }\n    return this;\n  };\n\n  /**\n   * Walk over the tree of JS snippets in this node and its children. The\n   * walking function is called once for each snippet of JS and is passed that\n   * snippet and the its original associated source's line/column location.\n   *\n   * @param aFn The traversal function.\n   */\n  SourceNode.prototype.walk = function SourceNode_walk(aFn) {\n    var chunk;\n    for (var i = 0, len = this.children.length; i < len; i++) {\n      chunk = this.children[i];\n      if (chunk[isSourceNode]) {\n        chunk.walk(aFn);\n      }\n      else {\n        if (chunk !== '') {\n          aFn(chunk, { source: this.source,\n                       line: this.line,\n                       column: this.column,\n                       name: this.name });\n        }\n      }\n    }\n  };\n\n  /**\n   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n   * each of `this.children`.\n   *\n   * @param aSep The separator.\n   */\n  SourceNode.prototype.join = function SourceNode_join(aSep) {\n    var newChildren;\n    var i;\n    var len = this.children.length;\n    if (len > 0) {\n      newChildren = [];\n      for (i = 0; i < len-1; i++) {\n        newChildren.push(this.children[i]);\n        newChildren.push(aSep);\n      }\n      newChildren.push(this.children[i]);\n      this.children = newChildren;\n    }\n    return this;\n  };\n\n  /**\n   * Call String.prototype.replace on the very right-most source snippet. Useful\n   * for trimming whitespace from the end of a source node, etc.\n   *\n   * @param aPattern The pattern to replace.\n   * @param aReplacement The thing to replace the pattern with.\n   */\n  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {\n    var lastChild = this.children[this.children.length - 1];\n    if (lastChild[isSourceNode]) {\n      lastChild.replaceRight(aPattern, aReplacement);\n    }\n    else if (typeof lastChild === 'string') {\n      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n    }\n    else {\n      this.children.push(''.replace(aPattern, aReplacement));\n    }\n    return this;\n  };\n\n  /**\n   * Set the source content for a source file. This will be added to the SourceMapGenerator\n   * in the sourcesContent field.\n   *\n   * @param aSourceFile The filename of the source file\n   * @param aSourceContent The content of the source file\n   */\n  SourceNode.prototype.setSourceContent =\n    function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n    };\n\n  /**\n   * Walk over the tree of SourceNodes. The walking function is called for each\n   * source file content and is passed the filename and source content.\n   *\n   * @param aFn The traversal function.\n   */\n  SourceNode.prototype.walkSourceContents =\n    function SourceNode_walkSourceContents(aFn) {\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        if (this.children[i][isSourceNode]) {\n          this.children[i].walkSourceContents(aFn);\n        }\n      }\n\n      var sources = Object.keys(this.sourceContents);\n      for (var i = 0, len = sources.length; i < len; i++) {\n        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n      }\n    };\n\n  /**\n   * Return the string representation of this source node. Walks over the tree\n   * and concatenates all the various snippets together to one string.\n   */\n  SourceNode.prototype.toString = function SourceNode_toString() {\n    var str = \"\";\n    this.walk(function (chunk) {\n      str += chunk;\n    });\n    return str;\n  };\n\n  /**\n   * Returns the string representation of this source node along with a source\n   * map.\n   */\n  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {\n    var generated = {\n      code: \"\",\n      line: 1,\n      column: 0\n    };\n    var map = new SourceMapGenerator(aArgs);\n    var sourceMappingActive = false;\n    var lastOriginalSource = null;\n    var lastOriginalLine = null;\n    var lastOriginalColumn = null;\n    var lastOriginalName = null;\n    this.walk(function (chunk, original) {\n      generated.code += chunk;\n      if (original.source !== null\n          && original.line !== null\n          && original.column !== null) {\n        if(lastOriginalSource !== original.source\n           || lastOriginalLine !== original.line\n           || lastOriginalColumn !== original.column\n           || lastOriginalName !== original.name) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n        lastOriginalSource = original.source;\n        lastOriginalLine = original.line;\n        lastOriginalColumn = original.column;\n        lastOriginalName = original.name;\n        sourceMappingActive = true;\n      } else if (sourceMappingActive) {\n        map.addMapping({\n          generated: {\n            line: generated.line,\n            column: generated.column\n          }\n        });\n        lastOriginalSource = null;\n        sourceMappingActive = false;\n      }\n      for (var idx = 0, length = chunk.length; idx < length; idx++) {\n        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n          generated.line++;\n          generated.column = 0;\n          // Mappings end at eol\n          if (idx + 1 === length) {\n            lastOriginalSource = null;\n            sourceMappingActive = false;\n          } else if (sourceMappingActive) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n        } else {\n          generated.column++;\n        }\n      }\n    });\n    this.walkSourceContents(function (sourceFile, sourceContent) {\n      map.setSourceContent(sourceFile, sourceContent);\n    });\n\n    return { code: generated.code, map: map };\n  };\n\n  exports.SourceNode = SourceNode;\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}