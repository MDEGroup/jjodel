{"ast":null,"code":"var IgcDockManagerPaneType;\n(function (IgcDockManagerPaneType) {\n  IgcDockManagerPaneType[\"splitPane\"] = \"splitPane\";\n  IgcDockManagerPaneType[\"contentPane\"] = \"contentPane\";\n  IgcDockManagerPaneType[\"tabGroupPane\"] = \"tabGroupPane\";\n  IgcDockManagerPaneType[\"documentHost\"] = \"documentHost\";\n})(IgcDockManagerPaneType || (IgcDockManagerPaneType = {}));\nvar IgcSplitPaneOrientation;\n(function (IgcSplitPaneOrientation) {\n  IgcSplitPaneOrientation[\"horizontal\"] = \"horizontal\";\n  IgcSplitPaneOrientation[\"vertical\"] = \"vertical\";\n})(IgcSplitPaneOrientation || (IgcSplitPaneOrientation = {}));\nvar IgcUnpinnedLocation;\n(function (IgcUnpinnedLocation) {\n  IgcUnpinnedLocation[\"top\"] = \"top\";\n  IgcUnpinnedLocation[\"bottom\"] = \"bottom\";\n  IgcUnpinnedLocation[\"left\"] = \"left\";\n  IgcUnpinnedLocation[\"right\"] = \"right\";\n})(IgcUnpinnedLocation || (IgcUnpinnedLocation = {}));\nvar IgcDockingIndicatorPosition;\n(function (IgcDockingIndicatorPosition) {\n  IgcDockingIndicatorPosition[\"left\"] = \"left\";\n  IgcDockingIndicatorPosition[\"outerLeft\"] = \"outerLeft\";\n  IgcDockingIndicatorPosition[\"right\"] = \"right\";\n  IgcDockingIndicatorPosition[\"outerRight\"] = \"outerRight\";\n  IgcDockingIndicatorPosition[\"top\"] = \"top\";\n  IgcDockingIndicatorPosition[\"outerTop\"] = \"outerTop\";\n  IgcDockingIndicatorPosition[\"bottom\"] = \"bottom\";\n  IgcDockingIndicatorPosition[\"outerBottom\"] = \"outerBottom\";\n  IgcDockingIndicatorPosition[\"center\"] = \"center\";\n})(IgcDockingIndicatorPosition || (IgcDockingIndicatorPosition = {}));\nvar IgcPaneDragActionType;\n(function (IgcPaneDragActionType) {\n  IgcPaneDragActionType[\"floatPane\"] = \"floatPane\";\n  IgcPaneDragActionType[\"moveFloatingPane\"] = \"moveFloatingPane\";\n  IgcPaneDragActionType[\"dockPane\"] = \"dockPane\";\n  IgcPaneDragActionType[\"moveTab\"] = \"moveTab\";\n})(IgcPaneDragActionType || (IgcPaneDragActionType = {}));\n/**\n * Describes a Dock Manager component.\n */\n/* blazorAdditionalDependency: DockManagerLayout */\n/* blazorAdditionalDependency: ContentPane */\n/* blazorAdditionalDependency: SplitPane */\n/* blazorAdditionalDependency: DocumentHost */\n/* blazorAdditionalDependency: TabGroupPane */\n/* blazorAdditionalDependency: TabHeaderElement */\n/* blazorSupportsVisualChildren */\nclass IgcDockManagerComponent extends HTMLElement {\n  /**\n   * Performs drop of the `draggedPane` into the specified `dropPosition`.\n   * Returns true if the pane has been docked otherwise returns false.\n   */\n  dropPane() {\n    return null;\n  }\n  /**\n   * Removes a pane from the layout.\n   */\n  removePane(pane) {\n    return null;\n  }\n  /**\n   * Focuses a pane from the layout.\n   */\n  focusPane(contentId) {\n    return null;\n  }\n  addEventListener() {}\n  removeEventListener() {}\n}\nvar IgcResizerLocation;\n(function (IgcResizerLocation) {\n  IgcResizerLocation[\"top\"] = \"top\";\n  IgcResizerLocation[\"bottom\"] = \"bottom\";\n  IgcResizerLocation[\"left\"] = \"left\";\n  IgcResizerLocation[\"right\"] = \"right\";\n  IgcResizerLocation[\"topLeft\"] = \"topLeft\";\n  IgcResizerLocation[\"topRight\"] = \"topRight\";\n  IgcResizerLocation[\"bottomLeft\"] = \"bottomLeft\";\n  IgcResizerLocation[\"bottomRight\"] = \"bottomRight\";\n})(IgcResizerLocation || (IgcResizerLocation = {}));\n\n/**\n * English resource strings for the Dock Manager\n */\nconst IgcDockManagerResourceStringsEN = {\n  close: 'Close',\n  pin: 'Pin',\n  unpin: 'Unpin',\n  maximize: 'Maximize',\n  minimize: 'Minimize',\n  moreOptions: 'More options',\n  moreTabs: 'More tabs',\n  panes: 'Panes',\n  documents: 'Documents'\n};\n\n/**\n * Japanese resource strings for the Dock Manager\n */\nconst IgcDockManagerResourceStringsJP = {\n  close: '閉じる',\n  pin: '固定',\n  unpin: '固定解除',\n  maximize: '最大化',\n  minimize: '最小化',\n  moreOptions: 'その他のオプション',\n  moreTabs: 'その他のタブ',\n  panes: 'Panes',\n  documents: 'Documents'\n};\n\n/**\n * Spanish resource strings for the Dock Manager\n */\nconst IgcDockManagerResourceStringsES = {\n  close: 'Cerrar',\n  pin: 'Anclar',\n  unpin: 'Desanclar',\n  maximize: 'Maximizar',\n  minimize: 'Minimizar',\n  moreOptions: 'Más opciones',\n  moreTabs: 'Más fichas',\n  panes: 'Panes',\n  documents: 'Documents'\n};\n\n/**\n * Korean resource strings for the Dock Manager\n */\nconst IgcDockManagerResourceStringsKO = {\n  close: '닫기',\n  pin: '고정',\n  unpin: '고정 해제',\n  maximize: '최대화',\n  minimize: '최소화',\n  moreOptions: '더 많은 옵션',\n  moreTabs: '탭 더 보기',\n  panes: 'Panes',\n  documents: 'Documents'\n};\n\n/**\n * @hidden\n */\nconst resourceStringsMap = new Map();\nresourceStringsMap.set('en', IgcDockManagerResourceStringsEN);\nresourceStringsMap.set('jp', IgcDockManagerResourceStringsJP);\nresourceStringsMap.set('es', IgcDockManagerResourceStringsES);\nresourceStringsMap.set('ko', IgcDockManagerResourceStringsKO);\n/**\n * Adds custom resource strings for a specified language.\n * @param language The name of the language that should match the `lang` attribute of the page.\n * @param resourceStrings The resource strings to be added.\n */\nfunction addResourceStrings(language, resourceStrings) {\n  resourceStringsMap.set(language, resourceStrings);\n}\nexport { IgcDockManagerResourceStringsEN as I, IgcDockManagerResourceStringsJP as a, IgcDockManagerResourceStringsES as b, IgcDockManagerResourceStringsKO as c, addResourceStrings as d, IgcDockManagerPaneType as e, IgcSplitPaneOrientation as f, IgcUnpinnedLocation as g, IgcDockingIndicatorPosition as h, IgcPaneDragActionType as i, IgcDockManagerComponent as j, IgcResizerLocation as k, resourceStringsMap as r };","map":{"version":3,"names":["IgcDockManagerPaneType","IgcSplitPaneOrientation","IgcUnpinnedLocation","IgcDockingIndicatorPosition","IgcPaneDragActionType","IgcDockManagerComponent","HTMLElement","dropPane","removePane","pane","focusPane","contentId","addEventListener","removeEventListener","IgcResizerLocation","IgcDockManagerResourceStringsEN","close","pin","unpin","maximize","minimize","moreOptions","moreTabs","panes","documents","IgcDockManagerResourceStringsJP","IgcDockManagerResourceStringsES","IgcDockManagerResourceStringsKO","resourceStringsMap","Map","set","addResourceStrings","language","resourceStrings"],"sources":["src/components/dockmanager/dockmanager.public-interfaces.ts","src/i18n/resources.en.ts","src/i18n/resources.jp.ts","src/i18n/resources.es.ts","src/i18n/resources.ko.ts","src/utils/locale.ts"],"sourcesContent":["import { IgcDragService } from '../drag-drop/drag.service';\r\n\r\nexport enum IgcDockManagerPaneType {\r\n  splitPane = 'splitPane',\r\n  contentPane = 'contentPane',\r\n  tabGroupPane = 'tabGroupPane',\r\n  documentHost = 'documentHost'\r\n}\r\n\r\nexport enum IgcSplitPaneOrientation {\r\n  horizontal = 'horizontal',\r\n  vertical = 'vertical'\r\n}\r\n\r\nexport enum IgcUnpinnedLocation {\r\n  top = 'top',\r\n  bottom = 'bottom',\r\n  left = 'left',\r\n  right = 'right',\r\n}\r\n\r\nexport interface IgcDockManagerPoint {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface IgcActivePaneEventArgs {\r\n  /**\r\n   * Gets the new active pane.\r\n   */\r\n  readonly newPane: IgcContentPane;\r\n  /**\r\n   * Gets the old active pane.\r\n   */\r\n  readonly oldPane: IgcContentPane;\r\n}\r\n\r\nexport enum IgcDockingIndicatorPosition {\r\n  left = 'left',\r\n  outerLeft = 'outerLeft',\r\n  right = 'right',\r\n  outerRight = 'outerRight',\r\n  top = 'top',\r\n  outerTop = 'outerTop',\r\n  bottom = 'bottom',\r\n  outerBottom = 'outerBottom',\r\n  center = 'center'\r\n}\r\n\r\nexport interface IgcDockingIndicator {\r\n  /**\r\n   * Gets the position of the docking indicator.\r\n   */\r\n  readonly position: IgcDockingIndicatorPosition;\r\n  /**\r\n   * Gets a value indicating whether the docking indicator is a root one.\r\n   */\r\n  readonly isRoot: boolean;\r\n  /**\r\n   * Gets a value indicating the direction of the docking indicator.\r\n   */\r\n  readonly direction?: string;\r\n}\r\n\r\nexport interface IgcPaneHeaderConnectionEventArgs {\r\n  /**\r\n   * The pane whose header is being connected/disconnected.\r\n   */\r\n  readonly pane: IgcContentPane;\r\n  /**\r\n   * The header element that is being connected/disconnected.\r\n   */\r\n  readonly element: IgcPaneHeaderElement;\r\n}\r\n\r\nexport interface IgcTabHeaderConnectionEventArgs {\r\n  /**\r\n   * The pane whose tab header is being connected/disconnected.\r\n   */\r\n  readonly pane: IgcContentPane;\r\n  /**\r\n   * The tab header element that is being connected/disconnected.\r\n   */\r\n  readonly element: IgcTabHeaderElement;\r\n}\r\n\r\nexport interface IgcPaneCloseEventArgs {\r\n  /**\r\n   * Get the source pane that triggers the close.\r\n   */\r\n  readonly sourcePane: IgcDockManagerPane;\r\n  /**\r\n   * Gets/sets the panes that are about to close.\r\n   */\r\n  /* alternateType: ContentPaneCollection */\r\n  panes: IgcContentPane[];\r\n}\r\n\r\nexport interface IgcPaneScrollEventArgs {\r\n  /**\r\n   * Gets the content pane that is scrolled.\r\n   */\r\n  readonly pane: IgcContentPane;\r\n  /**\r\n   * Gets the content element that is scrolled.\r\n   */\r\n  /* blazorSuppress */\r\n  readonly contentElement: HTMLElement;\r\n}\r\n\r\nexport interface IgcPanePinnedEventArgs {\r\n  /**\r\n   * Gets the source pane that triggers the pinned state change.\r\n   */\r\n  readonly sourcePane: IgcContentPane;\r\n  /**\r\n   * Gets/sets the panes that are about to get pinned/unpinned.\r\n   */\r\n  /* alternateType: ContentPaneCollection */\r\n  panes: IgcContentPane[];\r\n  /**\r\n   * Gets the new pinned value.\r\n   */\r\n  readonly newValue: boolean;\r\n  /**\r\n   * Gets the unpinned location.\r\n   */\r\n  readonly location: IgcUnpinnedLocation;\r\n}\r\n\r\nexport interface IgcPaneDragStartEventArgs {\r\n  /**\r\n   * Gets the source pane that triggers the drag start.\r\n   */\r\n  readonly sourcePane: IgcSplitPane | IgcContentPane;\r\n  /**\r\n   * Gets the panes that are about to get dragged.\r\n   */\r\n  /* alternateType: ContentPaneCollection */\r\n  readonly panes: IgcContentPane[];\r\n}\r\n\r\nexport enum IgcPaneDragActionType {\r\n  floatPane = 'floatPane',\r\n  moveFloatingPane = 'moveFloatingPane',\r\n  dockPane = 'dockPane',\r\n  moveTab = 'moveTab'\r\n}\r\n\r\nexport interface IgcFloatPaneAction {\r\n  /* alternateName: actionType */\r\n  readonly type: IgcPaneDragActionType.floatPane;\r\n  readonly location: IgcDockManagerPoint;\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport interface IgcMoveFloatingPaneAction {\r\n  /* alternateName: actionType */\r\n  readonly type: IgcPaneDragActionType.moveFloatingPane;\r\n  readonly oldLocation: IgcDockManagerPoint;\r\n  readonly newLocation: IgcDockManagerPoint;\r\n}\r\n\r\nexport interface IgcDockPaneAction {\r\n  /* alternateName: actionType */\r\n  readonly type: IgcPaneDragActionType.dockPane;\r\n  readonly dockingIndicator: IgcDockingIndicator;\r\n  readonly targetPane: IgcDockManagerPane;\r\n}\r\n\r\nexport interface IgcMoveTabAction {\r\n  /* alternateName: actionType */\r\n  readonly type: IgcPaneDragActionType.moveTab;\r\n  readonly oldIndex: number;\r\n  readonly newIndex: number;\r\n}\r\n\r\nexport type IgcPaneDragAction = IgcFloatPaneAction | IgcMoveFloatingPaneAction | IgcDockPaneAction | IgcMoveTabAction;\r\n\r\nexport interface IgcPaneDragOverEventArgs {\r\n  /**\r\n   * Gets the source pane that triggers the drag over.\r\n   */\r\n  readonly sourcePane: IgcSplitPane | IgcTabGroupPane | IgcContentPane;\r\n  /**\r\n   * Gets the panes that are dragged over.\r\n   */\r\n  /* alternateType: ContentPaneCollection */\r\n  readonly panes: IgcContentPane[];\r\n  /**\r\n   * Gets information about the action being performed.\r\n   */\r\n  readonly action: IgcPaneDragAction;\r\n  /**\r\n   * Gets/sets whether the action is valid.\r\n   */\r\n  isValid: boolean;\r\n}\r\n\r\nexport interface IgcPaneDragEndEventArgs {\r\n  /**\r\n   * Gets the source pane that ends dragging.\r\n   */\r\n  readonly sourcePane: IgcSplitPane | IgcTabGroupPane | IgcContentPane;\r\n  /**\r\n   * Gets the panes that end dragging.\r\n   */\r\n  /* alternateType: ContentPaneCollection */\r\n  readonly panes: IgcContentPane[];\r\n}\r\n\r\n/* marshalByValue */\r\nexport interface IgcContentPane {\r\n  /**\r\n   * The id of the pane. If not set the Dock Manager generates it automatically.\r\n   */\r\n  id?: string;\r\n  /**\r\n   * The type of the pane.\r\n   */\r\n  /* alternateName: paneType */\r\n  type: IgcDockManagerPaneType.contentPane;\r\n  /**\r\n   * The slot attribute's value of the content element.\r\n   */\r\n  contentId: string;\r\n  /**\r\n   * The text header of the content pane. Even if header slot templates are used, the text header is used for aria label.\r\n   */\r\n  header: string;\r\n  /**\r\n   * The slot attribute's value of the content pane header element. If not set, the `header` property value is used.\r\n   */\r\n  headerId?: string;\r\n  /**\r\n   * The slot attribute's value of the tab header element. If not set, the `header` property value is used.\r\n   */\r\n  tabHeaderId?: string;\r\n  /**\r\n   * The slot attribute's value of the unpinned header element. If not set, the `header` property value is used.\r\n   */\r\n  unpinnedHeaderId?: string;\r\n  /**\r\n   * The slot attribute's value of the floating header element. If not set, the `headerId` property value is used.\r\n   */\r\n  floatingHeaderId?: string;\r\n  /**\r\n   * The size of the pane relative to its sibling panes' sizes. Defaults to 100.\r\n   */\r\n  size?: number;\r\n  /**\r\n   * Determines whether the end user is allowed to close the pane. Defaults to true.\r\n   */\r\n  allowClose?: boolean;\r\n  /**\r\n   * Determines whether the end user is allowed to maximize the pane.\r\n   */\r\n  allowMaximize?: boolean;\r\n  /**\r\n   * Determines whether the end user is allowed to pin/unpin the pane. Defaults to true.\r\n   */\r\n  allowPinning?: boolean;\r\n  /**\r\n   * Determines whether the end user is allowed to dock the pane. Defaults to true.\r\n   */\r\n  allowDocking?: boolean;\r\n  /**\r\n   * Determines whether the end user can inner dock another pane in this one. Defaults to true.\r\n   */\r\n  acceptsInnerDock?: boolean;\r\n  /**\r\n   * Determines whether the end user is allowed to make the pane floating. Defaults to true.\r\n   */\r\n  allowFloating?: boolean;\r\n  /**\r\n   * The absolute size of the pane in an unpinned state. Defaults to 200.\r\n   */\r\n  unpinnedSize?: number;\r\n  /**\r\n   * Determines whether a content pane is pinned or not. Defaults to true.\r\n   */\r\n  isPinned?: boolean;\r\n  /**\r\n   * Determines whether a content pane is maximized or not. Defaults to false.\r\n   */\r\n  isMaximized?: boolean;\r\n  /**\r\n   * The desired unpinned location of the content pane.\r\n   *\r\n   * If not set the Dock Manager automatically calculates it based on the location of the pane relatively to the document host.\r\n   * If more than one document host is presented, the closest one in the pane hierarchy will be used for the calculation.\r\n   * If there is no document host, the default location is left.\r\n   */\r\n  unpinnedLocation?: IgcUnpinnedLocation;\r\n  /**\r\n   * Determines whether a pane is hidden in the UI. Defaults to false.\r\n   */\r\n  hidden?: boolean;\r\n  /**\r\n   * Determines whether a pane is disabled. Defaults to false.\r\n   */\r\n  disabled?: boolean;\r\n  /**\r\n   * Marks that a content pane can be docked only inside a document host.\r\n   */\r\n  documentOnly?: boolean;\r\n}\r\n\r\n/* marshalByValue */\r\nexport interface IgcSplitPane {\r\n  /**\r\n   * The id of the pane. If not set the Dock Manager generates it automatically.\r\n   */\r\n  id?: string;\r\n  /**\r\n   * The type of the pane.\r\n   */\r\n  /* alternateName: paneType */\r\n  type: IgcDockManagerPaneType.splitPane;\r\n  /**\r\n   * The orientation of the split pane.\r\n   */\r\n  orientation: IgcSplitPaneOrientation;\r\n  /**\r\n   * The child panes of the split pane.\r\n   */\r\n  /* blazorCollectionName: DockManagerPaneCollection */\r\n  /* blazorTreatAsCollection */\r\n  panes: IgcDockManagerPane[];\r\n  /**\r\n   * The size of the pane relative to its sibling panes' sizes. Defaults to 100.\r\n   */\r\n  size?: number;\r\n  /**\r\n   * The absolute location point of the pane. Applies only for floating panes.\r\n   */\r\n  floatingLocation?: IgcDockManagerPoint;\r\n  /**\r\n   * The absolute width of the pane. Applies only for floating panes. Defaults to 100.\r\n   */\r\n  floatingWidth?: number;\r\n  /**\r\n   * The absolute height of the pane. Applies only for floating panes. Defaults to 100.\r\n   */\r\n  floatingHeight?: number;\r\n  /**\r\n   * Determines whether floating pane resizing is allowed. Applies only for floating panes.\r\n   */\r\n  floatingResizable?: boolean;\r\n  /**\r\n   * Determines whether the pane should present in the UI when empty.\r\n   */\r\n  allowEmpty?: boolean;\r\n  /**\r\n   * Determines whether a split pane is maximized or not. Defaults to false.\r\n   * @deprecated\r\n   * Having isMaximized set to true on a split pane level has no real effect as split panes serve as containers only, meaning they have no actual content to be shown maximized.\r\n   * Deprecated in 1.14.4 (pending removal in 1.15.0)\r\n   * The 'isMaximized' property of IgcTabGroupPane and/or IgcContentPane should be used instead.\r\n   */\r\n  isMaximized?: boolean;\r\n}\r\n\r\n/* marshalByValue */\r\nexport interface IgcTabGroupPane {\r\n  /**\r\n   * The id of the pane. If not set the Dock Manager generates it automatically.\r\n   */\r\n  id?: string;\r\n  /**\r\n   * The type of the pane.\r\n   */\r\n  /* alternateName: paneType */\r\n  type: IgcDockManagerPaneType.tabGroupPane;\r\n  /**\r\n   * The child content panes of the tab group.\r\n   */\r\n  /* blazorCollectionName: ContentPaneCollection */\r\n  /* blazorTreatAsCollection */\r\n  panes: IgcContentPane[];\r\n  /**\r\n   * The size of the pane relative to its sibling panes' sizes. Defaults to 100.\r\n   */\r\n  size?: number;\r\n  /**\r\n   * The index of the selected tab.\r\n   */\r\n  selectedIndex?: number;\r\n  /**\r\n   * Determines whether the pane should present in the UI when empty.\r\n   */\r\n  allowEmpty?: boolean;\r\n  /**\r\n   *  Determines whether a tab group is maximized or not. Defaults to false.\r\n   */\r\n  isMaximized?: boolean;\r\n}\r\n\r\n/* marshalByValue */\r\nexport interface IgcDocumentHost {\r\n  /**\r\n   * The id of the pane. If not set the Dock Manager generates it automatically.\r\n   */\r\n  id?: string;\r\n  /**\r\n   * The type of the pane.\r\n   */\r\n  /* alternateName: paneType */\r\n  type: IgcDockManagerPaneType.documentHost;\r\n  /**\r\n   * The root split pane of the document host.\r\n   */\r\n  rootPane: IgcSplitPane;\r\n  /**\r\n   * The size of the pane relative to its sibling panes' sizes. Defaults to 100.\r\n   */\r\n  size?: number;\r\n}\r\n\r\nexport type IgcDockManagerPane = IgcContentPane | IgcSplitPane | IgcTabGroupPane | IgcDocumentHost;\r\n\r\n/**\r\n * Describes a Dock Manager layout.\r\n */\r\n/* marshalByValue */\r\nexport interface IgcDockManagerLayout {\r\n  /**\r\n   * The root split pane of the layout.\r\n   */\r\n  rootPane: IgcSplitPane;\r\n  /**\r\n   * The floating panes of the layout.\r\n   */\r\n  /* blazorCollectionName: SplitPaneCollection */\r\n  /* blazorTreatAsCollection */\r\n  floatingPanes?: IgcSplitPane[];\r\n}\r\n\r\nexport interface IgcDockManagerEventMap extends HTMLElementEventMap {\r\n  /**\r\n   * An event raised when a splitter resizing starts.\r\n   */\r\n  'splitterResizeStart': CustomEvent;\r\n  /**\r\n   * An event raised when a splitter resizing ends.\r\n   */\r\n  'splitterResizeEnd': CustomEvent;\r\n  /**\r\n   * An event raised when a pane header element is connected.\r\n   */\r\n  'paneHeaderConnected': CustomEvent<IgcPaneHeaderConnectionEventArgs>;\r\n  /**\r\n   * An event raised when a pane header element is disconnected.\r\n   */\r\n  'paneHeaderDisconnected': CustomEvent<IgcPaneHeaderConnectionEventArgs>;\r\n  /**\r\n   * An event raised when a tab header element is connected.\r\n   */\r\n  'tabHeaderConnected': CustomEvent<IgcTabHeaderConnectionEventArgs>;\r\n  /**\r\n   * An event raised when a tab header element is disconnected.\r\n   */\r\n  'tabHeaderDisconnected': CustomEvent<IgcTabHeaderConnectionEventArgs>;\r\n  /**\r\n   * An event raised when panes are about to close.\r\n   */\r\n  'paneClose': CustomEvent<IgcPaneCloseEventArgs>;\r\n  /**\r\n   * An event raised when pane is scrolled.\r\n   */\r\n  'paneScroll': CustomEvent<IgcPaneScrollEventArgs>;\r\n  /**\r\n   * An event raised when panes are about to get pinned/unpinned.\r\n   */\r\n  'panePinnedToggle': CustomEvent<IgcPanePinnedEventArgs>;\r\n  /**\r\n   * An event raised when a pane drag starts.\r\n   */\r\n  'paneDragStart': CustomEvent<IgcPaneDragStartEventArgs>;\r\n  /**\r\n   * An event raised when a pane is dragged over.\r\n   */\r\n  'paneDragOver': CustomEvent<IgcPaneDragOverEventArgs>;\r\n  /**\r\n   * An event raised when a pane drag ends.\r\n   */\r\n  'paneDragEnd': CustomEvent<IgcPaneDragEndEventArgs>;\r\n\r\n  /**\r\n   * An event raised when a pane is selected/activated\r\n   */\r\n  'activePaneChanged': CustomEvent<IgcActivePaneEventArgs>;\r\n  /**\r\n   * An event raised when a floating pane resize operation ends.\r\n   */\r\n  'floatingPaneResizeEnd': CustomEvent<IgcFloatingPaneResizeEventArgs>;\r\n  /**\r\n   * An event raised when a floating pane resizing operation starts.\r\n   */\r\n  'floatingPaneResizeStart': CustomEvent<IgcFloatingPaneResizeEventArgs>;\r\n  /**\r\n   * An event raised when a floating pane resizing operation is in progress.\r\n   */\r\n  'floatingPaneResizeMove': CustomEvent<IgcFloatingPaneResizeMoveEventArgs>;\r\n  /**\r\n   * An event raised when the layout changes.\r\n   */\r\n  'layoutChange': CustomEvent;\r\n}\r\n\r\n/**\r\n * Describes a Dock Manager component.\r\n */\r\n/* blazorAdditionalDependency: DockManagerLayout */\r\n/* blazorAdditionalDependency: ContentPane */\r\n/* blazorAdditionalDependency: SplitPane */\r\n/* blazorAdditionalDependency: DocumentHost */\r\n/* blazorAdditionalDependency: TabGroupPane */\r\n/* blazorAdditionalDependency: TabHeaderElement */\r\n/* blazorSupportsVisualChildren */\r\nexport class IgcDockManagerComponent extends HTMLElement {\r\n  /* @tsTwoWayProperty (true, \"LayoutChange\", \"Detail\", false) */\r\n  /**\r\n   * Gets/sets the layout configuration of the Dock Manager.\r\n   */\r\n  layout: IgcDockManagerLayout;\r\n  /**\r\n   * Gets/sets the currently dragged pane.\r\n   */\r\n  draggedPane: IgcContentPane | IgcSplitPane | IgcTabGroupPane;\r\n  /**\r\n   * Gets/sets the current drop position when performing custom drag/drop.\r\n   */\r\n  dropPosition: IgcDockManagerPoint;\r\n  /**\r\n   * Gets/sets the active pane of the Dock Manager.\r\n   */\r\n  activePane: IgcContentPane;\r\n  /**\r\n   * Determines whether the end user is allowed to maximize panes. Defaults to true.\r\n   */\r\n  allowMaximize: boolean;\r\n  /**\r\n   * Determines whether the floating panes are kept inside the Dock Manager boundaries. Defaults to false.\r\n   */\r\n  containedInBoundaries: boolean;\r\n  /**\r\n   * Determines which tab header icons should show when hovering over the tab with the mouse. Defaults to undefined.\r\n   */\r\n  showHeaderIconOnHover: 'closeOnly' | 'moreOptionsOnly' | 'all';\r\n  /**\r\n   * Gets/sets the maximized pane.\r\n   */\r\n  maximizedPane: IgcContentPane | IgcSplitPane | IgcTabGroupPane;\r\n  /**\r\n   * Gets/sets the resource strings.\r\n   */\r\n  resourceStrings: IgcDockManagerResourceStrings;\r\n  /**\r\n   * Determines whether the end user is allowed to resize floating panes. Defaults to true.\r\n   */\r\n  allowFloatingPanesResize: boolean;\r\n  /**\r\n   * Disables the built-in keyboard shortcuts for pane navigation. Defaults to false.\r\n   */\r\n  disableKeyboardNavigation: boolean;\r\n  /**\r\n   * Determines whether the end user is allowed to inner dock panes. Defaults to true.\r\n   */\r\n  allowInnerDock?: boolean;\r\n  /**\r\n   * Determines whether pane headers are only shown on hover or always visible. Defaults to 'always'.\r\n   */\r\n  showPaneHeaders: 'onHoverOnly' | 'always';\r\n  /**\r\n   * Determines whether the end user can dock the dragged pane by dragging it close to the target pane edges.\r\n   * If enabled, docking indicators are not visible. Defaults to false.\r\n   */\r\n  proximityDock?: boolean;\r\n\r\n  /**\r\n   * Performs drop of the `draggedPane` into the specified `dropPosition`.\r\n   * Returns true if the pane has been docked otherwise returns false.\r\n   */\r\n  dropPane(): Promise<boolean> {\r\n    return null;\r\n  }\r\n  /**\r\n   * Removes a pane from the layout.\r\n   */\r\n  removePane(pane: IgcDockManagerPane): Promise<void> {\r\n    pane = pane;\r\n    return null;\r\n  }\r\n  /**\r\n   * Focuses a pane from the layout.\r\n   */\r\n  focusPane(contentId: string): Promise<void> {\r\n    contentId = contentId;\r\n    return null;\r\n  }\r\n\r\n  addEventListener<K extends keyof IgcDockManagerEventMap>(type: K, listener: (this: HTMLElement, ev: IgcDockManagerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\r\n  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\r\n  addEventListener(): void { }\r\n  removeEventListener<K extends keyof IgcDockManagerEventMap>(type: K, listener: (this: HTMLElement, ev: IgcDockManagerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\r\n  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\r\n  removeEventListener(): void { }\r\n}\r\n\r\n/**\r\n * Describes a pane header element.\r\n */\r\nexport interface IgcPaneHeaderElement extends HTMLElement {\r\n  /**\r\n   * Gets/sets the drag service.\r\n   */\r\n  dragService: IgcDragService;\r\n}\r\n\r\n/**\r\n * Describes a tab header element.\r\n */\r\nexport interface IgcTabHeaderElement extends HTMLElement {\r\n  /**\r\n   * Gets/sets the drag service.\r\n   */\r\n  dragService: IgcDragService;\r\n}\r\n\r\n/**\r\n * Describes dock manager resource strings.\r\n */\r\nexport interface IgcDockManagerResourceStrings {\r\n  close?: string;\r\n  pin?: string;\r\n  unpin?: string;\r\n  maximize?: string;\r\n  minimize?: string;\r\n  moreOptions?: string;\r\n  moreTabs?: string;\r\n  panes?: string;\r\n  documents?: string;\r\n}\r\n\r\nexport enum IgcResizerLocation {\r\n  top = 'top',\r\n  bottom = 'bottom',\r\n  left = 'left',\r\n  right = 'right',\r\n  topLeft = 'topLeft',\r\n  topRight = 'topRight',\r\n  bottomLeft = 'bottomLeft',\r\n  bottomRight = 'bottomRight'\r\n}\r\n\r\nexport interface IgcSplitterResizeEventArgs {\r\n  /**\r\n   * Gets the pane being resized with the splitter.\r\n   */\r\n  readonly pane: IgcDockManagerPane;\r\n  /**\r\n   * Gets the pane's orientation.\r\n   */\r\n  readonly orientation: IgcSplitPaneOrientation;\r\n  /**\r\n   * Gets the pane's width.\r\n   */\r\n  readonly paneWidth: number;\r\n  /**\r\n   * Gets the pane's height.\r\n   */\r\n  readonly paneHeight: number;\r\n}\r\n\r\nexport interface IgcFloatingPaneResizeEventArgs {\r\n  /**\r\n   * Gets the source pane that triggers the resize operation.\r\n   */\r\n  readonly sourcePane: IgcSplitPane;\r\n  /**\r\n   * Gets the edge/corner that is being dragged.\r\n   */\r\n  readonly resizerLocation: IgcResizerLocation;\r\n}\r\n\r\nexport interface IgcFloatingPaneResizeMoveEventArgs extends IgcFloatingPaneResizeEventArgs {\r\n  /**\r\n   * Gets the pane's width before the resizing operation.\r\n   */\r\n  readonly oldWidth: number;\r\n  /**\r\n   * Gets the pane's width after the resizing operation.\r\n   */\r\n  newWidth: number;\r\n  /**\r\n   * Gets the pane's height before the resizing operation.\r\n   */\r\n  readonly oldHeight: number;\r\n  /**\r\n   * Gets the pane's height after the resizing operation.\r\n   */\r\n  newHeight: number;\r\n  /**\r\n   * Gets the pane's floating location before the resizing operation.\r\n   */\r\n  readonly oldLocation: IgcDockManagerPoint;\r\n  /**\r\n   * Gets the pane's floating location after the resizing operation.\r\n   */\r\n  newLocation: IgcDockManagerPoint;\r\n}\r\n","import { IgcDockManagerResourceStrings } from '../components/dockmanager/dockmanager.public-interfaces';\r\n\r\n/**\r\n * English resource strings for the Dock Manager\r\n */\r\nexport const IgcDockManagerResourceStringsEN: IgcDockManagerResourceStrings = {\r\n  close: 'Close',\r\n  pin: 'Pin',\r\n  unpin: 'Unpin',\r\n  maximize: 'Maximize',\r\n  minimize: 'Minimize',\r\n  moreOptions: 'More options',\r\n  moreTabs: 'More tabs',\r\n  panes: 'Panes',\r\n  documents: 'Documents'\r\n};\r\n","import { IgcDockManagerResourceStrings } from '../components/dockmanager/dockmanager.public-interfaces';\r\n\r\n/**\r\n * Japanese resource strings for the Dock Manager\r\n */\r\nexport const IgcDockManagerResourceStringsJP: IgcDockManagerResourceStrings = {\r\n  close: '閉じる',\r\n  pin: '固定',\r\n  unpin: '固定解除',\r\n  maximize: '最大化',\r\n  minimize: '最小化',\r\n  moreOptions: 'その他のオプション',\r\n  moreTabs: 'その他のタブ',\r\n  panes: 'Panes',\r\n  documents: 'Documents'\r\n};\r\n","import { IgcDockManagerResourceStrings } from '../components/dockmanager/dockmanager.public-interfaces';\r\n\r\n/**\r\n * Spanish resource strings for the Dock Manager\r\n */\r\nexport const IgcDockManagerResourceStringsES: IgcDockManagerResourceStrings = {\r\n  close: 'Cerrar',\r\n  pin: 'Anclar',\r\n  unpin: 'Desanclar',\r\n  maximize: 'Maximizar',\r\n  minimize: 'Minimizar',\r\n  moreOptions: 'Más opciones',\r\n  moreTabs: 'Más fichas',\r\n  panes: 'Panes',\r\n  documents: 'Documents'\r\n};\r\n","import { IgcDockManagerResourceStrings } from '../components/dockmanager/dockmanager.public-interfaces';\r\n\r\n/**\r\n * Korean resource strings for the Dock Manager\r\n */\r\nexport const IgcDockManagerResourceStringsKO: IgcDockManagerResourceStrings = {\r\n  close: '닫기',\r\n  pin: '고정',\r\n  unpin: '고정 해제',\r\n  maximize: '최대화',\r\n  minimize: '최소화',\r\n  moreOptions: '더 많은 옵션',\r\n  moreTabs: '탭 더 보기',\r\n  panes: 'Panes',\r\n  documents: 'Documents'\r\n};\r\n","import { IgcDockManagerResourceStrings } from '../components/dockmanager/dockmanager.public-interfaces';\r\nimport { IgcDockManagerResourceStringsEN } from '../i18n/resources.en';\r\nimport { IgcDockManagerResourceStringsES } from '../i18n/resources.es';\r\nimport { IgcDockManagerResourceStringsJP } from '../i18n/resources.jp';\r\nimport { IgcDockManagerResourceStringsKO } from '../i18n/resources.ko';\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport const resourceStringsMap = new Map<string, IgcDockManagerResourceStrings>();\r\nresourceStringsMap.set('en', IgcDockManagerResourceStringsEN);\r\nresourceStringsMap.set('jp', IgcDockManagerResourceStringsJP);\r\nresourceStringsMap.set('es', IgcDockManagerResourceStringsES);\r\nresourceStringsMap.set('ko', IgcDockManagerResourceStringsKO);\r\n\r\n/**\r\n * Adds custom resource strings for a specified language.\r\n * @param language The name of the language that should match the `lang` attribute of the page.\r\n * @param resourceStrings The resource strings to be added.\r\n */\r\nexport function addResourceStrings(language: string, resourceStrings: IgcDockManagerResourceStrings) {\r\n  resourceStringsMap.set(language, resourceStrings);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}