{"ast":null,"code":"class DSL {\n  static parser(jsx) {\n    let children = DSL.Children(jsx);\n    while (children) {\n      jsx = children;\n      children = DSL.Children(children);\n    }\n    return jsx;\n  }\n  static Children(jsx) {\n    const params = DSL.extractParameters(jsx, 'Children');\n    if (!params) return undefined;\n    const includes = DSL.extractParameter(params, 'includes') || '[]';\n    const excludes = DSL.extractParameter(params, 'excludes') || '[]';\n    const includesJsx = includes !== '[]' ? `.filter(c => c.name && ${includes}.includes(c.name))` : '';\n    const excludesJsx = excludes !== '[]' ? `.filter(c => c.name && !${excludes}.includes(c.name))` : '';\n    const dsl = `<div className={'children'}>\n                {data.children\n                    ${includesJsx}\n                    ${excludesJsx}\n                    .map(c => <DefaultNode key={c.id} data={c} />)\n                }\n        </div>`;\n    return DSL.replace(jsx, 'Children', dsl);\n  }\n  static extractParameters(jsx, component) {\n    const regex = new RegExp(`<${component}(.*?)\\\\/>`);\n    const match = jsx.match(regex);\n    if (match && match[1]) return match[1];else return undefined;\n  }\n  static extractParameter(params, name) {\n    const regex = new RegExp(`${name}={(.*?)}`);\n    const match = params.match(regex);\n    if (match && match[1]) return match[1];else return undefined;\n  }\n  static replace(jsx, component, dsl) {\n    const regex = new RegExp(`<${component}(.*?)\\\\/>`);\n    return jsx.replace(regex, dsl);\n  }\n}\nexport default DSL;","map":{"version":3,"names":["DSL","parser","jsx","children","Children","params","extractParameters","undefined","includes","extractParameter","excludes","includesJsx","excludesJsx","dsl","replace","component","regex","RegExp","match","name"],"sources":["C:/d/Programming/web/jodel-mde/src/DSL/DSL.ts"],"sourcesContent":["class DSL {\r\n    public static parser(jsx: string): string {\r\n        let children = DSL.Children(jsx);\r\n        while(children) {\r\n            jsx = children;\r\n            children = DSL.Children(children);\r\n        }\r\n        return jsx;\r\n    }\r\n\r\n    private static Children(jsx: string): string|undefined {\r\n        const params = DSL.extractParameters(jsx, 'Children');\r\n        if(!params) return undefined;\r\n        const includes = DSL.extractParameter(params, 'includes') || '[]';\r\n        const excludes = DSL.extractParameter(params, 'excludes') || '[]';\r\n        const includesJsx = (includes !== '[]') ? `.filter(c => c.name && ${includes}.includes(c.name))` : '';\r\n        const excludesJsx = (excludes !== '[]') ? `.filter(c => c.name && !${excludes}.includes(c.name))` : '';\r\n        const dsl = `<div className={'children'}>\r\n                {data.children\r\n                    ${includesJsx}\r\n                    ${excludesJsx}\r\n                    .map(c => <DefaultNode key={c.id} data={c} />)\r\n                }\r\n        </div>`;\r\n        return DSL.replace(jsx, 'Children', dsl);\r\n    }\r\n\r\n\r\n    private static extractParameters(jsx: string, component: string): string|undefined {\r\n        const regex = new RegExp(`<${component}(.*?)\\\\/>`);\r\n        const match = jsx.match(regex);\r\n        if (match && match[1]) return match[1];\r\n        else return undefined;\r\n    }\r\n\r\n    private static extractParameter(params: string, name: string): string|undefined {\r\n        const regex = new RegExp(`${name}={(.*?)}`);\r\n        const match = params.match(regex);\r\n        if (match && match[1]) return match[1];\r\n        else return undefined;\r\n    }\r\n\r\n    private static replace(jsx: string, component: string, dsl: string): string {\r\n        const regex = new RegExp(`<${component}(.*?)\\\\/>`);\r\n        return jsx.replace(regex, dsl);\r\n    }\r\n\r\n}\r\n\r\nexport default DSL;\r\n"],"mappings":"AAAA,MAAMA,GAAG,CAAC;EACN,OAAcC,MAAMA,CAACC,GAAW,EAAU;IACtC,IAAIC,QAAQ,GAAGH,GAAG,CAACI,QAAQ,CAACF,GAAG,CAAC;IAChC,OAAMC,QAAQ,EAAE;MACZD,GAAG,GAAGC,QAAQ;MACdA,QAAQ,GAAGH,GAAG,CAACI,QAAQ,CAACD,QAAQ,CAAC;IACrC;IACA,OAAOD,GAAG;EACd;EAEA,OAAeE,QAAQA,CAACF,GAAW,EAAoB;IACnD,MAAMG,MAAM,GAAGL,GAAG,CAACM,iBAAiB,CAACJ,GAAG,EAAE,UAAU,CAAC;IACrD,IAAG,CAACG,MAAM,EAAE,OAAOE,SAAS;IAC5B,MAAMC,QAAQ,GAAGR,GAAG,CAACS,gBAAgB,CAACJ,MAAM,EAAE,UAAU,CAAC,IAAI,IAAI;IACjE,MAAMK,QAAQ,GAAGV,GAAG,CAACS,gBAAgB,CAACJ,MAAM,EAAE,UAAU,CAAC,IAAI,IAAI;IACjE,MAAMM,WAAW,GAAIH,QAAQ,KAAK,IAAI,GAAK,0BAAyBA,QAAS,oBAAmB,GAAG,EAAE;IACrG,MAAMI,WAAW,GAAIF,QAAQ,KAAK,IAAI,GAAK,2BAA0BA,QAAS,oBAAmB,GAAG,EAAE;IACtG,MAAMG,GAAG,GAAI;AACrB;AACA,sBAAsBF,WAAY;AAClC,sBAAsBC,WAAY;AAClC;AACA;AACA,eAAe;IACP,OAAOZ,GAAG,CAACc,OAAO,CAACZ,GAAG,EAAE,UAAU,EAAEW,GAAG,CAAC;EAC5C;EAGA,OAAeP,iBAAiBA,CAACJ,GAAW,EAAEa,SAAiB,EAAoB;IAC/E,MAAMC,KAAK,GAAG,IAAIC,MAAM,CAAE,IAAGF,SAAU,WAAU,CAAC;IAClD,MAAMG,KAAK,GAAGhB,GAAG,CAACgB,KAAK,CAACF,KAAK,CAAC;IAC9B,IAAIE,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE,OAAOA,KAAK,CAAC,CAAC,CAAC,CAAC,KAClC,OAAOX,SAAS;EACzB;EAEA,OAAeE,gBAAgBA,CAACJ,MAAc,EAAEc,IAAY,EAAoB;IAC5E,MAAMH,KAAK,GAAG,IAAIC,MAAM,CAAE,GAAEE,IAAK,UAAS,CAAC;IAC3C,MAAMD,KAAK,GAAGb,MAAM,CAACa,KAAK,CAACF,KAAK,CAAC;IACjC,IAAIE,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE,OAAOA,KAAK,CAAC,CAAC,CAAC,CAAC,KAClC,OAAOX,SAAS;EACzB;EAEA,OAAeO,OAAOA,CAACZ,GAAW,EAAEa,SAAiB,EAAEF,GAAW,EAAU;IACxE,MAAMG,KAAK,GAAG,IAAIC,MAAM,CAAE,IAAGF,SAAU,WAAU,CAAC;IAClD,OAAOb,GAAG,CAACY,OAAO,CAACE,KAAK,EAAEH,GAAG,CAAC;EAClC;AAEJ;AAEA,eAAeb,GAAG"},"metadata":{},"sourceType":"module"}