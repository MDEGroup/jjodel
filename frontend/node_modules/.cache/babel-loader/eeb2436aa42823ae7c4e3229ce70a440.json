{"ast":null,"code":"var _dec, _class, _class2;\nimport { DUser, EcoreParser, LoadAction, Log, U, LPointerTargetable, prjson2xml, prxml2json, store, RuntimeAccessible, Selectors, Debug, DViewElement, transientProperties, LUser } from '../../joiner';\nimport { ProjectsApi } from \"../../api/persistance\";\nimport { VersionFixer } from \"../../redux/VersionFixer\";\nexport let SaveManager = (_dec = RuntimeAccessible('SaveManager'), _dec(_class = (_class2 = class SaveManager {\n  static save() {\n    var _LUser$fromPointer;\n    let project = (_LUser$fromPointer = LUser.fromPointer(DUser.current)) === null || _LUser$fromPointer === void 0 ? void 0 : _LUser$fromPointer.project;\n    if (project) ProjectsApi.save(project);\n    /*SaveManager.tmpsave = store.getState();\r\n    localStorage.setItem(\"tmpsave\", JSON.stringify(SaveManager.tmpsave));\r\n    console.clear();\r\n    console.log(JSON.stringify(SaveManager.tmpsave))*/\n  }\n  static load(state0) {\n    if (!state0 && SaveManager.tmpsave) {\n      LoadAction.new(SaveManager.tmpsave);\n      return;\n    }\n    state0 = state0 || localStorage.getItem('tmpsave') || 'null'; // priorities: 1) argument from file 2) state variable cached 3) localstorage 4) null prevent crash\n    let save = SaveManager.tmpsave = typeof state0 === 'string' ? JSON.parse(state0) : state0;\n    for (let vid of [...save.viewelements, ...save.viewpoints]) {\n      for (let key of DViewElement.RecompileKeys) {\n        var _save$idlookup$vid;\n        if (!transientProperties.view[vid]) transientProperties.view[vid] = {\n          name: ((_save$idlookup$vid = save.idlookup[vid]) === null || _save$idlookup$vid === void 0 ? void 0 : _save$idlookup$vid.name) || 'Unnamed'\n        };\n        key = 'VIEWS_RECOMPILE_' + key;\n        if (!save[key]) save[key] = [];\n        save[key].push(vid);\n      }\n    }\n    VersionFixer.update(save);\n    LoadAction.new(save);\n  }\n  static exportEcore_click() {\n    var _lmodel$instanceof;\n    let toXML = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let toFile = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    // e: React.MouseEvent,\n    let lmodel = Selectors.getActiveModel();\n    if (!lmodel) return;\n    let json = SaveManager.exportEcore(lmodel);\n    let str = JSON.stringify(json, null, \"\\t\");\n    if (toXML) {\n      str = prjson2xml.json2xml(json, '\\t');\n      str = U.formatXml(str);\n    }\n    if (!toFile) {\n      // (document.querySelector(\"#export-tmp\") as any).innerText = str;\n      localStorage.setItem(\"import\", str);\n      return;\n    }\n    let ism2 = lmodel.isMetamodel;\n    let name = (lmodel.name || (ism2 ? 'M2' : 'M1') + '_unnamed') + (toXML ? \".xml\" : '.json') + \".\" + (ism2 ? \"ecore\" : ((_lmodel$instanceof = lmodel.instanceof) === null || _lmodel$instanceof === void 0 ? void 0 : _lmodel$instanceof.name) || \"shapeless\");\n    console.log(\"download file:\", {\n      name,\n      ism2,\n      toXML,\n      lmodel,\n      instanceof: lmodel.instanceof\n    });\n    U.download(name, str);\n  }\n  static importEcore_click() {\n    let fromXML = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let fromfile = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    try {\n      this.importEcore_click0(fromXML, fromfile);\n    } catch (e) {\n      var _e$message, _e$message$substring;\n      let str = (e === null || e === void 0 ? void 0 : (_e$message = e.message) === null || _e$message === void 0 ? void 0 : (_e$message$substring = _e$message.substring) === null || _e$message$substring === void 0 ? void 0 : _e$message$substring.call(_e$message, 0, 1000)) || 'some error';\n      console.trace(str, e);\n      // throw new Error(str);\n    }\n  }\n  static importEcore_click0() {\n    let fromXML = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let fromfile = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const extensions = [fromXML ? \"*.xml.*\" : \"*.json.*\"]; // [\".ecore\"]; // Selectors.getActiveModel().isM1() ? '.' + Selectors.getActiveModel().metamodel.fullname() : '.ecore';\n    let filestring,\n      jsonstring,\n      jsonobj = undefined;\n    console.log(\"importEcore: prefromfile\");\n    if (!fromfile) {\n      filestring = localStorage.getItem(\"import\") || 'null';\n      if (fromXML) {\n        const xmlDoc = new DOMParser().parseFromString(filestring, \"text/xml\");\n        jsonobj = prxml2json.xml2jsonobj(xmlDoc, ' ');\n      }\n      //if (filestring.includes(\"\\n\")) throw new Error(filestring.substring(0, 1000));\n      SaveManager.importEcore(jsonobj || filestring, true, undefined, true); // todo: trova il modo di determinare se Ã¨ m1 o m2 senza filename\n      return;\n    }\n    console.log(\"importEcore: pre file read\", {\n      fromXML,\n      fromfile\n    });\n    let filename;\n    U.fileRead((e, files, fileContents) => {\n      var _e$target$files;\n      Log.ex(!fileContents || !files || fileContents.length !== files.length, 'Failed to get file contents:', files, fileContents);\n      Log.ex(!!fileContents && fileContents.length > 1, 'Should not be possible to input multiple files yet.');\n      if (!fileContents) return;\n      if (fileContents.length == 0) return;\n      // @ts-ignore\n      filename = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0].name;\n      console.log(\"file read\", {\n        e,\n        fileContents,\n        files,\n        filename\n      });\n      filestring = fileContents[0];\n\n      // if file is over 500kb, lightmode on\n      if (filestring.length >= 500 * 1024 && !Debug.lightMode) {\n        Debug.setLightMode(true);\n        // $(document).one(\"click\", (e) => { Debug.setLightMode(false); });\n      }\n      console.log('importEcore filestring input: ', filestring);\n      if (fromXML) {\n        let windoww = window;\n        windoww.file = filestring;\n        windoww.todoc = str => new DOMParser().parseFromString(str, \"text/xml\");\n        windoww.doctojson = doc => prxml2json.xml2jsonobj(doc, ' ');\n        // problemi doctojson or xmi parser: \\n replacemet causa crash per stringa in posizione invalida. \\\" anche per attributi inline che iniiano con \\\\\"\n        // filestring = U.multiReplaceAll(filestring, [\"\\t\", \"\\r\", \"\\n\", '&amp;', '&#38;', '&quot;', '&', '\\'', '\"'], [\"\\\\t\", \"\\\\r\", \"\\\\n\", '\\\\&', \"\\\\'\", '\\\\\"', '\\\\&', \"\\\\'\", '\\\\\"']);//,  \"\\\\t\"), \"\\r\", \"\\\\r\"), \"\\n\", \"\\\\n\");\n\n        const xmlDoc = new DOMParser().parseFromString(filestring, \"text/xml\");\n        console.log('importEcore xml:', xmlDoc);\n        let jsonstring0 = '';\n        jsonobj = prxml2json.xml2jsonobj(xmlDoc, ' '); //doto: non devo wrappare con \\\" i nomi di chiavi o valori ma solo i contenuti\n        /*jsonstring = jsonstring0;\r\n        //jsonstring = U.multiReplaceAll(jsonstring0, [\"\\t\", \"\\r\", \"\\n\", '&amp;', '&#38;', '&quot;', '&', '\\'', '\"'], [\"\\\\t\", \"\\\\r\", \"\\\\n\", '\\\\&', \"\\\\'\", '\\\\\"', '\\\\&', \"\\\\'\", '\\\\\"']);//,  \"\\\\t\"), \"\\r\", \"\\\\r\"), \"\\n\", \"\\\\n\");\r\n        */ //jsonstring = jsonstring.replaceAll(/(\\{|\\,)\\\\n\\s*/gm, \"\")\n        /*if (jsonstring.includes(\"\\n\")) throw new Error(jsonstring0.substring(0, 1000)+\"\\n\\n\\n\\n\" + jsonstring.substring(0, 1000));\r\n        */\n        // jsonstring = JSON.stringify(jsonobj);\n        if (jsonobj.parsererror) {\n          Log.ee(\"failed to parse XML->JSON\", {\n            parseError: jsonobj.parseerror,\n            jsonobj\n          });\n          return;\n        }\n        console.log('importEcore jsonstr input: ', jsonobj);\n      } else jsonstring = filestring;\n      let isMetamodel = filename.indexOf(\".ecore\") === filename.length - \".ecore\".length;\n      console.log(\"ismetamodel\", {\n        filename,\n        isMetamodel\n      });\n      let end = SaveManager.importEcore(jsonobj || jsonstring || 'null', isMetamodel, filename, true);\n    }, extensions, true);\n  }\n  static exportEcore(model) {\n    let loopobj = {};\n    try {\n      return model.generateEcoreJson(loopobj);\n    } catch (e) {\n      Log.exx(\"possible loop in model:\\t\\n\" + e.message, {\n        loopobj,\n        e\n      });\n    }\n    return {\n      \"error\": true,\n      loopobj\n    };\n  }\n  static importEcore(jsonstr, isMetamodel, filename) {\n    let persist = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    return EcoreParser.parse(jsonstr, isMetamodel, filename, persist);\n  }\n  static exportLayout_click(toFile) {\n    let lmodel = LPointerTargetable.wrap(store.getState().models[0]);\n    // lmodel.node?.allSubNodes\n  }\n  static importLayout_click(fromFile) {}\n}, _class2.tmpsave = void 0, _class2)) || _class);","map":{"version":3,"names":["DUser","EcoreParser","LoadAction","Log","U","LPointerTargetable","prjson2xml","prxml2json","store","RuntimeAccessible","Selectors","Debug","DViewElement","transientProperties","LUser","ProjectsApi","VersionFixer","SaveManager","_dec","_class","_class2","save","_LUser$fromPointer","project","fromPointer","current","load","state0","tmpsave","new","localStorage","getItem","JSON","parse","vid","viewelements","viewpoints","key","RecompileKeys","_save$idlookup$vid","view","name","idlookup","push","update","exportEcore_click","_lmodel$instanceof","toXML","arguments","length","undefined","toFile","lmodel","getActiveModel","json","exportEcore","str","stringify","json2xml","formatXml","setItem","ism2","isMetamodel","instanceof","console","log","download","importEcore_click","fromXML","fromfile","importEcore_click0","e","_e$message","_e$message$substring","message","substring","call","trace","extensions","filestring","jsonstring","jsonobj","xmlDoc","DOMParser","parseFromString","xml2jsonobj","importEcore","filename","fileRead","files","fileContents","_e$target$files","ex","target","lightMode","setLightMode","windoww","window","file","todoc","doctojson","doc","jsonstring0","parsererror","ee","parseError","parseerror","indexOf","end","model","loopobj","generateEcoreJson","exx","jsonstr","persist","exportLayout_click","wrap","getState","models","importLayout_click","fromFile"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/frontend/src/components/topbar/SaveManager.ts"],"sourcesContent":["import {\r\n    Dictionary,\r\n    DUser,\r\n    EcoreParser,\r\n    GObject,\r\n    DState,\r\n    Json,\r\n    LModel,\r\n    LoadAction,\r\n    Log,\r\n    U,\r\n    LPointerTargetable,\r\n    prjson2xml,\r\n    prxml2json,\r\n    store,\r\n    RuntimeAccessible,\r\n    DModelElement,\r\n    SetRootFieldAction,\r\n    Selectors,\r\n    Debug,\r\n    DViewElement,\r\n    transientProperties,\r\n    LUser\r\n} from '../../joiner';\r\nimport {ProjectsApi} from \"../../api/persistance\";\r\nimport {VersionFixer} from \"../../redux/VersionFixer\";\r\n\r\n@RuntimeAccessible('SaveManager')\r\nexport class SaveManager {\r\n    private static tmpsave: DState;\r\n\r\n    static save(): void {\r\n        let project = LUser.fromPointer(DUser.current)?.project;\r\n        if (project) ProjectsApi.save(project);\r\n        /*SaveManager.tmpsave = store.getState();\r\n        localStorage.setItem(\"tmpsave\", JSON.stringify(SaveManager.tmpsave));\r\n        console.clear();\r\n        console.log(JSON.stringify(SaveManager.tmpsave))*/\r\n    }\r\n\r\n    static load(state0?: string | GObject<DState>): void {\r\n        if (!state0 && SaveManager.tmpsave) { LoadAction.new(SaveManager.tmpsave); return; }\r\n        state0 = state0 || localStorage.getItem('tmpsave') || 'null'; // priorities: 1) argument from file 2) state variable cached 3) localstorage 4) null prevent crash\r\n        let save: GObject<DState> = SaveManager.tmpsave = typeof state0 === 'string' ? JSON.parse(state0) : state0;\r\n        for (let vid of [...save.viewelements, ...save.viewpoints]) {\r\n            for (let key of DViewElement.RecompileKeys) {\r\n                if(!transientProperties.view[vid]) transientProperties.view[vid] = {name: (save.idlookup[vid] as any)?.name || 'Unnamed'} as any;\r\n                key = 'VIEWS_RECOMPILE_' + key;\r\n                if (!save[key]) save[key] = [];\r\n                save[key].push(vid);\r\n            }\r\n        }\r\n        VersionFixer.update(save);\r\n        LoadAction.new(save);\r\n    }\r\n\r\n    public static exportEcore_click(toXML: boolean = false, toFile: boolean = true): void { // e: React.MouseEvent,\r\n        let lmodel: null|LModel = Selectors.getActiveModel();\r\n        if (!lmodel) return;\r\n        let json = SaveManager.exportEcore(lmodel);\r\n        let str = JSON.stringify(json, null, \"\\t\");\r\n        if (toXML) {\r\n            str = prjson2xml.json2xml(json, '\\t');\r\n            str = U.formatXml(str);\r\n        }\r\n\r\n        if (!toFile) {\r\n            // (document.querySelector(\"#export-tmp\") as any).innerText = str;\r\n            localStorage.setItem(\"import\", str);\r\n            return;\r\n        }\r\n        let ism2 = (lmodel as LModel).isMetamodel;\r\n        let name = (lmodel.name || (ism2 ? 'M2' : 'M1') + '_unnamed')  + (toXML ? \".xml\" : '.json') + \".\"+ (ism2 ? \"ecore\" : lmodel.instanceof?.name || \"shapeless\");\r\n        console.log(\"download file:\", {name, ism2, toXML, lmodel, instanceof:lmodel.instanceof});\r\n        U.download(name, str);\r\n    }\r\n\r\n    public static importEcore_click(fromXML: boolean = false, fromfile: boolean = true): void {\r\n        try { this.importEcore_click0(fromXML, fromfile); } catch (e: any) {\r\n            let str = e?.message?.substring?.(0, 1000) || 'some error';\r\n            console.trace(str, e);\r\n            // throw new Error(str);\r\n        }\r\n    }\r\n    public static importEcore_click0(fromXML: boolean = false, fromfile: boolean = true): void {\r\n        const extensions: string[] = [(fromXML ? \"*.xml.*\" : \"*.json.*\")]; // [\".ecore\"]; // Selectors.getActiveModel().isM1() ? '.' + Selectors.getActiveModel().metamodel.fullname() : '.ecore';\r\n        let filestring: string, jsonstring: string, jsonobj: GObject = undefined as any;\r\n        console.log(\"importEcore: prefromfile\");\r\n        if (!fromfile) {\r\n            filestring = localStorage.getItem(\"import\") || 'null';\r\n            if (fromXML) {\r\n                const xmlDoc = new DOMParser().parseFromString(filestring,\"text/xml\");\r\n                jsonobj = prxml2json.xml2jsonobj(xmlDoc, ' ');\r\n            }\r\n            //if (filestring.includes(\"\\n\")) throw new Error(filestring.substring(0, 1000));\r\n            SaveManager.importEcore(jsonobj || filestring, true, undefined, true); // todo: trova il modo di determinare se Ã¨ m1 o m2 senza filename\r\n            return; }\r\n\r\n        console.log(\"importEcore: pre file read\", {fromXML, fromfile});\r\n        let filename;\r\n        U.fileRead((e: Event, files?: FileList | null, fileContents?: string[]) => {\r\n            Log.ex(!fileContents || !files || fileContents.length !== files.length, 'Failed to get file contents:', files, fileContents);\r\n            Log.ex(!!fileContents && fileContents.length > 1, 'Should not be possible to input multiple files yet.');\r\n            if (!fileContents) return;\r\n            if (fileContents.length == 0) return;\r\n            // @ts-ignore\r\n            filename = e.target.files?.[0].name;\r\n            console.log(\"file read\", {e, fileContents, files, filename});\r\n            filestring = fileContents[0];\r\n\r\n            // if file is over 500kb, lightmode on\r\n            if (filestring.length >= 500*1024 && !Debug.lightMode) {\r\n                Debug.setLightMode(true);\r\n                // $(document).one(\"click\", (e) => { Debug.setLightMode(false); });\r\n            }\r\n\r\n            console.log('importEcore filestring input: ', filestring);\r\n            if (fromXML) {\r\n                let windoww = window as any;\r\n                windoww.file = filestring;\r\n                windoww.todoc = (str: any) => new DOMParser().parseFromString(str,\"text/xml\");\r\n                windoww.doctojson = (doc: any) => prxml2json.xml2jsonobj(doc, ' ');\r\n                // problemi doctojson or xmi parser: \\n replacemet causa crash per stringa in posizione invalida. \\\" anche per attributi inline che iniiano con \\\\\"\r\n                // filestring = U.multiReplaceAll(filestring, [\"\\t\", \"\\r\", \"\\n\", '&amp;', '&#38;', '&quot;', '&', '\\'', '\"'], [\"\\\\t\", \"\\\\r\", \"\\\\n\", '\\\\&', \"\\\\'\", '\\\\\"', '\\\\&', \"\\\\'\", '\\\\\"']);//,  \"\\\\t\"), \"\\r\", \"\\\\r\"), \"\\n\", \"\\\\n\");\r\n\r\n                const xmlDoc = new DOMParser().parseFromString(filestring,\"text/xml\");\r\n                console.log('importEcore xml:', xmlDoc);\r\n                let jsonstring0 = '';\r\n                jsonobj = prxml2json.xml2jsonobj(xmlDoc, ' ');//doto: non devo wrappare con \\\" i nomi di chiavi o valori ma solo i contenuti\r\n                /*jsonstring = jsonstring0;\r\n                //jsonstring = U.multiReplaceAll(jsonstring0, [\"\\t\", \"\\r\", \"\\n\", '&amp;', '&#38;', '&quot;', '&', '\\'', '\"'], [\"\\\\t\", \"\\\\r\", \"\\\\n\", '\\\\&', \"\\\\'\", '\\\\\"', '\\\\&', \"\\\\'\", '\\\\\"']);//,  \"\\\\t\"), \"\\r\", \"\\\\r\"), \"\\n\", \"\\\\n\");\r\n                *///jsonstring = jsonstring.replaceAll(/(\\{|\\,)\\\\n\\s*/gm, \"\")\r\n                /*if (jsonstring.includes(\"\\n\")) throw new Error(jsonstring0.substring(0, 1000)+\"\\n\\n\\n\\n\" + jsonstring.substring(0, 1000));\r\n                */\r\n                // jsonstring = JSON.stringify(jsonobj);\r\n                if (jsonobj.parsererror) { Log.ee(\"failed to parse XML->JSON\", {parseError:jsonobj.parseerror, jsonobj});  return; }\r\n                console.log('importEcore jsonstr input: ', jsonobj);\r\n            }\r\n            else jsonstring = filestring;\r\n            let isMetamodel = filename.indexOf(\".ecore\") === filename.length - \".ecore\".length;\r\n            console.log(\"ismetamodel\", {filename, isMetamodel});\r\n            let end = SaveManager.importEcore(jsonobj || jsonstring || 'null', isMetamodel, filename, true);\r\n        }, extensions, true);\r\n    }\r\n\r\n    public static exportEcore(model: LModel): Json {\r\n        let loopobj = {};\r\n        try { return model.generateEcoreJson(loopobj); }\r\n        catch(e) { Log.exx(\"possible loop in model:\\t\\n\" + (e as Error).message, {loopobj, e}); }\r\n        return {\"error\": true, loopobj};\r\n    }\r\n    public static importEcore(jsonstr: GObject | string | null, isMetamodel: boolean, filename: string | undefined, persist: boolean = true): DModelElement[] {\r\n        return EcoreParser.parse(jsonstr, isMetamodel, filename, persist);\r\n    }\r\n\r\n    static exportLayout_click(toFile: boolean) {\r\n        let lmodel: LModel = (LPointerTargetable.wrap(store.getState().models[0]) as LModel);\r\n        // lmodel.node?.allSubNodes\r\n\r\n    }\r\n    static importLayout_click(fromFile: boolean) {\r\n\r\n    }\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}