{"ast":null,"code":"var _jsxFileName = \"C:\\\\0Programmi\\\\Dev\\\\projects\\\\frontend\\\\jjodel\\\\src\\\\common\\\\DV.tsx\",\n  _dec,\n  _class;\nimport { EdgeHead, U } from '../joiner';\nimport { RuntimeAccessible } from '../joiner';\nimport React from \"react\";\n// const beautify = require('js-beautify').html; // BEWARE: this adds some newline that might be breaking and introduce syntax errors in our JSX parser\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst beautify = s => s;\nlet ShortAttribETypes = window.ShortAttribETypes;\nexport let DV = (_dec = RuntimeAccessible('DV'), _dec(_class = class DV {\n  static modelView() {\n    return beautify(DefaultView.model());\n  } // damiano: che fa beautify? magari potremmo settarlo in LView.set_jsx invece che solo qui, cos√¨ viene formattato anche l'input utente?\n  static packageView() {\n    return beautify(DefaultView.package());\n  }\n  static classView() {\n    return beautify(DefaultView.class());\n  }\n  static attributeView() {\n    return beautify(DefaultView.feature());\n  }\n  static referenceView() {\n    return beautify(DefaultView.feature());\n  }\n  static enumeratorView() {\n    return beautify(DefaultView.enum());\n  }\n  static literalView() {\n    return beautify(DefaultView.literal());\n  }\n  static voidView() {\n    return beautify(DefaultView.void());\n  }\n  static operationView() {\n    return beautify(DefaultView.operation());\n  }\n\n  // damiano: i want to keep it because it will be useful for a candidate next feature in m1 & layoutable elements\n  // it is still work in progress.\n  static operationViewm1() {\n    return beautify(DefaultView.operationm1());\n  }\n  static objectView() {\n    return beautify(DefaultView.object());\n  }\n  static valueView() {\n    return beautify(DefaultView.value());\n  }\n  static defaultPackage() {\n    return beautify(DefaultView.defaultPackage());\n  }\n  static errorView_string(publicmsg, debughiddenmsg) {\n    let visibleMessage = publicmsg && typeof publicmsg === \"string\" ? U.replaceAll(publicmsg, \"Parse Error: \", \"\") : publicmsg;\n    console.error(\"error in view:\", {\n      publicmsg,\n      debuginfo: debughiddenmsg\n    });\n    return DefaultView.error_string(visibleMessage);\n  }\n  static errorView(publicmsg, debughiddenmsg, errortype, data, node, v) {\n    let visibleMessage = publicmsg && typeof publicmsg === \"string\" ? U.replaceAll(publicmsg, \"Parse Error:\", \"\").trim() : publicmsg;\n    console.error(\"error in view:\", {\n      publicmsg,\n      debuginfo: debughiddenmsg\n    });\n    return DefaultView.error(visibleMessage, errortype, data, node, v);\n  }\n  static edgePointView() {\n    return beautify(`<div className={\"edgePoint\"} tabIndex=\"-1\" hoverscale={\"hardcoded in css\"} style={{borderRadius:\"999px\", border: \"2px solid black\", background:\"white\", width:\"100%\", height:\"100%\"}} />`);\n  }\n  static edgePointViewSVG() {\n    return beautify(`<ellipse stroke={\"black\"} fill={\"red\"} cx={\"50\"} cy={\"50\"} rx={\"20\"} ry={\"20\"} />`\n    //`<ellipse stroke={\"black\"} fill={\"red\"} cx={props.node.x} cy={props.node.y} rx={props.node.w} ry={props.node.h} />`\n    );\n  }\n  static svgHeadTail(head, type) {\n    let inner;\n    let headstr = head === \"Head\" ? \"segments.head\" : \"segments.tail\";\n    let styleTranslate = \"{}\"; // '{transform:\"translate(\" + ' + headstr + '.x + \"px, \" + ' + headstr + '.y + \"px)\"}';\n    let styleTranslateRotate = '{transform:\"translate(\" + ' + headstr + '.x + \"px, \" + ' + headstr + '.y + \"px) rotate(\" + (' + headstr + '.rad) + \"rad)\",' + ' \"transformOrigin\":' + headstr + '.w/2+\"px \"+ ' + headstr + '.h/2+\"px\"}';\n    let styleRotate = 'style={{transform:\"rotate(\" + ' + headstr + '.rad + \"rad), transformOrigin:\"noooope  not center\"}}'; // edgeHead EdgeReference\n    let attrs = `\\n\\t\\t\\t\\tstyle={` + styleTranslateRotate + `}\\n\\t\\t\\t\\t stroke={strokeColor} strokeWidth={strokeWidth}\n className={\"edge` + head + ` ` + type + ` preview\"}></path>\\n`;\n    let path;\n    let hoverAttrs = `\\n\\t\\t\\t\\tstyle={` + styleTranslateRotate + `}\\n\\t\\t\\t\\t stroke={segments.all[0]&&(segments.all[0].length > strokeLengthLimit )&& strokeColorLong || strokeColorHover} strokeWidth={strokeWidthHover}\n className={\"edge` + head + ` ` + type + ` clickable content\"} tabIndex=\"-1\"></path>\\n`;\n    switch (type) {\n      default:\n        inner = \"edge '\" + head + \"' with type: '\" + type + \"' not found\";\n        break;\n      case EdgeHead.extend:\n        path = `<path d={\"M 0 0   L \" + ` + headstr + `.w + \" \" + ` + headstr + `.h/2 + \"   L 0 \" + ` + headstr + `.h + \"Z\" } fill=\"#fff\" `;\n        inner = path + attrs + \"\\n\\t\\t\\t\\t\" + path + hoverAttrs;\n        break;\n      case EdgeHead.reference:\n        path = `<path d={\"M 0 0   L \" + ` + headstr + `.w + \" \" + ` + headstr + `.h/2 + \"   L 0 \" + ` + headstr + `.h } fill=\"none\" `;\n        inner = path + attrs + \"\\n\\t\\t\\t\\t\" + path + hoverAttrs;\n        break;\n      case EdgeHead.aggregation:\n        path = `<path d={\"M 0 \" + ` + headstr + `.h/2 + \" L \" + ` + headstr + `.w/2 + \" 0 L \" +\n                    ` + headstr + `.w + \" \" +` + headstr + `.h/2 + \" L \" + ` + headstr + `.w/2 + \" \" + ` + headstr + `.h + \" Z\"} fill=\"#fff\" `;\n        inner = path + attrs + \"\\n\\t\\t\\t\\t\" + path + hoverAttrs;\n        break;\n      case EdgeHead.composition:\n        path = `<path d={\"M 0 \" + ` + headstr + `.h/2 + \" L \" + ` + headstr + `.w/2 + \" 0 L \" +\n                    ` + headstr + `.w + \" \" + ` + headstr + `.h/2 + \" L \" + ` + headstr + `.w/2 + \" \" + ` + headstr + `.h + \" Z\"} fill=\"#000\" `;\n        inner = path + attrs + \"\\n\\t\\t\\t\\t\" + path + hoverAttrs;\n        break;\n      /* `<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" style={overflow: \"visible\"}>\r\n                                  <path d={\"M 10 0 L 0 20 L 20 20 Z\"} fill=\"#ffffff\" stroke=\"#808080\" strokeWidth=\"1\"></path>\r\n                               </svg>`;*/\n      //  style={transform: \"rotate3d(xcenter, ycenter, zcenter??, 90deg)\"}\n    }\n    //  transform={\"rotate(\"+`+headstr+`.rad+\"rad \"+ segments.all[0].start.pt.toString(false, \" \")}\n    return inner; // no wrap because of .hoverable > .preview  on root & subelements must be consecutive\n    // return `<g className=\"edge`+head + ` ` + type +`\" style={` + styleTranslate + `}>\\n`+ inner +`</g>`\n  }\n\n  // about label rotation in .edge > foreignObect > div (label)\n  // first transform is h-center. second is rotate, third adds [0, 50%] of 50% vertical offset AFTER rotation to take label out of edge. fourth is to add a margin.\n  static edgeView(modename, head, tail, dashing) {\n    return beautify(`<div className={\"hoverable edge hide-ep ` + modename + `\"} style={{overflow: \"visible\", width:\"100vw\", height:\"100vh\", pointerEvents:\"none\"}}>\n            <svg style={{width:\"100vw\", height:\"100vh\", pointerEvents:\"none\", overflow: \"visible\"}}>\n                { /* edge full paths\n               \n                 first is preview path, normally seen\n                 third (segmented) is path onHover\n                 second is to enlarge the hover area of path.preview to the same as path.content, so i avoid hover loop enter-leave and graphical flashing\n                \n                */ }\n                <path className={\"preview\"} strokeWidth={strokeWidth} stroke={strokeColor}\n                fill={\"none\"} d={this.edge.d} strokeDasharray=\"` + dashing + `\"></path>\n                <path className={\"preview\"} strokeWidth={strokeWidthHover} stroke={\"transparent\"}\n                fill={\"none\"} d={this.edge.d}></path>\n                { /* edge separate segments */ }\n                {segments && segments.all && segments.all.flatMap(s => [\n                    <path tabIndex=\"-1\" className={\"clickable content\"} style={{pointerEvents:\"all\"}} strokeWidth={strokeWidthHover}\n                    stroke={s.length > strokeLengthLimit && strokeColorLong || strokeColorHover}\n                     fill={\"none\"} d={s.dpart}></path>,\n                    s.label && <foreignObject style={{overflow: \"visible\", height:\"0\", width:\"0\", whiteSpace:\"pre\", x:(s.start.pt.x + s.end.pt.x)/2+\"px\", y:(s.start.pt.y + s.end.pt.y)/2+\"px\"}}>\n                    <div\n                     style={{width: \"fit-content\",\n                      transform: \"translate(-50%, 0%) rotate(\"+s.radLabels+\"rad) translate(0%, -\"+(1-0.5*Math.abs(Math.abs(s.radLabels)%Math.PI)/(Math.PI/2))*100+\"%)\"+\n                     \" translate(0%, -5px\", color: strokeColor}}>{s.label}</div>\n                    </foreignObject>\n                ])}\n            { /* edge head */ }\n            ` + head + `\n            { /* edge tail */ }\n            ` + tail + `\n            </svg>\n            { /* interactively added edgepoints */ }\n            {\n                edge.midPoints.map( m => <EdgePoint data={edge.father.model.id} initialSize={m} key={m.id} view={\"Pointer_ViewEdgePoint\"} /> )\n            }\n        </div>`);\n  }\n  /*\r\n  {\r\n      false && edge.end.model.attributes.map( (m, index, arr) => <EdgePoint data={m.id} initialSize={(parent) => {\r\n          let segs = parent.segments.segments;\r\n          let pos = segs[0].start.pt.multiply(1-(index+1)/(arr.length+1), true).add(segs[segs.length-1].end.pt.multiply((index+1)/(arr.length+1), true));\r\n          // console.trace(\"initial ep\", {segs, pos, ratio:(index+1)/(arr.length+1), s:segs[0].start.pt, e:segs[segs.length-1].end.pt});\r\n          return {...pos, w:55, h:55}}} key={m.id} view={\"Pointer_ViewEdgePoint\"} /> )\r\n  }{\r\n      false && <EdgePoint key={\"midnode1\"} view={\"Pointer_ViewEdgePoint\"} />\r\n  }{\r\n      false && <EdgePoint key={\"midnode2\"} view={\"Pointer_ViewEdgePoint\"} />\r\n  }{\r\n      false && props.children && \"this would cause loop no idea why, needs to be fixed to allow passing EdgeNodes here\" || []\r\n  }\r\n  */\n}) || _class);\nlet valuecolormap = {};\nvaluecolormap[ShortAttribETypes.EBoolean] = \"orange\";\nvaluecolormap[ShortAttribETypes.EByte] = \"orange\";\nvaluecolormap[ShortAttribETypes.EShort] = \"orange\";\nvaluecolormap[ShortAttribETypes.EInt] = \"orange\";\nvaluecolormap[ShortAttribETypes.ELong] = \"orange\";\nvaluecolormap[ShortAttribETypes.EFloat] = \"orange\";\nvaluecolormap[ShortAttribETypes.EDouble] = \"orange\";\nvaluecolormap[ShortAttribETypes.EDate] = \"green\";\nvaluecolormap[ShortAttribETypes.EString] = \"green\";\nvaluecolormap[ShortAttribETypes.EChar] = \"green\";\nvaluecolormap[ShortAttribETypes.EVoid] = \"gray\";\n\n// &&[]bn\nlet valuecolormap_str = JSON.stringify(valuecolormap); // can this be declared inside view.constants ?\n\nclass DefaultView {\n  static model() {\n    return `<div className={'root'}>\n    {!data && \"Model data missing.\"}\n    <div className=\"edges\" style={{zIndex:101, position: \"absolute\", height:0, width:0, overflow: \"visible\"}}>{[\n            refEdges.map(se=> <Edge start={se.start.father.node} end={se.end.node} view={\"Pointer_ViewEdge\" + ( se.start.containment && \"Composition\" || \"Association\")} key={se.start.node.id+\"~\"+se.end.node.id}/>)\n            , extendEdges.map(se=><Edge start={se.start} end={se.end} view={\"Pointer_ViewEdgeInheritance\"} key={\"EXT_\"+se.start.node.id+\"~\"+se.end.node.id}/>)]\n        }\n    </div>\n    {otherPackages.map(pkg => <DefaultNode key={pkg.id} data={pkg} />)}\n    {firstPackage && firstPackage.children.map(classifier => <DefaultNode key={classifier.id} data={classifier} />)}\n    {m1Objects.map(m1object => <DefaultNode key={m1object.id} data={m1object}></DefaultNode>)}\n</div>`;\n  }\n  static void() {\n    return `<div className={'round bg-white root void model-less p-1'}>\n    <div>voidvertex element test</div>\n    <div>data: {props.data ? props.data.name : \"empty\"}</div>\n</div>`;\n  }\n  static package() {\n    return `<div className={'round root bg-white package'}>\n    <div className={'package-children'}>\n        {data.children.map((child, index) => {\n            return <DefaultNode key={child.id} data={child} />\n        })}\n    </div>\n</div>`;\n  }\n  static defaultPackage() {\n    return `<div className={'root'}>\n    <div className={'package-children'}>\n        {data.children.map((child, index) => {\n            return <DefaultNode key={child.id} data={child} />\n        })}\n    </div>\n</div>`;\n  }\n  static class() {\n    return `<div className={'round bg-white root class'}>\n    <Input jsxLabel={<b className={'class-name'}>EClass:</b>} \n           data={data} field={'name'} hidden={true} autosize={true} />\n    <hr/>\n    <div className={'class-children'}>{ data.attributes.map(c => <DefaultNode key={c.id} data={c} />) }</div>\n    <div className={'class-children'}>{ data.references.map(c => <DefaultNode key={c.id} data={c} />) }</div>\n    <div className={'class-children'}>{ data.operations.map(c => <DefaultNode key={c.id} data={c} />) }</div>\n</div>`;\n  }\n  static enum() {\n    return `<div className={'round bg-white root enumerator'}>\n    <Input jsxLabel={<b className={'my-auto enumerator-name'}>EEnum:</b>} \n           data={data} field={'name'} hidden={true} autosize={true} />\n    <hr />\n    <div className={'enumerator-children'}>\n        {data.children.map((child, index) => {\n            return <DefaultNode key={child.id} data={child}></DefaultNode>\n        })}\n    </div>\n</div>`;\n  }\n  static feature() {\n    return `<div className={'w-100 root feature'}>\n    <Select className={'p-1  d-flex'} data={data} field={'type'} label={data.name} />\n</div>`;\n  }\n  static literal() {\n    return `<label className={'d-block text-center root literal'}>{data.name}</label>`;\n  }\n  static operation() {\n    // data.signature\n    return `<div className={'w-100'}>\n    <Select className={'p-1 root operation d-flex'} data={data} field={'type'} label={data.name + ' () => '} />\n</div>`;\n  }\n\n  // damiano: i want to keep it because it will be useful for a candidate next feature in m1 & layoutable elements\n  // it is still work in progress.\n  static operationm1() {\n    return `<div className={'d-flex root operationm1'} style={{paddingRight: \"6px\"}}>\n             {<label className={'d-block ms-1'}>{this.props.data.instanceof.name}</label>}\n            <label className={'d-block ms-auto hover-root'} style={{color:` + valuecolormap_str + `[this.props.data.values.type] || \"gray\"\n            }}>‚Üí‚Üí‚Üí{\n                <div className=\"hover-content\">{\n                    <ParameterForm operation = {this.props.data.id} vertical={true} />\n                }\n                }</label>\n        </div>`;\n  }\n  static objectOld() {\n    return '' + `<div className={'round bg-white root class'}>\n    <label className={'ms-1'}>\n        <Input jsxLabel={<b className={'my-auto class-name'}>{data.instanceof ? data.instanceof.name : \"Object\"}:</b>} \n           data={data} field={'name'} hidden={true} autosize={true}/>\n    </label>\n    <hr />\n    <div className={'object-children'}>\n        {data.features.map((child) => {\n            return <DefaultNode key={child.id} data={child}></DefaultNode>\n        })}\n    </div>\n</div>`;\n  }\n  static object() {\n    // object efficient mode\n    return '' + `<div className={'round bg-white root class'}>\n    <label className={'ms-1'}>\n        <Input jsxLabel={<b className={'my-auto class-name'}>{metaclassName}:</b>} \n           data={data} field={'name'} hidden={true} autosize={true}/>\n    </label>\n    <hr />\n    <div className={'object-children'}>\n        {features.map((child) => {\n            return <DefaultNode key={child.id} data={child}></DefaultNode>\n        })}\n    </div>\n</div>`;\n  }\n  static value() {\n    return `<div className={'d-flex root value'} style={{paddingRight: \"6px\"}}>\n     {instanceofname && <label className={'d-block ms-1'}>{instanceofname}</label>}\n     {!instanceofname && <Input asLabel={true} data={data} field={'name'} hidden={true} autosize={true} />}\n    <label className={'d-block m-auto'} style={{color: constants[typeString] || \"gray\"\n    }}>: {valuesString}</label>\n    {console.log(\"inside eval\", {thiss:this, props, ts: typeString, vs: valuesString})}\n</div>`;\n  }\n  static error(msg, errortype, data, node, v) {\n    let dname = data && (data.name || data.className.substring(1));\n    if (dname && dname.length >= 8) dname = dname.substring(0, 7) + '‚Ä¶';\n    let nodename = ((node === null || node === void 0 ? void 0 : node.className) || '').replace(/[^A-Z]+/g, \"\").substring(1);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'w-100 h-100 round bg-white border border-danger',\n      style: {\n        minHeight: \"min-content\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'text-center text-danger',\n        tabIndex: -1,\n        style: {\n          background: \"#fff\",\n          overflow: 'visible',\n          zIndex: 100,\n          minWidth: \"min-content\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: [errortype, \" ERROR on \", (dname ? dname : '') + (false ? ' / ' + nodename : ''), \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: 'text-center mx-1 d-block',\n          children: [\"While applying view \\\"\", v.name, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 17\n        }, this), msg && /*#__PURE__*/_jsxDEV(\"label\", {\n          className: 'text-center mx-1 d-block',\n          style: {\n            color: \"black\"\n          },\n          children: msg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 16\n    }, this);\n  }\n  static error_string(msg) {\n    return `<div className={'w-100 h-100 round bg-white border border-danger'} style={{minHeight:\"min-content\"}}>\n            <div className={'text-center text-danger'} style={{background:\"#fff7\"}}>\n                <b>SYNTAX ERROR</b>\n                <hr/>\n                <label className={'text-center mx-1 d-block'}>\n                    The JSX you provide is NOT valid!\n                </label>\n                ` + (msg ? `<label className={'text-center mx-1 d-block'} style={{color:\"black\"}>{\"` + msg + `\"}</label>` : \"\") + `\n            </div>\n        </div>`;\n  }\n}","map":{"version":3,"names":["EdgeHead","U","RuntimeAccessible","React","jsxDEV","_jsxDEV","beautify","s","ShortAttribETypes","window","DV","_dec","_class","modelView","DefaultView","model","packageView","package","classView","class","attributeView","feature","referenceView","enumeratorView","enum","literalView","literal","voidView","void","operationView","operation","operationViewm1","operationm1","objectView","object","valueView","value","defaultPackage","errorView_string","publicmsg","debughiddenmsg","visibleMessage","replaceAll","console","error","debuginfo","error_string","errorView","errortype","data","node","v","trim","edgePointView","edgePointViewSVG","svgHeadTail","head","type","inner","headstr","styleTranslate","styleTranslateRotate","styleRotate","attrs","path","hoverAttrs","extend","reference","aggregation","composition","edgeView","modename","tail","dashing","valuecolormap","EBoolean","EByte","EShort","EInt","ELong","EFloat","EDouble","EDate","EString","EChar","EVoid","valuecolormap_str","JSON","stringify","objectOld","msg","dname","name","className","substring","length","nodename","replace","style","minHeight","children","tabIndex","background","overflow","zIndex","minWidth","fileName","_jsxFileName","lineNumber","columnNumber","color"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/src/common/DV.tsx"],"sourcesContent":["import {DGraphElement, DModelElement, DocString, DViewElement, EdgeHead, ShortAttribETypes as SAType, U} from '../joiner';\r\nimport {GObject, RuntimeAccessible} from '../joiner';\r\nimport React, {ReactElement} from \"react\";\r\n// const beautify = require('js-beautify').html; // BEWARE: this adds some newline that might be breaking and introduce syntax errors in our JSX parser\r\nconst beautify = (s: string) => s;\r\nlet ShortAttribETypes: typeof SAType = (window as any).ShortAttribETypes;\r\n\r\n@RuntimeAccessible('DV')\r\nexport class DV {\r\n    public static modelView(): string { return beautify(DefaultView.model()); } // damiano: che fa beautify? magari potremmo settarlo in LView.set_jsx invece che solo qui, cos√¨ viene formattato anche l'input utente?\r\n    public static packageView(): string { return beautify(DefaultView.package()); }\r\n    public static classView(): string { return beautify(DefaultView.class()); }\r\n    public static attributeView(): string { return beautify(DefaultView.feature()); }\r\n    public static referenceView(): string { return beautify(DefaultView.feature()); }\r\n    public static enumeratorView(): string { return beautify(DefaultView.enum()); }\r\n    public static literalView(): string { return beautify(DefaultView.literal()); }\r\n    public static voidView(): string { return beautify(DefaultView.void()); }\r\n    public static operationView(): string { return beautify(DefaultView.operation()); }\r\n\r\n    // damiano: i want to keep it because it will be useful for a candidate next feature in m1 & layoutable elements\r\n    // it is still work in progress.\r\n    public static operationViewm1(): string { return beautify(DefaultView.operationm1()); }\r\n    public static objectView(): string { return beautify(DefaultView.object()); }\r\n    public static valueView(): string { return beautify(DefaultView.value()); }\r\n    public static defaultPackage(): string { return beautify(DefaultView.defaultPackage()); }\r\n    public static errorView_string(publicmsg: string | JSX.Element, debughiddenmsg?:any): string {\r\n        let visibleMessage = publicmsg && typeof publicmsg === \"string\" ? U.replaceAll(publicmsg, \"Parse Error: \", \"\") : publicmsg;\r\n        console.error(\"error in view:\", {publicmsg, debuginfo:debughiddenmsg}); return DefaultView.error_string(visibleMessage); }\r\n    public static errorView(publicmsg: string | JSX.Element, debughiddenmsg:any, errortype: string, data: DModelElement | undefined, node: DGraphElement | undefined, v: DViewElement): React.ReactNode {\r\n        let visibleMessage = publicmsg && typeof publicmsg === \"string\" ? U.replaceAll(publicmsg, \"Parse Error:\", \"\").trim() : publicmsg;\r\n        console.error(\"error in view:\", {publicmsg, debuginfo:debughiddenmsg});\r\n        return DefaultView.error(visibleMessage, errortype, data, node, v); }\r\n\r\n    static edgePointView(): string { return beautify(\r\n        `<div className={\"edgePoint\"} tabIndex=\"-1\" hoverscale={\"hardcoded in css\"} style={{borderRadius:\"999px\", border: \"2px solid black\", background:\"white\", width:\"100%\", height:\"100%\"}} />`\r\n    )}\r\n    static edgePointViewSVG(): string { return beautify(\r\n        `<ellipse stroke={\"black\"} fill={\"red\"} cx={\"50\"} cy={\"50\"} rx={\"20\"} ry={\"20\"} />`\r\n        //`<ellipse stroke={\"black\"} fill={\"red\"} cx={props.node.x} cy={props.node.y} rx={props.node.w} ry={props.node.h} />`\r\n    )}\r\n\r\n    static svgHeadTail(head: \"Head\" | \"Tail\", type: EdgeHead): string {\r\n        let inner: string;\r\n        let headstr = head===\"Head\" ? \"segments.head\" : \"segments.tail\";\r\n        let styleTranslate = \"{}\"; // '{transform:\"translate(\" + ' + headstr + '.x + \"px, \" + ' + headstr + '.y + \"px)\"}';\r\n        let styleTranslateRotate = '{transform:\"translate(\" + ' + headstr + '.x + \"px, \" + ' + headstr + '.y + \"px) rotate(\" + (' + headstr + '.rad) + \"rad)\",' +\r\n            ' \"transformOrigin\":'+headstr+'.w/2+\"px \"+ '+headstr+'.h/2+\"px\"}';\r\n        let styleRotate = 'style={{transform:\"rotate(\" + ' + headstr + '.rad + \"rad), transformOrigin:\"noooope  not center\"}}'; // edgeHead EdgeReference\r\n        let attrs = `\\n\\t\\t\\t\\tstyle={`+styleTranslateRotate +`}\\n\\t\\t\\t\\t stroke={strokeColor} strokeWidth={strokeWidth}\r\n className={\"edge` + head + ` ` + type +` preview\"}></path>\\n`;\r\n        let path: string;\r\n        let hoverAttrs = `\\n\\t\\t\\t\\tstyle={`+styleTranslateRotate +`}\\n\\t\\t\\t\\t stroke={segments.all[0]&&(segments.all[0].length > strokeLengthLimit )&& strokeColorLong || strokeColorHover} strokeWidth={strokeWidthHover}\r\n className={\"edge` + head + ` ` + type +` clickable content\"} tabIndex=\"-1\"></path>\\n`;\r\n        switch(type) {\r\n            default:\r\n                inner = \"edge '\" + head + \"' with type: '\" +type + \"' not found\";\r\n                break;\r\n            case EdgeHead.extend:\r\n                path = `<path d={\"M 0 0   L \" + `+headstr+`.w + \" \" + `+headstr+`.h/2 + \"   L 0 \" + `+headstr+`.h + \"Z\" } fill=\"#fff\" `;\r\n                inner = path + attrs + \"\\n\\t\\t\\t\\t\" + path + hoverAttrs;\r\n                break;\r\n            case EdgeHead.reference:\r\n                path = `<path d={\"M 0 0   L \" + `+headstr+`.w + \" \" + `+headstr+`.h/2 + \"   L 0 \" + `+headstr+`.h } fill=\"none\" `;\r\n                inner = path + attrs + \"\\n\\t\\t\\t\\t\" + path + hoverAttrs;\r\n                break;\r\n            case EdgeHead.aggregation:\r\n                path = `<path d={\"M 0 \" + `+headstr+`.h/2 + \" L \" + `+headstr+`.w/2 + \" 0 L \" +\r\n                    `+headstr+`.w + \" \" +`+headstr+`.h/2 + \" L \" + `+headstr+`.w/2 + \" \" + `+headstr+`.h + \" Z\"} fill=\"#fff\" `;\r\n                inner = path + attrs + \"\\n\\t\\t\\t\\t\" + path + hoverAttrs;\r\n                break;\r\n            case EdgeHead.composition:\r\n                path = `<path d={\"M 0 \" + `+headstr+`.h/2 + \" L \" + `+headstr+`.w/2 + \" 0 L \" +\r\n                    `+headstr+`.w + \" \" + `+headstr+`.h/2 + \" L \" + `+headstr+`.w/2 + \" \" + `+headstr+`.h + \" Z\"} fill=\"#000\" `;\r\n                inner = path + attrs + \"\\n\\t\\t\\t\\t\" + path + hoverAttrs;\r\n                break;\r\n                /* `<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" style={overflow: \"visible\"}>\r\n                                            <path d={\"M 10 0 L 0 20 L 20 20 Z\"} fill=\"#ffffff\" stroke=\"#808080\" strokeWidth=\"1\"></path>\r\n                                         </svg>`;*/\r\n                //  style={transform: \"rotate3d(xcenter, ycenter, zcenter??, 90deg)\"}\r\n        }\r\n        //  transform={\"rotate(\"+`+headstr+`.rad+\"rad \"+ segments.all[0].start.pt.toString(false, \" \")}\r\n        return inner; // no wrap because of .hoverable > .preview  on root & subelements must be consecutive\r\n        // return `<g className=\"edge`+head + ` ` + type +`\" style={` + styleTranslate + `}>\\n`+ inner +`</g>`\r\n    }\r\n\r\n    // about label rotation in .edge > foreignObect > div (label)\r\n    // first transform is h-center. second is rotate, third adds [0, 50%] of 50% vertical offset AFTER rotation to take label out of edge. fourth is to add a margin.\r\n    static edgeView(modename: EdgeHead, head: DocString<\"JSX\">, tail: DocString<\"JSX\">, dashing: string | undefined): string { return beautify(\r\n        `<div className={\"hoverable edge hide-ep ` + modename + `\"} style={{overflow: \"visible\", width:\"100vw\", height:\"100vh\", pointerEvents:\"none\"}}>\r\n            <svg style={{width:\"100vw\", height:\"100vh\", pointerEvents:\"none\", overflow: \"visible\"}}>\r\n                { /* edge full paths\r\n               \r\n                 first is preview path, normally seen\r\n                 third (segmented) is path onHover\r\n                 second is to enlarge the hover area of path.preview to the same as path.content, so i avoid hover loop enter-leave and graphical flashing\r\n                \r\n                */ }\r\n                <path className={\"preview\"} strokeWidth={strokeWidth} stroke={strokeColor}\r\n                fill={\"none\"} d={this.edge.d} strokeDasharray=\"` + dashing + `\"></path>\r\n                <path className={\"preview\"} strokeWidth={strokeWidthHover} stroke={\"transparent\"}\r\n                fill={\"none\"} d={this.edge.d}></path>\r\n                { /* edge separate segments */ }\r\n                {segments && segments.all && segments.all.flatMap(s => [\r\n                    <path tabIndex=\"-1\" className={\"clickable content\"} style={{pointerEvents:\"all\"}} strokeWidth={strokeWidthHover}\r\n                    stroke={s.length > strokeLengthLimit && strokeColorLong || strokeColorHover}\r\n                     fill={\"none\"} d={s.dpart}></path>,\r\n                    s.label && <foreignObject style={{overflow: \"visible\", height:\"0\", width:\"0\", whiteSpace:\"pre\", x:(s.start.pt.x + s.end.pt.x)/2+\"px\", y:(s.start.pt.y + s.end.pt.y)/2+\"px\"}}>\r\n                    <div\r\n                     style={{width: \"fit-content\",\r\n                      transform: \"translate(-50%, 0%) rotate(\"+s.radLabels+\"rad) translate(0%, -\"+(1-0.5*Math.abs(Math.abs(s.radLabels)%Math.PI)/(Math.PI/2))*100+\"%)\"+\r\n                     \" translate(0%, -5px\", color: strokeColor}}>{s.label}</div>\r\n                    </foreignObject>\r\n                ])}\r\n            { /* edge head */ }\r\n            ` + head + `\r\n            { /* edge tail */ }\r\n            ` + tail + `\r\n            </svg>\r\n            { /* interactively added edgepoints */ }\r\n            {\r\n                edge.midPoints.map( m => <EdgePoint data={edge.father.model.id} initialSize={m} key={m.id} view={\"Pointer_ViewEdgePoint\"} /> )\r\n            }\r\n        </div>`\r\n    )}\r\n    /*\r\n    {\r\n        false && edge.end.model.attributes.map( (m, index, arr) => <EdgePoint data={m.id} initialSize={(parent) => {\r\n            let segs = parent.segments.segments;\r\n            let pos = segs[0].start.pt.multiply(1-(index+1)/(arr.length+1), true).add(segs[segs.length-1].end.pt.multiply((index+1)/(arr.length+1), true));\r\n            // console.trace(\"initial ep\", {segs, pos, ratio:(index+1)/(arr.length+1), s:segs[0].start.pt, e:segs[segs.length-1].end.pt});\r\n            return {...pos, w:55, h:55}}} key={m.id} view={\"Pointer_ViewEdgePoint\"} /> )\r\n    }{\r\n        false && <EdgePoint key={\"midnode1\"} view={\"Pointer_ViewEdgePoint\"} />\r\n    }{\r\n        false && <EdgePoint key={\"midnode2\"} view={\"Pointer_ViewEdgePoint\"} />\r\n    }{\r\n        false && props.children && \"this would cause loop no idea why, needs to be fixed to allow passing EdgeNodes here\" || []\r\n    }\r\n    */\r\n}\r\n\r\nlet valuecolormap: GObject = {};\r\nvaluecolormap[ShortAttribETypes.EBoolean] = \"orange\";\r\nvaluecolormap[ShortAttribETypes.EByte] = \"orange\";\r\nvaluecolormap[ShortAttribETypes.EShort] = \"orange\";\r\nvaluecolormap[ShortAttribETypes.EInt] = \"orange\";\r\nvaluecolormap[ShortAttribETypes.ELong] = \"orange\";\r\nvaluecolormap[ShortAttribETypes.EFloat] = \"orange\";\r\nvaluecolormap[ShortAttribETypes.EDouble] = \"orange\";\r\nvaluecolormap[ShortAttribETypes.EDate] = \"green\";\r\nvaluecolormap[ShortAttribETypes.EString] = \"green\";\r\nvaluecolormap[ShortAttribETypes.EChar] = \"green\";\r\nvaluecolormap[ShortAttribETypes.EVoid] = \"gray\";\r\n\r\n// &&[]bn\r\nlet valuecolormap_str = JSON.stringify(valuecolormap); // can this be declared inside view.constants ?\r\n\r\n\r\nclass DefaultView {\r\n\r\n    public static model(): string {\r\n        return `<div className={'root'}>\r\n    {!data && \"Model data missing.\"}\r\n    <div className=\"edges\" style={{zIndex:101, position: \"absolute\", height:0, width:0, overflow: \"visible\"}}>{[\r\n            refEdges.map(se=> <Edge start={se.start.father.node} end={se.end.node} view={\"Pointer_ViewEdge\" + ( se.start.containment && \"Composition\" || \"Association\")} key={se.start.node.id+\"~\"+se.end.node.id}/>)\r\n            , extendEdges.map(se=><Edge start={se.start} end={se.end} view={\"Pointer_ViewEdgeInheritance\"} key={\"EXT_\"+se.start.node.id+\"~\"+se.end.node.id}/>)]\r\n        }\r\n    </div>\r\n    {otherPackages.map(pkg => <DefaultNode key={pkg.id} data={pkg} />)}\r\n    {firstPackage && firstPackage.children.map(classifier => <DefaultNode key={classifier.id} data={classifier} />)}\r\n    {m1Objects.map(m1object => <DefaultNode key={m1object.id} data={m1object}></DefaultNode>)}\r\n</div>`;\r\n    }\r\n\r\n    public static void(): string {\r\n        return `<div className={'round bg-white root void model-less p-1'}>\r\n    <div>voidvertex element test</div>\r\n    <div>data: {props.data ? props.data.name : \"empty\"}</div>\r\n</div>`;\r\n    }\r\n    public static package(): string {\r\n        return `<div className={'round root bg-white package'}>\r\n    <div className={'package-children'}>\r\n        {data.children.map((child, index) => {\r\n            return <DefaultNode key={child.id} data={child} />\r\n        })}\r\n    </div>\r\n</div>`;\r\n    }\r\n\r\n    public static defaultPackage(): string {\r\n        return `<div className={'root'}>\r\n    <div className={'package-children'}>\r\n        {data.children.map((child, index) => {\r\n            return <DefaultNode key={child.id} data={child} />\r\n        })}\r\n    </div>\r\n</div>`;\r\n    }\r\n\r\n    public static class(): string {\r\n        return `<div className={'round bg-white root class'}>\r\n    <Input jsxLabel={<b className={'class-name'}>EClass:</b>} \r\n           data={data} field={'name'} hidden={true} autosize={true} />\r\n    <hr/>\r\n    <div className={'class-children'}>{ data.attributes.map(c => <DefaultNode key={c.id} data={c} />) }</div>\r\n    <div className={'class-children'}>{ data.references.map(c => <DefaultNode key={c.id} data={c} />) }</div>\r\n    <div className={'class-children'}>{ data.operations.map(c => <DefaultNode key={c.id} data={c} />) }</div>\r\n</div>`;\r\n    }\r\n\r\n    public static enum(): string {\r\n        return `<div className={'round bg-white root enumerator'}>\r\n    <Input jsxLabel={<b className={'my-auto enumerator-name'}>EEnum:</b>} \r\n           data={data} field={'name'} hidden={true} autosize={true} />\r\n    <hr />\r\n    <div className={'enumerator-children'}>\r\n        {data.children.map((child, index) => {\r\n            return <DefaultNode key={child.id} data={child}></DefaultNode>\r\n        })}\r\n    </div>\r\n</div>`;\r\n    }\r\n\r\n    public static feature(): string {\r\n        return `<div className={'w-100 root feature'}>\r\n    <Select className={'p-1  d-flex'} data={data} field={'type'} label={data.name} />\r\n</div>`;\r\n    }\r\n\r\n    public static literal(): string {\r\n        return `<label className={'d-block text-center root literal'}>{data.name}</label>`\r\n    }\r\n\r\n    public static operation(): string {\r\n        // data.signature\r\n        return `<div className={'w-100'}>\r\n    <Select className={'p-1 root operation d-flex'} data={data} field={'type'} label={data.name + ' () => '} />\r\n</div>`;\r\n    }\r\n\r\n    // damiano: i want to keep it because it will be useful for a candidate next feature in m1 & layoutable elements\r\n    // it is still work in progress.\r\n    public static operationm1(): string {\r\n        return `<div className={'d-flex root operationm1'} style={{paddingRight: \"6px\"}}>\r\n             {<label className={'d-block ms-1'}>{this.props.data.instanceof.name}</label>}\r\n            <label className={'d-block ms-auto hover-root'} style={{color:` + valuecolormap_str + `[this.props.data.values.type] || \"gray\"\r\n            }}>‚Üí‚Üí‚Üí{\r\n                <div className=\"hover-content\">{\r\n                    <ParameterForm operation = {this.props.data.id} vertical={true} />\r\n                }\r\n                }</label>\r\n        </div>`\r\n    }\r\n\r\n    public static objectOld(): string {\r\n        return ''+\r\n`<div className={'round bg-white root class'}>\r\n    <label className={'ms-1'}>\r\n        <Input jsxLabel={<b className={'my-auto class-name'}>{data.instanceof ? data.instanceof.name : \"Object\"}:</b>} \r\n           data={data} field={'name'} hidden={true} autosize={true}/>\r\n    </label>\r\n    <hr />\r\n    <div className={'object-children'}>\r\n        {data.features.map((child) => {\r\n            return <DefaultNode key={child.id} data={child}></DefaultNode>\r\n        })}\r\n    </div>\r\n</div>`;\r\n}\r\n\r\n    public static object(): string { // object efficient mode\r\n        return ''+\r\n`<div className={'round bg-white root class'}>\r\n    <label className={'ms-1'}>\r\n        <Input jsxLabel={<b className={'my-auto class-name'}>{metaclassName}:</b>} \r\n           data={data} field={'name'} hidden={true} autosize={true}/>\r\n    </label>\r\n    <hr />\r\n    <div className={'object-children'}>\r\n        {features.map((child) => {\r\n            return <DefaultNode key={child.id} data={child}></DefaultNode>\r\n        })}\r\n    </div>\r\n</div>`;\r\n}\r\n\r\n    public static value() {\r\n        return `<div className={'d-flex root value'} style={{paddingRight: \"6px\"}}>\r\n     {instanceofname && <label className={'d-block ms-1'}>{instanceofname}</label>}\r\n     {!instanceofname && <Input asLabel={true} data={data} field={'name'} hidden={true} autosize={true} />}\r\n    <label className={'d-block m-auto'} style={{color: constants[typeString] || \"gray\"\r\n    }}>: {valuesString}</label>\r\n    {console.log(\"inside eval\", {thiss:this, props, ts: typeString, vs: valuesString})}\r\n</div>`\r\n    }\r\n\r\n\r\n\r\n    public static error(msg: undefined | string | JSX.Element, errortype: string | \"SYNTAX\" | \"RUNTIME\", data: DModelElement | undefined, node: DGraphElement | undefined, v: DViewElement) {\r\n        let dname: string | undefined = data && ((data as any).name || data.className.substring(1));\r\n        if (dname && dname.length >= 8) dname = dname.substring(0, 7) + '‚Ä¶';\r\n        let nodename: string = (node?.className || '').replace(/[^A-Z]+/g, \"\").substring(1);\r\n        return <div className={'w-100 h-100 round bg-white border border-danger'} style={{minHeight:\"min-content\"}}>\r\n            <div className={'text-center text-danger'} tabIndex={-1} style={{background:\"#fff\", overflow: 'visible', zIndex:100, minWidth:\"min-content\"}}>\r\n                <b>{errortype} ERROR on {(dname ? dname  : '') + (false ? ' / ' + nodename : '')})</b>\r\n                <hr/>\r\n                <label className={'text-center mx-1 d-block'}>\r\n                    While applying view \"{v.name}\"\r\n                </label>\r\n                {msg && <label className={'text-center mx-1 d-block'} style={{color:\"black\"}}>{msg}</label>}\r\n            </div>\r\n        </div>;\r\n    }\r\n    public static error_string(msg: undefined | string | JSX.Element): string {\r\n        return `<div className={'w-100 h-100 round bg-white border border-danger'} style={{minHeight:\"min-content\"}}>\r\n            <div className={'text-center text-danger'} style={{background:\"#fff7\"}}>\r\n                <b>SYNTAX ERROR</b>\r\n                <hr/>\r\n                <label className={'text-center mx-1 d-block'}>\r\n                    The JSX you provide is NOT valid!\r\n                </label>\r\n                ` + (msg ? `<label className={'text-center mx-1 d-block'} style={{color:\"black\"}>{\"` + msg + `\"}</label>` : \"\") + `\r\n            </div>\r\n        </div>`;\r\n    }\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}