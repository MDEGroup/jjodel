{"ast":null,"code":"var _jsxFileName = \"C:\\\\0Programmi\\\\Dev\\\\projects\\\\frontend\\\\jjodel\\\\src\\\\components\\\\rightbar\\\\console\\\\Console.tsx\",\n  _this = this;\nimport \"./console.scss\";\nimport React, { PureComponent } from \"react\";\nimport { connect } from \"react-redux\";\nimport { LGraphElement, Log, RuntimeAccessibleClass, transientProperties, U, windoww } from \"../../../joiner\";\nimport ReactDOM from \"react-dom\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Convert = require('ansi-to-html');\nlet ansiConvert = window.ansiConvert;\nif (!ansiConvert) window.ansiconvert = ansiConvert = new Convert();\nclass ThisState {\n  constructor() {\n    this.expression = void 0;\n    this.output = void 0;\n  }\n}\n\n// trasformato in class component cos√¨ puoi usare il this nella console. e non usa accidentalmente window come contesto\n\nlet hiddenkeys = [\"jsxString\", \"pointedBy\", \"clonedCounter\", \"parent\", \"_subMaps\", \"inspect\", \"__random\"];\nfunction fixproxy(output) {\n  var _output;\n  let hideDKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let addLKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let proxy;\n  if ((_output = output) === null || _output === void 0 ? void 0 : _output.__isProxy) {\n    proxy = output;\n    output = output.__raw; //Object.fromEntries(Object.getOwnPropertyNames(p).map(k => [k, p[k]]));\n  } else proxy = undefined;\n  let ret = {\n    output\n  };\n  switch (typeof output) {\n    case \"function\":\n      return {\n        output: U.buildFunctionDocumentation(output)\n      };\n    default:\n      return {\n        output\n      };\n    case \"object\":\n      ret.output = output = {\n        ...output\n      };\n      if (addLKeys && proxy) {\n        var _RuntimeAccessibleCla, _RuntimeAccessibleCla2, _output2;\n        console.log(\"console output\", {\n          output,\n          proxy\n        });\n        let Lsingleton = ((_RuntimeAccessibleCla = RuntimeAccessibleClass.get((_output2 = output) === null || _output2 === void 0 ? void 0 : _output2.className)) === null || _RuntimeAccessibleCla === void 0 ? void 0 : (_RuntimeAccessibleCla2 = _RuntimeAccessibleCla.logic) === null || _RuntimeAccessibleCla2 === void 0 ? void 0 : _RuntimeAccessibleCla2.singleton) || {};\n        let comments = {};\n        ret.shortcuts = {\n          ...Lsingleton\n        };\n        ret.comments = comments;\n        for (let key in output) {\n          if (Lsingleton[\"__info_of__\" + key]) comments[key] = Lsingleton[\"__info_of__\" + key];\n        }\n        for (let key in Lsingleton) {\n          if (key in output || key.indexOf(\"__info_of__\") === 0) {\n            delete ret.shortcuts[key];\n            continue;\n          } else {\n            if (ret.shortcuts[key] === undefined) ret.shortcuts[key] = '';\n          }\n          if (Lsingleton[\"__info_of__\" + key]) comments[key] = Lsingleton[\"__info_of__\" + key];\n          if (comments[key]) continue; // if explicitly commented, i will not attempt to generate documentation.\n          let entryvalue = Lsingleton[key];\n          switch (typeof entryvalue) {\n            default:\n            case \"object\":\n              ret.shortcuts[key] = entryvalue;\n              break;\n            case \"function\":\n              ret.shortcuts[key] = U.buildFunctionDocumentation(entryvalue);\n              break;\n          }\n        }\n      }\n      if (hiddenkeys) {\n        ret.hiddenkeys = {};\n        for (let key of hiddenkeys) {\n          ret.hiddenkeys[key] = output[key];\n          delete output[key];\n          // delete output.shortcuts[key];\n        }\n      }\n      break;\n  }\n  return ret;\n}\nexport class ConsoleComponent extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.lastNode = void 0;\n    this._context = {};\n    this.state = {\n      expression: '',\n      output: null\n    };\n    this.change = this.change.bind(this);\n    this.change(undefined);\n  }\n  change(evt) {\n    var _this$props$node;\n    if (!this) return; // component being destroyed and remade after code hot update\n    let expression = (evt === null || evt === void 0 ? void 0 : evt.target.value.trim()) || this.state.expression || '';\n    let output;\n    // let context = {...this.props, props: this.props}; // makeEvalContext(this.props as any, {} as any);\n\n    let nid = (_this$props$node = this.props.node) === null || _this$props$node === void 0 ? void 0 : _this$props$node.id;\n    let tn = transientProperties.node[nid];\n    if (nid && tn) {\n      // let component = GraphElementComponent.map[this.props.node.id];\n      this._context = {\n        ...tn.viewScores[tn.mainView.id].evalContext\n      };\n      this._context.fromcomponent = true;\n    } else {\n      this._context = {\n        ...this.props,\n        props: this.props\n      };\n    }\n    try {\n      output = U.evalInContextAndScope(expression || 'undefined', this._context, this._context);\n    } catch (e) {\n      console.error(\"console error\", e);\n      output = '<span style=\"color:red\">Invalid Syntax!<br></span>' + e.toString();\n    }\n    this.setState({\n      expression,\n      output\n    });\n  }\n  render() {\n    var _this$state$output, _this$props$node2;\n    const data = this.props.data; /*\r\n                                  const [expression, setExpression] = useStateIfMounted('data');\r\n                                  const [output, setOutput] = useStateIfMounted('');*/\n    if (!this.props.node) return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n    if (this.lastNode !== this.props.node.id) this.change(); // force reevaluation if selected node changed\n    this.lastNode = this.props.node.id;\n    let outstr;\n    // try { outstr = U.circularStringify(this.state.output, (key, value)=> { return value.__isProxy ? value.name : value; }, \"\\t\", 1) }\n    // (window as any).inspect = util.inspect;\n    // (window as any).tmpp = this.state.output;\n    let ashtml;\n    let output = this.state.output;\n    let shortcuts = undefined;\n    let comments = undefined;\n    let hidden = undefined;\n    let jsxComments = {};\n    try {\n      var _output$, _output3;\n      if (Array.isArray(output)) {\n        comments = {\n          \"separator\": '<span>Similar to <a href={\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join\"}>Array.join(separator)</a>' + ', but supports array of JSX nodes and JSX as separator argument.</span>'\n        };\n        shortcuts = {\n          \"separator\": \"\"\n        };\n      }\n      if (Array.isArray(output) && ((_output$ = output[0]) === null || _output$ === void 0 ? void 0 : _output$.__isProxy)) {\n        output = output.map(o => fixproxy(o).output);\n        console.log(\"console result (array):\", {\n          output\n        });\n      } else {\n        let ret = fixproxy(output);\n        output = ret.output;\n        comments = ret.comments;\n        shortcuts = ret.shortcuts;\n        hidden = ret.hiddenkeys;\n        console.log(\"console result:\", {\n          output,\n          ret\n        });\n      }\n      // todo: as i fix the displaying of a LViewElement without replacing it with __raw,\n      //  i will fix window, component and props displaying too i think they crash for props.data, props.view...\n      if ((_output3 = output) === null || _output3 === void 0 ? void 0 : _output3._reactInternals) {\n        output = {\n          \"React.Component\": {\n            props: \"...navigate to expand...\",\n            state: \"\",\n            _isMounted: output._isMounted\n          }\n        };\n      }\n      outstr = '<h4>Result:</h4><div class=\"output-row\" tabindex=\"984\">' + U.objectInspect(output) + \"<span>\";\n      let commentsPopup = \"\";\n      if (shortcuts || comments) {\n        // if(!shortcuts) shortcuts = {};\n        if (!comments) comments = {};\n        for (let commentKey in comments) {\n          var _commentVal, _commentVal2, _commentVal3, _commentVal3$type;\n          let commentVal = comments[commentKey];\n          let txt = (_commentVal = commentVal) === null || _commentVal === void 0 ? void 0 : _commentVal.txt;\n          if (txt && typeof txt !== \"string\") {\n            // try to inject jsx\n            jsxComments[commentKey] = txt;\n            txt = \"<span id='console_output_comment_\" + commentKey + \"' />\";\n            // fallback read text, that should go deep iteration, but 1 level deep should be enough.\n            // let arr: any[] = (Array.isArray(txt?.props?.children) ? txt.props.children : (txt.props.children ? [txt.props.children] : []));\n            // txt = arr.map(e => typeof e === \"string\" ? e : e?.props?.children + '' || '').join(\"\");\n          }\n          if ((_commentVal2 = commentVal) === null || _commentVal2 === void 0 ? void 0 : _commentVal2.type) commentVal = \"\\t\\t<span style='color: #999'>\" + (((_commentVal3 = commentVal) === null || _commentVal3 === void 0 ? void 0 : (_commentVal3$type = _commentVal3.type) === null || _commentVal3$type === void 0 ? void 0 : _commentVal3$type.cname) || commentVal.type) + \"</span>\"; // + \" ~ \" + txt;\n          // warning: unicode char but should not make a problem. êÄπ\n          commentVal += '<div class=\"output-comment my-tooltip\">' + txt + '</div></div><div class=\"output-row\" tabindex=\"984\">';\n          let commentKeyEscaped = U.multiReplaceAll(commentKey, [\"$\", \"-\"], [\"\\\\$\", \"\\\\-\"]); // _ should be safe, .-,?^ not happening?\n          let regexp = new RegExp(\"^({?\\\\s*\" + commentKeyEscaped + \":.*)$\", \"gm\");\n          let regexpCloseTags = new RegExp(\"(\\\\<span style\\\\=\\\"color\\\\:\\\\#)\", \"gm\");\n          outstr = U.replaceAll(outstr, \"$\", \"¬£\");\n          outstr = outstr.replace(regexp, \"$1\" + commentVal);\n          outstr = outstr.replace(regexpCloseTags, \"</span>$1\");\n          outstr = U.replaceAll(outstr, \"¬£\", \"$\");\n        }\n        if (shortcuts) outstr += \"</div><br><br><h4>Shortcuts</h4><div class=\\\"output-row\\\" tabindex=\\\"984\\\">\" + U.objectInspect(shortcuts);\n        // if (hidden) outstr +=\"</div><br><br><h4>Other less useful properties</h4><div class=\\\"output-row\\\" tabindex=\\\"984\\\">\" + format(hidden);\n        // warning: unicode char but should not make a problem.\n        // outstr = U.replaceAll( outstr, 'êÄπ,\\n', '],</span>\\n</div><div class=\"output-row\" tabindex=\"984\"><span style=\"color:#000\">');\n        outstr = U.replaceAll(outstr, '<span style=\"color:#000\">,\\n', '</span><span style=\"color:#000\">,</span>\\n</div><div class=\"output-row\" tabindex=\"984\"><span style=\"color:#000\">');\n        outstr = U.replaceAll(outstr, '],\\n', '],</span>\\n</div><div class=\"output-row\" tabindex=\"984\"><span style=\"color:#000\">');\n        outstr = U.replaceAll(outstr, '},\\n', '},</span>\\n</div><div class=\"output-row\" tabindex=\"984\"><span style=\"color:#000\">');\n      }\n      ashtml = true;\n    } catch (e) {\n      console.error(e);\n      throw e;\n      outstr = \"[circular object]: \" + e.toString();\n      ashtml = false;\n    }\n    console.log(\"console result (string)\", {\n      outstr,\n      jsxComments\n    });\n    let contextkeys;\n    let objraw = ((_this$state$output = this.state.output) === null || _this$state$output === void 0 ? void 0 : _this$state$output.__raw) || (typeof this.state.output === \"object\" ? this.state.output : \"[primitiveValue]\") || {};\n    if (this.state.expression.trim() === \"\") contextkeys = [\"data\", \"node\", \"view\", \"component\"].join(\", \");else if (this.state.expression.trim() === \"this\") contextkeys = [\"Warning: \\\"this\\\" will refer to the Console component instead of a GraphElement component.\"].join(\", \");else if (typeof objraw === \"string\") {\n      contextkeys = \"- length\\n- all string functions\";\n    } else contextkeys = Array.isArray(objraw) ? [\"array[index]\", ...Object.keys(Array.prototype)].join(\",\\n\") : Object.getOwnPropertyNames(objraw).join(\",\\n\"); // || []).join(\", \")\n\n    let injectCommentJSX = () => {\n      try {\n        for (let key in jsxComments) {\n          if (hiddenkeys.includes(key)) continue;\n          let commentNode = document.getElementById(\"console_output_comment_\" + key);\n          Log.eDev(!commentNode, \"failed to find comment placeholder\", {\n            key,\n            v: jsxComments[key],\n            jsxComments\n          });\n          if (commentNode) ReactDOM.render(jsxComments[key], commentNode);\n        }\n      } catch (e) {\n        console.error(\"failed to inject console output comment:\", e);\n      }\n    };\n    setTimeout(injectCommentJSX, 1);\n    this.setNativeConsoleVariables();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'p-2 w-100 h-100',\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        spellCheck: false,\n        className: 'p-0 input mb-2 w-100',\n        onChange: this.change\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"On \", ((data === null || data === void 0 ? void 0 : data.name) || \"model-less node (\" + this.props.node.className + \")\") + \" - \" + ((_this$props$node2 = this.props.node) === null || _this$props$node2 === void 0 ? void 0 : _this$props$node2.className)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: 'mt-1 mb-1'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }, this), this.state.expression && ashtml && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"console-output-container\",\n        dangerouslySetInnerHTML: ashtml ? {\n          __html: outstr\n        } : undefined\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 55\n      }, this), this.state.expression && !ashtml && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          whiteSpace: \"pre\"\n        },\n        children: outstr\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 55\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"mt-2\",\n        children: \"Context keys:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          whiteSpace: \"pre\"\n        },\n        children: [\" \", contextkeys, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 20\n    }, this);\n  }\n  setNativeConsoleVariables() {\n    var _context$data, _context$data2;\n    // just fordebugging\n    let context = this._context;\n    windoww.context = context;\n    windoww.data = context.data;\n    windoww.node = context.node;\n    windoww.edge = context.edge;\n    windoww.output = this.state.output;\n    if ((_context$data = context.data) === null || _context$data === void 0 ? void 0 : _context$data.model) windoww.model = (_context$data2 = context.data) === null || _context$data2 === void 0 ? void 0 : _context$data2.model;\n  }\n}\nConsoleComponent.cname = \"ConsoleComponent\";\nfunction mapStateToProps(state, ownProps) {\n  var _state$_lastSelected;\n  const ret = {};\n  const nodeid = (_state$_lastSelected = state._lastSelected) === null || _state$_lastSelected === void 0 ? void 0 : _state$_lastSelected.node;\n  const node = nodeid ? LGraphElement.fromPointer(nodeid) : null;\n  ret.node = node;\n  ret.data = (node === null || node === void 0 ? void 0 : node.model) ? node.model : null;\n  ret.view = (node === null || node === void 0 ? void 0 : node.view) ? node.view : null;\n  return ret;\n}\nfunction mapDispatchToProps(dispatch) {\n  const ret = {};\n  return ret;\n}\nexport const ConsoleConnected = connect(mapStateToProps, mapDispatchToProps)(ConsoleComponent);\nexport const Console = function (props) {\n  let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return /*#__PURE__*/_jsxDEV(ConsoleConnected, {\n    ...props,\n    children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 282,\n    columnNumber: 12\n  }, _this);\n};\n_c = Console;\nConsoleComponent.cname = \"ConsoleComponent\";\nConsoleConnected.cname = \"ConsoleConnected\";\nConsole.cname = \"Console\";\nexport default Console;\nvar _c;\n$RefreshReg$(_c, \"Console\");","map":{"version":3,"names":["React","PureComponent","connect","LGraphElement","Log","RuntimeAccessibleClass","transientProperties","U","windoww","ReactDOM","Fragment","_Fragment","jsxDEV","_jsxDEV","Convert","require","ansiConvert","window","ansiconvert","ThisState","constructor","expression","output","hiddenkeys","fixproxy","_output","hideDKeys","arguments","length","undefined","addLKeys","proxy","__isProxy","__raw","ret","buildFunctionDocumentation","_RuntimeAccessibleCla","_RuntimeAccessibleCla2","_output2","console","log","Lsingleton","get","className","logic","singleton","comments","shortcuts","key","indexOf","entryvalue","ConsoleComponent","props","lastNode","_context","state","change","bind","evt","_this$props$node","target","value","trim","nid","node","id","tn","viewScores","mainView","evalContext","fromcomponent","evalInContextAndScope","e","error","toString","setState","render","_this$state$output","_this$props$node2","data","outstr","ashtml","hidden","jsxComments","_output$","_output3","Array","isArray","map","o","_reactInternals","_isMounted","objectInspect","commentsPopup","commentKey","_commentVal","_commentVal2","_commentVal3","_commentVal3$type","commentVal","txt","type","cname","commentKeyEscaped","multiReplaceAll","regexp","RegExp","regexpCloseTags","replaceAll","replace","contextkeys","objraw","join","Object","keys","prototype","getOwnPropertyNames","injectCommentJSX","includes","commentNode","document","getElementById","eDev","v","setTimeout","setNativeConsoleVariables","children","spellCheck","onChange","fileName","_jsxFileName","lineNumber","columnNumber","name","dangerouslySetInnerHTML","__html","style","whiteSpace","_context$data","_context$data2","context","edge","model","mapStateToProps","ownProps","_state$_lastSelected","nodeid","_lastSelected","fromPointer","view","mapDispatchToProps","dispatch","ConsoleConnected","Console","_this","_c","$RefreshReg$"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/src/components/rightbar/console/Console.tsx"],"sourcesContent":["import \"./console.scss\";\r\nimport React, {Dispatch, PureComponent, ReactElement} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    DGraphElement,\r\n    Dictionary,\r\n    DState,\r\n    GObject,\r\n    LGraphElement,\r\n    LModelElement,\r\n    Log,\r\n    LPointerTargetable,\r\n    LViewElement,\r\n    Pointer,\r\n    RuntimeAccessibleClass,\r\n    transientProperties,\r\n    U,\r\n    windoww\r\n} from \"../../../joiner\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {FakeStateProps} from \"../../../joiner/types\";\r\n\r\nvar Convert = require('ansi-to-html');\r\n\r\nlet ansiConvert = (window as any).ansiConvert;\r\nif (!ansiConvert) (window as any).ansiconvert = ansiConvert = new Convert();\r\n\r\nclass ThisState{\r\n    expression!: string;\r\n    output: any;\r\n}\r\n\r\n// trasformato in class component cos√¨ puoi usare il this nella console. e non usa accidentalmente window come contesto\r\n\r\nlet hiddenkeys = [\"jsxString\", \"pointedBy\", \"clonedCounter\", \"parent\", \"_subMaps\", \"inspect\", \"__random\"];\r\nfunction fixproxy(output: any/*but not array*/, hideDKeys: boolean = true, addLKeys: boolean = true):\r\n    { output: any, shortcuts?: GObject<'L singleton'>, comments?: Dictionary<string, string | {type:string, txt:string}>, hiddenkeys?: GObject} {\r\n\r\n    let proxy: LPointerTargetable | undefined;\r\n    if (output?.__isProxy) {\r\n        proxy = output;\r\n        output = output.__raw; //Object.fromEntries(Object.getOwnPropertyNames(p).map(k => [k, p[k]]));\r\n    } else proxy = undefined;\r\n\r\n    let ret: ReturnType<typeof fixproxy> = {output};\r\n    switch(typeof output) {\r\n        case \"function\": return {output: U.buildFunctionDocumentation(output)};\r\n        default: return {output};\r\n        case \"object\":\r\n            ret.output = output = {...output};\r\n            if ((addLKeys && proxy)) {\r\n                console.log(\"console output\", {output, proxy});\r\n                let Lsingleton: GObject<'L singleton'> = (RuntimeAccessibleClass.get(output?.className)?.logic?.singleton) || {};\r\n                let comments: Dictionary<string, string | {type:string, txt:string}> = {};\r\n                ret.shortcuts = {...Lsingleton};\r\n                ret.comments = comments;\r\n                for (let key in output) {\r\n                    if (Lsingleton[\"__info_of__\" + key]) comments[key] = Lsingleton[\"__info_of__\" + key];\r\n                }\r\n                for (let key in Lsingleton) {\r\n                    if ((key in output) || (key.indexOf(\"__info_of__\") === 0)) {\r\n                        delete ret.shortcuts[key];\r\n                        continue;\r\n                    } else { if (ret.shortcuts[key] === undefined) ret.shortcuts[key] = ''; }\r\n                    if (Lsingleton[\"__info_of__\" + key]) comments[key] = Lsingleton[\"__info_of__\" + key];\r\n                    if (comments[key]) continue; // if explicitly commented, i will not attempt to generate documentation.\r\n                    let entryvalue = Lsingleton[key];\r\n                    switch (typeof entryvalue) {\r\n                        default:\r\n                        case \"object\":\r\n                            ret.shortcuts[key] = entryvalue;\r\n                            break;\r\n                        case \"function\":\r\n                            ret.shortcuts[key] = U.buildFunctionDocumentation(entryvalue);\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            if (hiddenkeys) {\r\n                ret.hiddenkeys = {};\r\n                for (let key of hiddenkeys) {\r\n                    ret.hiddenkeys[key] = output[key];\r\n                    delete output[key];\r\n                    // delete output.shortcuts[key];\r\n                }\r\n            }\r\n            break;\r\n    }\r\n    return ret;\r\n}\r\n\r\nexport class ConsoleComponent extends PureComponent<AllProps, ThisState>{\r\n    public static cname: string = \"ConsoleComponent\";\r\n    lastNode?: Pointer<DGraphElement>;\r\n    constructor(props: AllProps) {\r\n        super(props);\r\n        this.state = {expression:'', output: null};\r\n        this.change = this.change.bind(this);\r\n        this.change(undefined);\r\n    }\r\n    private _context: GObject = {};\r\n    change(evt?: React.ChangeEvent<HTMLTextAreaElement>) {\r\n        if (!this) return; // component being destroyed and remade after code hot update\r\n        let expression: string | undefined = evt?.target.value.trim() || this.state.expression || '';\r\n        let output;\r\n        // let context = {...this.props, props: this.props}; // makeEvalContext(this.props as any, {} as any);\r\n\r\n        let nid = this.props.node?.id;\r\n        let tn = transientProperties.node[nid as string];\r\n        if (nid && tn) {\r\n            // let component = GraphElementComponent.map[this.props.node.id];\r\n            this._context = {...tn.viewScores[tn.mainView.id].evalContext};\r\n            this._context.fromcomponent = true;\r\n        }\r\n        else {\r\n            this._context = {...this.props, props: this.props};\r\n        }\r\n        try { output = U.evalInContextAndScope(expression || 'undefined', this._context, this._context); }\r\n        catch (e: any) {\r\n            console.error(\"console error\", e);\r\n            output = '<span style=\"color:red\">Invalid Syntax!<br></span>' + e.toString(); }\r\n        this.setState({expression, output});\r\n    }\r\n\r\n    render(){\r\n        const data = this.props.data;/*\r\n        const [expression, setExpression] = useStateIfMounted('data');\r\n        const [output, setOutput] = useStateIfMounted('');*/\r\n        if (!this.props.node) return(<></>);\r\n        if (this.lastNode !== this.props.node.id) this.change(); // force reevaluation if selected node changed\r\n        this.lastNode = this.props.node.id;\r\n\r\n            let outstr;\r\n            // try { outstr = U.circularStringify(this.state.output, (key, value)=> { return value.__isProxy ? value.name : value; }, \"\\t\", 1) }\r\n            // (window as any).inspect = util.inspect;\r\n            // (window as any).tmpp = this.state.output;\r\n            let ashtml: boolean\r\n            let output: any = this.state.output;\r\n            let shortcuts: GObject<'L singleton'> | undefined = undefined;\r\n            let comments: Dictionary<string, string | {type:string, txt:string}> | undefined = undefined;\r\n            let hidden: Dictionary<string, string> | undefined = undefined;\r\n            let jsxComments: Dictionary<string, JSX.Element[]> = {};\r\n            try {\r\n                if (Array.isArray(output)){\r\n                    comments = {\"separator\": '<span>Similar to <a href={\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join\"}>Array.join(separator)</a>' +\r\n                            ', but supports array of JSX nodes and JSX as separator argument.</span>'};\r\n                    shortcuts = {\"separator\": \"\"};\r\n                }\r\n                if (Array.isArray(output) && output[0]?.__isProxy) {\r\n                    output = output.map(o => fixproxy(o).output);\r\n                    console.log(\"console result (array):\", {output});\r\n                }\r\n                else {\r\n                    let ret = fixproxy(output);\r\n                    output = ret.output;\r\n                    comments = ret.comments;\r\n                    shortcuts = ret.shortcuts;\r\n                    hidden = ret.hiddenkeys;\r\n                    console.log(\"console result:\", {output, ret});\r\n                }\r\n                // todo: as i fix the displaying of a LViewElement without replacing it with __raw,\r\n                //  i will fix window, component and props displaying too i think they crash for props.data, props.view...\r\n                if (output?._reactInternals) {\r\n                    output = {\"React.Component\": {props:\"...navigate to expand...\", state:\"\", _isMounted:output._isMounted}}\r\n                }\r\n                outstr = '<h4>Result:</h4><div class=\"output-row\" tabindex=\"984\">' + U.objectInspect(output)+\"<span>\";\r\n                let commentsPopup = \"\";\r\n                if (shortcuts || comments){\r\n                    // if(!shortcuts) shortcuts = {};\r\n                    if (!comments) comments = {};\r\n                    for (let commentKey in comments){\r\n                        let commentVal: any = comments[commentKey];\r\n                        let txt = commentVal?.txt;\r\n                        if (txt && typeof txt !== \"string\") {\r\n                            // try to inject jsx\r\n                            jsxComments[commentKey] = txt;\r\n                            txt = \"<span id='console_output_comment_\" + commentKey + \"' />\";\r\n                            // fallback read text, that should go deep iteration, but 1 level deep should be enough.\r\n                            // let arr: any[] = (Array.isArray(txt?.props?.children) ? txt.props.children : (txt.props.children ? [txt.props.children] : []));\r\n                            // txt = arr.map(e => typeof e === \"string\" ? e : e?.props?.children + '' || '').join(\"\");\r\n                        }\r\n                        if (commentVal?.type) commentVal = \"\\t\\t<span style='color: #999'>\" + (commentVal?.type?.cname || commentVal.type)+\"</span>\"; // + \" ~ \" + txt;\r\n                        // warning: unicode char but should not make a problem. êÄπ\r\n                        commentVal += '<div class=\"output-comment my-tooltip\">' + txt + '</div></div><div class=\"output-row\" tabindex=\"984\">'\r\n\r\n                        let commentKeyEscaped = U.multiReplaceAll(commentKey, [\"$\", \"-\"], [\"\\\\$\", \"\\\\-\"]); // _ should be safe, .-,?^ not happening?\r\n                        let regexp = new RegExp(\"^({?\\\\s*\" +commentKeyEscaped+\":.*)$\", \"gm\");\r\n                        let regexpCloseTags = new RegExp(\"(\\\\<span style\\\\=\\\"color\\\\:\\\\#)\", \"gm\");\r\n                        outstr = U.replaceAll( outstr, \"$\", \"¬£\");\r\n                        outstr = outstr.replace(regexp, \"$1\" + commentVal);\r\n                        outstr = outstr.replace(regexpCloseTags,  \"</span>$1\");\r\n                        outstr = U.replaceAll(outstr, \"¬£\", \"$\");\r\n                    }\r\n                    if (shortcuts) outstr += \"</div><br><br><h4>Shortcuts</h4><div class=\\\"output-row\\\" tabindex=\\\"984\\\">\" + U.objectInspect(shortcuts);\r\n                    // if (hidden) outstr +=\"</div><br><br><h4>Other less useful properties</h4><div class=\\\"output-row\\\" tabindex=\\\"984\\\">\" + format(hidden);\r\n                    // warning: unicode char but should not make a problem.\r\n                    // outstr = U.replaceAll( outstr, 'êÄπ,\\n', '],</span>\\n</div><div class=\"output-row\" tabindex=\"984\"><span style=\"color:#000\">');\r\n                    outstr = U.replaceAll( outstr, '<span style=\"color:#000\">,\\n',\r\n                        '</span><span style=\"color:#000\">,</span>\\n</div><div class=\"output-row\" tabindex=\"984\"><span style=\"color:#000\">');\r\n                    outstr = U.replaceAll( outstr, '],\\n', '],</span>\\n</div><div class=\"output-row\" tabindex=\"984\"><span style=\"color:#000\">');\r\n                    outstr = U.replaceAll( outstr, '},\\n', '},</span>\\n</div><div class=\"output-row\" tabindex=\"984\"><span style=\"color:#000\">');\r\n                }\r\n                ashtml = true; }\r\n            catch(e: any) {\r\n                console.error(e);\r\n                throw e;\r\n                outstr = \"[circular object]: \" + e.toString();\r\n                ashtml = false;\r\n            }\r\n            console.log(\"console result (string)\", {outstr, jsxComments});\r\n            let contextkeys;\r\n            let objraw = this.state.output?.__raw || (typeof this.state.output === \"object\" ? this.state.output : \"[primitiveValue]\") || {};\r\n            if (this.state.expression.trim() === \"\") contextkeys = [\"data\", \"node\", \"view\", \"component\"].join(\", \");\r\n            else if (this.state.expression.trim() === \"this\") contextkeys = [\"Warning: \\\"this\\\" will refer to the Console component instead of a GraphElement component.\"].join(\", \");\r\n            else if (typeof objraw === \"string\") { contextkeys = \"- length\\n- all string functions\"}\r\n            else contextkeys = Array.isArray(objraw) ? [\"array[index]\", ...Object.keys(Array.prototype)].join(\",\\n\") : Object.getOwnPropertyNames(objraw).join(\",\\n\");// || []).join(\", \")\r\n\r\n            let injectCommentJSX = () => {\r\n                try{ for (let key in jsxComments) {\r\n                    if (hiddenkeys.includes(key)) continue;\r\n                    let commentNode: HTMLElement | null = document.getElementById(\"console_output_comment_\"+key);\r\n                    Log.eDev(!commentNode, \"failed to find comment placeholder\", {key, v:jsxComments[key], jsxComments});\r\n                    if (commentNode) ReactDOM.render(jsxComments[key], commentNode);\r\n                } }\r\n                catch (e) { console.error(\"failed to inject console output comment:\", e)}\r\n            }\r\n            setTimeout(injectCommentJSX, 1)\r\n            this.setNativeConsoleVariables();\r\n\r\n            return(<div className={'p-2 w-100 h-100'}>\r\n                <textarea spellCheck={false} className={'p-0 input mb-2 w-100'} onChange={this.change} />\r\n                {/*<label>Query {(this.state.expression)}</label>*/}\r\n                <label>On {((data as GObject)?.name || \"model-less node (\" + this.props.node.className + \")\") + \" - \" + this.props.node?.className}</label>\r\n                <hr className={'mt-1 mb-1'} />\r\n                { this.state.expression &&  ashtml && <div className={\"console-output-container\"} dangerouslySetInnerHTML={ashtml ? { __html: outstr as string} : undefined} /> }\r\n                { this.state.expression && !ashtml && <div style={{whiteSpace:\"pre\"}}>{ outstr }</div>}\r\n                <label className={\"mt-2\"}>Context keys:</label>\r\n                {\r\n                    <div style={{whiteSpace:\"pre\"}}> {contextkeys} </div>\r\n                }\r\n            </div>)\r\n    }\r\n\r\n    private setNativeConsoleVariables(): void { // just fordebugging\r\n        let context = this._context;\r\n        windoww.context = context;\r\n        windoww.data = context.data;\r\n        windoww.node = context.node;\r\n        windoww.edge = context.edge;\r\n        windoww.output = this.state.output;\r\n        if (context.data?.model) windoww.model = context.data?.model;\r\n    }\r\n}\r\ninterface OwnProps {}\r\ninterface StateProps { data: LModelElement|null, node: LGraphElement|null, view: LViewElement|null }\r\ninterface DispatchProps {}\r\ntype AllProps = OwnProps & StateProps & DispatchProps;\r\n\r\n\r\nfunction mapStateToProps(state: DState, ownProps: OwnProps): StateProps {\r\n    const ret: StateProps = {} as FakeStateProps;\r\n    const nodeid = state._lastSelected?.node;\r\n    const node: LGraphElement|null = (nodeid) ? LGraphElement.fromPointer(nodeid) : null;\r\n    ret.node = node;\r\n    ret.data = (node?.model) ? node.model : null;\r\n    ret.view = (node?.view) ? node.view : null;\r\n    return ret;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<any>): DispatchProps {\r\n    const ret: DispatchProps = {};\r\n    return ret;\r\n}\r\n\r\n\r\nexport const ConsoleConnected = connect<StateProps, DispatchProps, OwnProps, DState>(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ConsoleComponent);\r\n\r\nexport const Console = (props: OwnProps, children: (string | React.Component)[] = []): ReactElement => {\r\n    return <ConsoleConnected {...{...props, children}} />;\r\n}\r\n\r\nConsoleComponent.cname = \"ConsoleComponent\";\r\nConsoleConnected.cname = \"ConsoleConnected\";\r\nConsole.cname = \"Console\";\r\nexport default Console;\r\n"],"mappings":";;AAAA,OAAO,gBAAgB;AACvB,OAAOA,KAAK,IAAaC,aAAa,QAAqB,OAAO;AAClE,SAAQC,OAAO,QAAO,aAAa;AACnC,SAKIC,aAAa,EAEbC,GAAG,EAIHC,sBAAsB,EACtBC,mBAAmB,EACnBC,CAAC,EACDC,OAAO,QACJ,iBAAiB;AACxB,OAAOC,QAAQ,MAAM,WAAW;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGjC,IAAIC,OAAO,GAAGC,OAAO,CAAC,cAAc,CAAC;AAErC,IAAIC,WAAW,GAAIC,MAAM,CAASD,WAAW;AAC7C,IAAI,CAACA,WAAW,EAAGC,MAAM,CAASC,WAAW,GAAGF,WAAW,GAAG,IAAIF,OAAO,CAAC,CAAC;AAE3E,MAAMK,SAAS;EAAAC,YAAA;IAAA,KACXC,UAAU;IAAA,KACVC,MAAM;EAAA;AACV;;AAEA;;AAEA,IAAIC,UAAU,GAAG,CAAC,WAAW,EAAE,WAAW,EAAE,eAAe,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,CAAC;AACzG,SAASC,QAAQA,CAACF,MAAW,EACmH;EAAA,IAAAG,OAAA;EAAA,IADhGC,SAAkB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAAA,IAAEG,QAAiB,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAG/F,IAAII,KAAqC;EACzC,KAAAN,OAAA,GAAIH,MAAM,cAAAG,OAAA,uBAANA,OAAA,CAAQO,SAAS,EAAE;IACnBD,KAAK,GAAGT,MAAM;IACdA,MAAM,GAAGA,MAAM,CAACW,KAAK,CAAC,CAAC;EAC3B,CAAC,MAAMF,KAAK,GAAGF,SAAS;EAExB,IAAIK,GAAgC,GAAG;IAACZ;EAAM,CAAC;EAC/C,QAAO,OAAOA,MAAM;IAChB,KAAK,UAAU;MAAE,OAAO;QAACA,MAAM,EAAEf,CAAC,CAAC4B,0BAA0B,CAACb,MAAM;MAAC,CAAC;IACtE;MAAS,OAAO;QAACA;MAAM,CAAC;IACxB,KAAK,QAAQ;MACTY,GAAG,CAACZ,MAAM,GAAGA,MAAM,GAAG;QAAC,GAAGA;MAAM,CAAC;MACjC,IAAKQ,QAAQ,IAAIC,KAAK,EAAG;QAAA,IAAAK,qBAAA,EAAAC,sBAAA,EAAAC,QAAA;QACrBC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE;UAAClB,MAAM;UAAES;QAAK,CAAC,CAAC;QAC9C,IAAIU,UAAkC,GAAG,EAAAL,qBAAA,GAAC/B,sBAAsB,CAACqC,GAAG,EAAAJ,QAAA,GAAChB,MAAM,cAAAgB,QAAA,uBAANA,QAAA,CAAQK,SAAS,CAAC,cAAAP,qBAAA,wBAAAC,sBAAA,GAA7CD,qBAAA,CAA+CQ,KAAK,cAAAP,sBAAA,uBAApDA,sBAAA,CAAsDQ,SAAS,KAAK,CAAC,CAAC;QAChH,IAAIC,QAAgE,GAAG,CAAC,CAAC;QACzEZ,GAAG,CAACa,SAAS,GAAG;UAAC,GAAGN;QAAU,CAAC;QAC/BP,GAAG,CAACY,QAAQ,GAAGA,QAAQ;QACvB,KAAK,IAAIE,GAAG,IAAI1B,MAAM,EAAE;UACpB,IAAImB,UAAU,CAAC,aAAa,GAAGO,GAAG,CAAC,EAAEF,QAAQ,CAACE,GAAG,CAAC,GAAGP,UAAU,CAAC,aAAa,GAAGO,GAAG,CAAC;QACxF;QACA,KAAK,IAAIA,GAAG,IAAIP,UAAU,EAAE;UACxB,IAAKO,GAAG,IAAI1B,MAAM,IAAM0B,GAAG,CAACC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAE,EAAE;YACvD,OAAOf,GAAG,CAACa,SAAS,CAACC,GAAG,CAAC;YACzB;UACJ,CAAC,MAAM;YAAE,IAAId,GAAG,CAACa,SAAS,CAACC,GAAG,CAAC,KAAKnB,SAAS,EAAEK,GAAG,CAACa,SAAS,CAACC,GAAG,CAAC,GAAG,EAAE;UAAE;UACxE,IAAIP,UAAU,CAAC,aAAa,GAAGO,GAAG,CAAC,EAAEF,QAAQ,CAACE,GAAG,CAAC,GAAGP,UAAU,CAAC,aAAa,GAAGO,GAAG,CAAC;UACpF,IAAIF,QAAQ,CAACE,GAAG,CAAC,EAAE,SAAS,CAAC;UAC7B,IAAIE,UAAU,GAAGT,UAAU,CAACO,GAAG,CAAC;UAChC,QAAQ,OAAOE,UAAU;YACrB;YACA,KAAK,QAAQ;cACThB,GAAG,CAACa,SAAS,CAACC,GAAG,CAAC,GAAGE,UAAU;cAC/B;YACJ,KAAK,UAAU;cACXhB,GAAG,CAACa,SAAS,CAACC,GAAG,CAAC,GAAGzC,CAAC,CAAC4B,0BAA0B,CAACe,UAAU,CAAC;cAC7D;UACR;QACJ;MACJ;MACA,IAAI3B,UAAU,EAAE;QACZW,GAAG,CAACX,UAAU,GAAG,CAAC,CAAC;QACnB,KAAK,IAAIyB,GAAG,IAAIzB,UAAU,EAAE;UACxBW,GAAG,CAACX,UAAU,CAACyB,GAAG,CAAC,GAAG1B,MAAM,CAAC0B,GAAG,CAAC;UACjC,OAAO1B,MAAM,CAAC0B,GAAG,CAAC;UAClB;QACJ;MACJ;MACA;EACR;EACA,OAAOd,GAAG;AACd;AAEA,OAAO,MAAMiB,gBAAgB,SAASlD,aAAa,CAAqB;EAGpEmB,WAAWA,CAACgC,KAAe,EAAE;IACzB,KAAK,CAACA,KAAK,CAAC;IAAC,KAFjBC,QAAQ;IAAA,KAOAC,QAAQ,GAAY,CAAC,CAAC;IAJ1B,IAAI,CAACC,KAAK,GAAG;MAAClC,UAAU,EAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC;IAC1C,IAAI,CAACkC,MAAM,GAAG,IAAI,CAACA,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC;IACpC,IAAI,CAACD,MAAM,CAAC3B,SAAS,CAAC;EAC1B;EAEA2B,MAAMA,CAACE,GAA4C,EAAE;IAAA,IAAAC,gBAAA;IACjD,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC;IACnB,IAAItC,UAA8B,GAAG,CAAAqC,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEE,MAAM,CAACC,KAAK,CAACC,IAAI,CAAC,CAAC,KAAI,IAAI,CAACP,KAAK,CAAClC,UAAU,IAAI,EAAE;IAC5F,IAAIC,MAAM;IACV;;IAEA,IAAIyC,GAAG,IAAAJ,gBAAA,GAAG,IAAI,CAACP,KAAK,CAACY,IAAI,cAAAL,gBAAA,uBAAfA,gBAAA,CAAiBM,EAAE;IAC7B,IAAIC,EAAE,GAAG5D,mBAAmB,CAAC0D,IAAI,CAACD,GAAG,CAAW;IAChD,IAAIA,GAAG,IAAIG,EAAE,EAAE;MACX;MACA,IAAI,CAACZ,QAAQ,GAAG;QAAC,GAAGY,EAAE,CAACC,UAAU,CAACD,EAAE,CAACE,QAAQ,CAACH,EAAE,CAAC,CAACI;MAAW,CAAC;MAC9D,IAAI,CAACf,QAAQ,CAACgB,aAAa,GAAG,IAAI;IACtC,CAAC,MACI;MACD,IAAI,CAAChB,QAAQ,GAAG;QAAC,GAAG,IAAI,CAACF,KAAK;QAAEA,KAAK,EAAE,IAAI,CAACA;MAAK,CAAC;IACtD;IACA,IAAI;MAAE9B,MAAM,GAAGf,CAAC,CAACgE,qBAAqB,CAAClD,UAAU,IAAI,WAAW,EAAE,IAAI,CAACiC,QAAQ,EAAE,IAAI,CAACA,QAAQ,CAAC;IAAE,CAAC,CAClG,OAAOkB,CAAM,EAAE;MACXjC,OAAO,CAACkC,KAAK,CAAC,eAAe,EAAED,CAAC,CAAC;MACjClD,MAAM,GAAG,oDAAoD,GAAGkD,CAAC,CAACE,QAAQ,CAAC,CAAC;IAAE;IAClF,IAAI,CAACC,QAAQ,CAAC;MAACtD,UAAU;MAAEC;IAAM,CAAC,CAAC;EACvC;EAEAsD,MAAMA,CAAA,EAAE;IAAA,IAAAC,kBAAA,EAAAC,iBAAA;IACJ,MAAMC,IAAI,GAAG,IAAI,CAAC3B,KAAK,CAAC2B,IAAI,CAAC;AACrC;AACA;IACQ,IAAI,CAAC,IAAI,CAAC3B,KAAK,CAACY,IAAI,EAAE,oBAAOnD,OAAA,CAAAF,SAAA,mBAAI,CAAC;IAClC,IAAI,IAAI,CAAC0C,QAAQ,KAAK,IAAI,CAACD,KAAK,CAACY,IAAI,CAACC,EAAE,EAAE,IAAI,CAACT,MAAM,CAAC,CAAC,CAAC,CAAC;IACzD,IAAI,CAACH,QAAQ,GAAG,IAAI,CAACD,KAAK,CAACY,IAAI,CAACC,EAAE;IAE9B,IAAIe,MAAM;IACV;IACA;IACA;IACA,IAAIC,MAAe;IACnB,IAAI3D,MAAW,GAAG,IAAI,CAACiC,KAAK,CAACjC,MAAM;IACnC,IAAIyB,SAA6C,GAAGlB,SAAS;IAC7D,IAAIiB,QAA4E,GAAGjB,SAAS;IAC5F,IAAIqD,MAA8C,GAAGrD,SAAS;IAC9D,IAAIsD,WAA8C,GAAG,CAAC,CAAC;IACvD,IAAI;MAAA,IAAAC,QAAA,EAAAC,QAAA;MACA,IAAIC,KAAK,CAACC,OAAO,CAACjE,MAAM,CAAC,EAAC;QACtBwB,QAAQ,GAAG;UAAC,WAAW,EAAE,oJAAoJ,GACrK;QAAyE,CAAC;QAClFC,SAAS,GAAG;UAAC,WAAW,EAAE;QAAE,CAAC;MACjC;MACA,IAAIuC,KAAK,CAACC,OAAO,CAACjE,MAAM,CAAC,MAAA8D,QAAA,GAAI9D,MAAM,CAAC,CAAC,CAAC,cAAA8D,QAAA,uBAATA,QAAA,CAAWpD,SAAS,GAAE;QAC/CV,MAAM,GAAGA,MAAM,CAACkE,GAAG,CAACC,CAAC,IAAIjE,QAAQ,CAACiE,CAAC,CAAC,CAACnE,MAAM,CAAC;QAC5CiB,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAE;UAAClB;QAAM,CAAC,CAAC;MACpD,CAAC,MACI;QACD,IAAIY,GAAG,GAAGV,QAAQ,CAACF,MAAM,CAAC;QAC1BA,MAAM,GAAGY,GAAG,CAACZ,MAAM;QACnBwB,QAAQ,GAAGZ,GAAG,CAACY,QAAQ;QACvBC,SAAS,GAAGb,GAAG,CAACa,SAAS;QACzBmC,MAAM,GAAGhD,GAAG,CAACX,UAAU;QACvBgB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE;UAAClB,MAAM;UAAEY;QAAG,CAAC,CAAC;MACjD;MACA;MACA;MACA,KAAAmD,QAAA,GAAI/D,MAAM,cAAA+D,QAAA,uBAANA,QAAA,CAAQK,eAAe,EAAE;QACzBpE,MAAM,GAAG;UAAC,iBAAiB,EAAE;YAAC8B,KAAK,EAAC,0BAA0B;YAAEG,KAAK,EAAC,EAAE;YAAEoC,UAAU,EAACrE,MAAM,CAACqE;UAAU;QAAC,CAAC;MAC5G;MACAX,MAAM,GAAG,yDAAyD,GAAGzE,CAAC,CAACqF,aAAa,CAACtE,MAAM,CAAC,GAAC,QAAQ;MACrG,IAAIuE,aAAa,GAAG,EAAE;MACtB,IAAI9C,SAAS,IAAID,QAAQ,EAAC;QACtB;QACA,IAAI,CAACA,QAAQ,EAAEA,QAAQ,GAAG,CAAC,CAAC;QAC5B,KAAK,IAAIgD,UAAU,IAAIhD,QAAQ,EAAC;UAAA,IAAAiD,WAAA,EAAAC,YAAA,EAAAC,YAAA,EAAAC,iBAAA;UAC5B,IAAIC,UAAe,GAAGrD,QAAQ,CAACgD,UAAU,CAAC;UAC1C,IAAIM,GAAG,IAAAL,WAAA,GAAGI,UAAU,cAAAJ,WAAA,uBAAVA,WAAA,CAAYK,GAAG;UACzB,IAAIA,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;YAChC;YACAjB,WAAW,CAACW,UAAU,CAAC,GAAGM,GAAG;YAC7BA,GAAG,GAAG,mCAAmC,GAAGN,UAAU,GAAG,MAAM;YAC/D;YACA;YACA;UACJ;UACA,KAAAE,YAAA,GAAIG,UAAU,cAAAH,YAAA,uBAAVA,YAAA,CAAYK,IAAI,EAAEF,UAAU,GAAG,gCAAgC,IAAI,EAAAF,YAAA,GAAAE,UAAU,cAAAF,YAAA,wBAAAC,iBAAA,GAAVD,YAAA,CAAYI,IAAI,cAAAH,iBAAA,uBAAhBA,iBAAA,CAAkBI,KAAK,KAAIH,UAAU,CAACE,IAAI,CAAC,GAAC,SAAS,CAAC,CAAC;UAC9H;UACAF,UAAU,IAAI,yCAAyC,GAAGC,GAAG,GAAG,qDAAqD;UAErH,IAAIG,iBAAiB,GAAGhG,CAAC,CAACiG,eAAe,CAACV,UAAU,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;UACnF,IAAIW,MAAM,GAAG,IAAIC,MAAM,CAAC,UAAU,GAAEH,iBAAiB,GAAC,OAAO,EAAE,IAAI,CAAC;UACpE,IAAII,eAAe,GAAG,IAAID,MAAM,CAAC,iCAAiC,EAAE,IAAI,CAAC;UACzE1B,MAAM,GAAGzE,CAAC,CAACqG,UAAU,CAAE5B,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC;UACxCA,MAAM,GAAGA,MAAM,CAAC6B,OAAO,CAACJ,MAAM,EAAE,IAAI,GAAGN,UAAU,CAAC;UAClDnB,MAAM,GAAGA,MAAM,CAAC6B,OAAO,CAACF,eAAe,EAAG,WAAW,CAAC;UACtD3B,MAAM,GAAGzE,CAAC,CAACqG,UAAU,CAAC5B,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC;QAC3C;QACA,IAAIjC,SAAS,EAAEiC,MAAM,IAAI,6EAA6E,GAAGzE,CAAC,CAACqF,aAAa,CAAC7C,SAAS,CAAC;QACnI;QACA;QACA;QACAiC,MAAM,GAAGzE,CAAC,CAACqG,UAAU,CAAE5B,MAAM,EAAE,8BAA8B,EACzD,kHAAkH,CAAC;QACvHA,MAAM,GAAGzE,CAAC,CAACqG,UAAU,CAAE5B,MAAM,EAAE,MAAM,EAAE,mFAAmF,CAAC;QAC3HA,MAAM,GAAGzE,CAAC,CAACqG,UAAU,CAAE5B,MAAM,EAAE,MAAM,EAAE,mFAAmF,CAAC;MAC/H;MACAC,MAAM,GAAG,IAAI;IAAE,CAAC,CACpB,OAAMT,CAAM,EAAE;MACVjC,OAAO,CAACkC,KAAK,CAACD,CAAC,CAAC;MAChB,MAAMA,CAAC;MACPQ,MAAM,GAAG,qBAAqB,GAAGR,CAAC,CAACE,QAAQ,CAAC,CAAC;MAC7CO,MAAM,GAAG,KAAK;IAClB;IACA1C,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAE;MAACwC,MAAM;MAAEG;IAAW,CAAC,CAAC;IAC7D,IAAI2B,WAAW;IACf,IAAIC,MAAM,GAAG,EAAAlC,kBAAA,OAAI,CAACtB,KAAK,CAACjC,MAAM,cAAAuD,kBAAA,uBAAjBA,kBAAA,CAAmB5C,KAAK,MAAK,OAAO,IAAI,CAACsB,KAAK,CAACjC,MAAM,KAAK,QAAQ,GAAG,IAAI,CAACiC,KAAK,CAACjC,MAAM,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;IAC/H,IAAI,IAAI,CAACiC,KAAK,CAAClC,UAAU,CAACyC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAEgD,WAAW,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC,CAAC,KACnG,IAAI,IAAI,CAACzD,KAAK,CAAClC,UAAU,CAACyC,IAAI,CAAC,CAAC,KAAK,MAAM,EAAEgD,WAAW,GAAG,CAAC,4FAA4F,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC,CAAC,KACrK,IAAI,OAAOD,MAAM,KAAK,QAAQ,EAAE;MAAED,WAAW,GAAG,kCAAkC;IAAA,CAAC,MACnFA,WAAW,GAAGxB,KAAK,CAACC,OAAO,CAACwB,MAAM,CAAC,GAAG,CAAC,cAAc,EAAE,GAAGE,MAAM,CAACC,IAAI,CAAC5B,KAAK,CAAC6B,SAAS,CAAC,CAAC,CAACH,IAAI,CAAC,KAAK,CAAC,GAAGC,MAAM,CAACG,mBAAmB,CAACL,MAAM,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC,CAAC;;IAE1J,IAAIK,gBAAgB,GAAGA,CAAA,KAAM;MACzB,IAAG;QAAE,KAAK,IAAIrE,GAAG,IAAImC,WAAW,EAAE;UAC9B,IAAI5D,UAAU,CAAC+F,QAAQ,CAACtE,GAAG,CAAC,EAAE;UAC9B,IAAIuE,WAA+B,GAAGC,QAAQ,CAACC,cAAc,CAAC,yBAAyB,GAACzE,GAAG,CAAC;UAC5F5C,GAAG,CAACsH,IAAI,CAAC,CAACH,WAAW,EAAE,oCAAoC,EAAE;YAACvE,GAAG;YAAE2E,CAAC,EAACxC,WAAW,CAACnC,GAAG,CAAC;YAAEmC;UAAW,CAAC,CAAC;UACpG,IAAIoC,WAAW,EAAE9G,QAAQ,CAACmE,MAAM,CAACO,WAAW,CAACnC,GAAG,CAAC,EAAEuE,WAAW,CAAC;QACnE;MAAE,CAAC,CACH,OAAO/C,CAAC,EAAE;QAAEjC,OAAO,CAACkC,KAAK,CAAC,0CAA0C,EAAED,CAAC,CAAC;MAAA;IAC5E,CAAC;IACDoD,UAAU,CAACP,gBAAgB,EAAE,CAAC,CAAC;IAC/B,IAAI,CAACQ,yBAAyB,CAAC,CAAC;IAEhC,oBAAOhH,OAAA;MAAK8B,SAAS,EAAE,iBAAkB;MAAAmF,QAAA,gBACrCjH,OAAA;QAAUkH,UAAU,EAAE,KAAM;QAACpF,SAAS,EAAE,sBAAuB;QAACqF,QAAQ,EAAE,IAAI,CAACxE;MAAO;QAAAyE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAEzFvH,OAAA;QAAAiH,QAAA,GAAO,KAAG,EAAC,CAAC,CAAC/C,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAcsD,IAAI,KAAI,mBAAmB,GAAG,IAAI,CAACjF,KAAK,CAACY,IAAI,CAACrB,SAAS,GAAG,GAAG,IAAI,KAAK,KAAAmC,iBAAA,GAAG,IAAI,CAAC1B,KAAK,CAACY,IAAI,cAAAc,iBAAA,uBAAfA,iBAAA,CAAiBnC,SAAS;MAAA;QAAAsF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC3IvH,OAAA;QAAI8B,SAAS,EAAE;MAAY;QAAAsF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAC5B,IAAI,CAAC7E,KAAK,CAAClC,UAAU,IAAK4D,MAAM,iBAAIpE,OAAA;QAAK8B,SAAS,EAAE,0BAA2B;QAAC2F,uBAAuB,EAAErD,MAAM,GAAG;UAAEsD,MAAM,EAAEvD;QAAgB,CAAC,GAAGnD;MAAU;QAAAoG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAC7J,IAAI,CAAC7E,KAAK,CAAClC,UAAU,IAAI,CAAC4D,MAAM,iBAAIpE,OAAA;QAAK2H,KAAK,EAAE;UAACC,UAAU,EAAC;QAAK,CAAE;QAAAX,QAAA,EAAG9C;MAAM;QAAAiD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACtFvH,OAAA;QAAO8B,SAAS,EAAE,MAAO;QAAAmF,QAAA,EAAC;MAAa;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAE3CvH,OAAA;QAAK2H,KAAK,EAAE;UAACC,UAAU,EAAC;QAAK,CAAE;QAAAX,QAAA,GAAC,GAAC,EAAChB,WAAW,EAAC,GAAC;MAAA;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAExD,CAAC;EACd;EAEQP,yBAAyBA,CAAA,EAAS;IAAA,IAAAa,aAAA,EAAAC,cAAA;IAAE;IACxC,IAAIC,OAAO,GAAG,IAAI,CAACtF,QAAQ;IAC3B9C,OAAO,CAACoI,OAAO,GAAGA,OAAO;IACzBpI,OAAO,CAACuE,IAAI,GAAG6D,OAAO,CAAC7D,IAAI;IAC3BvE,OAAO,CAACwD,IAAI,GAAG4E,OAAO,CAAC5E,IAAI;IAC3BxD,OAAO,CAACqI,IAAI,GAAGD,OAAO,CAACC,IAAI;IAC3BrI,OAAO,CAACc,MAAM,GAAG,IAAI,CAACiC,KAAK,CAACjC,MAAM;IAClC,KAAAoH,aAAA,GAAIE,OAAO,CAAC7D,IAAI,cAAA2D,aAAA,uBAAZA,aAAA,CAAcI,KAAK,EAAEtI,OAAO,CAACsI,KAAK,IAAAH,cAAA,GAAGC,OAAO,CAAC7D,IAAI,cAAA4D,cAAA,uBAAZA,cAAA,CAAcG,KAAK;EAChE;AACJ;AAjKa3F,gBAAgB,CACXmD,KAAK,GAAW,kBAAkB;AAuKpD,SAASyC,eAAeA,CAACxF,KAAa,EAAEyF,QAAkB,EAAc;EAAA,IAAAC,oBAAA;EACpE,MAAM/G,GAAe,GAAG,CAAC,CAAmB;EAC5C,MAAMgH,MAAM,IAAAD,oBAAA,GAAG1F,KAAK,CAAC4F,aAAa,cAAAF,oBAAA,uBAAnBA,oBAAA,CAAqBjF,IAAI;EACxC,MAAMA,IAAwB,GAAIkF,MAAM,GAAI/I,aAAa,CAACiJ,WAAW,CAACF,MAAM,CAAC,GAAG,IAAI;EACpFhH,GAAG,CAAC8B,IAAI,GAAGA,IAAI;EACf9B,GAAG,CAAC6C,IAAI,GAAG,CAACf,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAE8E,KAAK,IAAI9E,IAAI,CAAC8E,KAAK,GAAG,IAAI;EAC5C5G,GAAG,CAACmH,IAAI,GAAG,CAACrF,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEqF,IAAI,IAAIrF,IAAI,CAACqF,IAAI,GAAG,IAAI;EAC1C,OAAOnH,GAAG;AACd;AAEA,SAASoH,kBAAkBA,CAACC,QAAuB,EAAiB;EAChE,MAAMrH,GAAkB,GAAG,CAAC,CAAC;EAC7B,OAAOA,GAAG;AACd;AAGA,OAAO,MAAMsH,gBAAgB,GAAGtJ,OAAO,CACnC6I,eAAe,EACfO,kBACJ,CAAC,CAACnG,gBAAgB,CAAC;AAEnB,OAAO,MAAMsG,OAAO,GAAG,SAAAA,CAACrG,KAAe,EAAgE;EAAA,IAA9D0E,QAAsC,GAAAnG,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAChF,oBAAOd,OAAA,CAAC2I,gBAAgB;IAAM,GAAGpG,KAAK;IAAE0E;EAAQ;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,GAAAsB,KAAI,CAAC;AACzD,CAAC;AAAAC,EAAA,GAFYF,OAAO;AAIpBtG,gBAAgB,CAACmD,KAAK,GAAG,kBAAkB;AAC3CkD,gBAAgB,CAAClD,KAAK,GAAG,kBAAkB;AAC3CmD,OAAO,CAACnD,KAAK,GAAG,SAAS;AACzB,eAAemD,OAAO;AAAC,IAAAE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}