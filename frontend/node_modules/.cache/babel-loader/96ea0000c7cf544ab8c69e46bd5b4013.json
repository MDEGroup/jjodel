{"ast":null,"code":"var _jsxFileName = \"C:\\\\0Programmi\\\\Dev\\\\projects\\\\frontend\\\\jjodel\\\\src\\\\components\\\\forEndUser\\\\GenericInput.tsx\";\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport './GenericInput.scss';\nimport { Log, TextArea, Select, ShortAttribETypes, Input, U } from '../../joiner';\nimport { LPointerTargetable, RuntimeAccessibleClass } from '../../joiner';\nimport { SizeInput } from './SizeInput';\n\n// private\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass GenericInputComponent extends PureComponent {\n  constructor(props, context) {\n    super(props, context);\n  }\n  render() {\n    let d = this.props.data.__raw || this.props.data;\n    let l = LPointerTargetable.wrap(this.props.data);\n    let field = this.props.field;\n    let info;\n    if (!this.props.info) {\n      let DConstructor = RuntimeAccessibleClass.get(d.className);\n      let singleton = DConstructor.singleton;\n      info = singleton['__info_of__' + this.props.field];\n    } else info = this.props.info;\n    if (!info) {\n      Log.eDevv(\"<GenericInput/> could not find info of \" + this.props.field, {\n        props: this.props\n      });\n      return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n    }\n    let type;\n    let enumOptions = {}; // 'Options' entry is a fallback for items without an optgroup\n    let enumOptionsJSX;\n    if (info.enum) {\n      type = 'EEnum';\n      let prevoptgroup = 'Options';\n      let group;\n      let option;\n      for (let key in info.enum) {\n        let val = info.enum[key];\n        if (key.indexOf('(') === 0) {\n          let end = key.indexOf(')');\n          group = key.substring(1, end).trim();\n          option = key.substring(end + 1).trim();\n          prevoptgroup = group;\n        } else {\n          option = key;\n          group = prevoptgroup;\n        }\n        if (!enumOptions[group]) enumOptions[group] = {};\n        enumOptions[group][option] = val;\n      }\n      let unsorted = enumOptions.Options;\n      delete enumOptions.Options;\n      enumOptionsJSX = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\n        //data-selected={l[field] === unsorted[optkey]}\n        unsorted && Object.keys(unsorted).map(optKey => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: unsorted[optKey],\n          children: optKey\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 79\n        }, this)), Object.keys(enumOptions).map(grpKey => /*#__PURE__*/_jsxDEV(\"optgroup\", {\n          label: grpKey,\n          children: Object.keys(enumOptions[grpKey]).map(optKey => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: enumOptions[grpKey][optKey],\n            children: optKey\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 75\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 67\n        }, this))]\n      }, void 0, true);\n    } else {\n      if (typeof info.type === 'string') {\n        if (info.type.indexOf('Function') === 0) type = 'Function';else type = info.type;\n      } else {\n        if (!info.type) {\n          Log.exDevv('missing __info_of__ type for ' + d.className + '.' + this.props.field, {\n            d,\n            info,\n            props: this.props\n          });\n          return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n        }\n        let infoType = info.type;\n        type = infoType.cname || infoType.className || infoType.name;\n        Log.exDev(!type, 'missing type:', {\n          type,\n          info\n        });\n      }\n    }\n\n    /*if (type.indexOf('|') !== -1) {\r\n        type = 'EEnum';\r\n        let options = type.split('|');\r\n        if (!enumOptions.Option) enumOptions.Option = {};\r\n        for (let o in options){\r\n            o = o.trim();\r\n            enumOptions.Option[o] = o;\r\n        }\r\n    }*/\n\n    // const otherProps: {[inputattribute:HTMLInputTypeAttribute]: any} = {...this.props};\n    const otherProps = {\n      ...this.props\n    };\n    function setMinMax(max) {\n      if (info.min !== undefined) otherProps.min = info.min;else otherProps.min = info.positive === true ? 0 : -max / 2; // assume false if non specified\n\n      if (info.max !== undefined) otherProps.max = info.max;else otherProps.max = info.positive === false ? max / 2 - 1 : max - 1; // assume true if non specified\n    }\n    let label = U.uppercaseFirstLetter(info.label || this.props.field);\n    switch (type) {\n      default:\n        Log.e('invalid type in GenericInput', {\n          type,\n          props: this.props,\n          info,\n          d\n        });\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          ...otherProps,\n          className: 'danger',\n          style: {\n            color: 'red',\n            border: '1px solid red'\n          },\n          children: [\"Invalid GInput type: '\", type, \"'\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 24\n        }, this);\n      case 'Point':\n      case 'GraphPoint':\n      case 'Size':\n      case 'GraphSize':\n        return /*#__PURE__*/_jsxDEV(SizeInput, {\n          ...otherProps,\n          data: l,\n          field: this.props.field,\n          label: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 24\n        }, this);\n      case 'text':\n      case 'Function':\n        return /*#__PURE__*/_jsxDEV(TextArea, {\n          inputClassName: 'input my-auto ms-auto ',\n          ...otherProps,\n          className: this.props.rootClassName,\n          data: this.props.data,\n          field: this.props.field,\n          jsxLabel: label,\n          tooltip: this.props.tooltip\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 24\n        }, this);\n      case 'EEnum':\n        return /*#__PURE__*/_jsxDEV(Select, {\n          inputClassName: 'my-auto ms-auto select',\n          ...otherProps,\n          className: this.props.rootClassName,\n          data: this.props.data,\n          field: this.props.field,\n          options: enumOptionsJSX,\n          jsxLabel: label,\n          tooltip: this.props.tooltip\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 24\n        }, this);\n      // <input> natives\n      case 'radio':\n        // problem: this would need to return a <form> and multiple inputs generated by a single element.\n        // it should be easy but unlikely it will be needed so i won't do it for now.\n        Log.eDevv('radio input type is unsupported');\n        break;\n      case 'datetime':\n        type = 'datetime-local';\n        break;\n      case 'color':\n        break;\n      case 'email':\n        break;\n      case 'image':\n        break;\n      // ?\n      case 'password':\n        break;\n      case 'range':\n        break;\n      case 'month':\n        break;\n      case 'week':\n        break;\n      case 'datetime-local':\n        break;\n      case 'time':\n        break;\n      case 'url':\n        break;\n      // ecore\n      case ShortAttribETypes.EChar:\n        type = 'text';\n        if (undefined === otherProps.minLength) otherProps.minLength = 1;\n        otherProps.maxLength = 1;\n        // otherProps.pattern = '^.{1}$';\n        break;\n      case ShortAttribETypes.EString:\n        type = 'text';\n        break;\n      case ShortAttribETypes.EBoolean:\n        type = 'checkbox';\n        break;\n      case ShortAttribETypes.EByte:\n        type = 'number';\n        setMinMax(2 ** 8);\n        break;\n      case ShortAttribETypes.EShort:\n        type = 'number';\n        setMinMax(2 ** 16);\n        break;\n      case ShortAttribETypes.EInt:\n        type = 'number';\n        setMinMax(2 ** 32);\n        break;\n      case ShortAttribETypes.ELong:\n        type = 'number';\n        setMinMax(2 ** 64);\n        break;\n      case ShortAttribETypes.EFloat:\n      case ShortAttribETypes.EDouble:\n        type = 'number';\n        if (!otherProps.step) otherProps.step = info.step || 0.1;\n        if (!otherProps.pattern) otherProps.pattern = info.pattern || '^[0-9]+\\.[0-9]{' + info.digits + '}$';\n        break;\n      case ShortAttribETypes.EDate:\n        type = 'datetime-local';\n        break;\n    }\n    // delete otherProps.field; delete otherProps.data; delete otherProps.infoof;\n    return /*#__PURE__*/_jsxDEV(Input, {\n      inputClassName: 'my-auto ms-auto input',\n      ...otherProps,\n      className: this.props.rootClassName,\n      data: this.props.data,\n      field: this.props.field,\n      jsxLabel: label,\n      tooltip: this.props.tooltip,\n      type: type\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 16\n    }, this);\n  }\n}\n\n// private\n\n// {[inputattribute:HTMLInputAttribute]: any};\n// private\n\n// private\n\n// private\n\n////// mapper func\n\nfunction mapStateToProps(state, ownProps) {\n  const ret = {};\n  /// to fill\n  return ret;\n}\nfunction mapDispatchToProps(dispatch) {\n  const ret = {};\n  /// to fill\n  return ret;\n}\nexport const GenericInput = connect(mapStateToProps, mapDispatchToProps)(GenericInputComponent);\n\n/*\r\n\r\nSupported __info_of__.type values:\r\n\r\n\r\n- ShortAttribETypes     =   ecore type names\r\n- text                  =   for textarea\r\n- Function              =   for textarea\r\n- richtext              =   for monaco editor\r\n- native <input> types\r\n- DPointerTargetable    = will make a select out of available elements of that kind\r\n- GraphPoint            = will make a mini interactive square where you can select a point, output is in % [0, 1].\r\n                          NEED A SETTER AND GETTER to get from % to coords and the other way\r\n- GraphSize             = will make a mini interactive square where you can select a rectangle, output is in % [0, 1].\r\n                          NEED A SETTER AND GETTER to get from % to coords and the other way\r\n\r\n\r\n- typescript enumerators, with optgroups defined as following\r\n        (optgroup1) option1\r\n        option2 // assumed still in optgroup1\r\n        option3 // assumed still in optgroup1\r\n        (optgroup2) option4\r\n        if first option(s) are without optgroup, they are grouped in optgroup 'Options'\r\n\r\nNOT SUPPORT\r\n- 'EEnum' string, it is only used internally. pass it the whole enum.\r\nnative <input> not supported\r\n- radio\r\n- tel\r\n- search\r\n- reset\r\n- hidden\r\n- image\r\n- button\r\n- submit\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n* */","map":{"version":3,"names":["React","PureComponent","connect","Log","TextArea","Select","ShortAttribETypes","Input","U","LPointerTargetable","RuntimeAccessibleClass","SizeInput","Fragment","_Fragment","jsxDEV","_jsxDEV","GenericInputComponent","constructor","props","context","render","d","data","__raw","l","wrap","field","info","DConstructor","get","className","singleton","eDevv","type","enumOptions","enumOptionsJSX","enum","prevoptgroup","group","option","key","val","indexOf","end","substring","trim","unsorted","Options","children","Object","keys","map","optKey","value","fileName","_jsxFileName","lineNumber","columnNumber","grpKey","label","exDevv","infoType","cname","name","exDev","otherProps","setMinMax","max","min","undefined","positive","uppercaseFirstLetter","e","style","color","border","inputClassName","rootClassName","jsxLabel","tooltip","options","EChar","minLength","maxLength","EString","EBoolean","EByte","EShort","EInt","ELong","EFloat","EDouble","step","pattern","digits","EDate","mapStateToProps","state","ownProps","ret","mapDispatchToProps","dispatch","GenericInput"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/src/components/forEndUser/GenericInput.tsx"],"sourcesContent":["import React, {Dispatch, InputHTMLAttributes, PureComponent, ReactNode} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './GenericInput.scss';\r\nimport {\r\n    Pointer,\r\n    Info,\r\n    GObject,\r\n    DocString,\r\n    Dictionary,\r\n    Log,\r\n    TextArea,\r\n    Select,\r\n    ShortAttribETypes,\r\n    Input, LViewElement, DViewElement, U\r\n} from '../../joiner';\r\nimport {DState, DPointerTargetable, LPointerTargetable, RuntimeAccessibleClass} from '../../joiner';\r\nimport {SizeInput} from './SizeInput';\r\n\r\n// private\r\ninterface ThisState {\r\n}\r\ntype Dic<K extends string|number, V> = Dictionary<K, V>;\r\ntype String<T> = DocString<T>;\r\nclass GenericInputComponent extends PureComponent<AllProps, ThisState/*undefined*/>{\r\n    constructor(props: AllProps, context: any) {\r\n        super(props, context);\r\n    }\r\n\r\n    render(): ReactNode {\r\n        let d: DViewElement = ((this.props.data as LPointerTargetable).__raw || this.props.data) as any;\r\n        let l: LViewElement = LPointerTargetable.wrap(this.props.data) as LViewElement;\r\n        let field: keyof LViewElement = this.props.field as any;\r\n        let info: GObject<Info>;\r\n        if (!this.props.info){\r\n            let DConstructor: typeof DPointerTargetable = RuntimeAccessibleClass.get(d.className);\r\n            let singleton: GObject<LPointerTargetable> = DConstructor.singleton;\r\n            info = singleton['__info_of__' + this.props.field] ;\r\n        } else info = this.props.info;\r\n        if (!info) {\r\n            Log.eDevv(\"<GenericInput/> could not find info of \" + this.props.field, {props:this.props});\r\n            return <></>;\r\n        }\r\n\r\n        let type: string;\r\n        let enumOptions: Dic<String<'optgroup'>, Dic<String<'options'>, String<'values'>>> = {}; // 'Options' entry is a fallback for items without an optgroup\r\n        let enumOptionsJSX: JSX.Element | undefined;\r\n        if (info.enum) {\r\n            type = 'EEnum';\r\n            let prevoptgroup: string = 'Options';\r\n            let group: string;\r\n            let option: string;\r\n            for (let key in info.enum) {\r\n                let val: string = info.enum[key];\r\n                if (key.indexOf('(') === 0) {\r\n                    let end = key.indexOf(')');\r\n                    group = key.substring(1, end).trim();\r\n                    option = key.substring(end + 1).trim();\r\n                    prevoptgroup = group;\r\n                } else {\r\n                    option = key;\r\n                    group = prevoptgroup;\r\n                }\r\n                if (!enumOptions[group]) enumOptions[group] = {};\r\n                enumOptions[group][option] = val;\r\n            }\r\n            let unsorted = enumOptions.Options;\r\n            delete enumOptions.Options;\r\n            enumOptionsJSX = <>\r\n                {\r\n                    //data-selected={l[field] === unsorted[optkey]}\r\n                    unsorted && Object.keys(unsorted).map((optKey: string) => <option value={unsorted[optKey]}>{optKey}</option>)\r\n                }\r\n                {Object.keys(enumOptions).map((grpKey: string) => <optgroup label={grpKey}>{\r\n                Object.keys(enumOptions[grpKey]).map( (optKey: string) => <option value={enumOptions[grpKey][optKey]}>{optKey}</option>)\r\n            }</optgroup>)}</>;\r\n        }\r\n        else {\r\n            if (typeof info.type === 'string') {\r\n                if (info.type.indexOf('Function') === 0) type = 'Function';\r\n                else type = info.type;\r\n            }\r\n            else {\r\n                if (!info.type) { Log.exDevv('missing __info_of__ type for ' + d.className + '.' + this.props.field, {d, info, props: this.props}); return <></>}\r\n                let infoType: GObject = info.type;\r\n                type = infoType.cname || infoType.className || infoType.name;\r\n                Log.exDev(!type, 'missing type:', {type, info});\r\n            }\r\n        }\r\n\r\n        /*if (type.indexOf('|') !== -1) {\r\n            type = 'EEnum';\r\n            let options = type.split('|');\r\n            if (!enumOptions.Option) enumOptions.Option = {};\r\n            for (let o in options){\r\n                o = o.trim();\r\n                enumOptions.Option[o] = o;\r\n            }\r\n        }*/\r\n\r\n        // const otherProps: {[inputattribute:HTMLInputTypeAttribute]: any} = {...this.props};\r\n        const otherProps: InputHTMLAttributes<Event> = {...this.props} as any;\r\n        function setMinMax(max: number): void {\r\n            if (info.min !== undefined) otherProps.min = info.min;\r\n            else otherProps.min = info.positive === true ? 0 : -max / 2; // assume false if non specified\r\n\r\n            if (info.max !== undefined) otherProps.max = info.max;\r\n            else otherProps.max = info.positive === false ? max/2 - 1 : max-1; // assume true if non specified\r\n        }\r\n        let label = U.uppercaseFirstLetter(info.label || this.props.field);\r\n\r\n        switch (type) {\r\n            default:\r\n                Log.e('invalid type in GenericInput', {type, props:this.props, info, d});\r\n                return <div {...otherProps as any} className={'danger'} style={{color: 'red', border: '1px solid red'}}>Invalid GInput type: '{type}'</div>;\r\n            case 'Point': case 'GraphPoint': case 'Size': case 'GraphSize':\r\n                return <SizeInput {...otherProps} data={l} field={this.props.field} label={label} />;\r\n            case 'text': case 'Function':\r\n                return <TextArea inputClassName={'input my-auto ms-auto '} {...otherProps} className={this.props.rootClassName}\r\n                                 data={this.props.data} field={this.props.field}\r\n                                 jsxLabel={label} tooltip={this.props.tooltip} />;\r\n            case 'EEnum':\r\n                return <Select inputClassName={'my-auto ms-auto select'} {...otherProps} className={this.props.rootClassName}\r\n                               data={this.props.data} field={this.props.field} options={enumOptionsJSX}\r\n                               jsxLabel={label} tooltip={this.props.tooltip} />;\r\n                // <input> natives\r\n            case 'radio':\r\n                // problem: this would need to return a <form> and multiple inputs generated by a single element.\r\n                // it should be easy but unlikely it will be needed so i won't do it for now.\r\n                Log.eDevv('radio input type is unsupported'); break;\r\n            case 'datetime': type = 'datetime-local'; break;\r\n            case 'color': break;\r\n            case 'email': break;\r\n            case 'image': break; // ?\r\n            case 'password': break;\r\n            case 'range': break;\r\n            case 'month': break;\r\n            case 'week': break;\r\n            case 'datetime-local': break;\r\n            case 'time': break;\r\n            case 'url': break;\r\n            // ecore\r\n            case ShortAttribETypes.EChar:\r\n                type = 'text';\r\n                if (undefined === otherProps.minLength) otherProps.minLength = 1;\r\n                otherProps.maxLength = 1;\r\n                // otherProps.pattern = '^.{1}$';\r\n                break;\r\n            case ShortAttribETypes.EString: type = 'text'; break;\r\n            case ShortAttribETypes.EBoolean: type = 'checkbox'; break;\r\n            case ShortAttribETypes.EByte:\r\n                type = 'number';\r\n                setMinMax(2**8);\r\n                break;\r\n            case ShortAttribETypes.EShort:\r\n                type = 'number';\r\n                setMinMax(2**16);\r\n                break;\r\n            case ShortAttribETypes.EInt:\r\n                type = 'number';\r\n                setMinMax(2**32);\r\n                break;\r\n            case ShortAttribETypes.ELong:\r\n                type = 'number';\r\n                setMinMax(2**64);\r\n                break;\r\n            case ShortAttribETypes.EFloat:\r\n            case ShortAttribETypes.EDouble:\r\n                type = 'number';\r\n                if (!otherProps.step) otherProps.step = info.step || 0.1;\r\n                if (!otherProps.pattern) otherProps.pattern = info.pattern || '^[0-9]+\\.[0-9]{' + info.digits + '}$';\r\n                break;\r\n            case ShortAttribETypes.EDate: type = 'datetime-local'; break;\r\n        }\r\n        // delete otherProps.field; delete otherProps.data; delete otherProps.infoof;\r\n        return <Input inputClassName={'my-auto ms-auto input'} {...otherProps} className={this.props.rootClassName}\r\n                      data={this.props.data} field={this.props.field}\r\n                      jsxLabel={label} tooltip={this.props.tooltip} type={type as any}/>;\r\n    }\r\n}\r\n\r\n// private\r\ninterface _OwnProps {\r\n    // propsRequestedFromJSX_AsAttributes: string;\r\n    data: DPointerTargetable | LPointerTargetable;\r\n    field: string;\r\n    info?: Info | undefined;\r\n    tooltip?: boolean|string;\r\n\r\n    className?: string;\r\n    rootClassName?: string;\r\n    inputClassName?: string;\r\n    rootStyle?: GObject;// this goes to root\r\n    style?: GObject; // this goes at the root of <Input> or <Select> element(s)\r\n    inputStyle?: GObject; // this goes to the actual native <input> or <select> element(s)\r\n\r\n    /*\r\n    they might be useful, but can just add them in without declaring all of them. i pass them like <input ...otherprops>\r\n    multiple?: boolean;  // multi value for select! works on file, email (just changes default validation pattern), and maybe others\r\n    size?: ??\r\n    accept?: string // only for type = 'file'\r\n    capture?: string // only for type = 'file'\r\n    autocomplete?: string; // only for <input> types\r\n    disabled?: boolean;\r\n    height?: string; // for 'image'\r\n    list?: string; // datalist\r\n    maxLength?: string; // chars\r\n    */\r\n    // many more skipped mostly for forms\r\n\r\n}\r\ntype OwnProps = _OwnProps & InputHTMLAttributes<Event>; // {[inputattribute:HTMLInputAttribute]: any};\r\n// private\r\ninterface StateProps {\r\n    // propsFromReduxStateOrOtherKindOfStateManagement: boolean; // flux or custom things too, unrelated to this.state of react.\r\n}\r\n\r\n// private\r\ninterface DispatchProps {\r\n    // propsFromReduxActions: typeof funzioneTriggeraAzioneDaImportare;\r\n}\r\n\r\n\r\n// private\r\ntype AllProps = OwnProps & StateProps & DispatchProps;\r\n\r\n////// mapper func\r\n\r\nfunction mapStateToProps(state: DState, ownProps: OwnProps): StateProps {\r\n    const ret: StateProps = {} as any;\r\n    /// to fill\r\n    return ret; }\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<any>): DispatchProps {\r\n    const ret: DispatchProps = {} as any;\r\n    /// to fill\r\n    return ret; }\r\n\r\n\r\nexport const GenericInput = connect<StateProps, DispatchProps, OwnProps, DState>(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(GenericInputComponent);\r\n\r\n\r\n/*\r\n\r\nSupported __info_of__.type values:\r\n\r\n\r\n- ShortAttribETypes     =   ecore type names\r\n- text                  =   for textarea\r\n- Function              =   for textarea\r\n- richtext              =   for monaco editor\r\n- native <input> types\r\n- DPointerTargetable    = will make a select out of available elements of that kind\r\n- GraphPoint            = will make a mini interactive square where you can select a point, output is in % [0, 1].\r\n                          NEED A SETTER AND GETTER to get from % to coords and the other way\r\n- GraphSize             = will make a mini interactive square where you can select a rectangle, output is in % [0, 1].\r\n                          NEED A SETTER AND GETTER to get from % to coords and the other way\r\n\r\n\r\n- typescript enumerators, with optgroups defined as following\r\n        (optgroup1) option1\r\n        option2 // assumed still in optgroup1\r\n        option3 // assumed still in optgroup1\r\n        (optgroup2) option4\r\n        if first option(s) are without optgroup, they are grouped in optgroup 'Options'\r\n\r\nNOT SUPPORT\r\n- 'EEnum' string, it is only used internally. pass it the whole enum.\r\nnative <input> not supported\r\n- radio\r\n- tel\r\n- search\r\n- reset\r\n- hidden\r\n- image\r\n- button\r\n- submit\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n* */\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAkCC,aAAa,QAAkB,OAAO;AACpF,SAASC,OAAO,QAAQ,aAAa;AACrC,OAAO,qBAAqB;AAC5B,SAMIC,GAAG,EACHC,QAAQ,EACRC,MAAM,EACNC,iBAAiB,EACjBC,KAAK,EAA8BC,CAAC,QACjC,cAAc;AACrB,SAAoCC,kBAAkB,EAAEC,sBAAsB,QAAO,cAAc;AACnG,SAAQC,SAAS,QAAO,aAAa;;AAErC;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAKA,MAAMC,qBAAqB,SAASf,aAAa,CAAkC;EAC/EgB,WAAWA,CAACC,KAAe,EAAEC,OAAY,EAAE;IACvC,KAAK,CAACD,KAAK,EAAEC,OAAO,CAAC;EACzB;EAEAC,MAAMA,CAAA,EAAc;IAChB,IAAIC,CAAe,GAAK,IAAI,CAACH,KAAK,CAACI,IAAI,CAAwBC,KAAK,IAAI,IAAI,CAACL,KAAK,CAACI,IAAY;IAC/F,IAAIE,CAAe,GAAGf,kBAAkB,CAACgB,IAAI,CAAC,IAAI,CAACP,KAAK,CAACI,IAAI,CAAiB;IAC9E,IAAII,KAAyB,GAAG,IAAI,CAACR,KAAK,CAACQ,KAAY;IACvD,IAAIC,IAAmB;IACvB,IAAI,CAAC,IAAI,CAACT,KAAK,CAACS,IAAI,EAAC;MACjB,IAAIC,YAAuC,GAAGlB,sBAAsB,CAACmB,GAAG,CAACR,CAAC,CAACS,SAAS,CAAC;MACrF,IAAIC,SAAsC,GAAGH,YAAY,CAACG,SAAS;MACnEJ,IAAI,GAAGI,SAAS,CAAC,aAAa,GAAG,IAAI,CAACb,KAAK,CAACQ,KAAK,CAAC;IACtD,CAAC,MAAMC,IAAI,GAAG,IAAI,CAACT,KAAK,CAACS,IAAI;IAC7B,IAAI,CAACA,IAAI,EAAE;MACPxB,GAAG,CAAC6B,KAAK,CAAC,yCAAyC,GAAG,IAAI,CAACd,KAAK,CAACQ,KAAK,EAAE;QAACR,KAAK,EAAC,IAAI,CAACA;MAAK,CAAC,CAAC;MAC3F,oBAAOH,OAAA,CAAAF,SAAA,mBAAI,CAAC;IAChB;IAEA,IAAIoB,IAAY;IAChB,IAAIC,WAA8E,GAAG,CAAC,CAAC,CAAC,CAAC;IACzF,IAAIC,cAAuC;IAC3C,IAAIR,IAAI,CAACS,IAAI,EAAE;MACXH,IAAI,GAAG,OAAO;MACd,IAAII,YAAoB,GAAG,SAAS;MACpC,IAAIC,KAAa;MACjB,IAAIC,MAAc;MAClB,KAAK,IAAIC,GAAG,IAAIb,IAAI,CAACS,IAAI,EAAE;QACvB,IAAIK,GAAW,GAAGd,IAAI,CAACS,IAAI,CAACI,GAAG,CAAC;QAChC,IAAIA,GAAG,CAACE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;UACxB,IAAIC,GAAG,GAAGH,GAAG,CAACE,OAAO,CAAC,GAAG,CAAC;UAC1BJ,KAAK,GAAGE,GAAG,CAACI,SAAS,CAAC,CAAC,EAAED,GAAG,CAAC,CAACE,IAAI,CAAC,CAAC;UACpCN,MAAM,GAAGC,GAAG,CAACI,SAAS,CAACD,GAAG,GAAG,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC;UACtCR,YAAY,GAAGC,KAAK;QACxB,CAAC,MAAM;UACHC,MAAM,GAAGC,GAAG;UACZF,KAAK,GAAGD,YAAY;QACxB;QACA,IAAI,CAACH,WAAW,CAACI,KAAK,CAAC,EAAEJ,WAAW,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC;QAChDJ,WAAW,CAACI,KAAK,CAAC,CAACC,MAAM,CAAC,GAAGE,GAAG;MACpC;MACA,IAAIK,QAAQ,GAAGZ,WAAW,CAACa,OAAO;MAClC,OAAOb,WAAW,CAACa,OAAO;MAC1BZ,cAAc,gBAAGpB,OAAA,CAAAF,SAAA;QAAAmC,QAAA;QAET;QACAF,QAAQ,IAAIG,MAAM,CAACC,IAAI,CAACJ,QAAQ,CAAC,CAACK,GAAG,CAAEC,MAAc,iBAAKrC,OAAA;UAAQsC,KAAK,EAAEP,QAAQ,CAACM,MAAM,CAAE;UAAAJ,QAAA,EAAEI;QAAM;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,CAAC,EAEhHR,MAAM,CAACC,IAAI,CAAChB,WAAW,CAAC,CAACiB,GAAG,CAAEO,MAAc,iBAAK3C,OAAA;UAAU4C,KAAK,EAAED,MAAO;UAAAV,QAAA,EAC1EC,MAAM,CAACC,IAAI,CAAChB,WAAW,CAACwB,MAAM,CAAC,CAAC,CAACP,GAAG,CAAGC,MAAc,iBAAKrC,OAAA;YAAQsC,KAAK,EAAEnB,WAAW,CAACwB,MAAM,CAAC,CAACN,MAAM,CAAE;YAAAJ,QAAA,EAAEI;UAAM;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjH,CAAC,CAAC;MAAA,eAAG,CAAC;IACrB,CAAC,MACI;MACD,IAAI,OAAO9B,IAAI,CAACM,IAAI,KAAK,QAAQ,EAAE;QAC/B,IAAIN,IAAI,CAACM,IAAI,CAACS,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,EAAET,IAAI,GAAG,UAAU,CAAC,KACtDA,IAAI,GAAGN,IAAI,CAACM,IAAI;MACzB,CAAC,MACI;QACD,IAAI,CAACN,IAAI,CAACM,IAAI,EAAE;UAAE9B,GAAG,CAACyD,MAAM,CAAC,+BAA+B,GAAGvC,CAAC,CAACS,SAAS,GAAG,GAAG,GAAG,IAAI,CAACZ,KAAK,CAACQ,KAAK,EAAE;YAACL,CAAC;YAAEM,IAAI;YAAET,KAAK,EAAE,IAAI,CAACA;UAAK,CAAC,CAAC;UAAE,oBAAOH,OAAA,CAAAF,SAAA,mBAAI,CAAC;QAAA;QAChJ,IAAIgD,QAAiB,GAAGlC,IAAI,CAACM,IAAI;QACjCA,IAAI,GAAG4B,QAAQ,CAACC,KAAK,IAAID,QAAQ,CAAC/B,SAAS,IAAI+B,QAAQ,CAACE,IAAI;QAC5D5D,GAAG,CAAC6D,KAAK,CAAC,CAAC/B,IAAI,EAAE,eAAe,EAAE;UAACA,IAAI;UAAEN;QAAI,CAAC,CAAC;MACnD;IACJ;;IAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ;IACA,MAAMsC,UAAsC,GAAG;MAAC,GAAG,IAAI,CAAC/C;IAAK,CAAQ;IACrE,SAASgD,SAASA,CAACC,GAAW,EAAQ;MAClC,IAAIxC,IAAI,CAACyC,GAAG,KAAKC,SAAS,EAAEJ,UAAU,CAACG,GAAG,GAAGzC,IAAI,CAACyC,GAAG,CAAC,KACjDH,UAAU,CAACG,GAAG,GAAGzC,IAAI,CAAC2C,QAAQ,KAAK,IAAI,GAAG,CAAC,GAAG,CAACH,GAAG,GAAG,CAAC,CAAC,CAAC;;MAE7D,IAAIxC,IAAI,CAACwC,GAAG,KAAKE,SAAS,EAAEJ,UAAU,CAACE,GAAG,GAAGxC,IAAI,CAACwC,GAAG,CAAC,KACjDF,UAAU,CAACE,GAAG,GAAGxC,IAAI,CAAC2C,QAAQ,KAAK,KAAK,GAAGH,GAAG,GAAC,CAAC,GAAG,CAAC,GAAGA,GAAG,GAAC,CAAC,CAAC,CAAC;IACvE;IACA,IAAIR,KAAK,GAAGnD,CAAC,CAAC+D,oBAAoB,CAAC5C,IAAI,CAACgC,KAAK,IAAI,IAAI,CAACzC,KAAK,CAACQ,KAAK,CAAC;IAElE,QAAQO,IAAI;MACR;QACI9B,GAAG,CAACqE,CAAC,CAAC,8BAA8B,EAAE;UAACvC,IAAI;UAAEf,KAAK,EAAC,IAAI,CAACA,KAAK;UAAES,IAAI;UAAEN;QAAC,CAAC,CAAC;QACxE,oBAAON,OAAA;UAAA,GAASkD,UAAU;UAASnC,SAAS,EAAE,QAAS;UAAC2C,KAAK,EAAE;YAACC,KAAK,EAAE,KAAK;YAAEC,MAAM,EAAE;UAAe,CAAE;UAAA3B,QAAA,GAAC,wBAAsB,EAACf,IAAI,EAAC,GAAC;QAAA;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAC/I,KAAK,OAAO;MAAE,KAAK,YAAY;MAAE,KAAK,MAAM;MAAE,KAAK,WAAW;QAC1D,oBAAO1C,OAAA,CAACJ,SAAS;UAAA,GAAKsD,UAAU;UAAE3C,IAAI,EAAEE,CAAE;UAACE,KAAK,EAAE,IAAI,CAACR,KAAK,CAACQ,KAAM;UAACiC,KAAK,EAAEA;QAAM;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MACxF,KAAK,MAAM;MAAE,KAAK,UAAU;QACxB,oBAAO1C,OAAA,CAACX,QAAQ;UAACwE,cAAc,EAAE,wBAAyB;UAAA,GAAKX,UAAU;UAAEnC,SAAS,EAAE,IAAI,CAACZ,KAAK,CAAC2D,aAAc;UAC9FvD,IAAI,EAAE,IAAI,CAACJ,KAAK,CAACI,IAAK;UAACI,KAAK,EAAE,IAAI,CAACR,KAAK,CAACQ,KAAM;UAC/CoD,QAAQ,EAAEnB,KAAM;UAACoB,OAAO,EAAE,IAAI,CAAC7D,KAAK,CAAC6D;QAAQ;UAAAzB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MACrE,KAAK,OAAO;QACR,oBAAO1C,OAAA,CAACV,MAAM;UAACuE,cAAc,EAAE,wBAAyB;UAAA,GAAKX,UAAU;UAAEnC,SAAS,EAAE,IAAI,CAACZ,KAAK,CAAC2D,aAAc;UAC9FvD,IAAI,EAAE,IAAI,CAACJ,KAAK,CAACI,IAAK;UAACI,KAAK,EAAE,IAAI,CAACR,KAAK,CAACQ,KAAM;UAACsD,OAAO,EAAE7C,cAAe;UACxE2C,QAAQ,EAAEnB,KAAM;UAACoB,OAAO,EAAE,IAAI,CAAC7D,KAAK,CAAC6D;QAAQ;UAAAzB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAC/D;MACJ,KAAK,OAAO;QACR;QACA;QACAtD,GAAG,CAAC6B,KAAK,CAAC,iCAAiC,CAAC;QAAE;MAClD,KAAK,UAAU;QAAEC,IAAI,GAAG,gBAAgB;QAAE;MAC1C,KAAK,OAAO;QAAE;MACd,KAAK,OAAO;QAAE;MACd,KAAK,OAAO;QAAE;MAAO;MACrB,KAAK,UAAU;QAAE;MACjB,KAAK,OAAO;QAAE;MACd,KAAK,OAAO;QAAE;MACd,KAAK,MAAM;QAAE;MACb,KAAK,gBAAgB;QAAE;MACvB,KAAK,MAAM;QAAE;MACb,KAAK,KAAK;QAAE;MACZ;MACA,KAAK3B,iBAAiB,CAAC2E,KAAK;QACxBhD,IAAI,GAAG,MAAM;QACb,IAAIoC,SAAS,KAAKJ,UAAU,CAACiB,SAAS,EAAEjB,UAAU,CAACiB,SAAS,GAAG,CAAC;QAChEjB,UAAU,CAACkB,SAAS,GAAG,CAAC;QACxB;QACA;MACJ,KAAK7E,iBAAiB,CAAC8E,OAAO;QAAEnD,IAAI,GAAG,MAAM;QAAE;MAC/C,KAAK3B,iBAAiB,CAAC+E,QAAQ;QAAEpD,IAAI,GAAG,UAAU;QAAE;MACpD,KAAK3B,iBAAiB,CAACgF,KAAK;QACxBrD,IAAI,GAAG,QAAQ;QACfiC,SAAS,CAAC,CAAC,IAAE,CAAC,CAAC;QACf;MACJ,KAAK5D,iBAAiB,CAACiF,MAAM;QACzBtD,IAAI,GAAG,QAAQ;QACfiC,SAAS,CAAC,CAAC,IAAE,EAAE,CAAC;QAChB;MACJ,KAAK5D,iBAAiB,CAACkF,IAAI;QACvBvD,IAAI,GAAG,QAAQ;QACfiC,SAAS,CAAC,CAAC,IAAE,EAAE,CAAC;QAChB;MACJ,KAAK5D,iBAAiB,CAACmF,KAAK;QACxBxD,IAAI,GAAG,QAAQ;QACfiC,SAAS,CAAC,CAAC,IAAE,EAAE,CAAC;QAChB;MACJ,KAAK5D,iBAAiB,CAACoF,MAAM;MAC7B,KAAKpF,iBAAiB,CAACqF,OAAO;QAC1B1D,IAAI,GAAG,QAAQ;QACf,IAAI,CAACgC,UAAU,CAAC2B,IAAI,EAAE3B,UAAU,CAAC2B,IAAI,GAAGjE,IAAI,CAACiE,IAAI,IAAI,GAAG;QACxD,IAAI,CAAC3B,UAAU,CAAC4B,OAAO,EAAE5B,UAAU,CAAC4B,OAAO,GAAGlE,IAAI,CAACkE,OAAO,IAAI,iBAAiB,GAAGlE,IAAI,CAACmE,MAAM,GAAG,IAAI;QACpG;MACJ,KAAKxF,iBAAiB,CAACyF,KAAK;QAAE9D,IAAI,GAAG,gBAAgB;QAAE;IAC3D;IACA;IACA,oBAAOlB,OAAA,CAACR,KAAK;MAACqE,cAAc,EAAE,uBAAwB;MAAA,GAAKX,UAAU;MAAEnC,SAAS,EAAE,IAAI,CAACZ,KAAK,CAAC2D,aAAc;MAC7FvD,IAAI,EAAE,IAAI,CAACJ,KAAK,CAACI,IAAK;MAACI,KAAK,EAAE,IAAI,CAACR,KAAK,CAACQ,KAAM;MAC/CoD,QAAQ,EAAEnB,KAAM;MAACoB,OAAO,EAAE,IAAI,CAAC7D,KAAK,CAAC6D,OAAQ;MAAC9C,IAAI,EAAEA;IAAY;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EACpF;AACJ;;AAEA;;AA8BwD;AACxD;;AAKA;;AAMA;;AAGA;;AAEA,SAASuC,eAAeA,CAACC,KAAa,EAAEC,QAAkB,EAAc;EACpE,MAAMC,GAAe,GAAG,CAAC,CAAQ;EACjC;EACA,OAAOA,GAAG;AAAE;AAEhB,SAASC,kBAAkBA,CAACC,QAAuB,EAAiB;EAChE,MAAMF,GAAkB,GAAG,CAAC,CAAQ;EACpC;EACA,OAAOA,GAAG;AAAE;AAGhB,OAAO,MAAMG,YAAY,GAAGpG,OAAO,CAC/B8F,eAAe,EACfI,kBACJ,CAAC,CAACpF,qBAAqB,CAAC;;AAGxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module"}