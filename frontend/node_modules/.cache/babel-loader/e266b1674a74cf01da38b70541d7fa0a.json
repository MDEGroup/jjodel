{"ast":null,"code":"var _jsxFileName = \"C:\\\\d\\\\Programming\\\\web\\\\jodel-mde\\\\src\\\\components\\\\forEndUser\\\\Input.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { Defaults, Keystrokes, LPointerTargetable, store, U } from '../../joiner';\nimport { useStateIfMounted } from 'use-state-if-mounted';\nimport './inputselect.scss';\nimport { Tooltip } from './Tooltip';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function getSelectOptions(data, field, options, children) {\n  console.log(\"select options\", {\n    data,\n    field,\n    children,\n    options\n  });\n  if (options) return options;\n  // children is auto-filled to empty array even if it is not set explicitly in jsx\n  if (Array.isArray(children) && children.length > 0) return children;\n  let returns;\n  let primitives;\n  let classes;\n  let enumerators;\n  let objects;\n  let m2classname;\n  let hasPrimitives = false;\n  let hasReturnTypes = false;\n  if (field === 'type') {\n    if (data) {\n      let model = data.model;\n      switch (data.className) {\n        case 'DValue':\n          let m2 = data.instanceof;\n          if (!m2) return data.model.allSubObjects;\n          let dm2 = m2.__raw;\n          if (dm2.className === \"DAttribute\") break;\n          m2classname = dm2.name;\n          let m1modelid = model.id;\n          return m2.instances.filter(o => o.model.id === m1modelid);\n        case 'DAttribute':\n          enumerators = model.enums;\n          hasPrimitives = true;\n          break;\n        case 'DReference':\n          classes = model.classes;\n          break;\n        case 'DOperation':\n          classes = model.classes;\n          enumerators = model.enums;\n          hasPrimitives = hasReturnTypes = true;\n          break;\n        case 'DParameter':\n          classes = model.classes;\n          enumerators = model.enums;\n          hasPrimitives = true;\n          break;\n      }\n    }\n  }\n  let state;\n  // todo: all this stuff might be better moved in mapstatetoprops, or the select list won't update properly.\n  if (hasPrimitives) {\n    if (!state) state = store.getState();\n    primitives = LPointerTargetable.fromPointer(state.primitiveTypes);\n  }\n  if (hasReturnTypes) {\n    if (!state) state = store.getState();\n    primitives = LPointerTargetable.fromPointer(state.returnTypes);\n  }\n  console.log(\"select options\", {\n    data,\n    field,\n    returns,\n    primitives,\n    classes,\n    enumerators\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [returns && returns.length > 0 && /*#__PURE__*/_jsxDEV(\"optgroup\", {\n      label: 'Defaults',\n      children: returns.map((returnType, i) => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: returnType.id,\n          children: returnType.name\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 49\n    }, this), primitives && primitives.length && /*#__PURE__*/_jsxDEV(\"optgroup\", {\n      label: 'Primitives',\n      children: primitives.map((primitive, i) => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: primitive.id,\n          children: primitive.name\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 51\n    }, this), enumerators && enumerators.length > 0 && /*#__PURE__*/_jsxDEV(\"optgroup\", {\n      label: 'Enumerators',\n      children: enumerators.map((enumerator, i) => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: enumerator.id,\n          children: enumerator.name\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 57\n    }, this), classes && classes.length > 0 && /*#__PURE__*/_jsxDEV(\"optgroup\", {\n      label: 'Classes',\n      children: classes.map((classifier, i) => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: classifier.id,\n          children: classifier.name\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 49\n    }, this), objects && objects.length > 0 && /*#__PURE__*/_jsxDEV(\"optgroup\", {\n      label: m2classname ? 'Instances of ' + m2classname : \"All objects\",\n      children: objects.map((classifier, i) => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: classifier.id,\n          children: classifier.name\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 49\n    }, this)]\n  }, void 0, true);\n}\nexport function InputComponent(props) {\n  _s();\n  var _data;\n  const data = props.data;\n  const getter = props.getter;\n  const setter = props.setter;\n  const field = props.field;\n  const oldValue = !data ? undefined : getter ? getter(data, field) : data[field]; // !== undefined); ? data[field] : 'undefined'\n  let [value, setValue] = useStateIfMounted(oldValue);\n  const [isTouched, setIsTouched] = useStateIfMounted(false);\n  const inputRef = useRef(null);\n  if (props.tag === 'select') value = oldValue; // select does not use state.\n  let serializeValue = val => (val === null || val === void 0 ? void 0 : val.id) || val;\n  function valueDidChange(v1, v2) {\n    return serializeValue(v1) !== serializeValue(v2);\n    /*\r\n    let rawv1 = v1?.__raw || v1;\r\n    let rawv2 = v2?.__raw || v2;\r\n    if (rawv1 !== v1 || rawv2 !== v2) { return v1?.clonedCounter !== v2?.clonedCounter; }\r\n    return v1 !== v2;*/\n  }\n\n  // I check if the value that I have in my local state is being edited by other <Input />\n  if (props.tag !== 'select' && !isTouched && valueDidChange(value, oldValue)) {\n    setValue(serializeValue(oldValue));\n    setIsTouched(false);\n  }\n  if (!(data || getter && setter)) return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"Either props.data or both getter & setter are required.\"\n  }, void 0, false);\n  let readOnly;\n  if (props.readonly !== undefined) readOnly = props.readonly;\n  // else if (props.disabled !== undefined) readOnly = props.disabled;\n  else readOnly = props.debugmodee !== 'true' && Defaults.check(data === null || data === void 0 ? void 0 : data.id);\n  const type = props.type ? props.type : 'text';\n  let label = props.jsxLabel || props.label;\n  let postlabel = props.postlabel;\n  let tooltip = (props.tooltip === true ? data === null || data === void 0 ? void 0 : (_data = data['__info_of__' + field]) === null || _data === void 0 ? void 0 : _data.txt : props.tooltip) || '';\n  let css = ''; //'my-auto input ';\n  //css += (jsxLabel) ? 'ms-1' : (label) ? 'ms-auto' : '';\n  css += props.hidden ? ' hidden-input' : '';\n  let autosize = props.autosize === undefined ? false : props.autosize; // props.type==='text'\n  css += autosize ? ' autosize-input' : '';\n  const isBoolean = ['checkbox', 'radio'].includes(type);\n  const onChange = evt => {\n    var _onChange, _ref;\n    (_onChange = (_ref = props).onChange) === null || _onChange === void 0 ? void 0 : _onChange.call(_ref, evt);\n    if (readOnly) return;\n    if (isBoolean) {\n      const target = evt.target.checked;\n      if (setter) setter(target, data, field);else data[field] = target;\n      return;\n    }\n    if (props.tag === \"select\") {\n      confirmValue(evt);\n    } else {\n      //console.log(\"setValue\", {value, nv: getValueFromEvent(evt), evt, ev: evt.target.value});\n      setValue(getValueFromEvent(evt));\n      setIsTouched(true); // I'm editing the element in my local state.\n      // the actual set is done in onBlur\n    }\n  };\n\n  const onKeyDown = evt => {\n    var _onKeyDown, _ref2;\n    (_onKeyDown = (_ref2 = props).onKeyDown) === null || _onKeyDown === void 0 ? void 0 : _onKeyDown.call(_ref2, evt);\n    if (props.tag === 'select') return;\n    if (evt.key === Keystrokes.enter) confirmValue(evt);\n    if (evt.key === Keystrokes.escape) {\n      const oldValue = getter ? getter(data, field) : data[field];\n      writeHtmlValueFromEvent(evt, oldValue);\n      setValue(serializeValue(oldValue));\n      setIsTouched(false);\n      evt.target.blur();\n      // to optimize: probably can remove a large part of this function because this should trigger blur event as well. or move \"change\" event contents here\n      // optimize 2: memoize the whole component, so it won't update unless the displayed value changed. this would also fix cursor going to input end when pressing enter.\n    }\n  };\n\n  const getValueFromEvent = evt => {\n    switch (props.tag) {\n      case \"textarea\":\n      case \"input\":\n      case \"select\":\n      case \"\":\n      case null:\n      case undefined:\n        return evt.target.value;\n      default:\n        return evt.target.innerText;\n    }\n  };\n  const writeHtmlValueFromEvent = (evt, value) => {\n    value = serializeValue(value);\n    switch (props.tag) {\n      case \"textarea\":\n      case \"input\":\n      case \"select\":\n      case \"\":\n      case null:\n      case undefined:\n        return evt.target.value = value;\n      default:\n        return evt.target.innerText = value;\n    }\n  };\n  const onBlur = evt => {\n    var _onBlur, _ref3;\n    (_onBlur = (_ref3 = props).onBlur) === null || _onBlur === void 0 ? void 0 : _onBlur.call(_ref3, evt);\n    if (props.tag === 'select') return;\n    confirmValue(evt);\n  };\n  const confirmValue = evt => {\n    if (readOnly || isBoolean) return;\n    const newValue = getValueFromEvent(evt);\n    const oldValue = getter ? getter(data, field) : data[field];\n    // console.log(\"onChange confirm\", {evt, newValue, oldValue, changed: valueDidChange(newValue, oldValue), readOnly, isBoolean, nnv:serializeValue(newValue)});\n    if (valueDidChange(newValue, oldValue)) {\n      if (setter) setter(newValue, data, field);else data[field] = serializeValue(newValue);\n    }\n    // I terminate my editing, so I communicate it to other <Input /> that render the same field.\n    setIsTouched(false);\n  };\n  const otherprops = {\n    ...props\n  };\n  delete otherprops.data;\n  delete otherprops.field;\n  delete otherprops.getter;\n  delete otherprops.setter;\n  delete otherprops.label;\n  delete otherprops.postlabel;\n  delete otherprops.jsxLabel;\n  delete otherprops.tooltip;\n  delete otherprops.hidden;\n  delete otherprops.inputStyle;\n  delete otherprops.children;\n  delete otherprops.autosize; // because react complains is bool in dom attribute or unknown attrib name\n\n  let checked = undefined;\n  if (isBoolean) checked = typeof value === \"boolean\" ? value : typeof value === \"string\" ? U.fromBoolString(value) : !!value;\n  let cursor;\n  if (tooltip) cursor = 'help';else if (readOnly) cursor = 'not-allowed';else if (isBoolean) cursor = 'pointer';else cursor = 'auto';\n  let inputProps = {\n    ...otherprops,\n    className: [props.inputClassName, css].join(' '),\n    style: props.inputStyle || {},\n    spellCheck: props.spellCkeck || false,\n    readOnly,\n    disabled: readOnly,\n    type,\n    value: serializeValue(value),\n    checked,\n    onChange,\n    onBlur,\n    onKeyDown\n  }; // key:`${field}.${data?.id}`\n  if (!inputProps.style.cursor && cursor === 'not-allowed') {\n    inputProps.style.cursor = cursor;\n  }\n  let input;\n  let rootprops = {\n    className: otherprops.className,\n    style: otherprops.style\n  };\n  switch (typeof rootprops.ref) {\n    default:\n      rootprops.ref = inputRef;\n      break;\n    case \"object\":\n      let oldref = rootprops.ref;\n      rootprops.ref = v => {\n        oldref.current = inputRef.current = v;\n      };\n      break;\n    case \"function\":\n      let oldreff = rootprops.ref;\n      rootprops.ref = v => {\n        oldreff(v);\n        inputRef.current = v;\n      };\n      break;\n  }\n  if (tooltip) {\n    rootprops.onMouseEnter = () => Tooltip.show(tooltip, true, rootprops.ref);\n    rootprops.onMouseLeave = () => Tooltip.hide();\n  }\n  /*let rootkeys = new Set(...Object.keys(rootprops));\r\n  //  merge events: might want to distinguish which events are merged between root and input and which not.\r\n  //  onChange surely needs merge. onMouseHover might not to let it trigger on label too.\r\n  for (let k of rootkeys) {\r\n      if (!(k[0] === 'o' && k[1] === 'n' && k[2] && k[2].toUpperCase() === k[2])) continue;\r\n      if (inputProps[k]) inputProps[k] = function(...a:any) { inputProps[k](arguments); rootprops[k](arguments); }\r\n      else inputProps[k] = rootprops[k];\r\n      delete rootprops[k];\r\n  }*/\n\n  if (!label && !postlabel && !autosize) {\n    if (rootprops.className) inputProps.className = rootprops.className + ' ' + inputProps.className;\n    if (rootprops.style) U.objectMergeInPlace(inputProps.style, rootprops.style);\n    inputProps = {\n      ...rootprops,\n      ...inputProps\n    };\n    switch (props.tag) {\n      case \"textarea\":\n        return /*#__PURE__*/_jsxDEV(\"textarea\", {\n          ...inputProps,\n          children: inputProps.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 37\n        }, this);\n      case \"select\":\n        return /*#__PURE__*/_jsxDEV(\"select\", {\n          ...inputProps,\n          children: getSelectOptions(data, field, props.options, props.children)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 35\n        }, this);\n      case null:\n      case undefined:\n      case \"\":\n      case \"input\":\n        return /*#__PURE__*/_jsxDEV(\"input\", {\n          ...inputProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 70\n        }, this);\n      default:\n        inputProps.contentEditable = inputProps.contentEditable !== false;\n        return /*#__PURE__*/React.createElement(props.tag, inputProps, props.children);\n    }\n  }\n  if (autosize) rootprops.className = (rootprops.className || '') + ' autosize-input-container';\n  switch (props.tag) {\n    case \"textarea\":\n      input = /*#__PURE__*/_jsxDEV(\"textarea\", {\n        ...inputProps,\n        children: inputProps.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 34\n      }, this);\n      break;\n    case \"select\":\n      input = /*#__PURE__*/_jsxDEV(\"select\", {\n        ...inputProps,\n        children: getSelectOptions(data, field, props.options, props.children)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 32\n      }, this);\n      break;\n    case null:\n    case undefined:\n    case \"\":\n    case \"input\":\n      input = /*#__PURE__*/_jsxDEV(\"input\", {\n        ...inputProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 67\n      }, this);\n      break;\n    default:\n      inputProps.contentEditable = inputProps.contentEditable !== false;\n      input = /*#__PURE__*/React.createElement(props.tag, inputProps, props.children);\n      break;\n  }\n  if (typeof label === \"string\") label = /*#__PURE__*/_jsxDEV(\"span\", {\n    children: label\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 44\n  }, this);\n  if (typeof postlabel === \"string\") postlabel = /*#__PURE__*/_jsxDEV(\"span\", {\n    children: postlabel\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 290,\n    columnNumber: 52\n  }, this);\n  const openSelect = e => {\n    /*\r\n    tried to make label click open the select but does not work easily in js, a solution was here but with css padding.\r\n    https://stackoverflow.com/questions/15249958/once-i-click-on-label-select-button-should-get-open\r\n    */\n    if (props.tag !== \"select\") return;\n    let t = e.target;\n    let select = t.tagName === 'select' ? t : t.querySelector('select');\n    console.log(\"click select root\", {\n      t,\n      select\n    });\n    select === null || select === void 0 ? void 0 : select.click();\n  };\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    className: 'input-container',\n    ...rootprops,\n    children: [label || undefined, input, postlabel || undefined]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 303,\n    columnNumber: 12\n  }, this);\n  /*\r\n  return(<label className={'p-1'} {...otherprops}\r\n                style={rootStyle}>\r\n        {label && <span className={'my-auto'} onMouseEnter={e => setShowTooltip(true)}\r\n                      onMouseLeave={e => setShowTooltip(false)}>{label}\r\n      </span>}\r\n        {jsxLabel && <span onMouseEnter={e => setShowTooltip(true)}\r\n                         onMouseLeave={e => setShowTooltip(false)} style={{width: '100%'}}>{jsxLabel}\r\n      </span>}\r\n        {(tooltip && showTooltip) && <div className={'my-tooltip'}>\r\n          <b className={'text-center text-capitalize'}>{field}</b>\r\n          <br />\r\n          <label>{tooltip}</label>\r\n      </div>}\r\n        {autosize ? <div className={(autosize ? 'autosize-input-container' : '') + (props.asLabel ? ' labelstyle' : '')}\r\n                       data-value={value}>{input}\r\n      </div> : input}\r\n  </label>);\r\n  */\n}\n_s(InputComponent, \"nlzZzFhpjnEHW6d8jEzTV191MA8=\", false, function () {\n  return [useStateIfMounted, useStateIfMounted];\n});\n_c = InputComponent;\nInputComponent.cname = 'InputComponent';\nexport function InputMapStateToProps(state, ownProps) {\n  var _ownProps$data;\n  const ret = {};\n  const pointer = typeof ownProps.data === 'string' ? ownProps.data : (_ownProps$data = ownProps.data) === null || _ownProps$data === void 0 ? void 0 : _ownProps$data.id;\n  ret.debugmodee = state.debug ? 'true' : 'false';\n  if (pointer) ret.data = LPointerTargetable.fromPointer(pointer);\n  return ret;\n}\n_c2 = InputMapStateToProps;\nfunction mapDispatchToProps(dispatch) {\n  const ret = {};\n  return ret;\n}\nexport const InputConnected = connect(InputMapStateToProps, mapDispatchToProps)(InputComponent);\n\n// export function Input(props: InputOwnProps, children: (string | React.Component)[] = []): ReactElement { return 'input' as any; }\nexport function Input(props) {\n  return /*#__PURE__*/_jsxDEV(InputConnected, {\n    ...props,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 392,\n    columnNumber: 12\n  }, this);\n}\n\n// export function TextArea(props: InputOwnProps, children: (string | React.Component)[] = []): ReactElement { return 'textarea' as any; }\n_c3 = Input;\nexport function TextArea(props) {\n  return /*#__PURE__*/_jsxDEV(InputConnected, {\n    ...props,\n    tag: \"textarea\",\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 397,\n    columnNumber: 12\n  }, this);\n}\n//export function Select(props: SelectOwnProps, children: (string | React.Component)[] = []): ReactElement { return 'select' as any; }\n_c4 = TextArea;\nexport function Select(props) {\n  return /*#__PURE__*/_jsxDEV(InputConnected, {\n    ...props,\n    tag: \"select\",\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 401,\n    columnNumber: 12\n  }, this);\n}\n_c5 = Select;\nexport const Edit = Input;\nInputComponent.cname = 'InputComponent';\nInputConnected.cname = 'InputConnected';\nInput.cname = 'Input';\nTextArea.cname = 'TextArea';\nSelect.cname = 'Select';\nEdit.cname = 'Edit';\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"InputComponent\");\n$RefreshReg$(_c2, \"InputMapStateToProps\");\n$RefreshReg$(_c3, \"Input\");\n$RefreshReg$(_c4, \"TextArea\");\n$RefreshReg$(_c5, \"Select\");","map":{"version":3,"names":["React","useRef","connect","Defaults","Keystrokes","LPointerTargetable","store","U","useStateIfMounted","Tooltip","jsxDEV","_jsxDEV","Fragment","_Fragment","getSelectOptions","data","field","options","children","console","log","Array","isArray","length","returns","primitives","classes","enumerators","objects","m2classname","hasPrimitives","hasReturnTypes","model","className","m2","instanceof","allSubObjects","dm2","__raw","name","m1modelid","id","instances","filter","o","enums","state","getState","fromPointer","primitiveTypes","returnTypes","label","map","returnType","i","value","fileName","_jsxFileName","lineNumber","columnNumber","primitive","enumerator","classifier","InputComponent","props","_s","_data","getter","setter","oldValue","undefined","setValue","isTouched","setIsTouched","inputRef","tag","serializeValue","val","valueDidChange","v1","v2","readOnly","readonly","debugmodee","check","type","jsxLabel","postlabel","tooltip","txt","css","hidden","autosize","isBoolean","includes","onChange","evt","_onChange","_ref","call","target","checked","confirmValue","getValueFromEvent","onKeyDown","_onKeyDown","_ref2","key","enter","escape","writeHtmlValueFromEvent","blur","innerText","onBlur","_onBlur","_ref3","newValue","otherprops","inputStyle","fromBoolString","cursor","inputProps","inputClassName","join","style","spellCheck","spellCkeck","disabled","input","rootprops","ref","oldref","v","current","oldreff","onMouseEnter","show","onMouseLeave","hide","objectMergeInPlace","contentEditable","createElement","openSelect","e","t","select","tagName","querySelector","click","_c","cname","InputMapStateToProps","ownProps","_ownProps$data","ret","pointer","debug","_c2","mapDispatchToProps","dispatch","InputConnected","Input","_c3","TextArea","_c4","Select","_c5","Edit","$RefreshReg$"],"sources":["C:/d/Programming/web/jodel-mde/src/components/forEndUser/Input.tsx"],"sourcesContent":["import React, {Dispatch, KeyboardEvent, LegacyRef, ReactElement, ReactNode, useRef} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {DState} from '../../redux/store';\r\nimport {\r\n    Defaults,\r\n    DObject,\r\n    DPointerTargetable,\r\n    GObject,\r\n    Keystrokes, LAttribute,\r\n    LClass, LEnumerator, LModel, LObject,\r\n    LPointerTargetable, LReference, LValue,\r\n    Overlap,\r\n    Pointer, PrimitiveType, Selectors,\r\n    store,\r\n    U\r\n} from '../../joiner';\r\nimport {useStateIfMounted} from 'use-state-if-mounted';\r\nimport './inputselect.scss';\r\nimport { Tooltip } from './Tooltip';\r\n\r\n\r\nexport function getSelectOptions(data: any, field: string, options: ReactNode, children?: ReactNode) {\r\n    console.log(\"select options\", {data, field, children, options});\r\n    if (options) return options;\r\n    // children is auto-filled to empty array even if it is not set explicitly in jsx\r\n    if (Array.isArray(children) && children.length > 0) return children;\r\n    let returns: LClass[] | undefined;\r\n    let primitives: LClass[] | undefined;\r\n    let classes: LClass[] | undefined;\r\n    let enumerators: LEnumerator[] | undefined;\r\n    let objects: LObject[] | undefined;\r\n    let m2classname: string | undefined;\r\n    let hasPrimitives: boolean = false;\r\n    let hasReturnTypes: boolean = false;\r\n    if ((field) === 'type') {\r\n        if (data) {\r\n            let model = data.model;\r\n            switch (data.className) {\r\n                case 'DValue':\r\n                    let m2: LReference | LAttribute | undefined = (data as LValue).instanceof;\r\n                    if (!m2) return (data as LValue).model.allSubObjects;\r\n                    let dm2 = m2.__raw;\r\n                    if (dm2.className === \"DAttribute\") break;\r\n                    m2classname = dm2.name;\r\n                    let m1modelid = model.id;\r\n                    return m2.instances.filter( o => o.model.id === m1modelid);\r\n                case 'DAttribute': enumerators = model.enums; hasPrimitives = true; break;\r\n                case 'DReference': classes = model.classes; break;\r\n                case 'DOperation': classes = model.classes; enumerators = model.enums; hasPrimitives = hasReturnTypes = true; break;\r\n                case 'DParameter': classes = model.classes; enumerators = model.enums; hasPrimitives = true; break;\r\n            }\r\n        }\r\n    }\r\n    let state: DState | undefined;\r\n    // todo: all this stuff might be better moved in mapstatetoprops, or the select list won't update properly.\r\n    if (hasPrimitives) {\r\n        if (!state) state = store.getState();\r\n        primitives = LPointerTargetable.fromPointer(state.primitiveTypes);\r\n    }\r\n    if (hasReturnTypes) {\r\n        if (!state) state = store.getState();\r\n        primitives = LPointerTargetable.fromPointer(state.returnTypes);\r\n    }\r\n\r\n    console.log(\"select options\", {data, field, returns, primitives, classes, enumerators});\r\n\r\n    return (\r\n        <>\r\n            {(returns && returns.length > 0) && <optgroup label={'Defaults'}>\r\n                {returns.map((returnType, i) => {\r\n                    return <option key={i} value={returnType.id}>{returnType.name}</option>\r\n                })}\r\n            </optgroup>}\r\n            {(primitives && primitives.length) && <optgroup label={'Primitives'}>\r\n                {primitives.map((primitive, i) => {\r\n                    return <option key={i} value={primitive.id}>{primitive.name}</option>\r\n                })}\r\n            </optgroup>}\r\n            {(enumerators && enumerators.length > 0) && <optgroup label={'Enumerators'}>\r\n                {enumerators.map((enumerator, i) => {\r\n                    return <option key={i} value={enumerator.id}>{enumerator.name}</option>\r\n                })}\r\n            </optgroup>}\r\n            {(classes && classes.length > 0) && <optgroup label={'Classes'}>\r\n                {classes.map((classifier, i) => {\r\n                    return <option key={i} value={classifier.id}>{classifier.name}</option>\r\n                })}\r\n            </optgroup>}\r\n            {(objects && objects.length > 0) && <optgroup label={m2classname ? 'Instances of ' + m2classname : \"All objects\"}>\r\n                {objects.map((classifier, i) => {\r\n                    return <option key={i} value={classifier.id}>{classifier.name}</option>\r\n                })}\r\n            </optgroup>}\r\n            {/*options*/}\r\n        </>);\r\n}\r\nexport function InputComponent(props: AllProps) {\r\n    const data = props.data;\r\n    const getter = props.getter;\r\n    const setter = props.setter;\r\n    const field: string = props.field as string;\r\n    const oldValue: PrimitiveType | LPointerTargetable = (!data) ? undefined : (getter) ? getter(data, field) : data[field]; // !== undefined); ? data[field] : 'undefined'\r\n    let [value, setValue] = useStateIfMounted<PrimitiveType | LPointerTargetable>(oldValue);\r\n    const [isTouched, setIsTouched] = useStateIfMounted(false);\r\n    const inputRef = useRef<Element | null>(null);\r\n    if (props.tag === 'select') value = oldValue; // select does not use state.\r\n    let serializeValue = (val: LPointerTargetable | PrimitiveType): string | PrimitiveType => (val as LPointerTargetable)?.id || (val as any);\r\n\r\n    function valueDidChange(v1: any, v2: any): boolean {\r\n        return serializeValue(v1) !== serializeValue(v2);\r\n        /*\r\n        let rawv1 = v1?.__raw || v1;\r\n        let rawv2 = v2?.__raw || v2;\r\n        if (rawv1 !== v1 || rawv2 !== v2) { return v1?.clonedCounter !== v2?.clonedCounter; }\r\n        return v1 !== v2;*/\r\n    }\r\n\r\n    // I check if the value that I have in my local state is being edited by other <Input />\r\n    if (props.tag !== 'select' && !isTouched && valueDidChange(value, oldValue)){\r\n        setValue(serializeValue(oldValue));\r\n        setIsTouched(false);\r\n    }\r\n\r\n\r\n    if (!(data || (getter && setter))) return(<>Either props.data or both getter & setter are required.</>);\r\n    let readOnly: boolean;\r\n    if (props.readonly !== undefined) readOnly = props.readonly;\r\n    // else if (props.disabled !== undefined) readOnly = props.disabled;\r\n    else readOnly = props.debugmodee !== 'true' && Defaults.check(data?.id)\r\n\r\n    const type = (props.type) ? props.type : 'text';\r\n    let label: ReactNode | undefined = props.jsxLabel || props.label;\r\n    let postlabel: ReactNode | undefined = props.postlabel;\r\n    let tooltip: ReactNode|string|undefined = ((props.tooltip === true) ? data?.['__info_of__' + field]?.txt : props.tooltip) || '';\r\n\r\n    let css = '';//'my-auto input ';\r\n    //css += (jsxLabel) ? 'ms-1' : (label) ? 'ms-auto' : '';\r\n    css += (props.hidden) ? ' hidden-input' : '';\r\n    let autosize: boolean = props.autosize === undefined ? false : props.autosize; // props.type==='text'\r\n    css += autosize ? ' autosize-input' : '';\r\n    const isBoolean = (['checkbox', 'radio'].includes(type));\r\n\r\n\r\n    const onChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n        (props as any).onChange?.(evt);\r\n        if (readOnly) return;\r\n        if (isBoolean) {\r\n            const target = evt.target.checked;\r\n            if (setter) setter(target, data, field);\r\n            else data[field] = target;\r\n            return;\r\n        }\r\n        if (props.tag === \"select\") {\r\n            confirmValue(evt as any);\r\n        } else {\r\n            //console.log(\"setValue\", {value, nv: getValueFromEvent(evt), evt, ev: evt.target.value});\r\n            setValue(getValueFromEvent(evt));\r\n            setIsTouched(true);     // I'm editing the element in my local state.\r\n            // the actual set is done in onBlur\r\n        }\r\n    }\r\n    const onKeyDown = (evt: React.KeyboardEvent<HTMLInputElement>) => {\r\n        (props as any).onKeyDown?.(evt);\r\n        if (props.tag === 'select') return;\r\n        if (evt.key === Keystrokes.enter) confirmValue(evt as any);\r\n        if (evt.key === Keystrokes.escape) {\r\n            const oldValue = getter ? getter(data, field) : data[field];\r\n            writeHtmlValueFromEvent(evt as any, oldValue);\r\n            setValue(serializeValue(oldValue));\r\n            setIsTouched(false);\r\n            (evt.target as HTMLInputElement).blur();\r\n            // to optimize: probably can remove a large part of this function because this should trigger blur event as well. or move \"change\" event contents here\r\n            // optimize 2: memoize the whole component, so it won't update unless the displayed value changed. this would also fix cursor going to input end when pressing enter.\r\n        }\r\n    }\r\n    const getValueFromEvent = (evt: { target: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement }) => {\r\n        switch (props.tag){\r\n            case \"textarea\": case \"input\": case \"select\": case \"\": case null: case undefined: return evt.target.value;\r\n            default: return evt.target.innerText;\r\n        }\r\n    }\r\n    const writeHtmlValueFromEvent = (evt: { target: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement }, value: any) => {\r\n        value = serializeValue(value);\r\n        switch (props.tag){\r\n            case \"textarea\": case \"input\": case \"select\": case \"\": case null: case undefined: return evt.target.value = value;\r\n            default: return evt.target.innerText = value;\r\n        }\r\n    }\r\n\r\n    const onBlur = (evt: { target: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement }) => {\r\n        (props as any).onBlur?.(evt);\r\n        if (props.tag === 'select') return;\r\n        confirmValue(evt);\r\n    }\r\n    const confirmValue = (evt: { target: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement }) => {\r\n        if (readOnly || isBoolean) return;\r\n        const newValue: string = getValueFromEvent(evt);\r\n        const oldValue = getter ? getter(data, field) : data[field];\r\n        // console.log(\"onChange confirm\", {evt, newValue, oldValue, changed: valueDidChange(newValue, oldValue), readOnly, isBoolean, nnv:serializeValue(newValue)});\r\n        if (valueDidChange(newValue, oldValue)){\r\n            if (setter) setter(newValue, data, field);\r\n            else data[field] = serializeValue(newValue);\r\n        }\r\n        // I terminate my editing, so I communicate it to other <Input /> that render the same field.\r\n        setIsTouched(false);\r\n    }\r\n\r\n    const otherprops: GObject = {...props};\r\n    delete otherprops.data;\r\n    delete otherprops.field;\r\n    delete otherprops.getter;\r\n    delete otherprops.setter;\r\n    delete otherprops.label;\r\n    delete otherprops.postlabel;\r\n    delete otherprops.jsxLabel;\r\n    delete otherprops.tooltip;\r\n    delete otherprops.hidden;\r\n    delete otherprops.inputStyle;\r\n    delete otherprops.children;\r\n    delete otherprops.autosize; // because react complains is bool in dom attribute or unknown attrib name\r\n\r\n    let checked: boolean | undefined = undefined;\r\n    if (isBoolean) checked = typeof value === \"boolean\" ? value : (typeof value === \"string\" ? U.fromBoolString(value) : !!value);\r\n\r\n    let cursor: string;\r\n    if (tooltip) cursor = 'help';\r\n    else if (readOnly) cursor = 'not-allowed';\r\n    else if (isBoolean) cursor = 'pointer';\r\n    else cursor = 'auto';\r\n\r\n    let inputProps: GObject = {...otherprops,\r\n        className: [props.inputClassName, css].join(' '),\r\n        style: (props.inputStyle || {}),\r\n        spellCheck: (props as any).spellCkeck || false, readOnly, disabled: readOnly, type, value: serializeValue(value), checked,\r\n        onChange, onBlur, onKeyDown} // key:`${field}.${data?.id}`\r\n    if (!inputProps.style.cursor && cursor === 'not-allowed') { inputProps.style.cursor = cursor; }\r\n\r\n    let input: ReactNode;\r\n    let rootprops: GObject = {className: otherprops.className, style: otherprops.style};\r\n    switch (typeof rootprops.ref) {\r\n        default: rootprops.ref = inputRef; break;\r\n        case \"object\":\r\n            let oldref = rootprops.ref;\r\n            rootprops.ref = (v: Element | null) => { oldref.current = inputRef.current = v; }\r\n            break;\r\n        case \"function\":\r\n            let oldreff = rootprops.ref;\r\n            rootprops.ref = (v: Element | null) => { oldreff(v); inputRef.current = v; }\r\n            break;\r\n    }\r\n\r\n    if (tooltip) {\r\n        rootprops.onMouseEnter = () => Tooltip.show(tooltip, true, (rootprops.ref));\r\n        rootprops.onMouseLeave = () => Tooltip.hide();\r\n    }\r\n    /*let rootkeys = new Set(...Object.keys(rootprops));\r\n    //  merge events: might want to distinguish which events are merged between root and input and which not.\r\n    //  onChange surely needs merge. onMouseHover might not to let it trigger on label too.\r\n    for (let k of rootkeys) {\r\n        if (!(k[0] === 'o' && k[1] === 'n' && k[2] && k[2].toUpperCase() === k[2])) continue;\r\n        if (inputProps[k]) inputProps[k] = function(...a:any) { inputProps[k](arguments); rootprops[k](arguments); }\r\n        else inputProps[k] = rootprops[k];\r\n        delete rootprops[k];\r\n    }*/\r\n\r\n    if (!label && !postlabel && !autosize) {\r\n        if (rootprops.className) inputProps.className = rootprops.className + ' ' + inputProps.className;\r\n        if (rootprops.style) U.objectMergeInPlace(inputProps.style, rootprops.style);\r\n        inputProps = {...rootprops, ...inputProps};\r\n        switch (props.tag){\r\n            case \"textarea\": return <textarea {...inputProps}>{inputProps.value}</textarea>;\r\n            case \"select\": return <select {...inputProps}>{getSelectOptions(data, field, props.options, props.children)}</select>;\r\n            case null: case undefined: case \"\": case \"input\": return <input {...inputProps} />;\r\n            default:\r\n                inputProps.contentEditable = inputProps.contentEditable !== false;\r\n                return React.createElement(props.tag, inputProps, props.children);\r\n        }\r\n    }\r\n    if (autosize) rootprops.className = (rootprops.className || '') + ' autosize-input-container';\r\n\r\n    switch (props.tag){\r\n        case \"textarea\": input = <textarea {...inputProps}>{inputProps.value}</textarea>; break;\r\n        case \"select\": input = <select {...inputProps}>{getSelectOptions(data, field, props.options, props.children)}</select>; break;\r\n        case null: case undefined: case \"\": case \"input\": input = <input {...inputProps} />; break;\r\n        default:\r\n            inputProps.contentEditable = inputProps.contentEditable !== false;\r\n            input = React.createElement(props.tag, inputProps, props.children); break;\r\n    }\r\n    if (typeof label === \"string\") label = <span>{label}</span>;\r\n    if (typeof postlabel === \"string\") postlabel = <span>{postlabel}</span>;\r\n\r\n    const openSelect = (e: any)=>{\r\n        /*\r\n        tried to make label click open the select but does not work easily in js, a solution was here but with css padding.\r\n        https://stackoverflow.com/questions/15249958/once-i-click-on-label-select-button-should-get-open\r\n        */\r\n        if (props.tag !== \"select\") return;\r\n        let t: HTMLElement = (e.target) as any;\r\n        let select = (t.tagName === 'select') ? t : t.querySelector('select');\r\n        console.log(\"click select root\", {t, select});\r\n        select?.click();\r\n    }\r\n    return <label className={'input-container'} {...rootprops} /*onClick={openSelect}*/>\r\n    {label || undefined}{input}{postlabel || undefined}</label>;\r\n    /*\r\n    return(<label className={'p-1'} {...otherprops}\r\n                  style={rootStyle}>\r\n\r\n        {label && <span className={'my-auto'} onMouseEnter={e => setShowTooltip(true)}\r\n                        onMouseLeave={e => setShowTooltip(false)}>{label}\r\n        </span>}\r\n\r\n        {jsxLabel && <span onMouseEnter={e => setShowTooltip(true)}\r\n                           onMouseLeave={e => setShowTooltip(false)} style={{width: '100%'}}>{jsxLabel}\r\n        </span>}\r\n\r\n        {(tooltip && showTooltip) && <div className={'my-tooltip'}>\r\n            <b className={'text-center text-capitalize'}>{field}</b>\r\n            <br />\r\n            <label>{tooltip}</label>\r\n        </div>}\r\n\r\n        {autosize ? <div className={(autosize ? 'autosize-input-container' : '') + (props.asLabel ? ' labelstyle' : '')}\r\n                         data-value={value}>{input}\r\n        </div> : input}\r\n    </label>);\r\n    */\r\n}\r\n\r\nInputComponent.cname = 'InputComponent';\r\nexport interface InputOwnProps {\r\n    data?: LPointerTargetable | DPointerTargetable | Pointer<DPointerTargetable, 1, 1, LPointerTargetable>;\r\n    field?: string;\r\n    // DANGER: use the data provided in parameters instead of using js closure, as the proxy accessed from using closure won't be updated in rerenders.\r\n    getter?: (data: any/*LPointerTargetable*/, field: string) => string | boolean | undefined;\r\n    setter?: (value: string|boolean, data: any, field: string) => void;\r\n    label?: string | ReactNode;\r\n    postlabel?: string | ReactNode;\r\n    jsxLabel?: ReactNode; // @deprecated, use label\r\n    type?: 'checkbox'|'color'|'date'|'datetime-local'|'email'|'file'|'image'|'month'|\r\n    'number'|'password'|'radio'|'range'|'tel'|'text'|'time'|'url'|'week';\r\n    className?: string;\r\n    style?: GObject;\r\n    readonly?: boolean;\r\n    tooltip?: boolean | ReactNode;\r\n    hidden?: boolean;\r\n    autosize?: boolean;\r\n    inputClassName?: string;\r\n    inputStyle?: GObject;\r\n    key?: React.Key | null;\r\n    placeholder?: string;\r\n    tag?: string;\r\n    children?: ReactNode;\r\n}\r\n\r\nexport interface SelectOwnProps extends Omit<InputOwnProps, 'setter'> {\r\n    options?: JSX.Element;\r\n    setter?: (value: string, data: any, field: string) => void; // parent select has value: string | boolean\r\n}\r\ninterface RealOwnProps extends Omit<SelectOwnProps, 'setter'>{\r\n    setter: InputOwnProps['setter'];\r\n}\r\n\r\ninterface StateProps {\r\n    debugmodee: string;\r\n    data: LPointerTargetable & GObject;\r\n    // selected: Dictionary<Pointer<DUser>, LModelElement | null>;\r\n}\r\ninterface DispatchProps { }\r\ntype AllProps = Overlap<RealOwnProps, Overlap<StateProps, DispatchProps>>;\r\n\r\n\r\nexport function InputMapStateToProps(state: DState, ownProps: RealOwnProps): StateProps {\r\n    const ret: StateProps = {} as any;\r\n    const pointer: Pointer | undefined = typeof ownProps.data === 'string' ? ownProps.data : ownProps.data?.id;\r\n    ret.debugmodee = state.debug ? 'true' : 'false';\r\n    if (pointer) ret.data = LPointerTargetable.fromPointer(pointer);\r\n    return ret;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<any>): DispatchProps {\r\n    const ret: DispatchProps = {};\r\n    return ret;\r\n}\r\n\r\nexport const InputConnected =\r\n    connect<StateProps, DispatchProps, RealOwnProps, DState>(InputMapStateToProps, mapDispatchToProps)(InputComponent);\r\n\r\n\r\n// export function Input(props: InputOwnProps, children: (string | React.Component)[] = []): ReactElement { return 'input' as any; }\r\nexport function Input(props: InputOwnProps): ReactElement {\r\n    return <InputConnected {...props as any}>{props.children}</InputConnected>;\r\n}\r\n\r\n// export function TextArea(props: InputOwnProps, children: (string | React.Component)[] = []): ReactElement { return 'textarea' as any; }\r\nexport function TextArea(props: InputOwnProps): ReactElement {\r\n    return <InputConnected {...{...props, tag:\"textarea\"} as any}>{props.children}</InputConnected>;\r\n}\r\n//export function Select(props: SelectOwnProps, children: (string | React.Component)[] = []): ReactElement { return 'select' as any; }\r\nexport function Select(props: SelectOwnProps): ReactElement {\r\n    return <InputConnected {...{...props, tag:\"select\"} as any}>{props.children}</InputConnected>;\r\n}\r\nexport const Edit = Input;\r\n\r\nInputComponent.cname = 'InputComponent';\r\nInputConnected.cname = 'InputConnected';\r\nInput.cname = 'Input';\r\nTextArea.cname = 'TextArea';\r\nSelect.cname = 'Select';\r\nEdit.cname = 'Edit';\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}