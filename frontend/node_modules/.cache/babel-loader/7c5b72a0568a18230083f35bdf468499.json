{"ast":null,"code":"var _jsxFileName = \"C:\\\\0Programmi\\\\Dev\\\\projects\\\\frontend\\\\jjodel\\\\src\\\\components\\\\forEndUser\\\\Overlap.tsx\";\nimport React, { PureComponent } from \"react\";\n// import { connect } from \"react-redux\";\n// import {IStore} from \"../../redux/store\";\nimport './overlap.scss';\n\n// private\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class Overlap extends PureComponent {\n  render() {\n    console.log('overlap childs:', this.props.children);\n    if (!this.props.children || !Array.isArray(this.props.children)) return this.props.children;\n    const childrens = this.props.children; // ? (Array.isArray(this.props.children) ? this.props.children : [this.props.children]) : [];\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overlap-parent\" + (this.props.autosizex ? \" overlap-child-chooses-width\" : \"\") + (this.props.autosizex ? \" overlap-child-chooses-height\" : \"\"),\n        style: {\n          ...this.props.style\n        },\n        children: React.Children.map(childrens, cc => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"overlap-child-wrapper\" + (!this.props.autosizex ? \" overlap-parent-chooses-width\" : \"\") + (!this.props.autosizey ? \" overlap-parent-chooses-height\" : \"\"),\n            children: cc\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  }\n}\n\n// private\n\n// private\n\n// private\n\n// private\n\n////// mapper func\n/*\r\nfunction mapStateToProps(state: IStore, ownProps: OwnProps): StateProps {\r\n    const ret: StateProps = {} as any;\r\n    /// to fill\r\n    return ret; }\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<any>): DispatchProps {\r\n    const ret: DispatchProps = {} as any;\r\n    /// to fill\r\n    return ret; }\r\n*/\n\nOverlap.defaultProps = {\n  autosizex: true,\n  autosizey: true,\n  style: undefined,\n  children: []\n}; // todo: se esporto con connect fose devo farlo al risultato della connect\nexport default Overlap;\n/*connect<StateProps, DispatchProps, OwnProps, IStore>(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Overlap);*/","map":{"version":3,"names":["React","PureComponent","jsxDEV","_jsxDEV","Fragment","_Fragment","Overlap","render","console","log","props","children","Array","isArray","childrens","className","autosizex","style","Children","map","cc","autosizey","fileName","_jsxFileName","lineNumber","columnNumber","defaultProps","undefined"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/src/components/forEndUser/Overlap.tsx"],"sourcesContent":["import React, {CSSProperties, PureComponent, ReactChild, ReactNode} from \"react\";\r\n// import { connect } from \"react-redux\";\r\n// import {IStore} from \"../../redux/store\";\r\nimport './overlap.scss';\r\n\r\n// private\r\ninterface ThisState {\r\n}\r\n\r\nexport class Overlap extends PureComponent<AllProps, ThisState>{\r\n    render(): ReactNode {\r\n        console.log('overlap childs:', this.props.children);\r\n        if (!this.props.children || !Array.isArray(this.props.children)) return this.props.children;\r\n        const childrens = this.props.children; // ? (Array.isArray(this.props.children) ? this.props.children : [this.props.children]) : [];\r\n        return (<>\r\n            {/*trouble on svg: G elements cannot be styled and rect cannot be nested, i cannot force a container to take size of childrens unless set size with plain js*/}\r\n            <div className={\"overlap-parent\" + (this.props.autosizex ? \" overlap-child-chooses-width\" : \"\") + (this.props.autosizex ? \" overlap-child-chooses-height\" : \"\")} style={{...this.props.style}}>\r\n                {React.Children.map(childrens, cc => {\r\n                        return <div className={\"overlap-child-wrapper\" + (!this.props.autosizex ? \" overlap-parent-chooses-width\" : \"\") + (!this.props.autosizey ? \" overlap-parent-chooses-height\" : \"\")}>{cc}</div>\r\n                    })}\r\n            </div>\r\n        </>); }\r\n}\r\n\r\n// private\r\ninterface OwnProps {\r\n    children: ReactChild[] | ReactChild;\r\n    // sizefollows: \"parent\" | \"child\";\r\n    autosizex?: boolean;\r\n    autosizey?: boolean;\r\n    style?: CSSProperties;\r\n    // propsRequestedFromHtmlAsAttributes: string;\r\n}\r\n// private\r\ninterface StateProps {\r\n    // propsFromReduxStateOrOtherKindOfStateManagement: boolean; // flux or custom things too, unrelated to this.state of react.\r\n}\r\n\r\n// private\r\ninterface DispatchProps {\r\n    // propsFromReduxActions: typeof funzioneTriggeraAzioneDaImportare;\r\n}\r\n\r\n\r\n// private\r\ntype AllProps = OwnProps & StateProps & DispatchProps;\r\n\r\n////// mapper func\r\n/*\r\nfunction mapStateToProps(state: IStore, ownProps: OwnProps): StateProps {\r\n    const ret: StateProps = {} as any;\r\n    /// to fill\r\n    return ret; }\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<any>): DispatchProps {\r\n    const ret: DispatchProps = {} as any;\r\n    /// to fill\r\n    return ret; }\r\n*/\r\n\r\n(Overlap as React.ComponentClass).defaultProps = {\r\n  autosizex: true,\r\n  autosizey: true,\r\n  style: undefined,\r\n  children: [],\r\n} as OwnProps; // todo: se esporto con connect fose devo farlo al risultato della connect\r\nexport default Overlap;\r\n/*connect<StateProps, DispatchProps, OwnProps, IStore>(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Overlap);*/\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAkBC,aAAa,QAA8B,OAAO;AAChF;AACA;AACA,OAAO,gBAAgB;;AAEvB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAIA,OAAO,MAAMC,OAAO,SAASL,aAAa,CAAqB;EAC3DM,MAAMA,CAAA,EAAc;IAChBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAACC,KAAK,CAACC,QAAQ,CAAC;IACnD,IAAI,CAAC,IAAI,CAACD,KAAK,CAACC,QAAQ,IAAI,CAACC,KAAK,CAACC,OAAO,CAAC,IAAI,CAACH,KAAK,CAACC,QAAQ,CAAC,EAAE,OAAO,IAAI,CAACD,KAAK,CAACC,QAAQ;IAC3F,MAAMG,SAAS,GAAG,IAAI,CAACJ,KAAK,CAACC,QAAQ,CAAC,CAAC;IACvC,oBAAQR,OAAA,CAAAE,SAAA;MAAAM,QAAA,eAEJR,OAAA;QAAKY,SAAS,EAAE,gBAAgB,IAAI,IAAI,CAACL,KAAK,CAACM,SAAS,GAAG,8BAA8B,GAAG,EAAE,CAAC,IAAI,IAAI,CAACN,KAAK,CAACM,SAAS,GAAG,+BAA+B,GAAG,EAAE,CAAE;QAACC,KAAK,EAAE;UAAC,GAAG,IAAI,CAACP,KAAK,CAACO;QAAK,CAAE;QAAAN,QAAA,EACzLX,KAAK,CAACkB,QAAQ,CAACC,GAAG,CAACL,SAAS,EAAEM,EAAE,IAAI;UAC7B,oBAAOjB,OAAA;YAAKY,SAAS,EAAE,uBAAuB,IAAI,CAAC,IAAI,CAACL,KAAK,CAACM,SAAS,GAAG,+BAA+B,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAACN,KAAK,CAACW,SAAS,GAAG,gCAAgC,GAAG,EAAE,CAAE;YAAAV,QAAA,EAAES;UAAE;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QACjM,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL;IAAC,gBACR,CAAC;EAAG;AACd;;AAEA;;AASA;;AAKA;;AAMA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAECnB,OAAO,CAA0BoB,YAAY,GAAG;EAC/CV,SAAS,EAAE,IAAI;EACfK,SAAS,EAAE,IAAI;EACfJ,KAAK,EAAEU,SAAS;EAChBhB,QAAQ,EAAE;AACZ,CAAa,CAAC,CAAC;AACf,eAAeL,OAAO;AACtB;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module"}