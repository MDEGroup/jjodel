{"ast":null,"code":"import _slicedToArray from \"C:/d/Programming/web/jodel-mde/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"C:/d/Programming/web/jodel-mde/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:/d/Programming/web/jodel-mde/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/d/Programming/web/jodel-mde/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/d/Programming/web/jodel-mde/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/d/Programming/web/jodel-mde/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport debounce from 'lodash/debounce';\nimport { defaultGroup, DockContextProvider, placeHolderGroup, placeHolderStyle } from \"./DockData\";\nimport { DockBox } from \"./DockBox\";\nimport { FloatBox } from \"./FloatBox\";\nimport { DockPanel } from \"./DockPanel\";\nimport * as Algorithm from \"./Algorithm\";\nimport * as Serializer from \"./Serializer\";\nimport * as DragManager from \"./dragdrop/DragManager\";\nimport { MaxBox } from \"./MaxBox\";\nimport { WindowBox } from \"./WindowBox\";\nvar DockPortalManager = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(DockPortalManager, _React$PureComponent);\n  var _super = _createSuper(DockPortalManager);\n  function DockPortalManager() {\n    var _this;\n    _classCallCheck(this, DockPortalManager);\n    _this = _super.apply(this, arguments);\n    /** @ignore */\n    _this._caches = new Map();\n    _this.destroyRemovedPane = function () {\n      _this._pendingDestroy = null;\n      var cacheRemoved = false;\n      var _iterator = _createForOfIteratorHelper(_this._caches),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            id = _step$value[0],\n            cache = _step$value[1];\n          if (cache.owner == null) {\n            _this._caches.delete(id);\n            cacheRemoved = true;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (cacheRemoved) {\n        _this.forceUpdate();\n      }\n    };\n    return _this;\n  }\n  /** @ignore */\n  _createClass(DockPortalManager, [{\n    key: \"getTabCache\",\n    value: function getTabCache(id, owner) {\n      var cache = this._caches.get(id);\n      if (!cache) {\n        var div = document.createElement('div');\n        div.className = 'dock-pane-cache';\n        cache = {\n          div: div,\n          id: id,\n          owner: owner\n        };\n        this._caches.set(id, cache);\n      } else {\n        cache.owner = owner;\n      }\n      return cache;\n    }\n    /** @ignore */\n  }, {\n    key: \"removeTabCache\",\n    value: function removeTabCache(id, owner) {\n      var cache = this._caches.get(id);\n      if (cache && cache.owner === owner) {\n        cache.owner = null;\n        if (!this._pendingDestroy) {\n          // it could be reused by another component, so let's wait\n          this._pendingDestroy = setTimeout(this.destroyRemovedPane, 1);\n        }\n      }\n    }\n    /** @ignore */\n  }, {\n    key: \"updateTabCache\",\n    value: function updateTabCache(id, children) {\n      var cache = this._caches.get(id);\n      if (cache) {\n        cache.portal = ReactDOM.createPortal(children, cache.div, cache.id);\n        this.forceUpdate();\n      }\n    }\n  }]);\n  return DockPortalManager;\n}(React.PureComponent);\nexport var DockLayout = /*#__PURE__*/function (_DockPortalManager) {\n  _inherits(DockLayout, _DockPortalManager);\n  var _super2 = _createSuper(DockLayout);\n  function DockLayout(props) {\n    var _this2;\n    _classCallCheck(this, DockLayout);\n    _this2 = _super2.call(this, props);\n    /** @ignore */\n    _this2.getRef = function (r) {\n      _this2._ref = r;\n    };\n    /** @ignore */\n    _this2.onDragStateChange = function (draggingScope) {\n      if (draggingScope == null) {\n        DockPanel.droppingPanel = null;\n        if (_this2.state.dropRect) {\n          _this2.setState({\n            dropRect: null\n          });\n        }\n      }\n    };\n    _this2._onWindowResize = debounce(function () {\n      var layout = _this2.getLayout();\n      if (_this2._ref) {\n        var newLayout = Algorithm.fixFloatPanelPos(layout, _this2._ref.offsetWidth, _this2._ref.offsetHeight);\n        if (layout !== newLayout) {\n          newLayout = Algorithm.fixLayoutData(newLayout); // panel parent might need a fix\n          _this2.changeLayout(newLayout, null, 'move');\n        }\n      }\n    }, 200);\n    var layout = props.layout,\n      defaultLayout = props.defaultLayout,\n      loadTab = props.loadTab;\n    var preparedLayout;\n    if (defaultLayout) {\n      preparedLayout = _this2.prepareInitData(props.defaultLayout);\n    } else if (!loadTab) {\n      throw new Error('DockLayout.loadTab and DockLayout.defaultLayout should not both be undefined.');\n    }\n    if (layout) {\n      // controlled layout\n      _this2.state = {\n        layout: DockLayout.loadLayoutData(layout, props),\n        dropRect: null\n      };\n    } else {\n      _this2.state = {\n        layout: preparedLayout,\n        dropRect: null\n      };\n    }\n    DragManager.addDragStateListener(_this2.onDragStateChange);\n    window.addEventListener('resize', _this2._onWindowResize);\n    return _this2;\n  }\n  /** @ignore */\n  _createClass(DockLayout, [{\n    key: \"getRootElement\",\n    value: function getRootElement() {\n      return this._ref;\n    }\n    /** @ignore */\n  }, {\n    key: \"prepareInitData\",\n    value: function prepareInitData(data) {\n      var layout = Object.assign({}, data);\n      Algorithm.fixLayoutData(layout, this.props.loadTab);\n      return layout;\n    }\n    /** @ignore */\n  }, {\n    key: \"getDockId\",\n    value: function getDockId() {\n      return this.props.dockId || this;\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"getGroup\",\n    value: function getGroup(name) {\n      if (name) {\n        var groups = this.props.groups;\n        if (groups && name in groups) {\n          return groups[name];\n        }\n        if (name === placeHolderStyle) {\n          return placeHolderGroup;\n        }\n      }\n      return defaultGroup;\n    }\n    /**\n     * @inheritDoc\n     * @param source @inheritDoc\n     * @param target @inheritDoc\n     * @param direction @inheritDoc\n     */\n  }, {\n    key: \"dockMove\",\n    value: function dockMove(source, target, direction) {\n      var layout = this.getLayout();\n      if (direction === 'maximize') {\n        layout = Algorithm.maximize(layout, source);\n        this.panelToFocus = source.id;\n      } else if (direction === 'front') {\n        layout = Algorithm.moveToFront(layout, source);\n      } else {\n        layout = Algorithm.removeFromLayout(layout, source);\n      }\n      if (typeof target === 'string') {\n        target = this.find(target, Algorithm.Filter.All);\n      } else {\n        target = Algorithm.getUpdatedObject(target); // target might change during removeTab\n      }\n\n      if (direction === 'float') {\n        var newPanel = Algorithm.converToPanel(source);\n        newPanel.z = Algorithm.nextZIndex(null);\n        if (this.state.dropRect) {\n          layout = Algorithm.floatPanel(layout, newPanel, this.state.dropRect);\n        } else {\n          layout = Algorithm.floatPanel(layout, newPanel);\n          if (this._ref) {\n            layout = Algorithm.fixFloatPanelPos(layout, this._ref.offsetWidth, this._ref.offsetHeight);\n          }\n        }\n      } else if (direction === 'new-window') {\n        var _newPanel = Algorithm.converToPanel(source);\n        layout = Algorithm.panelToWindow(layout, _newPanel);\n      } else if (target) {\n        if ('tabs' in target) {\n          // pandel target\n          if (direction === 'middle') {\n            layout = Algorithm.addTabToPanel(layout, source, target);\n          } else {\n            var _newPanel2 = Algorithm.converToPanel(source);\n            layout = Algorithm.dockPanelToPanel(layout, _newPanel2, target, direction);\n          }\n        } else if ('children' in target) {\n          // box target\n          var _newPanel3 = Algorithm.converToPanel(source);\n          layout = Algorithm.dockPanelToBox(layout, _newPanel3, target, direction);\n        } else {\n          // tab target\n          layout = Algorithm.addNextToTab(layout, source, target, direction);\n        }\n      }\n      if (layout !== this.getLayout()) {\n        layout = Algorithm.fixLayoutData(layout);\n        var currentTabId = null;\n        if (source.hasOwnProperty('tabs')) {\n          currentTabId = source.activeId;\n        } else {\n          // when source is tab\n          currentTabId = source.id;\n        }\n        this.changeLayout(layout, currentTabId, direction);\n      }\n      this.onDragStateChange(false);\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"find\",\n    value: function find(id, filter) {\n      return Algorithm.find(this.getLayout(), id, filter);\n    }\n    /** @ignore */\n  }, {\n    key: \"getLayoutSize\",\n    value: function getLayoutSize() {\n      if (this._ref) {\n        return {\n          width: this._ref.offsetWidth,\n          height: this._ref.offsetHeight\n        };\n      }\n      return {\n        width: 0,\n        height: 0\n      };\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"updateTab\",\n    value: function updateTab(id, newTab) {\n      var makeActive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var tab = this.find(id, Algorithm.Filter.AnyTab);\n      if (tab) {\n        var panelData = tab.parent;\n        var idx = panelData.tabs.indexOf(tab);\n        if (idx >= 0) {\n          var loadTab = this.props.loadTab;\n          var layout = this.getLayout();\n          var activeId = panelData.activeId;\n          if (newTab) {\n            if (loadTab && !('content' in newTab && 'title' in newTab)) {\n              newTab = loadTab(newTab);\n            }\n            layout = Algorithm.removeFromLayout(layout, tab); // remove old tab\n            panelData = Algorithm.getUpdatedObject(panelData); // panelData might change during removeTab\n            layout = Algorithm.addTabToPanel(layout, newTab, panelData, idx); // add new tab\n            panelData = Algorithm.getUpdatedObject(panelData); // panelData might change during addTabToPanel\n          }\n\n          if (!makeActive) {\n            panelData.activeId = activeId;\n            this.panelToFocus = panelData.id;\n          }\n          layout = Algorithm.fixLayoutData(layout);\n          this.changeLayout(layout, newTab.id, 'update');\n          return true;\n        }\n      }\n      return false;\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"navigateToPanel\",\n    value: function navigateToPanel(fromElement, direction) {\n      if (!direction) {\n        if (!fromElement) {\n          fromElement = this._ref.querySelector('.dock-tab-active>.dock-tab-btn');\n        }\n        fromElement.focus();\n        return;\n      }\n      var targetTab;\n      // use panel rect when move left/right, and use tabbar rect for up/down\n      var selector = direction === 'ArrowUp' || direction === 'ArrowDown' ? '.dock>.dock-bar' : '.dock-box>.dock-panel';\n      var panels = Array.from(this._ref.querySelectorAll(selector));\n      var currentPanel = panels.find(function (panel) {\n        return panel.contains(fromElement);\n      });\n      var currentRect = currentPanel.getBoundingClientRect();\n      var matches = [];\n      for (var _i = 0, _panels = panels; _i < _panels.length; _i++) {\n        var panel = _panels[_i];\n        if (panel !== currentPanel) {\n          var rect = panel.getBoundingClientRect();\n          var distance = Algorithm.findNearestPanel(currentRect, rect, direction);\n          if (distance >= 0) {\n            matches.push({\n              panel: panel,\n              rect: rect,\n              distance: distance\n            });\n          }\n        }\n      }\n      matches.sort(function (a, b) {\n        return a.distance - b.distance;\n      });\n      for (var _i2 = 0, _matches = matches; _i2 < _matches.length; _i2++) {\n        var match = _matches[_i2];\n        targetTab = match.panel.querySelector('.dock-tab-active>.dock-tab-btn');\n        if (targetTab) {\n          break;\n        }\n      }\n      if (targetTab) {\n        targetTab.focus();\n      }\n    }\n    /** @ignore */\n  }, {\n    key: \"useEdgeDrop\",\n    value: function useEdgeDrop() {\n      return this.props.dropMode === 'edge';\n    }\n    /** @ignore */\n  }, {\n    key: \"setDropRect\",\n    value: function setDropRect(element, direction, source, event) {\n      var panelSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [300, 300];\n      var dropRect = this.state.dropRect;\n      if (dropRect) {\n        if (direction === 'remove') {\n          if (dropRect.source === source) {\n            this.setState({\n              dropRect: null\n            });\n          }\n          return;\n        } else if (dropRect.element === element && dropRect.direction === direction && direction !== 'float') {\n          // skip duplicated update except for float dragging\n          return;\n        }\n      }\n      if (!element) {\n        this.setState({\n          dropRect: null\n        });\n        return;\n      }\n      var layoutRect = this._ref.getBoundingClientRect();\n      var scaleX = this._ref.offsetWidth / layoutRect.width;\n      var scaleY = this._ref.offsetHeight / layoutRect.height;\n      var elemRect = element.getBoundingClientRect();\n      var left = (elemRect.left - layoutRect.left) * scaleX;\n      var top = (elemRect.top - layoutRect.top) * scaleY;\n      var width = elemRect.width * scaleX;\n      var height = elemRect.height * scaleY;\n      var ratio = 0.5;\n      if (element.classList.contains('dock-box')) {\n        ratio = 0.3;\n      }\n      switch (direction) {\n        case 'float':\n          {\n            var x = (event.clientX - layoutRect.left) * scaleX;\n            var y = (event.clientY - layoutRect.top) * scaleY;\n            top = y - 15;\n            width = panelSize[0];\n            height = panelSize[1];\n            left = x - (width >> 1);\n            break;\n          }\n        case 'right':\n          left += width * (1 - ratio);\n        case 'left':\n          // tslint:disable-line no-switch-case-fall-through\n          width *= ratio;\n          break;\n        case 'bottom':\n          top += height * (1 - ratio);\n        case 'top':\n          // tslint:disable-line no-switch-case-fall-through\n          height *= ratio;\n          break;\n        case 'after-tab':\n          left += width - 15;\n          width = 30;\n          break;\n        case 'before-tab':\n          left -= 15;\n          width = 30;\n          break;\n      }\n      this.setState({\n        dropRect: {\n          left: left,\n          top: top,\n          width: width,\n          height: height,\n          element: element,\n          source: source,\n          direction: direction\n        }\n      });\n    }\n    /** @ignore */\n  }, {\n    key: \"render\",\n    value: function render() {\n      // clear tempLayout\n      this.tempLayout = null;\n      var _this$props = this.props,\n        style = _this$props.style,\n        maximizeTo = _this$props.maximizeTo;\n      var _this$state = this.state,\n        layout = _this$state.layout,\n        dropRect = _this$state.dropRect;\n      var dropRectStyle;\n      if (dropRect) {\n        var element = dropRect.element,\n          direction = dropRect.direction,\n          rect = __rest(dropRect, [\"element\", \"direction\"]);\n        dropRectStyle = Object.assign(Object.assign({}, rect), {\n          display: 'block'\n        });\n        if (direction === 'float') {\n          dropRectStyle.transition = 'none';\n        }\n      }\n      var maximize;\n      // if (layout.maxbox && layout.maxbox.children.length === 1) {\n      if (maximizeTo) {\n        if (typeof maximizeTo === 'string') {\n          maximizeTo = document.getElementById(maximizeTo);\n        }\n        maximize = ReactDOM.createPortal(React.createElement(MaxBox, {\n          boxData: layout.maxbox\n        }), maximizeTo);\n      } else {\n        maximize = React.createElement(MaxBox, {\n          boxData: layout.maxbox\n        });\n      }\n      // }\n      var portals = [];\n      var _iterator2 = _createForOfIteratorHelper(this._caches),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n            key = _step2$value[0],\n            cache = _step2$value[1];\n          if (cache.portal) {\n            portals.push(cache.portal);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return React.createElement(\"div\", {\n        ref: this.getRef,\n        className: \"dock-layout\",\n        style: style\n      }, React.createElement(DockContextProvider, {\n        value: this\n      }, React.createElement(DockBox, {\n        size: 1,\n        boxData: layout.dockbox\n      }), React.createElement(FloatBox, {\n        boxData: layout.floatbox\n      }), React.createElement(WindowBox, {\n        boxData: layout.windowbox\n      }), maximize, portals), React.createElement(\"div\", {\n        className: \"dock-drop-indicator\",\n        style: dropRectStyle\n      }));\n    }\n    /** @ignore\n     * move focus to panelToFocus\n     */\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      var _a;\n      if (this.panelToFocus) {\n        var panel = this._ref.querySelector(\".dock-panel[data-dockid=\\\"\".concat(this.panelToFocus, \"\\\"]\"));\n        if (panel && !panel.contains(this._ref.ownerDocument.activeElement)) {\n          (_a = panel.querySelector('.dock-bar')) === null || _a === void 0 ? void 0 : _a.focus();\n        }\n        this.panelToFocus = null;\n      }\n    }\n    /** @ignore */\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this._onWindowResize);\n      DragManager.removeDragStateListener(this.onDragStateChange);\n      this._onWindowResize.cancel();\n    }\n  }, {\n    key: \"setLayout\",\n    value: function setLayout(layout) {\n      this.tempLayout = layout;\n      this.setState({\n        layout: layout\n      });\n    }\n  }, {\n    key: \"getLayout\",\n    value: function getLayout() {\n      return this.tempLayout || this.state.layout;\n    }\n    /** @ignore\n     * change layout\n     */\n  }, {\n    key: \"changeLayout\",\n    value: function changeLayout(layoutData, currentTabId, direction) {\n      var silent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var _this$props2 = this.props,\n        layout = _this$props2.layout,\n        onLayoutChange = _this$props2.onLayoutChange;\n      var savedLayout;\n      if (onLayoutChange) {\n        savedLayout = Serializer.saveLayoutData(layoutData, this.props.saveTab, this.props.afterPanelSaved);\n        layoutData.loadedFrom = savedLayout;\n        onLayoutChange(savedLayout, currentTabId, direction);\n        if (layout) {\n          // if layout prop is defined, we need to force an update to make sure it's either updated or reverted back\n          this.forceUpdate();\n        }\n      }\n      if (!layout && !silent) {\n        // uncontrolled layout when Props.layout is not defined\n        this.setLayout(layoutData);\n      }\n    }\n    /** @ignore\n     * some layout change were handled by component silently\n     * but they should still call this function to trigger onLayoutChange\n     */\n  }, {\n    key: \"onSilentChange\",\n    value: function onSilentChange() {\n      var currentTabId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var direction = arguments.length > 1 ? arguments[1] : undefined;\n      var onLayoutChange = this.props.onLayoutChange;\n      if (onLayoutChange) {\n        var layout = this.getLayout();\n        this.changeLayout(layout, currentTabId, direction, true);\n      }\n    }\n    // public api\n  }, {\n    key: \"saveLayout\",\n    value: function saveLayout() {\n      return Serializer.saveLayoutData(this.getLayout(), this.props.saveTab, this.props.afterPanelSaved);\n    }\n    /**\n     * load layout\n     * calling this api won't trigger the [[LayoutProps.onLayoutChange]] callback\n     */\n  }, {\n    key: \"loadLayout\",\n    value: function loadLayout(savedLayout) {\n      this.setLayout(DockLayout.loadLayoutData(savedLayout, this.props, this._ref.offsetWidth, this._ref.offsetHeight));\n    }\n    /** @ignore */\n  }], [{\n    key: \"loadLayoutData\",\n    value: function loadLayoutData(savedLayout, props) {\n      var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var defaultLayout = props.defaultLayout,\n        loadTab = props.loadTab,\n        afterPanelLoaded = props.afterPanelLoaded;\n      var layout = Serializer.loadLayoutData(savedLayout, defaultLayout, loadTab, afterPanelLoaded);\n      layout = Algorithm.fixFloatPanelPos(layout, width, height);\n      layout = Algorithm.fixLayoutData(layout);\n      layout.loadedFrom = savedLayout;\n      return layout;\n    }\n  }, {\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var layoutToLoad = props.layout;\n      var currentLayout = state.layout;\n      if (layoutToLoad && layoutToLoad !== currentLayout.loadedFrom) {\n        // auto reload on layout prop change\n        return {\n          layout: DockLayout.loadLayoutData(layoutToLoad, props)\n        };\n      }\n      return null;\n    }\n  }]);\n  return DockLayout;\n}(DockPortalManager);","map":{"version":3,"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","React","ReactDOM","debounce","defaultGroup","DockContextProvider","placeHolderGroup","placeHolderStyle","DockBox","FloatBox","DockPanel","Algorithm","Serializer","DragManager","MaxBox","WindowBox","DockPortalManager","_React$PureComponent","_inherits","_super","_createSuper","_this","_classCallCheck","apply","arguments","_caches","Map","destroyRemovedPane","_pendingDestroy","cacheRemoved","_iterator","_createForOfIteratorHelper","_step","n","done","_step$value","_slicedToArray","value","id","cache","owner","delete","err","f","forceUpdate","_createClass","key","getTabCache","get","div","document","createElement","className","set","removeTabCache","setTimeout","updateTabCache","children","portal","createPortal","PureComponent","DockLayout","_DockPortalManager","_super2","props","_this2","getRef","r","_ref","onDragStateChange","draggingScope","droppingPanel","state","dropRect","setState","_onWindowResize","layout","getLayout","newLayout","fixFloatPanelPos","offsetWidth","offsetHeight","fixLayoutData","changeLayout","defaultLayout","loadTab","preparedLayout","prepareInitData","Error","loadLayoutData","addDragStateListener","window","addEventListener","getRootElement","data","assign","getDockId","dockId","getGroup","name","groups","dockMove","source","target","direction","maximize","panelToFocus","moveToFront","removeFromLayout","find","Filter","All","getUpdatedObject","newPanel","converToPanel","z","nextZIndex","floatPanel","panelToWindow","addTabToPanel","dockPanelToPanel","dockPanelToBox","addNextToTab","currentTabId","activeId","filter","getLayoutSize","width","height","updateTab","newTab","makeActive","undefined","tab","AnyTab","panelData","parent","idx","tabs","navigateToPanel","fromElement","querySelector","focus","targetTab","selector","panels","Array","from","querySelectorAll","currentPanel","panel","contains","currentRect","getBoundingClientRect","matches","_i","_panels","rect","distance","findNearestPanel","push","sort","a","b","_i2","_matches","match","useEdgeDrop","dropMode","setDropRect","element","event","panelSize","layoutRect","scaleX","scaleY","elemRect","left","top","ratio","classList","x","clientX","y","clientY","render","tempLayout","_this$props","style","maximizeTo","_this$state","dropRectStyle","display","transition","getElementById","boxData","maxbox","portals","_iterator2","_step2","_step2$value","ref","size","dockbox","floatbox","windowbox","componentDidUpdate","prevProps","prevState","snapshot","_a","concat","ownerDocument","activeElement","componentWillUnmount","removeEventListener","removeDragStateListener","cancel","setLayout","layoutData","silent","_this$props2","onLayoutChange","savedLayout","saveLayoutData","saveTab","afterPanelSaved","loadedFrom","onSilentChange","saveLayout","loadLayout","afterPanelLoaded","getDerivedStateFromProps","layoutToLoad","currentLayout"],"sources":["C:/d/Programming/web/jodel-mde/node_modules/rc-dock/es/DockLayout.js"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport debounce from 'lodash/debounce';\nimport { defaultGroup, DockContextProvider, placeHolderGroup, placeHolderStyle } from \"./DockData\";\nimport { DockBox } from \"./DockBox\";\nimport { FloatBox } from \"./FloatBox\";\nimport { DockPanel } from \"./DockPanel\";\nimport * as Algorithm from \"./Algorithm\";\nimport * as Serializer from \"./Serializer\";\nimport * as DragManager from \"./dragdrop/DragManager\";\nimport { MaxBox } from \"./MaxBox\";\nimport { WindowBox } from \"./WindowBox\";\nclass DockPortalManager extends React.PureComponent {\n    constructor() {\n        super(...arguments);\n        /** @ignore */\n        this._caches = new Map();\n        this.destroyRemovedPane = () => {\n            this._pendingDestroy = null;\n            let cacheRemoved = false;\n            for (let [id, cache] of this._caches) {\n                if (cache.owner == null) {\n                    this._caches.delete(id);\n                    cacheRemoved = true;\n                }\n            }\n            if (cacheRemoved) {\n                this.forceUpdate();\n            }\n        };\n    }\n    /** @ignore */\n    getTabCache(id, owner) {\n        let cache = this._caches.get(id);\n        if (!cache) {\n            let div = document.createElement('div');\n            div.className = 'dock-pane-cache';\n            cache = { div, id, owner };\n            this._caches.set(id, cache);\n        }\n        else {\n            cache.owner = owner;\n        }\n        return cache;\n    }\n    /** @ignore */\n    removeTabCache(id, owner) {\n        let cache = this._caches.get(id);\n        if (cache && cache.owner === owner) {\n            cache.owner = null;\n            if (!this._pendingDestroy) {\n                // it could be reused by another component, so let's wait\n                this._pendingDestroy = setTimeout(this.destroyRemovedPane, 1);\n            }\n        }\n    }\n    /** @ignore */\n    updateTabCache(id, children) {\n        let cache = this._caches.get(id);\n        if (cache) {\n            cache.portal = ReactDOM.createPortal(children, cache.div, cache.id);\n            this.forceUpdate();\n        }\n    }\n}\nexport class DockLayout extends DockPortalManager {\n    constructor(props) {\n        super(props);\n        /** @ignore */\n        this.getRef = (r) => {\n            this._ref = r;\n        };\n        /** @ignore */\n        this.onDragStateChange = (draggingScope) => {\n            if (draggingScope == null) {\n                DockPanel.droppingPanel = null;\n                if (this.state.dropRect) {\n                    this.setState({ dropRect: null });\n                }\n            }\n        };\n        this._onWindowResize = debounce(() => {\n            let layout = this.getLayout();\n            if (this._ref) {\n                let newLayout = Algorithm.fixFloatPanelPos(layout, this._ref.offsetWidth, this._ref.offsetHeight);\n                if (layout !== newLayout) {\n                    newLayout = Algorithm.fixLayoutData(newLayout); // panel parent might need a fix\n                    this.changeLayout(newLayout, null, 'move');\n                }\n            }\n        }, 200);\n        let { layout, defaultLayout, loadTab } = props;\n        let preparedLayout;\n        if (defaultLayout) {\n            preparedLayout = this.prepareInitData(props.defaultLayout);\n        }\n        else if (!loadTab) {\n            throw new Error('DockLayout.loadTab and DockLayout.defaultLayout should not both be undefined.');\n        }\n        if (layout) {\n            // controlled layout\n            this.state = {\n                layout: DockLayout.loadLayoutData(layout, props),\n                dropRect: null,\n            };\n        }\n        else {\n            this.state = {\n                layout: preparedLayout,\n                dropRect: null,\n            };\n        }\n        DragManager.addDragStateListener(this.onDragStateChange);\n        window.addEventListener('resize', this._onWindowResize);\n    }\n    /** @ignore */\n    getRootElement() {\n        return this._ref;\n    }\n    /** @ignore */\n    prepareInitData(data) {\n        let layout = Object.assign({}, data);\n        Algorithm.fixLayoutData(layout, this.props.loadTab);\n        return layout;\n    }\n    /** @ignore */\n    getDockId() {\n        return this.props.dockId || this;\n    }\n    /** @inheritDoc */\n    getGroup(name) {\n        if (name) {\n            let { groups } = this.props;\n            if (groups && name in groups) {\n                return groups[name];\n            }\n            if (name === placeHolderStyle) {\n                return placeHolderGroup;\n            }\n        }\n        return defaultGroup;\n    }\n    /**\n     * @inheritDoc\n     * @param source @inheritDoc\n     * @param target @inheritDoc\n     * @param direction @inheritDoc\n     */\n    dockMove(source, target, direction) {\n        let layout = this.getLayout();\n        if (direction === 'maximize') {\n            layout = Algorithm.maximize(layout, source);\n            this.panelToFocus = source.id;\n        }\n        else if (direction === 'front') {\n            layout = Algorithm.moveToFront(layout, source);\n        }\n        else {\n            layout = Algorithm.removeFromLayout(layout, source);\n        }\n        if (typeof target === 'string') {\n            target = this.find(target, Algorithm.Filter.All);\n        }\n        else {\n            target = Algorithm.getUpdatedObject(target); // target might change during removeTab\n        }\n        if (direction === 'float') {\n            let newPanel = Algorithm.converToPanel(source);\n            newPanel.z = Algorithm.nextZIndex(null);\n            if (this.state.dropRect) {\n                layout = Algorithm.floatPanel(layout, newPanel, this.state.dropRect);\n            }\n            else {\n                layout = Algorithm.floatPanel(layout, newPanel);\n                if (this._ref) {\n                    layout = Algorithm.fixFloatPanelPos(layout, this._ref.offsetWidth, this._ref.offsetHeight);\n                }\n            }\n        }\n        else if (direction === 'new-window') {\n            let newPanel = Algorithm.converToPanel(source);\n            layout = Algorithm.panelToWindow(layout, newPanel);\n        }\n        else if (target) {\n            if ('tabs' in target) {\n                // pandel target\n                if (direction === 'middle') {\n                    layout = Algorithm.addTabToPanel(layout, source, target);\n                }\n                else {\n                    let newPanel = Algorithm.converToPanel(source);\n                    layout = Algorithm.dockPanelToPanel(layout, newPanel, target, direction);\n                }\n            }\n            else if ('children' in target) {\n                // box target\n                let newPanel = Algorithm.converToPanel(source);\n                layout = Algorithm.dockPanelToBox(layout, newPanel, target, direction);\n            }\n            else {\n                // tab target\n                layout = Algorithm.addNextToTab(layout, source, target, direction);\n            }\n        }\n        if (layout !== this.getLayout()) {\n            layout = Algorithm.fixLayoutData(layout);\n            let currentTabId = null;\n            if (source.hasOwnProperty('tabs')) {\n                currentTabId = source.activeId;\n            }\n            else {\n                // when source is tab\n                currentTabId = source.id;\n            }\n            this.changeLayout(layout, currentTabId, direction);\n        }\n        this.onDragStateChange(false);\n    }\n    /** @inheritDoc */\n    find(id, filter) {\n        return Algorithm.find(this.getLayout(), id, filter);\n    }\n    /** @ignore */\n    getLayoutSize() {\n        if (this._ref) {\n            return { width: this._ref.offsetWidth, height: this._ref.offsetHeight };\n        }\n        return { width: 0, height: 0 };\n    }\n    /** @inheritDoc */\n    updateTab(id, newTab, makeActive = true) {\n        let tab = this.find(id, Algorithm.Filter.AnyTab);\n        if (tab) {\n            let panelData = tab.parent;\n            let idx = panelData.tabs.indexOf(tab);\n            if (idx >= 0) {\n                let { loadTab } = this.props;\n                let layout = this.getLayout();\n                let activeId = panelData.activeId;\n                if (newTab) {\n                    if (loadTab && !('content' in newTab && 'title' in newTab)) {\n                        newTab = loadTab(newTab);\n                    }\n                    layout = Algorithm.removeFromLayout(layout, tab); // remove old tab\n                    panelData = Algorithm.getUpdatedObject(panelData); // panelData might change during removeTab\n                    layout = Algorithm.addTabToPanel(layout, newTab, panelData, idx); // add new tab\n                    panelData = Algorithm.getUpdatedObject(panelData); // panelData might change during addTabToPanel\n                }\n                if (!makeActive) {\n                    panelData.activeId = activeId;\n                    this.panelToFocus = panelData.id;\n                }\n                layout = Algorithm.fixLayoutData(layout);\n                this.changeLayout(layout, newTab.id, 'update');\n                return true;\n            }\n        }\n        return false;\n    }\n    /** @inheritDoc */\n    navigateToPanel(fromElement, direction) {\n        if (!direction) {\n            if (!fromElement) {\n                fromElement = this._ref.querySelector('.dock-tab-active>.dock-tab-btn');\n            }\n            fromElement.focus();\n            return;\n        }\n        let targetTab;\n        // use panel rect when move left/right, and use tabbar rect for up/down\n        let selector = (direction === 'ArrowUp' || direction === 'ArrowDown') ?\n            '.dock>.dock-bar' : '.dock-box>.dock-panel';\n        let panels = Array.from(this._ref.querySelectorAll(selector));\n        let currentPanel = panels.find((panel) => panel.contains(fromElement));\n        let currentRect = currentPanel.getBoundingClientRect();\n        let matches = [];\n        for (let panel of panels) {\n            if (panel !== currentPanel) {\n                let rect = panel.getBoundingClientRect();\n                let distance = Algorithm.findNearestPanel(currentRect, rect, direction);\n                if (distance >= 0) {\n                    matches.push({ panel, rect, distance });\n                }\n            }\n        }\n        matches.sort((a, b) => a.distance - b.distance);\n        for (let match of matches) {\n            targetTab = match.panel.querySelector('.dock-tab-active>.dock-tab-btn');\n            if (targetTab) {\n                break;\n            }\n        }\n        if (targetTab) {\n            targetTab.focus();\n        }\n    }\n    /** @ignore */\n    useEdgeDrop() {\n        return this.props.dropMode === 'edge';\n    }\n    /** @ignore */\n    setDropRect(element, direction, source, event, panelSize = [300, 300]) {\n        let { dropRect } = this.state;\n        if (dropRect) {\n            if (direction === 'remove') {\n                if (dropRect.source === source) {\n                    this.setState({ dropRect: null });\n                }\n                return;\n            }\n            else if (dropRect.element === element && dropRect.direction === direction && direction !== 'float') {\n                // skip duplicated update except for float dragging\n                return;\n            }\n        }\n        if (!element) {\n            this.setState({ dropRect: null });\n            return;\n        }\n        let layoutRect = this._ref.getBoundingClientRect();\n        let scaleX = this._ref.offsetWidth / layoutRect.width;\n        let scaleY = this._ref.offsetHeight / layoutRect.height;\n        let elemRect = element.getBoundingClientRect();\n        let left = (elemRect.left - layoutRect.left) * scaleX;\n        let top = (elemRect.top - layoutRect.top) * scaleY;\n        let width = elemRect.width * scaleX;\n        let height = elemRect.height * scaleY;\n        let ratio = 0.5;\n        if (element.classList.contains('dock-box')) {\n            ratio = 0.3;\n        }\n        switch (direction) {\n            case 'float': {\n                let x = (event.clientX - layoutRect.left) * scaleX;\n                let y = (event.clientY - layoutRect.top) * scaleY;\n                top = y - 15;\n                width = panelSize[0];\n                height = panelSize[1];\n                left = x - (width >> 1);\n                break;\n            }\n            case 'right':\n                left += width * (1 - ratio);\n            case 'left': // tslint:disable-line no-switch-case-fall-through\n                width *= ratio;\n                break;\n            case 'bottom':\n                top += height * (1 - ratio);\n            case 'top': // tslint:disable-line no-switch-case-fall-through\n                height *= ratio;\n                break;\n            case 'after-tab':\n                left += width - 15;\n                width = 30;\n                break;\n            case 'before-tab':\n                left -= 15;\n                width = 30;\n                break;\n        }\n        this.setState({ dropRect: { left, top, width, height, element, source, direction } });\n    }\n    /** @ignore */\n    render() {\n        // clear tempLayout\n        this.tempLayout = null;\n        let { style, maximizeTo } = this.props;\n        let { layout, dropRect } = this.state;\n        let dropRectStyle;\n        if (dropRect) {\n            let { element, direction } = dropRect, rect = __rest(dropRect, [\"element\", \"direction\"]);\n            dropRectStyle = Object.assign(Object.assign({}, rect), { display: 'block' });\n            if (direction === 'float') {\n                dropRectStyle.transition = 'none';\n            }\n        }\n        let maximize;\n        // if (layout.maxbox && layout.maxbox.children.length === 1) {\n        if (maximizeTo) {\n            if (typeof maximizeTo === 'string') {\n                maximizeTo = document.getElementById(maximizeTo);\n            }\n            maximize = ReactDOM.createPortal(React.createElement(MaxBox, { boxData: layout.maxbox }), maximizeTo);\n        }\n        else {\n            maximize = React.createElement(MaxBox, { boxData: layout.maxbox });\n        }\n        // }\n        let portals = [];\n        for (let [key, cache] of this._caches) {\n            if (cache.portal) {\n                portals.push(cache.portal);\n            }\n        }\n        return (React.createElement(\"div\", { ref: this.getRef, className: \"dock-layout\", style: style },\n            React.createElement(DockContextProvider, { value: this },\n                React.createElement(DockBox, { size: 1, boxData: layout.dockbox }),\n                React.createElement(FloatBox, { boxData: layout.floatbox }),\n                React.createElement(WindowBox, { boxData: layout.windowbox }),\n                maximize,\n                portals),\n            React.createElement(\"div\", { className: \"dock-drop-indicator\", style: dropRectStyle })));\n    }\n    /** @ignore\n     * move focus to panelToFocus\n     */\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        var _a;\n        if (this.panelToFocus) {\n            let panel = this._ref.querySelector(`.dock-panel[data-dockid=\"${this.panelToFocus}\"]`);\n            if (panel && !panel.contains(this._ref.ownerDocument.activeElement)) {\n                (_a = panel.querySelector('.dock-bar')) === null || _a === void 0 ? void 0 : _a.focus();\n            }\n            this.panelToFocus = null;\n        }\n    }\n    /** @ignore */\n    componentWillUnmount() {\n        window.removeEventListener('resize', this._onWindowResize);\n        DragManager.removeDragStateListener(this.onDragStateChange);\n        this._onWindowResize.cancel();\n    }\n    setLayout(layout) {\n        this.tempLayout = layout;\n        this.setState({ layout });\n    }\n    getLayout() {\n        return this.tempLayout || this.state.layout;\n    }\n    /** @ignore\n     * change layout\n     */\n    changeLayout(layoutData, currentTabId, direction, silent = false) {\n        let { layout, onLayoutChange } = this.props;\n        let savedLayout;\n        if (onLayoutChange) {\n            savedLayout = Serializer.saveLayoutData(layoutData, this.props.saveTab, this.props.afterPanelSaved);\n            layoutData.loadedFrom = savedLayout;\n            onLayoutChange(savedLayout, currentTabId, direction);\n            if (layout) {\n                // if layout prop is defined, we need to force an update to make sure it's either updated or reverted back\n                this.forceUpdate();\n            }\n        }\n        if (!layout && !silent) {\n            // uncontrolled layout when Props.layout is not defined\n            this.setLayout(layoutData);\n        }\n    }\n    /** @ignore\n     * some layout change were handled by component silently\n     * but they should still call this function to trigger onLayoutChange\n     */\n    onSilentChange(currentTabId = null, direction) {\n        let { onLayoutChange } = this.props;\n        if (onLayoutChange) {\n            let layout = this.getLayout();\n            this.changeLayout(layout, currentTabId, direction, true);\n        }\n    }\n    // public api\n    saveLayout() {\n        return Serializer.saveLayoutData(this.getLayout(), this.props.saveTab, this.props.afterPanelSaved);\n    }\n    /**\n     * load layout\n     * calling this api won't trigger the [[LayoutProps.onLayoutChange]] callback\n     */\n    loadLayout(savedLayout) {\n        this.setLayout(DockLayout.loadLayoutData(savedLayout, this.props, this._ref.offsetWidth, this._ref.offsetHeight));\n    }\n    /** @ignore */\n    static loadLayoutData(savedLayout, props, width = 0, height = 0) {\n        let { defaultLayout, loadTab, afterPanelLoaded } = props;\n        let layout = Serializer.loadLayoutData(savedLayout, defaultLayout, loadTab, afterPanelLoaded);\n        layout = Algorithm.fixFloatPanelPos(layout, width, height);\n        layout = Algorithm.fixLayoutData(layout);\n        layout.loadedFrom = savedLayout;\n        return layout;\n    }\n    static getDerivedStateFromProps(props, state) {\n        let { layout: layoutToLoad } = props;\n        let { layout: currentLayout } = state;\n        if (layoutToLoad && layoutToLoad !== currentLayout.loadedFrom) {\n            // auto reload on layout prop change\n            return {\n                layout: DockLayout.loadLayoutData(layoutToLoad, props),\n            };\n        }\n        return null;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}