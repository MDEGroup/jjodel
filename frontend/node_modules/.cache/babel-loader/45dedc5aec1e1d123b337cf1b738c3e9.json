{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React from \"react\";\nimport * as DragManager from \"./DragManager\";\nimport { GestureState } from \"./GestureManager\";\nexport class DragDropDiv extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n    this._getRef = r => {\n      if (r === this.element) {\n        return;\n      }\n      let {\n        getRef,\n        onDragOverT\n      } = this.props;\n      if (this.element && onDragOverT) {\n        DragManager.removeHandlers(this.element);\n      }\n      this.element = r;\n      if (r) {\n        this.ownerDocument = r.ownerDocument;\n      }\n      if (getRef) {\n        getRef(r);\n      }\n      if (r && onDragOverT) {\n        DragManager.addHandlers(r, this.props);\n      }\n    };\n    this.dragType = null;\n    this.waitingMove = false;\n    this.listening = false;\n    this.gesturing = false;\n    this.onPointerDown = e => {\n      let nativeTarget = e.nativeEvent.target;\n      if (nativeTarget instanceof HTMLInputElement || nativeTarget instanceof HTMLTextAreaElement || nativeTarget.classList.contains('drag-ignore')) {\n        // ignore drag from input element\n        return;\n      }\n      let {\n        onDragStartT,\n        onGestureStartT,\n        onGestureMoveT,\n        useRightButtonDragT\n      } = this.props;\n      let event = e.nativeEvent;\n      this.cancel();\n      if (event.type === 'touchstart') {\n        // check single or double fingure touch\n        if (event.touches.length === 1) {\n          if (onDragStartT) {\n            this.onDragStart(event);\n          }\n        } else if (event.touches.length === 2) {\n          if (onGestureStartT && onGestureMoveT) {\n            this.onGestureStart(event);\n          }\n        }\n      } else if (onDragStartT) {\n        if (event.button === 2 && !useRightButtonDragT) {\n          return;\n        }\n        this.onDragStart(event);\n      }\n    };\n    this.onMouseMove = e => {\n      let {\n        onDragMoveT\n      } = this.props;\n      if (this.waitingMove) {\n        if (DragManager.isDragging()) {\n          this.onDragEnd();\n          return;\n        }\n        if (!this.checkFirstMove(e)) {\n          return;\n        }\n      } else {\n        let state = new DragManager.DragState(e, this);\n        state._onMove();\n        if (onDragMoveT) {\n          onDragMoveT(state);\n        }\n      }\n      e.preventDefault();\n    };\n    this.onTouchMove = e => {\n      let {\n        onDragMoveT\n      } = this.props;\n      if (this.waitingMove) {\n        if (DragManager.isDragging()) {\n          this.onDragEnd();\n          return;\n        }\n        if (!this.checkFirstMove(e)) {\n          return;\n        }\n      } else if (e.touches.length !== 1) {\n        this.onDragEnd();\n      } else {\n        let state = new DragManager.DragState(e, this);\n        state._onMove();\n        if (onDragMoveT) {\n          onDragMoveT(state);\n        }\n      }\n      e.preventDefault();\n    };\n    this.onDragEnd = e => {\n      let {\n        onDragEndT\n      } = this.props;\n      let state = new DragManager.DragState(e, this);\n      this.removeListeners();\n      if (!this.waitingMove) {\n        // e=null means drag is canceled\n        state._onDragEnd(e == null);\n        if (onDragEndT) {\n          onDragEndT(state);\n        }\n      }\n      this.cleanupDrag(state);\n    };\n    this.onGestureMove = e => {\n      let {\n        onGestureMoveT,\n        gestureSensitivity\n      } = this.props;\n      let state = new GestureState(e, this);\n      if (this.waitingMove) {\n        if (!(gestureSensitivity > 0)) {\n          gestureSensitivity = 10; // default sensitivity\n        }\n        if (state.moved() > gestureSensitivity) {\n          this.waitingMove = false;\n        } else {\n          return;\n        }\n      }\n      if (onGestureMoveT) {\n        onGestureMoveT(state);\n      }\n    };\n    this.onGestureEnd = e => {\n      let {\n        onGestureEndT\n      } = this.props;\n      let state = new DragManager.DragState(e, this);\n      this.removeListeners();\n      if (onGestureEndT) {\n        onGestureEndT();\n      }\n    };\n    this.onKeyDown = e => {\n      if (e.key === 'Escape') {\n        this.cancel();\n      }\n    };\n  }\n  onDragStart(event) {\n    if (DragManager.isDragging()) {\n      // same pointer event shouldn't trigger 2 drag start\n      return;\n    }\n    let state = new DragManager.DragState(event, this, true);\n    this.baseX = state.pageX;\n    this.baseY = state.pageY;\n    let baseElement = this.element.parentElement;\n    let rect = baseElement.getBoundingClientRect();\n    this.scaleX = baseElement.offsetWidth / Math.round(rect.width);\n    this.scaleY = baseElement.offsetHeight / Math.round(rect.height);\n    this.addDragListeners(event);\n    if (this.props.directDragT) {\n      this.executeFirstMove(state);\n    }\n  }\n  addDragListeners(event) {\n    let {\n      onDragStartT\n    } = this.props;\n    if (event.type === 'touchstart') {\n      this.ownerDocument.addEventListener('touchmove', this.onTouchMove);\n      this.ownerDocument.addEventListener('touchend', this.onDragEnd);\n      this.dragType = 'touch';\n    } else {\n      this.ownerDocument.addEventListener('mousemove', this.onMouseMove);\n      this.ownerDocument.addEventListener('mouseup', this.onDragEnd);\n      if (event.button === 2) {\n        this.dragType = 'right';\n      } else {\n        this.dragType = 'left';\n      }\n    }\n    this.waitingMove = true;\n    this.listening = true;\n  }\n  // return true for a valid move\n  checkFirstMove(e) {\n    let state = new DragManager.DragState(e, this, true);\n    if (!state.moved()) {\n      // not a move\n      return false;\n    }\n    return this.executeFirstMove(state);\n  }\n  executeFirstMove(state) {\n    let {\n      onDragStartT\n    } = this.props;\n    this.waitingMove = false;\n    onDragStartT(state);\n    if (!DragManager.isDragging()) {\n      this.onDragEnd();\n      return false;\n    }\n    state._onMove();\n    this.ownerDocument.addEventListener('keydown', this.onKeyDown);\n    return true;\n  }\n  addGestureListeners(event) {\n    this.ownerDocument.addEventListener('touchmove', this.onGestureMove);\n    this.ownerDocument.addEventListener('touchend', this.onGestureEnd);\n    this.ownerDocument.addEventListener('keydown', this.onKeyDown);\n    this.gesturing = true;\n    this.waitingMove = true;\n  }\n  onGestureStart(event) {\n    if (!DragManager.isDragging()) {\n      // same pointer event shouldn't trigger 2 drag start\n      return;\n    }\n    let {\n      onGestureStartT\n    } = this.props;\n    this.baseX = event.touches[0].pageX;\n    this.baseY = event.touches[0].pageY;\n    this.baseX2 = event.touches[1].pageX;\n    this.baseY2 = event.touches[1].pageY;\n    let baseElement = this.element.parentElement;\n    let rect = baseElement.getBoundingClientRect();\n    this.scaleX = baseElement.offsetWidth / Math.round(rect.width);\n    this.scaleY = baseElement.offsetHeight / Math.round(rect.height);\n    this.baseDis = Math.sqrt(Math.pow(this.baseX - this.baseX2, 2) + Math.pow(this.baseY - this.baseY2, 2));\n    this.baseAng = Math.atan2(this.baseY2 - this.baseY, this.baseX2 - this.baseX);\n    let state = new GestureState(event, this, true);\n    if (onGestureStartT(state)) {\n      this.addGestureListeners(event);\n      event.preventDefault();\n    }\n  }\n  cancel() {\n    if (this.listening) {\n      this.onDragEnd();\n    }\n    if (this.gesturing) {\n      this.onGestureEnd();\n    }\n  }\n  removeListeners() {\n    if (this.gesturing) {\n      this.ownerDocument.removeEventListener('touchmove', this.onGestureMove);\n      this.ownerDocument.removeEventListener('touchend', this.onGestureEnd);\n    } else if (this.listening) {\n      if (this.dragType === 'touch') {\n        this.ownerDocument.removeEventListener('touchmove', this.onTouchMove);\n        this.ownerDocument.removeEventListener('touchend', this.onDragEnd);\n      } else {\n        this.ownerDocument.removeEventListener('mousemove', this.onMouseMove);\n        this.ownerDocument.removeEventListener('mouseup', this.onDragEnd);\n      }\n    }\n    this.ownerDocument.removeEventListener('keydown', this.onKeyDown);\n    this.listening = false;\n    this.gesturing = false;\n  }\n  cleanupDrag(state) {\n    this.dragType = null;\n    this.waitingMove = false;\n  }\n  render() {\n    let _a = this.props,\n      {\n        getRef,\n        children,\n        className,\n        directDragT,\n        onDragStartT,\n        onDragMoveT,\n        onDragEndT,\n        onDragOverT,\n        onDragLeaveT,\n        onDropT,\n        onGestureStartT,\n        onGestureMoveT,\n        onGestureEndT,\n        useRightButtonDragT\n      } = _a,\n      others = __rest(_a, [\"getRef\", \"children\", \"className\", \"directDragT\", \"onDragStartT\", \"onDragMoveT\", \"onDragEndT\", \"onDragOverT\", \"onDragLeaveT\", \"onDropT\", \"onGestureStartT\", \"onGestureMoveT\", \"onGestureEndT\", \"useRightButtonDragT\"]);\n    let onTouchDown = this.onPointerDown;\n    let onMouseDown = this.onPointerDown;\n    if (!onDragStartT) {\n      onMouseDown = null;\n      if (!onGestureStartT) {\n        onTouchDown = null;\n      }\n    }\n    if (onDragStartT || onGestureStartT) {\n      if (className) {\n        className = `${className} drag-initiator`;\n      } else {\n        className = 'drag-initiator';\n      }\n    }\n    return React.createElement(\"div\", Object.assign({\n      ref: this._getRef,\n      className: className\n    }, others, {\n      onMouseDown: onMouseDown,\n      onTouchStart: onTouchDown\n    }), children);\n  }\n  componentDidUpdate(prevProps) {\n    let {\n      onDragOverT,\n      onDragEndT,\n      onDragLeaveT\n    } = this.props;\n    if (this.element && (prevProps.onDragOverT !== onDragOverT || prevProps.onDragLeaveT !== onDragLeaveT || prevProps.onDragEndT !== onDragEndT)) {\n      if (onDragOverT) {\n        DragManager.addHandlers(this.element, this.props);\n      } else {\n        DragManager.removeHandlers(this.element);\n      }\n    }\n  }\n  componentWillUnmount() {\n    let {\n      onDragOverT\n    } = this.props;\n    if (this.element && onDragOverT) {\n      DragManager.removeHandlers(this.element);\n    }\n    this.cancel();\n  }\n}","map":{"version":3,"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","React","DragManager","GestureState","DragDropDiv","PureComponent","constructor","arguments","_getRef","r","element","getRef","onDragOverT","props","removeHandlers","ownerDocument","addHandlers","dragType","waitingMove","listening","gesturing","onPointerDown","nativeTarget","nativeEvent","target","HTMLInputElement","HTMLTextAreaElement","classList","contains","onDragStartT","onGestureStartT","onGestureMoveT","useRightButtonDragT","event","cancel","type","touches","onDragStart","onGestureStart","button","onMouseMove","onDragMoveT","isDragging","onDragEnd","checkFirstMove","state","DragState","_onMove","preventDefault","onTouchMove","onDragEndT","removeListeners","_onDragEnd","cleanupDrag","onGestureMove","gestureSensitivity","moved","onGestureEnd","onGestureEndT","onKeyDown","key","baseX","pageX","baseY","pageY","baseElement","parentElement","rect","getBoundingClientRect","scaleX","offsetWidth","Math","round","width","scaleY","offsetHeight","height","addDragListeners","directDragT","executeFirstMove","addEventListener","addGestureListeners","baseX2","baseY2","baseDis","sqrt","pow","baseAng","atan2","removeEventListener","render","_a","children","className","onDragLeaveT","onDropT","others","onTouchDown","onMouseDown","createElement","assign","ref","onTouchStart","componentDidUpdate","prevProps","componentWillUnmount"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/frontend/node_modules/rc-dock/es/dragdrop/DragDropDiv.js"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React from \"react\";\nimport * as DragManager from \"./DragManager\";\nimport { GestureState } from \"./GestureManager\";\nexport class DragDropDiv extends React.PureComponent {\n    constructor() {\n        super(...arguments);\n        this._getRef = (r) => {\n            if (r === this.element) {\n                return;\n            }\n            let { getRef, onDragOverT } = this.props;\n            if (this.element && onDragOverT) {\n                DragManager.removeHandlers(this.element);\n            }\n            this.element = r;\n            if (r) {\n                this.ownerDocument = r.ownerDocument;\n            }\n            if (getRef) {\n                getRef(r);\n            }\n            if (r && onDragOverT) {\n                DragManager.addHandlers(r, this.props);\n            }\n        };\n        this.dragType = null;\n        this.waitingMove = false;\n        this.listening = false;\n        this.gesturing = false;\n        this.onPointerDown = (e) => {\n            let nativeTarget = e.nativeEvent.target;\n            if (nativeTarget instanceof HTMLInputElement || nativeTarget instanceof HTMLTextAreaElement || nativeTarget.classList.contains('drag-ignore')) {\n                // ignore drag from input element\n                return;\n            }\n            let { onDragStartT, onGestureStartT, onGestureMoveT, useRightButtonDragT } = this.props;\n            let event = e.nativeEvent;\n            this.cancel();\n            if (event.type === 'touchstart') {\n                // check single or double fingure touch\n                if (event.touches.length === 1) {\n                    if (onDragStartT) {\n                        this.onDragStart(event);\n                    }\n                }\n                else if (event.touches.length === 2) {\n                    if (onGestureStartT && onGestureMoveT) {\n                        this.onGestureStart(event);\n                    }\n                }\n            }\n            else if (onDragStartT) {\n                if (event.button === 2 && !useRightButtonDragT) {\n                    return;\n                }\n                this.onDragStart(event);\n            }\n        };\n        this.onMouseMove = (e) => {\n            let { onDragMoveT } = this.props;\n            if (this.waitingMove) {\n                if (DragManager.isDragging()) {\n                    this.onDragEnd();\n                    return;\n                }\n                if (!this.checkFirstMove(e)) {\n                    return;\n                }\n            }\n            else {\n                let state = new DragManager.DragState(e, this);\n                state._onMove();\n                if (onDragMoveT) {\n                    onDragMoveT(state);\n                }\n            }\n            e.preventDefault();\n        };\n        this.onTouchMove = (e) => {\n            let { onDragMoveT } = this.props;\n            if (this.waitingMove) {\n                if (DragManager.isDragging()) {\n                    this.onDragEnd();\n                    return;\n                }\n                if (!this.checkFirstMove(e)) {\n                    return;\n                }\n            }\n            else if (e.touches.length !== 1) {\n                this.onDragEnd();\n            }\n            else {\n                let state = new DragManager.DragState(e, this);\n                state._onMove();\n                if (onDragMoveT) {\n                    onDragMoveT(state);\n                }\n            }\n            e.preventDefault();\n        };\n        this.onDragEnd = (e) => {\n            let { onDragEndT } = this.props;\n            let state = new DragManager.DragState(e, this);\n            this.removeListeners();\n            if (!this.waitingMove) {\n                // e=null means drag is canceled\n                state._onDragEnd(e == null);\n                if (onDragEndT) {\n                    onDragEndT(state);\n                }\n            }\n            this.cleanupDrag(state);\n        };\n        this.onGestureMove = (e) => {\n            let { onGestureMoveT, gestureSensitivity } = this.props;\n            let state = new GestureState(e, this);\n            if (this.waitingMove) {\n                if (!(gestureSensitivity > 0)) {\n                    gestureSensitivity = 10; // default sensitivity\n                }\n                if (state.moved() > gestureSensitivity) {\n                    this.waitingMove = false;\n                }\n                else {\n                    return;\n                }\n            }\n            if (onGestureMoveT) {\n                onGestureMoveT(state);\n            }\n        };\n        this.onGestureEnd = (e) => {\n            let { onGestureEndT } = this.props;\n            let state = new DragManager.DragState(e, this);\n            this.removeListeners();\n            if (onGestureEndT) {\n                onGestureEndT();\n            }\n        };\n        this.onKeyDown = (e) => {\n            if (e.key === 'Escape') {\n                this.cancel();\n            }\n        };\n    }\n    onDragStart(event) {\n        if (DragManager.isDragging()) {\n            // same pointer event shouldn't trigger 2 drag start\n            return;\n        }\n        let state = new DragManager.DragState(event, this, true);\n        this.baseX = state.pageX;\n        this.baseY = state.pageY;\n        let baseElement = this.element.parentElement;\n        let rect = baseElement.getBoundingClientRect();\n        this.scaleX = baseElement.offsetWidth / Math.round(rect.width);\n        this.scaleY = baseElement.offsetHeight / Math.round(rect.height);\n        this.addDragListeners(event);\n        if (this.props.directDragT) {\n            this.executeFirstMove(state);\n        }\n    }\n    addDragListeners(event) {\n        let { onDragStartT } = this.props;\n        if (event.type === 'touchstart') {\n            this.ownerDocument.addEventListener('touchmove', this.onTouchMove);\n            this.ownerDocument.addEventListener('touchend', this.onDragEnd);\n            this.dragType = 'touch';\n        }\n        else {\n            this.ownerDocument.addEventListener('mousemove', this.onMouseMove);\n            this.ownerDocument.addEventListener('mouseup', this.onDragEnd);\n            if (event.button === 2) {\n                this.dragType = 'right';\n            }\n            else {\n                this.dragType = 'left';\n            }\n        }\n        this.waitingMove = true;\n        this.listening = true;\n    }\n    // return true for a valid move\n    checkFirstMove(e) {\n        let state = new DragManager.DragState(e, this, true);\n        if (!state.moved()) {\n            // not a move\n            return false;\n        }\n        return this.executeFirstMove(state);\n    }\n    executeFirstMove(state) {\n        let { onDragStartT } = this.props;\n        this.waitingMove = false;\n        onDragStartT(state);\n        if (!DragManager.isDragging()) {\n            this.onDragEnd();\n            return false;\n        }\n        state._onMove();\n        this.ownerDocument.addEventListener('keydown', this.onKeyDown);\n        return true;\n    }\n    addGestureListeners(event) {\n        this.ownerDocument.addEventListener('touchmove', this.onGestureMove);\n        this.ownerDocument.addEventListener('touchend', this.onGestureEnd);\n        this.ownerDocument.addEventListener('keydown', this.onKeyDown);\n        this.gesturing = true;\n        this.waitingMove = true;\n    }\n    onGestureStart(event) {\n        if (!DragManager.isDragging()) {\n            // same pointer event shouldn't trigger 2 drag start\n            return;\n        }\n        let { onGestureStartT } = this.props;\n        this.baseX = event.touches[0].pageX;\n        this.baseY = event.touches[0].pageY;\n        this.baseX2 = event.touches[1].pageX;\n        this.baseY2 = event.touches[1].pageY;\n        let baseElement = this.element.parentElement;\n        let rect = baseElement.getBoundingClientRect();\n        this.scaleX = baseElement.offsetWidth / Math.round(rect.width);\n        this.scaleY = baseElement.offsetHeight / Math.round(rect.height);\n        this.baseDis = Math.sqrt(Math.pow(this.baseX - this.baseX2, 2) + Math.pow(this.baseY - this.baseY2, 2));\n        this.baseAng = Math.atan2(this.baseY2 - this.baseY, this.baseX2 - this.baseX);\n        let state = new GestureState(event, this, true);\n        if (onGestureStartT(state)) {\n            this.addGestureListeners(event);\n            event.preventDefault();\n        }\n    }\n    cancel() {\n        if (this.listening) {\n            this.onDragEnd();\n        }\n        if (this.gesturing) {\n            this.onGestureEnd();\n        }\n    }\n    removeListeners() {\n        if (this.gesturing) {\n            this.ownerDocument.removeEventListener('touchmove', this.onGestureMove);\n            this.ownerDocument.removeEventListener('touchend', this.onGestureEnd);\n        }\n        else if (this.listening) {\n            if (this.dragType === 'touch') {\n                this.ownerDocument.removeEventListener('touchmove', this.onTouchMove);\n                this.ownerDocument.removeEventListener('touchend', this.onDragEnd);\n            }\n            else {\n                this.ownerDocument.removeEventListener('mousemove', this.onMouseMove);\n                this.ownerDocument.removeEventListener('mouseup', this.onDragEnd);\n            }\n        }\n        this.ownerDocument.removeEventListener('keydown', this.onKeyDown);\n        this.listening = false;\n        this.gesturing = false;\n    }\n    cleanupDrag(state) {\n        this.dragType = null;\n        this.waitingMove = false;\n    }\n    render() {\n        let _a = this.props, { getRef, children, className, directDragT, onDragStartT, onDragMoveT, onDragEndT, onDragOverT, onDragLeaveT, onDropT, onGestureStartT, onGestureMoveT, onGestureEndT, useRightButtonDragT } = _a, others = __rest(_a, [\"getRef\", \"children\", \"className\", \"directDragT\", \"onDragStartT\", \"onDragMoveT\", \"onDragEndT\", \"onDragOverT\", \"onDragLeaveT\", \"onDropT\", \"onGestureStartT\", \"onGestureMoveT\", \"onGestureEndT\", \"useRightButtonDragT\"]);\n        let onTouchDown = this.onPointerDown;\n        let onMouseDown = this.onPointerDown;\n        if (!onDragStartT) {\n            onMouseDown = null;\n            if (!onGestureStartT) {\n                onTouchDown = null;\n            }\n        }\n        if (onDragStartT || onGestureStartT) {\n            if (className) {\n                className = `${className} drag-initiator`;\n            }\n            else {\n                className = 'drag-initiator';\n            }\n        }\n        return (React.createElement(\"div\", Object.assign({ ref: this._getRef, className: className }, others, { onMouseDown: onMouseDown, onTouchStart: onTouchDown }), children));\n    }\n    componentDidUpdate(prevProps) {\n        let { onDragOverT, onDragEndT, onDragLeaveT } = this.props;\n        if (this.element\n            && (prevProps.onDragOverT !== onDragOverT\n                || prevProps.onDragLeaveT !== onDragLeaveT\n                || prevProps.onDragEndT !== onDragEndT)) {\n            if (onDragOverT) {\n                DragManager.addHandlers(this.element, this.props);\n            }\n            else {\n                DragManager.removeHandlers(this.element);\n            }\n        }\n    }\n    componentWillUnmount() {\n        let { onDragOverT } = this.props;\n        if (this.element && onDragOverT) {\n            DragManager.removeHandlers(this.element);\n        }\n        this.cancel();\n    }\n}\n"],"mappings":"AAAA,IAAIA,MAAM,GAAI,IAAI,IAAI,IAAI,CAACA,MAAM,IAAK,UAAUC,CAAC,EAAEC,CAAC,EAAE;EAClD,IAAIC,CAAC,GAAG,CAAC,CAAC;EACV,KAAK,IAAIC,CAAC,IAAIH,CAAC,EAAE,IAAII,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACP,CAAC,EAAEG,CAAC,CAAC,IAAIF,CAAC,CAACO,OAAO,CAACL,CAAC,CAAC,GAAG,CAAC,EAC/ED,CAAC,CAACC,CAAC,CAAC,GAAGH,CAAC,CAACG,CAAC,CAAC;EACf,IAAIH,CAAC,IAAI,IAAI,IAAI,OAAOI,MAAM,CAACK,qBAAqB,KAAK,UAAU,EAC/D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEP,CAAC,GAAGC,MAAM,CAACK,qBAAqB,CAACT,CAAC,CAAC,EAAEU,CAAC,GAAGP,CAAC,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;IACpE,IAAIT,CAAC,CAACO,OAAO,CAACL,CAAC,CAACO,CAAC,CAAC,CAAC,GAAG,CAAC,IAAIN,MAAM,CAACC,SAAS,CAACO,oBAAoB,CAACL,IAAI,CAACP,CAAC,EAAEG,CAAC,CAACO,CAAC,CAAC,CAAC,EAC1ER,CAAC,CAACC,CAAC,CAACO,CAAC,CAAC,CAAC,GAAGV,CAAC,CAACG,CAAC,CAACO,CAAC,CAAC,CAAC;EACzB;EACJ,OAAOR,CAAC;AACZ,CAAC;AACD,OAAOW,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,WAAW,MAAM,eAAe;AAC5C,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,OAAO,MAAMC,WAAW,SAASH,KAAK,CAACI,aAAa,CAAC;EACjDC,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,GAAGC,SAAS,CAAC;IACnB,IAAI,CAACC,OAAO,GAAIC,CAAC,IAAK;MAClB,IAAIA,CAAC,KAAK,IAAI,CAACC,OAAO,EAAE;QACpB;MACJ;MACA,IAAI;QAAEC,MAAM;QAAEC;MAAY,CAAC,GAAG,IAAI,CAACC,KAAK;MACxC,IAAI,IAAI,CAACH,OAAO,IAAIE,WAAW,EAAE;QAC7BV,WAAW,CAACY,cAAc,CAAC,IAAI,CAACJ,OAAO,CAAC;MAC5C;MACA,IAAI,CAACA,OAAO,GAAGD,CAAC;MAChB,IAAIA,CAAC,EAAE;QACH,IAAI,CAACM,aAAa,GAAGN,CAAC,CAACM,aAAa;MACxC;MACA,IAAIJ,MAAM,EAAE;QACRA,MAAM,CAACF,CAAC,CAAC;MACb;MACA,IAAIA,CAAC,IAAIG,WAAW,EAAE;QAClBV,WAAW,CAACc,WAAW,CAACP,CAAC,EAAE,IAAI,CAACI,KAAK,CAAC;MAC1C;IACJ,CAAC;IACD,IAAI,CAACI,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,aAAa,GAAIhC,CAAC,IAAK;MACxB,IAAIiC,YAAY,GAAGjC,CAAC,CAACkC,WAAW,CAACC,MAAM;MACvC,IAAIF,YAAY,YAAYG,gBAAgB,IAAIH,YAAY,YAAYI,mBAAmB,IAAIJ,YAAY,CAACK,SAAS,CAACC,QAAQ,CAAC,aAAa,CAAC,EAAE;QAC3I;QACA;MACJ;MACA,IAAI;QAAEC,YAAY;QAAEC,eAAe;QAAEC,cAAc;QAAEC;MAAoB,CAAC,GAAG,IAAI,CAACnB,KAAK;MACvF,IAAIoB,KAAK,GAAG5C,CAAC,CAACkC,WAAW;MACzB,IAAI,CAACW,MAAM,CAAC,CAAC;MACb,IAAID,KAAK,CAACE,IAAI,KAAK,YAAY,EAAE;QAC7B;QACA,IAAIF,KAAK,CAACG,OAAO,CAACrC,MAAM,KAAK,CAAC,EAAE;UAC5B,IAAI8B,YAAY,EAAE;YACd,IAAI,CAACQ,WAAW,CAACJ,KAAK,CAAC;UAC3B;QACJ,CAAC,MACI,IAAIA,KAAK,CAACG,OAAO,CAACrC,MAAM,KAAK,CAAC,EAAE;UACjC,IAAI+B,eAAe,IAAIC,cAAc,EAAE;YACnC,IAAI,CAACO,cAAc,CAACL,KAAK,CAAC;UAC9B;QACJ;MACJ,CAAC,MACI,IAAIJ,YAAY,EAAE;QACnB,IAAII,KAAK,CAACM,MAAM,KAAK,CAAC,IAAI,CAACP,mBAAmB,EAAE;UAC5C;QACJ;QACA,IAAI,CAACK,WAAW,CAACJ,KAAK,CAAC;MAC3B;IACJ,CAAC;IACD,IAAI,CAACO,WAAW,GAAInD,CAAC,IAAK;MACtB,IAAI;QAAEoD;MAAY,CAAC,GAAG,IAAI,CAAC5B,KAAK;MAChC,IAAI,IAAI,CAACK,WAAW,EAAE;QAClB,IAAIhB,WAAW,CAACwC,UAAU,CAAC,CAAC,EAAE;UAC1B,IAAI,CAACC,SAAS,CAAC,CAAC;UAChB;QACJ;QACA,IAAI,CAAC,IAAI,CAACC,cAAc,CAACvD,CAAC,CAAC,EAAE;UACzB;QACJ;MACJ,CAAC,MACI;QACD,IAAIwD,KAAK,GAAG,IAAI3C,WAAW,CAAC4C,SAAS,CAACzD,CAAC,EAAE,IAAI,CAAC;QAC9CwD,KAAK,CAACE,OAAO,CAAC,CAAC;QACf,IAAIN,WAAW,EAAE;UACbA,WAAW,CAACI,KAAK,CAAC;QACtB;MACJ;MACAxD,CAAC,CAAC2D,cAAc,CAAC,CAAC;IACtB,CAAC;IACD,IAAI,CAACC,WAAW,GAAI5D,CAAC,IAAK;MACtB,IAAI;QAAEoD;MAAY,CAAC,GAAG,IAAI,CAAC5B,KAAK;MAChC,IAAI,IAAI,CAACK,WAAW,EAAE;QAClB,IAAIhB,WAAW,CAACwC,UAAU,CAAC,CAAC,EAAE;UAC1B,IAAI,CAACC,SAAS,CAAC,CAAC;UAChB;QACJ;QACA,IAAI,CAAC,IAAI,CAACC,cAAc,CAACvD,CAAC,CAAC,EAAE;UACzB;QACJ;MACJ,CAAC,MACI,IAAIA,CAAC,CAAC+C,OAAO,CAACrC,MAAM,KAAK,CAAC,EAAE;QAC7B,IAAI,CAAC4C,SAAS,CAAC,CAAC;MACpB,CAAC,MACI;QACD,IAAIE,KAAK,GAAG,IAAI3C,WAAW,CAAC4C,SAAS,CAACzD,CAAC,EAAE,IAAI,CAAC;QAC9CwD,KAAK,CAACE,OAAO,CAAC,CAAC;QACf,IAAIN,WAAW,EAAE;UACbA,WAAW,CAACI,KAAK,CAAC;QACtB;MACJ;MACAxD,CAAC,CAAC2D,cAAc,CAAC,CAAC;IACtB,CAAC;IACD,IAAI,CAACL,SAAS,GAAItD,CAAC,IAAK;MACpB,IAAI;QAAE6D;MAAW,CAAC,GAAG,IAAI,CAACrC,KAAK;MAC/B,IAAIgC,KAAK,GAAG,IAAI3C,WAAW,CAAC4C,SAAS,CAACzD,CAAC,EAAE,IAAI,CAAC;MAC9C,IAAI,CAAC8D,eAAe,CAAC,CAAC;MACtB,IAAI,CAAC,IAAI,CAACjC,WAAW,EAAE;QACnB;QACA2B,KAAK,CAACO,UAAU,CAAC/D,CAAC,IAAI,IAAI,CAAC;QAC3B,IAAI6D,UAAU,EAAE;UACZA,UAAU,CAACL,KAAK,CAAC;QACrB;MACJ;MACA,IAAI,CAACQ,WAAW,CAACR,KAAK,CAAC;IAC3B,CAAC;IACD,IAAI,CAACS,aAAa,GAAIjE,CAAC,IAAK;MACxB,IAAI;QAAE0C,cAAc;QAAEwB;MAAmB,CAAC,GAAG,IAAI,CAAC1C,KAAK;MACvD,IAAIgC,KAAK,GAAG,IAAI1C,YAAY,CAACd,CAAC,EAAE,IAAI,CAAC;MACrC,IAAI,IAAI,CAAC6B,WAAW,EAAE;QAClB,IAAI,EAAEqC,kBAAkB,GAAG,CAAC,CAAC,EAAE;UAC3BA,kBAAkB,GAAG,EAAE,CAAC,CAAC;QAC7B;QACA,IAAIV,KAAK,CAACW,KAAK,CAAC,CAAC,GAAGD,kBAAkB,EAAE;UACpC,IAAI,CAACrC,WAAW,GAAG,KAAK;QAC5B,CAAC,MACI;UACD;QACJ;MACJ;MACA,IAAIa,cAAc,EAAE;QAChBA,cAAc,CAACc,KAAK,CAAC;MACzB;IACJ,CAAC;IACD,IAAI,CAACY,YAAY,GAAIpE,CAAC,IAAK;MACvB,IAAI;QAAEqE;MAAc,CAAC,GAAG,IAAI,CAAC7C,KAAK;MAClC,IAAIgC,KAAK,GAAG,IAAI3C,WAAW,CAAC4C,SAAS,CAACzD,CAAC,EAAE,IAAI,CAAC;MAC9C,IAAI,CAAC8D,eAAe,CAAC,CAAC;MACtB,IAAIO,aAAa,EAAE;QACfA,aAAa,CAAC,CAAC;MACnB;IACJ,CAAC;IACD,IAAI,CAACC,SAAS,GAAItE,CAAC,IAAK;MACpB,IAAIA,CAAC,CAACuE,GAAG,KAAK,QAAQ,EAAE;QACpB,IAAI,CAAC1B,MAAM,CAAC,CAAC;MACjB;IACJ,CAAC;EACL;EACAG,WAAWA,CAACJ,KAAK,EAAE;IACf,IAAI/B,WAAW,CAACwC,UAAU,CAAC,CAAC,EAAE;MAC1B;MACA;IACJ;IACA,IAAIG,KAAK,GAAG,IAAI3C,WAAW,CAAC4C,SAAS,CAACb,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC;IACxD,IAAI,CAAC4B,KAAK,GAAGhB,KAAK,CAACiB,KAAK;IACxB,IAAI,CAACC,KAAK,GAAGlB,KAAK,CAACmB,KAAK;IACxB,IAAIC,WAAW,GAAG,IAAI,CAACvD,OAAO,CAACwD,aAAa;IAC5C,IAAIC,IAAI,GAAGF,WAAW,CAACG,qBAAqB,CAAC,CAAC;IAC9C,IAAI,CAACC,MAAM,GAAGJ,WAAW,CAACK,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACL,IAAI,CAACM,KAAK,CAAC;IAC9D,IAAI,CAACC,MAAM,GAAGT,WAAW,CAACU,YAAY,GAAGJ,IAAI,CAACC,KAAK,CAACL,IAAI,CAACS,MAAM,CAAC;IAChE,IAAI,CAACC,gBAAgB,CAAC5C,KAAK,CAAC;IAC5B,IAAI,IAAI,CAACpB,KAAK,CAACiE,WAAW,EAAE;MACxB,IAAI,CAACC,gBAAgB,CAAClC,KAAK,CAAC;IAChC;EACJ;EACAgC,gBAAgBA,CAAC5C,KAAK,EAAE;IACpB,IAAI;MAAEJ;IAAa,CAAC,GAAG,IAAI,CAAChB,KAAK;IACjC,IAAIoB,KAAK,CAACE,IAAI,KAAK,YAAY,EAAE;MAC7B,IAAI,CAACpB,aAAa,CAACiE,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC/B,WAAW,CAAC;MAClE,IAAI,CAAClC,aAAa,CAACiE,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAACrC,SAAS,CAAC;MAC/D,IAAI,CAAC1B,QAAQ,GAAG,OAAO;IAC3B,CAAC,MACI;MACD,IAAI,CAACF,aAAa,CAACiE,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAACxC,WAAW,CAAC;MAClE,IAAI,CAACzB,aAAa,CAACiE,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAACrC,SAAS,CAAC;MAC9D,IAAIV,KAAK,CAACM,MAAM,KAAK,CAAC,EAAE;QACpB,IAAI,CAACtB,QAAQ,GAAG,OAAO;MAC3B,CAAC,MACI;QACD,IAAI,CAACA,QAAQ,GAAG,MAAM;MAC1B;IACJ;IACA,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,SAAS,GAAG,IAAI;EACzB;EACA;EACAyB,cAAcA,CAACvD,CAAC,EAAE;IACd,IAAIwD,KAAK,GAAG,IAAI3C,WAAW,CAAC4C,SAAS,CAACzD,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;IACpD,IAAI,CAACwD,KAAK,CAACW,KAAK,CAAC,CAAC,EAAE;MAChB;MACA,OAAO,KAAK;IAChB;IACA,OAAO,IAAI,CAACuB,gBAAgB,CAAClC,KAAK,CAAC;EACvC;EACAkC,gBAAgBA,CAAClC,KAAK,EAAE;IACpB,IAAI;MAAEhB;IAAa,CAAC,GAAG,IAAI,CAAChB,KAAK;IACjC,IAAI,CAACK,WAAW,GAAG,KAAK;IACxBW,YAAY,CAACgB,KAAK,CAAC;IACnB,IAAI,CAAC3C,WAAW,CAACwC,UAAU,CAAC,CAAC,EAAE;MAC3B,IAAI,CAACC,SAAS,CAAC,CAAC;MAChB,OAAO,KAAK;IAChB;IACAE,KAAK,CAACE,OAAO,CAAC,CAAC;IACf,IAAI,CAAChC,aAAa,CAACiE,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAACrB,SAAS,CAAC;IAC9D,OAAO,IAAI;EACf;EACAsB,mBAAmBA,CAAChD,KAAK,EAAE;IACvB,IAAI,CAAClB,aAAa,CAACiE,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC1B,aAAa,CAAC;IACpE,IAAI,CAACvC,aAAa,CAACiE,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAACvB,YAAY,CAAC;IAClE,IAAI,CAAC1C,aAAa,CAACiE,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAACrB,SAAS,CAAC;IAC9D,IAAI,CAACvC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACF,WAAW,GAAG,IAAI;EAC3B;EACAoB,cAAcA,CAACL,KAAK,EAAE;IAClB,IAAI,CAAC/B,WAAW,CAACwC,UAAU,CAAC,CAAC,EAAE;MAC3B;MACA;IACJ;IACA,IAAI;MAAEZ;IAAgB,CAAC,GAAG,IAAI,CAACjB,KAAK;IACpC,IAAI,CAACgD,KAAK,GAAG5B,KAAK,CAACG,OAAO,CAAC,CAAC,CAAC,CAAC0B,KAAK;IACnC,IAAI,CAACC,KAAK,GAAG9B,KAAK,CAACG,OAAO,CAAC,CAAC,CAAC,CAAC4B,KAAK;IACnC,IAAI,CAACkB,MAAM,GAAGjD,KAAK,CAACG,OAAO,CAAC,CAAC,CAAC,CAAC0B,KAAK;IACpC,IAAI,CAACqB,MAAM,GAAGlD,KAAK,CAACG,OAAO,CAAC,CAAC,CAAC,CAAC4B,KAAK;IACpC,IAAIC,WAAW,GAAG,IAAI,CAACvD,OAAO,CAACwD,aAAa;IAC5C,IAAIC,IAAI,GAAGF,WAAW,CAACG,qBAAqB,CAAC,CAAC;IAC9C,IAAI,CAACC,MAAM,GAAGJ,WAAW,CAACK,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACL,IAAI,CAACM,KAAK,CAAC;IAC9D,IAAI,CAACC,MAAM,GAAGT,WAAW,CAACU,YAAY,GAAGJ,IAAI,CAACC,KAAK,CAACL,IAAI,CAACS,MAAM,CAAC;IAChE,IAAI,CAACQ,OAAO,GAAGb,IAAI,CAACc,IAAI,CAACd,IAAI,CAACe,GAAG,CAAC,IAAI,CAACzB,KAAK,GAAG,IAAI,CAACqB,MAAM,EAAE,CAAC,CAAC,GAAGX,IAAI,CAACe,GAAG,CAAC,IAAI,CAACvB,KAAK,GAAG,IAAI,CAACoB,MAAM,EAAE,CAAC,CAAC,CAAC;IACvG,IAAI,CAACI,OAAO,GAAGhB,IAAI,CAACiB,KAAK,CAAC,IAAI,CAACL,MAAM,GAAG,IAAI,CAACpB,KAAK,EAAE,IAAI,CAACmB,MAAM,GAAG,IAAI,CAACrB,KAAK,CAAC;IAC7E,IAAIhB,KAAK,GAAG,IAAI1C,YAAY,CAAC8B,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC;IAC/C,IAAIH,eAAe,CAACe,KAAK,CAAC,EAAE;MACxB,IAAI,CAACoC,mBAAmB,CAAChD,KAAK,CAAC;MAC/BA,KAAK,CAACe,cAAc,CAAC,CAAC;IAC1B;EACJ;EACAd,MAAMA,CAAA,EAAG;IACL,IAAI,IAAI,CAACf,SAAS,EAAE;MAChB,IAAI,CAACwB,SAAS,CAAC,CAAC;IACpB;IACA,IAAI,IAAI,CAACvB,SAAS,EAAE;MAChB,IAAI,CAACqC,YAAY,CAAC,CAAC;IACvB;EACJ;EACAN,eAAeA,CAAA,EAAG;IACd,IAAI,IAAI,CAAC/B,SAAS,EAAE;MAChB,IAAI,CAACL,aAAa,CAAC0E,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAACnC,aAAa,CAAC;MACvE,IAAI,CAACvC,aAAa,CAAC0E,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAAChC,YAAY,CAAC;IACzE,CAAC,MACI,IAAI,IAAI,CAACtC,SAAS,EAAE;MACrB,IAAI,IAAI,CAACF,QAAQ,KAAK,OAAO,EAAE;QAC3B,IAAI,CAACF,aAAa,CAAC0E,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAACxC,WAAW,CAAC;QACrE,IAAI,CAAClC,aAAa,CAAC0E,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAAC9C,SAAS,CAAC;MACtE,CAAC,MACI;QACD,IAAI,CAAC5B,aAAa,CAAC0E,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAACjD,WAAW,CAAC;QACrE,IAAI,CAACzB,aAAa,CAAC0E,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC9C,SAAS,CAAC;MACrE;IACJ;IACA,IAAI,CAAC5B,aAAa,CAAC0E,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC9B,SAAS,CAAC;IACjE,IAAI,CAACxC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,SAAS,GAAG,KAAK;EAC1B;EACAiC,WAAWA,CAACR,KAAK,EAAE;IACf,IAAI,CAAC5B,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,WAAW,GAAG,KAAK;EAC5B;EACAwE,MAAMA,CAAA,EAAG;IACL,IAAIC,EAAE,GAAG,IAAI,CAAC9E,KAAK;MAAE;QAAEF,MAAM;QAAEiF,QAAQ;QAAEC,SAAS;QAAEf,WAAW;QAAEjD,YAAY;QAAEY,WAAW;QAAES,UAAU;QAAEtC,WAAW;QAAEkF,YAAY;QAAEC,OAAO;QAAEjE,eAAe;QAAEC,cAAc;QAAE2B,aAAa;QAAE1B;MAAoB,CAAC,GAAG2D,EAAE;MAAEK,MAAM,GAAG7G,MAAM,CAACwG,EAAE,EAAE,CAAC,QAAQ,EAAE,UAAU,EAAE,WAAW,EAAE,aAAa,EAAE,cAAc,EAAE,aAAa,EAAE,YAAY,EAAE,aAAa,EAAE,cAAc,EAAE,SAAS,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,eAAe,EAAE,qBAAqB,CAAC,CAAC;IACnc,IAAIM,WAAW,GAAG,IAAI,CAAC5E,aAAa;IACpC,IAAI6E,WAAW,GAAG,IAAI,CAAC7E,aAAa;IACpC,IAAI,CAACQ,YAAY,EAAE;MACfqE,WAAW,GAAG,IAAI;MAClB,IAAI,CAACpE,eAAe,EAAE;QAClBmE,WAAW,GAAG,IAAI;MACtB;IACJ;IACA,IAAIpE,YAAY,IAAIC,eAAe,EAAE;MACjC,IAAI+D,SAAS,EAAE;QACXA,SAAS,GAAG,GAAGA,SAAS,iBAAiB;MAC7C,CAAC,MACI;QACDA,SAAS,GAAG,gBAAgB;MAChC;IACJ;IACA,OAAQ5F,KAAK,CAACkG,aAAa,CAAC,KAAK,EAAE3G,MAAM,CAAC4G,MAAM,CAAC;MAAEC,GAAG,EAAE,IAAI,CAAC7F,OAAO;MAAEqF,SAAS,EAAEA;IAAU,CAAC,EAAEG,MAAM,EAAE;MAAEE,WAAW,EAAEA,WAAW;MAAEI,YAAY,EAAEL;IAAY,CAAC,CAAC,EAAEL,QAAQ,CAAC;EAC7K;EACAW,kBAAkBA,CAACC,SAAS,EAAE;IAC1B,IAAI;MAAE5F,WAAW;MAAEsC,UAAU;MAAE4C;IAAa,CAAC,GAAG,IAAI,CAACjF,KAAK;IAC1D,IAAI,IAAI,CAACH,OAAO,KACR8F,SAAS,CAAC5F,WAAW,KAAKA,WAAW,IAClC4F,SAAS,CAACV,YAAY,KAAKA,YAAY,IACvCU,SAAS,CAACtD,UAAU,KAAKA,UAAU,CAAC,EAAE;MAC7C,IAAItC,WAAW,EAAE;QACbV,WAAW,CAACc,WAAW,CAAC,IAAI,CAACN,OAAO,EAAE,IAAI,CAACG,KAAK,CAAC;MACrD,CAAC,MACI;QACDX,WAAW,CAACY,cAAc,CAAC,IAAI,CAACJ,OAAO,CAAC;MAC5C;IACJ;EACJ;EACA+F,oBAAoBA,CAAA,EAAG;IACnB,IAAI;MAAE7F;IAAY,CAAC,GAAG,IAAI,CAACC,KAAK;IAChC,IAAI,IAAI,CAACH,OAAO,IAAIE,WAAW,EAAE;MAC7BV,WAAW,CAACY,cAAc,CAAC,IAAI,CAACJ,OAAO,CAAC;IAC5C;IACA,IAAI,CAACwB,MAAM,CAAC,CAAC;EACjB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module"}