{"ast":null,"code":"// @info\n//   Polyfill for SVG getPathData() and setPathData() methods. Based on:\n//   - SVGPathSeg polyfill by Philip Rogers (MIT License)\n//     https://github.com/progers/pathseg\n//   - SVGPathNormalizer by Tadahisa Motooka (MIT License)\n//     https://github.com/motooka/SVGPathNormalizer/tree/master/src\n//   - arcToCubicCurves() by Dmitry Baranovskiy (MIT License)\n//     https://github.com/DmitryBaranovskiy/raphael/blob/v2.1.1/raphael.core.js#L1837\n// @author\n//   JarosÅ‚aw Foksa\n// @license\n//   MIT License\nif (!SVGPathElement.prototype.getPathData || !SVGPathElement.prototype.setPathData) {\n  (function () {\n    var commandsMap = {\n      \"Z\": \"Z\",\n      \"M\": \"M\",\n      \"L\": \"L\",\n      \"C\": \"C\",\n      \"Q\": \"Q\",\n      \"A\": \"A\",\n      \"H\": \"H\",\n      \"V\": \"V\",\n      \"S\": \"S\",\n      \"T\": \"T\",\n      \"z\": \"Z\",\n      \"m\": \"m\",\n      \"l\": \"l\",\n      \"c\": \"c\",\n      \"q\": \"q\",\n      \"a\": \"a\",\n      \"h\": \"h\",\n      \"v\": \"v\",\n      \"s\": \"s\",\n      \"t\": \"t\"\n    };\n    var Source = function (string) {\n      this._string = string;\n      this._currentIndex = 0;\n      this._endIndex = this._string.length;\n      this._prevCommand = null;\n      this._skipOptionalSpaces();\n    };\n    var isIE = window.navigator.userAgent.indexOf(\"MSIE \") !== -1;\n    Source.prototype = {\n      parseSegment: function () {\n        var char = this._string[this._currentIndex];\n        var command = commandsMap[char] ? commandsMap[char] : null;\n        if (command === null) {\n          // Possibly an implicit command. Not allowed if this is the first command.\n          if (this._prevCommand === null) {\n            return null;\n          }\n\n          // Check for remaining coordinates in the current command.\n          if ((char === \"+\" || char === \"-\" || char === \".\" || char >= \"0\" && char <= \"9\") && this._prevCommand !== \"Z\") {\n            if (this._prevCommand === \"M\") {\n              command = \"L\";\n            } else if (this._prevCommand === \"m\") {\n              command = \"l\";\n            } else {\n              command = this._prevCommand;\n            }\n          } else {\n            command = null;\n          }\n          if (command === null) {\n            return null;\n          }\n        } else {\n          this._currentIndex += 1;\n        }\n        this._prevCommand = command;\n        var values = null;\n        var cmd = command.toUpperCase();\n        if (cmd === \"H\" || cmd === \"V\") {\n          values = [this._parseNumber()];\n        } else if (cmd === \"M\" || cmd === \"L\" || cmd === \"T\") {\n          values = [this._parseNumber(), this._parseNumber()];\n        } else if (cmd === \"S\" || cmd === \"Q\") {\n          values = [this._parseNumber(), this._parseNumber(), this._parseNumber(), this._parseNumber()];\n        } else if (cmd === \"C\") {\n          values = [this._parseNumber(), this._parseNumber(), this._parseNumber(), this._parseNumber(), this._parseNumber(), this._parseNumber()];\n        } else if (cmd === \"A\") {\n          values = [this._parseNumber(), this._parseNumber(), this._parseNumber(), this._parseArcFlag(), this._parseArcFlag(), this._parseNumber(), this._parseNumber()];\n        } else if (cmd === \"Z\") {\n          this._skipOptionalSpaces();\n          values = [];\n        }\n        if (values === null || values.indexOf(null) >= 0) {\n          // Unknown command or known command with invalid values\n          return null;\n        } else {\n          return {\n            type: command,\n            values: values\n          };\n        }\n      },\n      hasMoreData: function () {\n        return this._currentIndex < this._endIndex;\n      },\n      peekSegmentType: function () {\n        var char = this._string[this._currentIndex];\n        return commandsMap[char] ? commandsMap[char] : null;\n      },\n      initialCommandIsMoveTo: function () {\n        // If the path is empty it is still valid, so return true.\n        if (!this.hasMoreData()) {\n          return true;\n        }\n        var command = this.peekSegmentType();\n        // Path must start with moveTo.\n        return command === \"M\" || command === \"m\";\n      },\n      _isCurrentSpace: function () {\n        var char = this._string[this._currentIndex];\n        return char <= \" \" && (char === \" \" || char === \"\\n\" || char === \"\\t\" || char === \"\\r\" || char === \"\\f\");\n      },\n      _skipOptionalSpaces: function () {\n        while (this._currentIndex < this._endIndex && this._isCurrentSpace()) {\n          this._currentIndex += 1;\n        }\n        return this._currentIndex < this._endIndex;\n      },\n      _skipOptionalSpacesOrDelimiter: function () {\n        if (this._currentIndex < this._endIndex && !this._isCurrentSpace() && this._string[this._currentIndex] !== \",\") {\n          return false;\n        }\n        if (this._skipOptionalSpaces()) {\n          if (this._currentIndex < this._endIndex && this._string[this._currentIndex] === \",\") {\n            this._currentIndex += 1;\n            this._skipOptionalSpaces();\n          }\n        }\n        return this._currentIndex < this._endIndex;\n      },\n      // Parse a number from an SVG path. This very closely follows genericParseNumber(...) from\n      // Source/core/svg/SVGParserUtilities.cpp.\n      // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-PathDataBNF\n      _parseNumber: function () {\n        var exponent = 0;\n        var integer = 0;\n        var frac = 1;\n        var decimal = 0;\n        var sign = 1;\n        var expsign = 1;\n        var startIndex = this._currentIndex;\n        this._skipOptionalSpaces();\n\n        // Read the sign.\n        if (this._currentIndex < this._endIndex && this._string[this._currentIndex] === \"+\") {\n          this._currentIndex += 1;\n        } else if (this._currentIndex < this._endIndex && this._string[this._currentIndex] === \"-\") {\n          this._currentIndex += 1;\n          sign = -1;\n        }\n        if (this._currentIndex === this._endIndex || (this._string[this._currentIndex] < \"0\" || this._string[this._currentIndex] > \"9\") && this._string[this._currentIndex] !== \".\") {\n          // The first character of a number must be one of [0-9+-.].\n          return null;\n        }\n\n        // Read the integer part, build right-to-left.\n        var startIntPartIndex = this._currentIndex;\n        while (this._currentIndex < this._endIndex && this._string[this._currentIndex] >= \"0\" && this._string[this._currentIndex] <= \"9\") {\n          this._currentIndex += 1; // Advance to first non-digit.\n        }\n        if (this._currentIndex !== startIntPartIndex) {\n          var scanIntPartIndex = this._currentIndex - 1;\n          var multiplier = 1;\n          while (scanIntPartIndex >= startIntPartIndex) {\n            integer += multiplier * (this._string[scanIntPartIndex] - \"0\");\n            scanIntPartIndex -= 1;\n            multiplier *= 10;\n          }\n        }\n\n        // Read the decimals.\n        if (this._currentIndex < this._endIndex && this._string[this._currentIndex] === \".\") {\n          this._currentIndex += 1;\n\n          // There must be a least one digit following the .\n          if (this._currentIndex >= this._endIndex || this._string[this._currentIndex] < \"0\" || this._string[this._currentIndex] > \"9\") {\n            return null;\n          }\n          while (this._currentIndex < this._endIndex && this._string[this._currentIndex] >= \"0\" && this._string[this._currentIndex] <= \"9\") {\n            frac *= 10;\n            decimal += (this._string.charAt(this._currentIndex) - \"0\") / frac;\n            this._currentIndex += 1;\n          }\n        }\n\n        // Read the exponent part.\n        if (this._currentIndex !== startIndex && this._currentIndex + 1 < this._endIndex && (this._string[this._currentIndex] === \"e\" || this._string[this._currentIndex] === \"E\") && this._string[this._currentIndex + 1] !== \"x\" && this._string[this._currentIndex + 1] !== \"m\") {\n          this._currentIndex += 1;\n\n          // Read the sign of the exponent.\n          if (this._string[this._currentIndex] === \"+\") {\n            this._currentIndex += 1;\n          } else if (this._string[this._currentIndex] === \"-\") {\n            this._currentIndex += 1;\n            expsign = -1;\n          }\n\n          // There must be an exponent.\n          if (this._currentIndex >= this._endIndex || this._string[this._currentIndex] < \"0\" || this._string[this._currentIndex] > \"9\") {\n            return null;\n          }\n          while (this._currentIndex < this._endIndex && this._string[this._currentIndex] >= \"0\" && this._string[this._currentIndex] <= \"9\") {\n            exponent *= 10;\n            exponent += this._string[this._currentIndex] - \"0\";\n            this._currentIndex += 1;\n          }\n        }\n        var number = integer + decimal;\n        number *= sign;\n        if (exponent) {\n          number *= Math.pow(10, expsign * exponent);\n        }\n        if (startIndex === this._currentIndex) {\n          return null;\n        }\n        this._skipOptionalSpacesOrDelimiter();\n        return number;\n      },\n      _parseArcFlag: function () {\n        if (this._currentIndex >= this._endIndex) {\n          return null;\n        }\n        var flag = null;\n        var flagChar = this._string[this._currentIndex];\n        this._currentIndex += 1;\n        if (flagChar === \"0\") {\n          flag = 0;\n        } else if (flagChar === \"1\") {\n          flag = 1;\n        } else {\n          return null;\n        }\n        this._skipOptionalSpacesOrDelimiter();\n        return flag;\n      }\n    };\n    var parsePathDataString = function (string) {\n      if (!string || string.length === 0) return [];\n      var source = new Source(string);\n      var pathData = [];\n      if (source.initialCommandIsMoveTo()) {\n        while (source.hasMoreData()) {\n          var pathSeg = source.parseSegment();\n          if (pathSeg === null) {\n            break;\n          } else {\n            pathData.push(pathSeg);\n          }\n        }\n      }\n      return pathData;\n    };\n    var setAttribute = SVGPathElement.prototype.setAttribute;\n    var setAttributeNS = SVGPathElement.prototype.setAttributeNS;\n    var removeAttribute = SVGPathElement.prototype.removeAttribute;\n    var removeAttributeNS = SVGPathElement.prototype.removeAttributeNS;\n    var $cachedPathData = window.Symbol ? Symbol() : \"__cachedPathData\";\n    var $cachedNormalizedPathData = window.Symbol ? Symbol() : \"__cachedNormalizedPathData\";\n\n    // @info\n    //   Get an array of corresponding cubic bezier curve parameters for given arc curve paramters.\n    var arcToCubicCurves = function (x1, y1, x2, y2, r1, r2, angle, largeArcFlag, sweepFlag, _recursive) {\n      var degToRad = function (degrees) {\n        return Math.PI * degrees / 180;\n      };\n      var rotate = function (x, y, angleRad) {\n        var X = x * Math.cos(angleRad) - y * Math.sin(angleRad);\n        var Y = x * Math.sin(angleRad) + y * Math.cos(angleRad);\n        return {\n          x: X,\n          y: Y\n        };\n      };\n      var angleRad = degToRad(angle);\n      var params = [];\n      var f1, f2, cx, cy;\n      if (_recursive) {\n        f1 = _recursive[0];\n        f2 = _recursive[1];\n        cx = _recursive[2];\n        cy = _recursive[3];\n      } else {\n        var p1 = rotate(x1, y1, -angleRad);\n        x1 = p1.x;\n        y1 = p1.y;\n        var p2 = rotate(x2, y2, -angleRad);\n        x2 = p2.x;\n        y2 = p2.y;\n        var x = (x1 - x2) / 2;\n        var y = (y1 - y2) / 2;\n        var h = x * x / (r1 * r1) + y * y / (r2 * r2);\n        if (h > 1) {\n          h = Math.sqrt(h);\n          r1 = h * r1;\n          r2 = h * r2;\n        }\n        var sign;\n        if (largeArcFlag === sweepFlag) {\n          sign = -1;\n        } else {\n          sign = 1;\n        }\n        var r1Pow = r1 * r1;\n        var r2Pow = r2 * r2;\n        var left = r1Pow * r2Pow - r1Pow * y * y - r2Pow * x * x;\n        var right = r1Pow * y * y + r2Pow * x * x;\n        var k = sign * Math.sqrt(Math.abs(left / right));\n        cx = k * r1 * y / r2 + (x1 + x2) / 2;\n        cy = k * -r2 * x / r1 + (y1 + y2) / 2;\n        f1 = Math.asin(parseFloat(((y1 - cy) / r2).toFixed(9)));\n        f2 = Math.asin(parseFloat(((y2 - cy) / r2).toFixed(9)));\n        if (x1 < cx) {\n          f1 = Math.PI - f1;\n        }\n        if (x2 < cx) {\n          f2 = Math.PI - f2;\n        }\n        if (f1 < 0) {\n          f1 = Math.PI * 2 + f1;\n        }\n        if (f2 < 0) {\n          f2 = Math.PI * 2 + f2;\n        }\n        if (sweepFlag && f1 > f2) {\n          f1 = f1 - Math.PI * 2;\n        }\n        if (!sweepFlag && f2 > f1) {\n          f2 = f2 - Math.PI * 2;\n        }\n      }\n      var df = f2 - f1;\n      if (Math.abs(df) > Math.PI * 120 / 180) {\n        var f2old = f2;\n        var x2old = x2;\n        var y2old = y2;\n        if (sweepFlag && f2 > f1) {\n          f2 = f1 + Math.PI * 120 / 180 * 1;\n        } else {\n          f2 = f1 + Math.PI * 120 / 180 * -1;\n        }\n        x2 = cx + r1 * Math.cos(f2);\n        y2 = cy + r2 * Math.sin(f2);\n        params = arcToCubicCurves(x2, y2, x2old, y2old, r1, r2, angle, 0, sweepFlag, [f2, f2old, cx, cy]);\n      }\n      df = f2 - f1;\n      var c1 = Math.cos(f1);\n      var s1 = Math.sin(f1);\n      var c2 = Math.cos(f2);\n      var s2 = Math.sin(f2);\n      var t = Math.tan(df / 4);\n      var hx = 4 / 3 * r1 * t;\n      var hy = 4 / 3 * r2 * t;\n      var m1 = [x1, y1];\n      var m2 = [x1 + hx * s1, y1 - hy * c1];\n      var m3 = [x2 + hx * s2, y2 - hy * c2];\n      var m4 = [x2, y2];\n      m2[0] = 2 * m1[0] - m2[0];\n      m2[1] = 2 * m1[1] - m2[1];\n      if (_recursive) {\n        return [m2, m3, m4].concat(params);\n      } else {\n        params = [m2, m3, m4].concat(params);\n        var curves = [];\n        for (var i = 0; i < params.length; i += 3) {\n          var r1 = rotate(params[i][0], params[i][1], angleRad);\n          var r2 = rotate(params[i + 1][0], params[i + 1][1], angleRad);\n          var r3 = rotate(params[i + 2][0], params[i + 2][1], angleRad);\n          curves.push([r1.x, r1.y, r2.x, r2.y, r3.x, r3.y]);\n        }\n        return curves;\n      }\n    };\n    var clonePathData = function (pathData) {\n      return pathData.map(function (seg) {\n        return {\n          type: seg.type,\n          values: Array.prototype.slice.call(seg.values)\n        };\n      });\n    };\n\n    // @info\n    //   Takes any path data, returns path data that consists only from absolute commands.\n    var absolutizePathData = function (pathData) {\n      var absolutizedPathData = [];\n      var currentX = null;\n      var currentY = null;\n      var subpathX = null;\n      var subpathY = null;\n      pathData.forEach(function (seg) {\n        var type = seg.type;\n        if (type === \"M\") {\n          var x = seg.values[0];\n          var y = seg.values[1];\n          absolutizedPathData.push({\n            type: \"M\",\n            values: [x, y]\n          });\n          subpathX = x;\n          subpathY = y;\n          currentX = x;\n          currentY = y;\n        } else if (type === \"m\") {\n          var x = currentX + seg.values[0];\n          var y = currentY + seg.values[1];\n          absolutizedPathData.push({\n            type: \"M\",\n            values: [x, y]\n          });\n          subpathX = x;\n          subpathY = y;\n          currentX = x;\n          currentY = y;\n        } else if (type === \"L\") {\n          var x = seg.values[0];\n          var y = seg.values[1];\n          absolutizedPathData.push({\n            type: \"L\",\n            values: [x, y]\n          });\n          currentX = x;\n          currentY = y;\n        } else if (type === \"l\") {\n          var x = currentX + seg.values[0];\n          var y = currentY + seg.values[1];\n          absolutizedPathData.push({\n            type: \"L\",\n            values: [x, y]\n          });\n          currentX = x;\n          currentY = y;\n        } else if (type === \"C\") {\n          var x1 = seg.values[0];\n          var y1 = seg.values[1];\n          var x2 = seg.values[2];\n          var y2 = seg.values[3];\n          var x = seg.values[4];\n          var y = seg.values[5];\n          absolutizedPathData.push({\n            type: \"C\",\n            values: [x1, y1, x2, y2, x, y]\n          });\n          currentX = x;\n          currentY = y;\n        } else if (type === \"c\") {\n          var x1 = currentX + seg.values[0];\n          var y1 = currentY + seg.values[1];\n          var x2 = currentX + seg.values[2];\n          var y2 = currentY + seg.values[3];\n          var x = currentX + seg.values[4];\n          var y = currentY + seg.values[5];\n          absolutizedPathData.push({\n            type: \"C\",\n            values: [x1, y1, x2, y2, x, y]\n          });\n          currentX = x;\n          currentY = y;\n        } else if (type === \"Q\") {\n          var x1 = seg.values[0];\n          var y1 = seg.values[1];\n          var x = seg.values[2];\n          var y = seg.values[3];\n          absolutizedPathData.push({\n            type: \"Q\",\n            values: [x1, y1, x, y]\n          });\n          currentX = x;\n          currentY = y;\n        } else if (type === \"q\") {\n          var x1 = currentX + seg.values[0];\n          var y1 = currentY + seg.values[1];\n          var x = currentX + seg.values[2];\n          var y = currentY + seg.values[3];\n          absolutizedPathData.push({\n            type: \"Q\",\n            values: [x1, y1, x, y]\n          });\n          currentX = x;\n          currentY = y;\n        } else if (type === \"A\") {\n          var x = seg.values[5];\n          var y = seg.values[6];\n          absolutizedPathData.push({\n            type: \"A\",\n            values: [seg.values[0], seg.values[1], seg.values[2], seg.values[3], seg.values[4], x, y]\n          });\n          currentX = x;\n          currentY = y;\n        } else if (type === \"a\") {\n          var x = currentX + seg.values[5];\n          var y = currentY + seg.values[6];\n          absolutizedPathData.push({\n            type: \"A\",\n            values: [seg.values[0], seg.values[1], seg.values[2], seg.values[3], seg.values[4], x, y]\n          });\n          currentX = x;\n          currentY = y;\n        } else if (type === \"H\") {\n          var x = seg.values[0];\n          absolutizedPathData.push({\n            type: \"H\",\n            values: [x]\n          });\n          currentX = x;\n        } else if (type === \"h\") {\n          var x = currentX + seg.values[0];\n          absolutizedPathData.push({\n            type: \"H\",\n            values: [x]\n          });\n          currentX = x;\n        } else if (type === \"V\") {\n          var y = seg.values[0];\n          absolutizedPathData.push({\n            type: \"V\",\n            values: [y]\n          });\n          currentY = y;\n        } else if (type === \"v\") {\n          var y = currentY + seg.values[0];\n          absolutizedPathData.push({\n            type: \"V\",\n            values: [y]\n          });\n          currentY = y;\n        } else if (type === \"S\") {\n          var x2 = seg.values[0];\n          var y2 = seg.values[1];\n          var x = seg.values[2];\n          var y = seg.values[3];\n          absolutizedPathData.push({\n            type: \"S\",\n            values: [x2, y2, x, y]\n          });\n          currentX = x;\n          currentY = y;\n        } else if (type === \"s\") {\n          var x2 = currentX + seg.values[0];\n          var y2 = currentY + seg.values[1];\n          var x = currentX + seg.values[2];\n          var y = currentY + seg.values[3];\n          absolutizedPathData.push({\n            type: \"S\",\n            values: [x2, y2, x, y]\n          });\n          currentX = x;\n          currentY = y;\n        } else if (type === \"T\") {\n          var x = seg.values[0];\n          var y = seg.values[1];\n          absolutizedPathData.push({\n            type: \"T\",\n            values: [x, y]\n          });\n          currentX = x;\n          currentY = y;\n        } else if (type === \"t\") {\n          var x = currentX + seg.values[0];\n          var y = currentY + seg.values[1];\n          absolutizedPathData.push({\n            type: \"T\",\n            values: [x, y]\n          });\n          currentX = x;\n          currentY = y;\n        } else if (type === \"Z\" || type === \"z\") {\n          absolutizedPathData.push({\n            type: \"Z\",\n            values: []\n          });\n          currentX = subpathX;\n          currentY = subpathY;\n        }\n      });\n      return absolutizedPathData;\n    };\n\n    // @info\n    //   Takes path data that consists only from absolute commands, returns path data that consists only from\n    //   \"M\", \"L\", \"C\" and \"Z\" commands.\n    var reducePathData = function (pathData) {\n      var reducedPathData = [];\n      var lastType = null;\n      var lastControlX = null;\n      var lastControlY = null;\n      var currentX = null;\n      var currentY = null;\n      var subpathX = null;\n      var subpathY = null;\n      pathData.forEach(function (seg) {\n        if (seg.type === \"M\") {\n          var x = seg.values[0];\n          var y = seg.values[1];\n          reducedPathData.push({\n            type: \"M\",\n            values: [x, y]\n          });\n          subpathX = x;\n          subpathY = y;\n          currentX = x;\n          currentY = y;\n        } else if (seg.type === \"C\") {\n          var x1 = seg.values[0];\n          var y1 = seg.values[1];\n          var x2 = seg.values[2];\n          var y2 = seg.values[3];\n          var x = seg.values[4];\n          var y = seg.values[5];\n          reducedPathData.push({\n            type: \"C\",\n            values: [x1, y1, x2, y2, x, y]\n          });\n          lastControlX = x2;\n          lastControlY = y2;\n          currentX = x;\n          currentY = y;\n        } else if (seg.type === \"L\") {\n          var x = seg.values[0];\n          var y = seg.values[1];\n          reducedPathData.push({\n            type: \"L\",\n            values: [x, y]\n          });\n          currentX = x;\n          currentY = y;\n        } else if (seg.type === \"H\") {\n          var x = seg.values[0];\n          reducedPathData.push({\n            type: \"L\",\n            values: [x, currentY]\n          });\n          currentX = x;\n        } else if (seg.type === \"V\") {\n          var y = seg.values[0];\n          reducedPathData.push({\n            type: \"L\",\n            values: [currentX, y]\n          });\n          currentY = y;\n        } else if (seg.type === \"S\") {\n          var x2 = seg.values[0];\n          var y2 = seg.values[1];\n          var x = seg.values[2];\n          var y = seg.values[3];\n          var cx1, cy1;\n          if (lastType === \"C\" || lastType === \"S\") {\n            cx1 = currentX + (currentX - lastControlX);\n            cy1 = currentY + (currentY - lastControlY);\n          } else {\n            cx1 = currentX;\n            cy1 = currentY;\n          }\n          reducedPathData.push({\n            type: \"C\",\n            values: [cx1, cy1, x2, y2, x, y]\n          });\n          lastControlX = x2;\n          lastControlY = y2;\n          currentX = x;\n          currentY = y;\n        } else if (seg.type === \"T\") {\n          var x = seg.values[0];\n          var y = seg.values[1];\n          var x1, y1;\n          if (lastType === \"Q\" || lastType === \"T\") {\n            x1 = currentX + (currentX - lastControlX);\n            y1 = currentY + (currentY - lastControlY);\n          } else {\n            x1 = currentX;\n            y1 = currentY;\n          }\n          var cx1 = currentX + 2 * (x1 - currentX) / 3;\n          var cy1 = currentY + 2 * (y1 - currentY) / 3;\n          var cx2 = x + 2 * (x1 - x) / 3;\n          var cy2 = y + 2 * (y1 - y) / 3;\n          reducedPathData.push({\n            type: \"C\",\n            values: [cx1, cy1, cx2, cy2, x, y]\n          });\n          lastControlX = x1;\n          lastControlY = y1;\n          currentX = x;\n          currentY = y;\n        } else if (seg.type === \"Q\") {\n          var x1 = seg.values[0];\n          var y1 = seg.values[1];\n          var x = seg.values[2];\n          var y = seg.values[3];\n          var cx1 = currentX + 2 * (x1 - currentX) / 3;\n          var cy1 = currentY + 2 * (y1 - currentY) / 3;\n          var cx2 = x + 2 * (x1 - x) / 3;\n          var cy2 = y + 2 * (y1 - y) / 3;\n          reducedPathData.push({\n            type: \"C\",\n            values: [cx1, cy1, cx2, cy2, x, y]\n          });\n          lastControlX = x1;\n          lastControlY = y1;\n          currentX = x;\n          currentY = y;\n        } else if (seg.type === \"A\") {\n          var r1 = Math.abs(seg.values[0]);\n          var r2 = Math.abs(seg.values[1]);\n          var angle = seg.values[2];\n          var largeArcFlag = seg.values[3];\n          var sweepFlag = seg.values[4];\n          var x = seg.values[5];\n          var y = seg.values[6];\n          if (r1 === 0 || r2 === 0) {\n            reducedPathData.push({\n              type: \"C\",\n              values: [currentX, currentY, x, y, x, y]\n            });\n            currentX = x;\n            currentY = y;\n          } else {\n            if (currentX !== x || currentY !== y) {\n              var curves = arcToCubicCurves(currentX, currentY, x, y, r1, r2, angle, largeArcFlag, sweepFlag);\n              curves.forEach(function (curve) {\n                reducedPathData.push({\n                  type: \"C\",\n                  values: curve\n                });\n              });\n              currentX = x;\n              currentY = y;\n            }\n          }\n        } else if (seg.type === \"Z\") {\n          reducedPathData.push(seg);\n          currentX = subpathX;\n          currentY = subpathY;\n        }\n        lastType = seg.type;\n      });\n      return reducedPathData;\n    };\n    SVGPathElement.prototype.setAttribute = function (name, value) {\n      if (name === \"d\") {\n        this[$cachedPathData] = null;\n        this[$cachedNormalizedPathData] = null;\n      }\n      setAttribute.call(this, name, value);\n    };\n    SVGPathElement.prototype.setAttributeNS = function (namespace, name, value) {\n      if (name === \"d\") {\n        var namespaceURI = \"http://www.w3.org/2000/svg\";\n        if (namespace) {\n          for (var attribute of this.ownerSVGElement.attributes) {\n            if (attribute.name === `xmlns:${namespace}`) {\n              namespaceURI = attribute.value;\n            }\n          }\n        }\n        if (namespaceURI === \"http://www.w3.org/2000/svg\") {\n          this[$cachedPathData] = null;\n          this[$cachedNormalizedPathData] = null;\n        }\n      }\n      setAttributeNS.call(this, namespace, name, value);\n    };\n    SVGPathElement.prototype.removeAttribute = function (name, value) {\n      if (name === \"d\") {\n        this[$cachedPathData] = null;\n        this[$cachedNormalizedPathData] = null;\n      }\n      removeAttribute.call(this, name);\n    };\n    SVGPathElement.prototype.removeAttributeNS = function (namespace, name) {\n      if (name === \"d\") {\n        var namespaceURI = \"http://www.w3.org/2000/svg\";\n        if (namespace) {\n          for (var attribute of this.ownerSVGElement.attributes) {\n            if (attribute.name === `xmlns:${namespace}`) {\n              namespaceURI = attribute.value;\n            }\n          }\n        }\n        if (namespaceURI === \"http://www.w3.org/2000/svg\") {\n          this[$cachedPathData] = null;\n          this[$cachedNormalizedPathData] = null;\n        }\n      }\n      removeAttributeNS.call(this, namespace, name);\n    };\n    SVGPathElement.prototype.getPathData = function (options) {\n      if (options && options.normalize) {\n        if (this[$cachedNormalizedPathData]) {\n          return clonePathData(this[$cachedNormalizedPathData]);\n        } else {\n          var pathData;\n          if (this[$cachedPathData]) {\n            pathData = clonePathData(this[$cachedPathData]);\n          } else {\n            pathData = parsePathDataString(this.getAttribute(\"d\") || \"\");\n            this[$cachedPathData] = clonePathData(pathData);\n          }\n          var normalizedPathData = reducePathData(absolutizePathData(pathData));\n          this[$cachedNormalizedPathData] = clonePathData(normalizedPathData);\n          return normalizedPathData;\n        }\n      } else {\n        if (this[$cachedPathData]) {\n          return clonePathData(this[$cachedPathData]);\n        } else {\n          var pathData = parsePathDataString(this.getAttribute(\"d\") || \"\");\n          this[$cachedPathData] = clonePathData(pathData);\n          return pathData;\n        }\n      }\n    };\n    SVGPathElement.prototype.setPathData = function (pathData) {\n      if (pathData.length === 0) {\n        if (isIE) {\n          // @bugfix https://github.com/mbostock/d3/issues/1737\n          this.setAttribute(\"d\", \"\");\n        } else {\n          this.removeAttribute(\"d\");\n        }\n      } else {\n        var d = \"\";\n        for (var i = 0, l = pathData.length; i < l; i += 1) {\n          var seg = pathData[i];\n          if (i > 0) {\n            d += \" \";\n          }\n          d += seg.type;\n          if (seg.values && seg.values.length > 0) {\n            d += \" \" + seg.values.join(\" \");\n          }\n        }\n        this.setAttribute(\"d\", d);\n      }\n    };\n    SVGRectElement.prototype.getPathData = function (options) {\n      var x = this.x.baseVal.value;\n      var y = this.y.baseVal.value;\n      var width = this.width.baseVal.value;\n      var height = this.height.baseVal.value;\n      var rx = this.hasAttribute(\"rx\") ? this.rx.baseVal.value : this.ry.baseVal.value;\n      var ry = this.hasAttribute(\"ry\") ? this.ry.baseVal.value : this.rx.baseVal.value;\n      if (rx > width / 2) {\n        rx = width / 2;\n      }\n      if (ry > height / 2) {\n        ry = height / 2;\n      }\n      var pathData = [{\n        type: \"M\",\n        values: [x + rx, y]\n      }, {\n        type: \"H\",\n        values: [x + width - rx]\n      }, {\n        type: \"A\",\n        values: [rx, ry, 0, 0, 1, x + width, y + ry]\n      }, {\n        type: \"V\",\n        values: [y + height - ry]\n      }, {\n        type: \"A\",\n        values: [rx, ry, 0, 0, 1, x + width - rx, y + height]\n      }, {\n        type: \"H\",\n        values: [x + rx]\n      }, {\n        type: \"A\",\n        values: [rx, ry, 0, 0, 1, x, y + height - ry]\n      }, {\n        type: \"V\",\n        values: [y + ry]\n      }, {\n        type: \"A\",\n        values: [rx, ry, 0, 0, 1, x + rx, y]\n      }, {\n        type: \"Z\",\n        values: []\n      }];\n\n      // Get rid of redundant \"A\" segs when either rx or ry is 0\n      pathData = pathData.filter(function (s) {\n        return s.type === \"A\" && (s.values[0] === 0 || s.values[1] === 0) ? false : true;\n      });\n      if (options && options.normalize === true) {\n        pathData = reducePathData(pathData);\n      }\n      return pathData;\n    };\n    SVGCircleElement.prototype.getPathData = function (options) {\n      var cx = this.cx.baseVal.value;\n      var cy = this.cy.baseVal.value;\n      var r = this.r.baseVal.value;\n      var pathData = [{\n        type: \"M\",\n        values: [cx + r, cy]\n      }, {\n        type: \"A\",\n        values: [r, r, 0, 0, 1, cx, cy + r]\n      }, {\n        type: \"A\",\n        values: [r, r, 0, 0, 1, cx - r, cy]\n      }, {\n        type: \"A\",\n        values: [r, r, 0, 0, 1, cx, cy - r]\n      }, {\n        type: \"A\",\n        values: [r, r, 0, 0, 1, cx + r, cy]\n      }, {\n        type: \"Z\",\n        values: []\n      }];\n      if (options && options.normalize === true) {\n        pathData = reducePathData(pathData);\n      }\n      return pathData;\n    };\n    SVGEllipseElement.prototype.getPathData = function (options) {\n      var cx = this.cx.baseVal.value;\n      var cy = this.cy.baseVal.value;\n      var rx = this.rx.baseVal.value;\n      var ry = this.ry.baseVal.value;\n      var pathData = [{\n        type: \"M\",\n        values: [cx + rx, cy]\n      }, {\n        type: \"A\",\n        values: [rx, ry, 0, 0, 1, cx, cy + ry]\n      }, {\n        type: \"A\",\n        values: [rx, ry, 0, 0, 1, cx - rx, cy]\n      }, {\n        type: \"A\",\n        values: [rx, ry, 0, 0, 1, cx, cy - ry]\n      }, {\n        type: \"A\",\n        values: [rx, ry, 0, 0, 1, cx + rx, cy]\n      }, {\n        type: \"Z\",\n        values: []\n      }];\n      if (options && options.normalize === true) {\n        pathData = reducePathData(pathData);\n      }\n      return pathData;\n    };\n    SVGLineElement.prototype.getPathData = function () {\n      return [{\n        type: \"M\",\n        values: [this.x1.baseVal.value, this.y1.baseVal.value]\n      }, {\n        type: \"L\",\n        values: [this.x2.baseVal.value, this.y2.baseVal.value]\n      }];\n    };\n    SVGPolylineElement.prototype.getPathData = function () {\n      var pathData = [];\n      for (var i = 0; i < this.points.numberOfItems; i += 1) {\n        var point = this.points.getItem(i);\n        pathData.push({\n          type: i === 0 ? \"M\" : \"L\",\n          values: [point.x, point.y]\n        });\n      }\n      return pathData;\n    };\n    SVGPolygonElement.prototype.getPathData = function () {\n      var pathData = [];\n      for (var i = 0; i < this.points.numberOfItems; i += 1) {\n        var point = this.points.getItem(i);\n        pathData.push({\n          type: i === 0 ? \"M\" : \"L\",\n          values: [point.x, point.y]\n        });\n      }\n      pathData.push({\n        type: \"Z\",\n        values: []\n      });\n      return pathData;\n    };\n  })();\n}","map":{"version":3,"names":["SVGPathElement","prototype","getPathData","setPathData","commandsMap","Source","string","_string","_currentIndex","_endIndex","length","_prevCommand","_skipOptionalSpaces","isIE","window","navigator","userAgent","indexOf","parseSegment","char","command","values","cmd","toUpperCase","_parseNumber","_parseArcFlag","type","hasMoreData","peekSegmentType","initialCommandIsMoveTo","_isCurrentSpace","_skipOptionalSpacesOrDelimiter","exponent","integer","frac","decimal","sign","expsign","startIndex","startIntPartIndex","scanIntPartIndex","multiplier","charAt","number","Math","pow","flag","flagChar","parsePathDataString","source","pathData","pathSeg","push","setAttribute","setAttributeNS","removeAttribute","removeAttributeNS","$cachedPathData","Symbol","$cachedNormalizedPathData","arcToCubicCurves","x1","y1","x2","y2","r1","r2","angle","largeArcFlag","sweepFlag","_recursive","degToRad","degrees","PI","rotate","x","y","angleRad","X","cos","sin","Y","params","f1","f2","cx","cy","p1","p2","h","sqrt","r1Pow","r2Pow","left","right","k","abs","asin","parseFloat","toFixed","df","f2old","x2old","y2old","c1","s1","c2","s2","t","tan","hx","hy","m1","m2","m3","m4","concat","curves","i","r3","clonePathData","map","seg","Array","slice","call","absolutizePathData","absolutizedPathData","currentX","currentY","subpathX","subpathY","forEach","reducePathData","reducedPathData","lastType","lastControlX","lastControlY","cx1","cy1","cx2","cy2","curve","name","value","namespace","namespaceURI","attribute","ownerSVGElement","attributes","options","normalize","getAttribute","normalizedPathData","d","l","join","SVGRectElement","baseVal","width","height","rx","hasAttribute","ry","filter","s","SVGCircleElement","r","SVGEllipseElement","SVGLineElement","SVGPolylineElement","points","numberOfItems","point","getItem","SVGPolygonElement"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/frontend/node_modules/path-data-polyfill/path-data-polyfill.js"],"sourcesContent":["\n// @info\n//   Polyfill for SVG getPathData() and setPathData() methods. Based on:\n//   - SVGPathSeg polyfill by Philip Rogers (MIT License)\n//     https://github.com/progers/pathseg\n//   - SVGPathNormalizer by Tadahisa Motooka (MIT License)\n//     https://github.com/motooka/SVGPathNormalizer/tree/master/src\n//   - arcToCubicCurves() by Dmitry Baranovskiy (MIT License)\n//     https://github.com/DmitryBaranovskiy/raphael/blob/v2.1.1/raphael.core.js#L1837\n// @author\n//   JarosÅ‚aw Foksa\n// @license\n//   MIT License\nif (!SVGPathElement.prototype.getPathData || !SVGPathElement.prototype.setPathData) {\n  (function() {\n    var commandsMap = {\n      \"Z\":\"Z\", \"M\":\"M\", \"L\":\"L\", \"C\":\"C\", \"Q\":\"Q\", \"A\":\"A\", \"H\":\"H\", \"V\":\"V\", \"S\":\"S\", \"T\":\"T\",\n      \"z\":\"Z\", \"m\":\"m\", \"l\":\"l\", \"c\":\"c\", \"q\":\"q\", \"a\":\"a\", \"h\":\"h\", \"v\":\"v\", \"s\":\"s\", \"t\":\"t\"\n    };\n\n    var Source = function(string) {\n      this._string = string;\n      this._currentIndex = 0;\n      this._endIndex = this._string.length;\n      this._prevCommand = null;\n      this._skipOptionalSpaces();\n    };\n\n    var isIE = window.navigator.userAgent.indexOf(\"MSIE \") !== -1;\n\n    Source.prototype = {\n      parseSegment: function() {\n        var char = this._string[this._currentIndex];\n        var command = commandsMap[char] ? commandsMap[char] : null;\n\n        if (command === null) {\n          // Possibly an implicit command. Not allowed if this is the first command.\n          if (this._prevCommand === null) {\n            return null;\n          }\n\n          // Check for remaining coordinates in the current command.\n          if (\n            (char === \"+\" || char === \"-\" || char === \".\" || (char >= \"0\" && char <= \"9\")) && this._prevCommand !== \"Z\"\n          ) {\n            if (this._prevCommand === \"M\") {\n              command = \"L\";\n            }\n            else if (this._prevCommand === \"m\") {\n              command = \"l\";\n            }\n            else {\n              command = this._prevCommand;\n            }\n          }\n          else {\n            command = null;\n          }\n\n          if (command === null) {\n            return null;\n          }\n        }\n        else {\n          this._currentIndex += 1;\n        }\n\n        this._prevCommand = command;\n\n        var values = null;\n        var cmd = command.toUpperCase();\n\n        if (cmd === \"H\" || cmd === \"V\") {\n          values = [this._parseNumber()];\n        }\n        else if (cmd === \"M\" || cmd === \"L\" || cmd === \"T\") {\n          values = [this._parseNumber(), this._parseNumber()];\n        }\n        else if (cmd === \"S\" || cmd === \"Q\") {\n          values = [this._parseNumber(), this._parseNumber(), this._parseNumber(), this._parseNumber()];\n        }\n        else if (cmd === \"C\") {\n          values = [\n            this._parseNumber(),\n            this._parseNumber(),\n            this._parseNumber(),\n            this._parseNumber(),\n            this._parseNumber(),\n            this._parseNumber()\n          ];\n        }\n        else if (cmd === \"A\") {\n          values = [\n            this._parseNumber(),\n            this._parseNumber(),\n            this._parseNumber(),\n            this._parseArcFlag(),\n            this._parseArcFlag(),\n            this._parseNumber(),\n            this._parseNumber()\n          ];\n        }\n        else if (cmd === \"Z\") {\n          this._skipOptionalSpaces();\n          values = [];\n        }\n\n        if (values === null || values.indexOf(null) >= 0) {\n          // Unknown command or known command with invalid values\n          return null;\n        }\n        else {\n          return {type: command, values: values};\n        }\n      },\n\n      hasMoreData: function() {\n        return this._currentIndex < this._endIndex;\n      },\n\n      peekSegmentType: function() {\n        var char = this._string[this._currentIndex];\n        return commandsMap[char] ? commandsMap[char] : null;\n      },\n\n      initialCommandIsMoveTo: function() {\n        // If the path is empty it is still valid, so return true.\n        if (!this.hasMoreData()) {\n          return true;\n        }\n\n        var command = this.peekSegmentType();\n        // Path must start with moveTo.\n        return command === \"M\" || command === \"m\";\n      },\n\n      _isCurrentSpace: function() {\n        var char = this._string[this._currentIndex];\n        return char <= \" \" && (char === \" \" || char === \"\\n\" || char === \"\\t\" || char === \"\\r\" || char === \"\\f\");\n      },\n\n      _skipOptionalSpaces: function() {\n        while (this._currentIndex < this._endIndex && this._isCurrentSpace()) {\n          this._currentIndex += 1;\n        }\n\n        return this._currentIndex < this._endIndex;\n      },\n\n      _skipOptionalSpacesOrDelimiter: function() {\n        if (\n          this._currentIndex < this._endIndex &&\n          !this._isCurrentSpace() &&\n          this._string[this._currentIndex] !== \",\"\n        ) {\n          return false;\n        }\n\n        if (this._skipOptionalSpaces()) {\n          if (this._currentIndex < this._endIndex && this._string[this._currentIndex] === \",\") {\n            this._currentIndex += 1;\n            this._skipOptionalSpaces();\n          }\n        }\n        return this._currentIndex < this._endIndex;\n      },\n\n      // Parse a number from an SVG path. This very closely follows genericParseNumber(...) from\n      // Source/core/svg/SVGParserUtilities.cpp.\n      // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-PathDataBNF\n      _parseNumber: function() {\n        var exponent = 0;\n        var integer = 0;\n        var frac = 1;\n        var decimal = 0;\n        var sign = 1;\n        var expsign = 1;\n        var startIndex = this._currentIndex;\n\n        this._skipOptionalSpaces();\n\n        // Read the sign.\n        if (this._currentIndex < this._endIndex && this._string[this._currentIndex] === \"+\") {\n          this._currentIndex += 1;\n        }\n        else if (this._currentIndex < this._endIndex && this._string[this._currentIndex] === \"-\") {\n          this._currentIndex += 1;\n          sign = -1;\n        }\n\n        if (\n          this._currentIndex === this._endIndex ||\n          (\n            (this._string[this._currentIndex] < \"0\" || this._string[this._currentIndex] > \"9\") &&\n            this._string[this._currentIndex] !== \".\"\n          )\n        ) {\n          // The first character of a number must be one of [0-9+-.].\n          return null;\n        }\n\n        // Read the integer part, build right-to-left.\n        var startIntPartIndex = this._currentIndex;\n\n        while (\n          this._currentIndex < this._endIndex &&\n          this._string[this._currentIndex] >= \"0\" &&\n          this._string[this._currentIndex] <= \"9\"\n        ) {\n          this._currentIndex += 1; // Advance to first non-digit.\n        }\n\n        if (this._currentIndex !== startIntPartIndex) {\n          var scanIntPartIndex = this._currentIndex - 1;\n          var multiplier = 1;\n\n          while (scanIntPartIndex >= startIntPartIndex) {\n            integer += multiplier * (this._string[scanIntPartIndex] - \"0\");\n            scanIntPartIndex -= 1;\n            multiplier *= 10;\n          }\n        }\n\n        // Read the decimals.\n        if (this._currentIndex < this._endIndex && this._string[this._currentIndex] === \".\") {\n          this._currentIndex += 1;\n\n          // There must be a least one digit following the .\n          if (\n            this._currentIndex >= this._endIndex ||\n            this._string[this._currentIndex] < \"0\" ||\n            this._string[this._currentIndex] > \"9\"\n          ) {\n            return null;\n          }\n\n          while (\n            this._currentIndex < this._endIndex &&\n            this._string[this._currentIndex] >= \"0\" &&\n            this._string[this._currentIndex] <= \"9\"\n          ) {\n            frac *= 10;\n            decimal += (this._string.charAt(this._currentIndex) - \"0\") / frac;\n            this._currentIndex += 1;\n          }\n        }\n\n        // Read the exponent part.\n        if (\n          this._currentIndex !== startIndex &&\n          this._currentIndex + 1 < this._endIndex &&\n          (this._string[this._currentIndex] === \"e\" || this._string[this._currentIndex] === \"E\") &&\n          (this._string[this._currentIndex + 1] !== \"x\" && this._string[this._currentIndex + 1] !== \"m\")\n        ) {\n          this._currentIndex += 1;\n\n          // Read the sign of the exponent.\n          if (this._string[this._currentIndex] === \"+\") {\n            this._currentIndex += 1;\n          }\n          else if (this._string[this._currentIndex] === \"-\") {\n            this._currentIndex += 1;\n            expsign = -1;\n          }\n\n          // There must be an exponent.\n          if (\n            this._currentIndex >= this._endIndex ||\n            this._string[this._currentIndex] < \"0\" ||\n            this._string[this._currentIndex] > \"9\"\n          ) {\n            return null;\n          }\n\n          while (\n            this._currentIndex < this._endIndex &&\n            this._string[this._currentIndex] >= \"0\" &&\n            this._string[this._currentIndex] <= \"9\"\n          ) {\n            exponent *= 10;\n            exponent += (this._string[this._currentIndex] - \"0\");\n            this._currentIndex += 1;\n          }\n        }\n\n        var number = integer + decimal;\n        number *= sign;\n\n        if (exponent) {\n          number *= Math.pow(10, expsign * exponent);\n        }\n\n        if (startIndex === this._currentIndex) {\n          return null;\n        }\n\n        this._skipOptionalSpacesOrDelimiter();\n\n        return number;\n      },\n\n      _parseArcFlag: function() {\n        if (this._currentIndex >= this._endIndex) {\n          return null;\n        }\n\n        var flag = null;\n        var flagChar = this._string[this._currentIndex];\n\n        this._currentIndex += 1;\n\n        if (flagChar === \"0\") {\n          flag = 0;\n        }\n        else if (flagChar === \"1\") {\n          flag = 1;\n        }\n        else {\n          return null;\n        }\n\n        this._skipOptionalSpacesOrDelimiter();\n        return flag;\n      }\n    };\n\n    var parsePathDataString = function(string) {\n      if (!string || string.length === 0) return [];\n\n      var source = new Source(string);\n      var pathData = [];\n\n      if (source.initialCommandIsMoveTo()) {\n        while (source.hasMoreData()) {\n          var pathSeg = source.parseSegment();\n\n          if (pathSeg === null) {\n            break;\n          }\n          else {\n            pathData.push(pathSeg);\n          }\n        }\n      }\n\n      return pathData;\n    }\n\n    var setAttribute = SVGPathElement.prototype.setAttribute;\n    var setAttributeNS = SVGPathElement.prototype.setAttributeNS;\n    var removeAttribute = SVGPathElement.prototype.removeAttribute;\n    var removeAttributeNS = SVGPathElement.prototype.removeAttributeNS;\n\n    var $cachedPathData = window.Symbol ? Symbol() : \"__cachedPathData\";\n    var $cachedNormalizedPathData = window.Symbol ? Symbol() : \"__cachedNormalizedPathData\";\n\n    // @info\n    //   Get an array of corresponding cubic bezier curve parameters for given arc curve paramters.\n    var arcToCubicCurves = function(x1, y1, x2, y2, r1, r2, angle, largeArcFlag, sweepFlag, _recursive) {\n      var degToRad = function(degrees) {\n        return (Math.PI * degrees) / 180;\n      };\n\n      var rotate = function(x, y, angleRad) {\n        var X = x * Math.cos(angleRad) - y * Math.sin(angleRad);\n        var Y = x * Math.sin(angleRad) + y * Math.cos(angleRad);\n        return {x: X, y: Y};\n      };\n\n      var angleRad = degToRad(angle);\n      var params = [];\n      var f1, f2, cx, cy;\n\n      if (_recursive) {\n        f1 = _recursive[0];\n        f2 = _recursive[1];\n        cx = _recursive[2];\n        cy = _recursive[3];\n      }\n      else {\n        var p1 = rotate(x1, y1, -angleRad);\n        x1 = p1.x;\n        y1 = p1.y;\n\n        var p2 = rotate(x2, y2, -angleRad);\n        x2 = p2.x;\n        y2 = p2.y;\n\n        var x = (x1 - x2) / 2;\n        var y = (y1 - y2) / 2;\n        var h = (x * x) / (r1 * r1) + (y * y) / (r2 * r2);\n\n        if (h > 1) {\n          h = Math.sqrt(h);\n          r1 = h * r1;\n          r2 = h * r2;\n        }\n\n        var sign;\n\n        if (largeArcFlag === sweepFlag) {\n          sign = -1;\n        }\n        else {\n          sign = 1;\n        }\n\n        var r1Pow = r1 * r1;\n        var r2Pow = r2 * r2;\n\n        var left = r1Pow * r2Pow - r1Pow * y * y - r2Pow * x * x;\n        var right = r1Pow * y * y + r2Pow * x * x;\n\n        var k = sign * Math.sqrt(Math.abs(left/right));\n\n        cx = k * r1 * y / r2 + (x1 + x2) / 2;\n        cy = k * -r2 * x / r1 + (y1 + y2) / 2;\n\n        f1 = Math.asin(parseFloat(((y1 - cy) / r2).toFixed(9)));\n        f2 = Math.asin(parseFloat(((y2 - cy) / r2).toFixed(9)));\n\n        if (x1 < cx) {\n          f1 = Math.PI - f1;\n        }\n        if (x2 < cx) {\n          f2 = Math.PI - f2;\n        }\n\n        if (f1 < 0) {\n          f1 = Math.PI * 2 + f1;\n        }\n        if (f2 < 0) {\n          f2 = Math.PI * 2 + f2;\n        }\n\n        if (sweepFlag && f1 > f2) {\n          f1 = f1 - Math.PI * 2;\n        }\n        if (!sweepFlag && f2 > f1) {\n          f2 = f2 - Math.PI * 2;\n        }\n      }\n\n      var df = f2 - f1;\n\n      if (Math.abs(df) > (Math.PI * 120 / 180)) {\n        var f2old = f2;\n        var x2old = x2;\n        var y2old = y2;\n\n        if (sweepFlag && f2 > f1) {\n          f2 = f1 + (Math.PI * 120 / 180) * (1);\n        }\n        else {\n          f2 = f1 + (Math.PI * 120 / 180) * (-1);\n        }\n\n        x2 = cx + r1 * Math.cos(f2);\n        y2 = cy + r2 * Math.sin(f2);\n        params = arcToCubicCurves(x2, y2, x2old, y2old, r1, r2, angle, 0, sweepFlag, [f2, f2old, cx, cy]);\n      }\n\n      df = f2 - f1;\n\n      var c1 = Math.cos(f1);\n      var s1 = Math.sin(f1);\n      var c2 = Math.cos(f2);\n      var s2 = Math.sin(f2);\n      var t = Math.tan(df / 4);\n      var hx = 4 / 3 * r1 * t;\n      var hy = 4 / 3 * r2 * t;\n\n      var m1 = [x1, y1];\n      var m2 = [x1 + hx * s1, y1 - hy * c1];\n      var m3 = [x2 + hx * s2, y2 - hy * c2];\n      var m4 = [x2, y2];\n\n      m2[0] = 2 * m1[0] - m2[0];\n      m2[1] = 2 * m1[1] - m2[1];\n\n      if (_recursive) {\n        return [m2, m3, m4].concat(params);\n      }\n      else {\n        params = [m2, m3, m4].concat(params);\n\n        var curves = [];\n\n        for (var i = 0; i < params.length; i+=3) {\n          var r1 = rotate(params[i][0], params[i][1], angleRad);\n          var r2 = rotate(params[i+1][0], params[i+1][1], angleRad);\n          var r3 = rotate(params[i+2][0], params[i+2][1], angleRad);\n          curves.push([r1.x, r1.y, r2.x, r2.y, r3.x, r3.y]);\n        }\n\n        return curves;\n      }\n    };\n\n    var clonePathData = function(pathData) {\n      return pathData.map( function(seg) {\n        return {type: seg.type, values: Array.prototype.slice.call(seg.values)}\n      });\n    };\n\n    // @info\n    //   Takes any path data, returns path data that consists only from absolute commands.\n    var absolutizePathData = function(pathData) {\n      var absolutizedPathData = [];\n\n      var currentX = null;\n      var currentY = null;\n\n      var subpathX = null;\n      var subpathY = null;\n\n      pathData.forEach( function(seg) {\n        var type = seg.type;\n\n        if (type === \"M\") {\n          var x = seg.values[0];\n          var y = seg.values[1];\n\n          absolutizedPathData.push({type: \"M\", values: [x, y]});\n\n          subpathX = x;\n          subpathY = y;\n\n          currentX = x;\n          currentY = y;\n        }\n\n        else if (type === \"m\") {\n          var x = currentX + seg.values[0];\n          var y = currentY + seg.values[1];\n\n          absolutizedPathData.push({type: \"M\", values: [x, y]});\n\n          subpathX = x;\n          subpathY = y;\n\n          currentX = x;\n          currentY = y;\n        }\n\n        else if (type === \"L\") {\n          var x = seg.values[0];\n          var y = seg.values[1];\n\n          absolutizedPathData.push({type: \"L\", values: [x, y]});\n\n          currentX = x;\n          currentY = y;\n        }\n\n        else if (type === \"l\") {\n          var x = currentX + seg.values[0];\n          var y = currentY + seg.values[1];\n\n          absolutizedPathData.push({type: \"L\", values: [x, y]});\n\n          currentX = x;\n          currentY = y;\n        }\n\n        else if (type === \"C\") {\n          var x1 = seg.values[0];\n          var y1 = seg.values[1];\n          var x2 = seg.values[2];\n          var y2 = seg.values[3];\n          var x = seg.values[4];\n          var y = seg.values[5];\n\n          absolutizedPathData.push({type: \"C\", values: [x1, y1, x2, y2, x, y]});\n\n          currentX = x;\n          currentY = y;\n        }\n\n        else if (type === \"c\") {\n          var x1 = currentX + seg.values[0];\n          var y1 = currentY + seg.values[1];\n          var x2 = currentX + seg.values[2];\n          var y2 = currentY + seg.values[3];\n          var x = currentX + seg.values[4];\n          var y = currentY + seg.values[5];\n\n          absolutizedPathData.push({type: \"C\", values: [x1, y1, x2, y2, x, y]});\n\n          currentX = x;\n          currentY = y;\n        }\n\n        else if (type === \"Q\") {\n          var x1 = seg.values[0];\n          var y1 = seg.values[1];\n          var x = seg.values[2];\n          var y = seg.values[3];\n\n          absolutizedPathData.push({type: \"Q\", values: [x1, y1, x, y]});\n\n          currentX = x;\n          currentY = y;\n        }\n\n        else if (type === \"q\") {\n          var x1 = currentX + seg.values[0];\n          var y1 = currentY + seg.values[1];\n          var x = currentX + seg.values[2];\n          var y = currentY + seg.values[3];\n\n          absolutizedPathData.push({type: \"Q\", values: [x1, y1, x, y]});\n\n          currentX = x;\n          currentY = y;\n        }\n\n        else if (type === \"A\") {\n          var x = seg.values[5];\n          var y = seg.values[6];\n\n          absolutizedPathData.push({\n            type: \"A\",\n            values: [seg.values[0], seg.values[1], seg.values[2], seg.values[3], seg.values[4], x, y]\n          });\n\n          currentX = x;\n          currentY = y;\n        }\n\n        else if (type === \"a\") {\n          var x = currentX + seg.values[5];\n          var y = currentY + seg.values[6];\n\n          absolutizedPathData.push({\n            type: \"A\",\n            values: [seg.values[0], seg.values[1], seg.values[2], seg.values[3], seg.values[4], x, y]\n          });\n\n          currentX = x;\n          currentY = y;\n        }\n\n        else if (type === \"H\") {\n          var x = seg.values[0];\n          absolutizedPathData.push({type: \"H\", values: [x]});\n          currentX = x;\n        }\n\n        else if (type === \"h\") {\n          var x = currentX + seg.values[0];\n          absolutizedPathData.push({type: \"H\", values: [x]});\n          currentX = x;\n        }\n\n        else if (type === \"V\") {\n          var y = seg.values[0];\n          absolutizedPathData.push({type: \"V\", values: [y]});\n          currentY = y;\n        }\n\n        else if (type === \"v\") {\n          var y = currentY + seg.values[0];\n          absolutizedPathData.push({type: \"V\", values: [y]});\n          currentY = y;\n        }\n\n        else if (type === \"S\") {\n          var x2 = seg.values[0];\n          var y2 = seg.values[1];\n          var x = seg.values[2];\n          var y = seg.values[3];\n\n          absolutizedPathData.push({type: \"S\", values: [x2, y2, x, y]});\n\n          currentX = x;\n          currentY = y;\n        }\n\n        else if (type === \"s\") {\n          var x2 = currentX + seg.values[0];\n          var y2 = currentY + seg.values[1];\n          var x = currentX + seg.values[2];\n          var y = currentY + seg.values[3];\n\n          absolutizedPathData.push({type: \"S\", values: [x2, y2, x, y]});\n\n          currentX = x;\n          currentY = y;\n        }\n\n        else if (type === \"T\") {\n          var x = seg.values[0];\n          var y = seg.values[1]\n\n          absolutizedPathData.push({type: \"T\", values: [x, y]});\n\n          currentX = x;\n          currentY = y;\n        }\n\n        else if (type === \"t\") {\n          var x = currentX + seg.values[0];\n          var y = currentY + seg.values[1]\n\n          absolutizedPathData.push({type: \"T\", values: [x, y]});\n\n          currentX = x;\n          currentY = y;\n        }\n\n        else if (type === \"Z\" || type === \"z\") {\n          absolutizedPathData.push({type: \"Z\", values: []});\n\n          currentX = subpathX;\n          currentY = subpathY;\n        }\n      });\n\n      return absolutizedPathData;\n    };\n\n    // @info\n    //   Takes path data that consists only from absolute commands, returns path data that consists only from\n    //   \"M\", \"L\", \"C\" and \"Z\" commands.\n    var reducePathData = function(pathData) {\n      var reducedPathData = [];\n      var lastType = null;\n\n      var lastControlX = null;\n      var lastControlY = null;\n\n      var currentX = null;\n      var currentY = null;\n\n      var subpathX = null;\n      var subpathY = null;\n\n      pathData.forEach( function(seg) {\n        if (seg.type === \"M\") {\n          var x = seg.values[0];\n          var y = seg.values[1];\n\n          reducedPathData.push({type: \"M\", values: [x, y]});\n\n          subpathX = x;\n          subpathY = y;\n\n          currentX = x;\n          currentY = y;\n        }\n\n        else if (seg.type === \"C\") {\n          var x1 = seg.values[0];\n          var y1 = seg.values[1];\n          var x2 = seg.values[2];\n          var y2 = seg.values[3];\n          var x = seg.values[4];\n          var y = seg.values[5];\n\n          reducedPathData.push({type: \"C\", values: [x1, y1, x2, y2, x, y]});\n\n          lastControlX = x2;\n          lastControlY = y2;\n\n          currentX = x;\n          currentY = y;\n        }\n\n        else if (seg.type === \"L\") {\n          var x = seg.values[0];\n          var y = seg.values[1];\n\n          reducedPathData.push({type: \"L\", values: [x, y]});\n\n          currentX = x;\n          currentY = y;\n        }\n\n        else if (seg.type === \"H\") {\n          var x = seg.values[0];\n\n          reducedPathData.push({type: \"L\", values: [x, currentY]});\n\n          currentX = x;\n        }\n\n        else if (seg.type === \"V\") {\n          var y = seg.values[0];\n\n          reducedPathData.push({type: \"L\", values: [currentX, y]});\n\n          currentY = y;\n        }\n\n        else if (seg.type === \"S\") {\n          var x2 = seg.values[0];\n          var y2 = seg.values[1];\n          var x = seg.values[2];\n          var y = seg.values[3];\n\n          var cx1, cy1;\n\n          if (lastType === \"C\" || lastType === \"S\") {\n            cx1 = currentX + (currentX - lastControlX);\n            cy1 = currentY + (currentY - lastControlY);\n          }\n          else {\n            cx1 = currentX;\n            cy1 = currentY;\n          }\n\n          reducedPathData.push({type: \"C\", values: [cx1, cy1, x2, y2, x, y]});\n\n          lastControlX = x2;\n          lastControlY = y2;\n\n          currentX = x;\n          currentY = y;\n        }\n\n        else if (seg.type === \"T\") {\n          var x = seg.values[0];\n          var y = seg.values[1];\n\n          var x1, y1;\n\n          if (lastType === \"Q\" || lastType === \"T\") {\n            x1 = currentX + (currentX - lastControlX);\n            y1 = currentY + (currentY - lastControlY);\n          }\n          else {\n            x1 = currentX;\n            y1 = currentY;\n          }\n\n          var cx1 = currentX + 2 * (x1 - currentX) / 3;\n          var cy1 = currentY + 2 * (y1 - currentY) / 3;\n          var cx2 = x + 2 * (x1 - x) / 3;\n          var cy2 = y + 2 * (y1 - y) / 3;\n\n          reducedPathData.push({type: \"C\", values: [cx1, cy1, cx2, cy2, x, y]});\n\n          lastControlX = x1;\n          lastControlY = y1;\n\n          currentX = x;\n          currentY = y;\n        }\n\n        else if (seg.type === \"Q\") {\n          var x1 = seg.values[0];\n          var y1 = seg.values[1];\n          var x = seg.values[2];\n          var y = seg.values[3];\n\n          var cx1 = currentX + 2 * (x1 - currentX) / 3;\n          var cy1 = currentY + 2 * (y1 - currentY) / 3;\n          var cx2 = x + 2 * (x1 - x) / 3;\n          var cy2 = y + 2 * (y1 - y) / 3;\n\n          reducedPathData.push({type: \"C\", values: [cx1, cy1, cx2, cy2, x, y]});\n\n          lastControlX = x1;\n          lastControlY = y1;\n\n          currentX = x;\n          currentY = y;\n        }\n\n        else if (seg.type === \"A\") {\n          var r1 = Math.abs(seg.values[0]);\n          var r2 = Math.abs(seg.values[1]);\n          var angle = seg.values[2];\n          var largeArcFlag = seg.values[3];\n          var sweepFlag = seg.values[4];\n          var x = seg.values[5];\n          var y = seg.values[6];\n\n          if (r1 === 0 || r2 === 0) {\n            reducedPathData.push({type: \"C\", values: [currentX, currentY, x, y, x, y]});\n\n            currentX = x;\n            currentY = y;\n          }\n          else {\n            if (currentX !== x || currentY !== y) {\n              var curves = arcToCubicCurves(currentX, currentY, x, y, r1, r2, angle, largeArcFlag, sweepFlag);\n\n              curves.forEach( function(curve) {\n                reducedPathData.push({type: \"C\", values: curve});\n              });\n\n              currentX = x;\n              currentY = y;\n            }\n          }\n        }\n\n        else if (seg.type === \"Z\") {\n          reducedPathData.push(seg);\n\n          currentX = subpathX;\n          currentY = subpathY;\n        }\n\n        lastType = seg.type;\n      });\n\n      return reducedPathData;\n    };\n\n    SVGPathElement.prototype.setAttribute = function(name, value) {\n      if (name === \"d\") {\n        this[$cachedPathData] = null;\n        this[$cachedNormalizedPathData] = null;\n      }\n\n      setAttribute.call(this, name, value);\n    };\n\n    SVGPathElement.prototype.setAttributeNS = function(namespace, name, value) {\n      if (name === \"d\") {\n        var namespaceURI = \"http://www.w3.org/2000/svg\";\n\n        if (namespace) {\n          for (var attribute of this.ownerSVGElement.attributes) {\n            if (attribute.name === `xmlns:${namespace}`) {\n              namespaceURI = attribute.value;\n            }\n          }\n        }\n\n        if (namespaceURI === \"http://www.w3.org/2000/svg\") {\n          this[$cachedPathData] = null;\n          this[$cachedNormalizedPathData] = null;\n        }\n      }\n\n      setAttributeNS.call(this, namespace, name, value);\n    };\n\n    SVGPathElement.prototype.removeAttribute = function(name, value) {\n      if (name === \"d\") {\n        this[$cachedPathData] = null;\n        this[$cachedNormalizedPathData] = null;\n      }\n\n      removeAttribute.call(this, name);\n    };\n\n    SVGPathElement.prototype.removeAttributeNS = function(namespace, name) {\n      if (name === \"d\") {\n        var namespaceURI = \"http://www.w3.org/2000/svg\";\n\n        if (namespace) {\n          for (var attribute of this.ownerSVGElement.attributes) {\n            if (attribute.name === `xmlns:${namespace}`) {\n              namespaceURI = attribute.value;\n            }\n          }\n        }\n\n        if (namespaceURI === \"http://www.w3.org/2000/svg\") {\n          this[$cachedPathData] = null;\n          this[$cachedNormalizedPathData] = null;\n        }\n      }\n\n      removeAttributeNS.call(this, namespace, name);\n    };\n\n    SVGPathElement.prototype.getPathData = function(options) {\n      if (options && options.normalize) {\n        if (this[$cachedNormalizedPathData]) {\n          return clonePathData(this[$cachedNormalizedPathData]);\n        }\n        else {\n          var pathData;\n\n          if (this[$cachedPathData]) {\n            pathData = clonePathData(this[$cachedPathData]);\n          }\n          else {\n            pathData = parsePathDataString(this.getAttribute(\"d\") || \"\");\n            this[$cachedPathData] = clonePathData(pathData);\n          }\n\n          var normalizedPathData = reducePathData(absolutizePathData(pathData));\n          this[$cachedNormalizedPathData] = clonePathData(normalizedPathData);\n          return normalizedPathData;\n        }\n      }\n      else {\n        if (this[$cachedPathData]) {\n          return clonePathData(this[$cachedPathData]);\n        }\n        else {\n          var pathData = parsePathDataString(this.getAttribute(\"d\") || \"\");\n          this[$cachedPathData] = clonePathData(pathData);\n          return pathData;\n        }\n      }\n    };\n\n    SVGPathElement.prototype.setPathData = function(pathData) {\n      if (pathData.length === 0) {\n        if (isIE) {\n          // @bugfix https://github.com/mbostock/d3/issues/1737\n          this.setAttribute(\"d\", \"\");\n        }\n        else {\n          this.removeAttribute(\"d\");\n        }\n      }\n      else {\n        var d = \"\";\n\n        for (var i = 0, l = pathData.length; i < l; i += 1) {\n          var seg = pathData[i];\n\n          if (i > 0) {\n            d += \" \";\n          }\n\n          d += seg.type;\n\n          if (seg.values && seg.values.length > 0) {\n            d += \" \" + seg.values.join(\" \");\n          }\n        }\n\n        this.setAttribute(\"d\", d);\n      }\n    };\n\n    SVGRectElement.prototype.getPathData = function(options) {\n      var x = this.x.baseVal.value;\n      var y = this.y.baseVal.value;\n      var width = this.width.baseVal.value;\n      var height = this.height.baseVal.value;\n      var rx = this.hasAttribute(\"rx\") ? this.rx.baseVal.value : this.ry.baseVal.value;\n      var ry = this.hasAttribute(\"ry\") ? this.ry.baseVal.value : this.rx.baseVal.value;\n\n      if (rx > width / 2) {\n        rx = width / 2;\n      }\n\n      if (ry > height / 2) {\n        ry = height / 2;\n      }\n\n      var pathData = [\n        {type: \"M\", values: [x+rx, y]},\n        {type: \"H\", values: [x+width-rx]},\n        {type: \"A\", values: [rx, ry, 0, 0, 1, x+width, y+ry]},\n        {type: \"V\", values: [y+height-ry]},\n        {type: \"A\", values: [rx, ry, 0, 0, 1, x+width-rx, y+height]},\n        {type: \"H\", values: [x+rx]},\n        {type: \"A\", values: [rx, ry, 0, 0, 1, x, y+height-ry]},\n        {type: \"V\", values: [y+ry]},\n        {type: \"A\", values: [rx, ry, 0, 0, 1, x+rx, y]},\n        {type: \"Z\", values: []}\n      ];\n\n      // Get rid of redundant \"A\" segs when either rx or ry is 0\n      pathData = pathData.filter(function(s) {\n        return s.type === \"A\" && (s.values[0] === 0 || s.values[1] === 0) ? false : true;\n      });\n\n      if (options && options.normalize === true) {\n        pathData = reducePathData(pathData);\n      }\n\n      return pathData;\n    };\n\n    SVGCircleElement.prototype.getPathData = function(options) {\n      var cx = this.cx.baseVal.value;\n      var cy = this.cy.baseVal.value;\n      var r = this.r.baseVal.value;\n\n      var pathData = [\n        { type: \"M\",  values: [cx + r, cy] },\n        { type: \"A\",  values: [r, r, 0, 0, 1, cx, cy+r] },\n        { type: \"A\",  values: [r, r, 0, 0, 1, cx-r, cy] },\n        { type: \"A\",  values: [r, r, 0, 0, 1, cx, cy-r] },\n        { type: \"A\",  values: [r, r, 0, 0, 1, cx+r, cy] },\n        { type: \"Z\",  values: [] }\n      ];\n\n      if (options && options.normalize === true) {\n        pathData = reducePathData(pathData);\n      }\n\n      return pathData;\n    };\n\n    SVGEllipseElement.prototype.getPathData = function(options) {\n      var cx = this.cx.baseVal.value;\n      var cy = this.cy.baseVal.value;\n      var rx = this.rx.baseVal.value;\n      var ry = this.ry.baseVal.value;\n\n      var pathData = [\n        { type: \"M\",  values: [cx + rx, cy] },\n        { type: \"A\",  values: [rx, ry, 0, 0, 1, cx, cy+ry] },\n        { type: \"A\",  values: [rx, ry, 0, 0, 1, cx-rx, cy] },\n        { type: \"A\",  values: [rx, ry, 0, 0, 1, cx, cy-ry] },\n        { type: \"A\",  values: [rx, ry, 0, 0, 1, cx+rx, cy] },\n        { type: \"Z\",  values: [] }\n      ];\n\n      if (options && options.normalize === true) {\n        pathData = reducePathData(pathData);\n      }\n\n      return pathData;\n    };\n\n    SVGLineElement.prototype.getPathData = function() {\n      return [\n        { type: \"M\", values: [this.x1.baseVal.value, this.y1.baseVal.value] },\n        { type: \"L\", values: [this.x2.baseVal.value, this.y2.baseVal.value] }\n      ];\n    };\n\n    SVGPolylineElement.prototype.getPathData = function() {\n      var pathData = [];\n\n      for (var i = 0; i < this.points.numberOfItems; i += 1) {\n        var point = this.points.getItem(i);\n\n        pathData.push({\n          type: (i === 0 ? \"M\" : \"L\"),\n          values: [point.x, point.y]\n        });\n      }\n\n      return pathData;\n    };\n\n    SVGPolygonElement.prototype.getPathData = function() {\n      var pathData = [];\n\n      for (var i = 0; i < this.points.numberOfItems; i += 1) {\n        var point = this.points.getItem(i);\n\n        pathData.push({\n          type: (i === 0 ? \"M\" : \"L\"),\n          values: [point.x, point.y]\n        });\n      }\n\n      pathData.push({\n        type: \"Z\",\n        values: []\n      });\n\n      return pathData;\n    };\n  })();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}