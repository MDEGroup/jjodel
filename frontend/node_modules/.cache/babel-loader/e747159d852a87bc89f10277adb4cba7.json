{"ast":null,"code":"export default class ModelViews {}\nModelViews.zero = `<div className={'root'}>\n        {!data && 'Model data missing.'}\n        <div className='edges' style={{zIndex: 101, position: 'absolute', height: 0, width: 0, overflow: 'visible'}}>\n            {data.$transitions\n                .map((t, i) => {\n                    if(t.$source.value && t.$target.value && t.$trigger.value)\n                        return(<Edge key={i} label={() => t.$trigger.value.$name.value} \n                                    data={t.id}\n                                    view={'Pointer_ViewEdgeAssociation'} \n                                    start={t.$source.value.node} \n                                    end={t.$target.value.node} \n                           />)\n                    return(<DefaultNode key={t.id} data={t} />)\n                })\n            }\n        </div>\n        {data.otherObjects(['Event', 'Command'])\n            .map(object => <DefaultNode key={object.id} data={object} />)\n        }\n        <button style={{position: 'absolute', right: 10, top: 10}} className={'p-1 btn btn-danger'} onClick={e => {\n            const objects = [];\n            if(data.$state) objects.push(...data.$state.instances);\n            if(data.$situation) objects.push(...data.$situation.instances);\n            if(objects.length < 5) return;\n            objects.sort((a, b) => a.name.localeCompare(b.name))\n            objects[0].node.x = 670; objects[0].node.y = 60; // active\n            objects[1].node.x = 670; objects[1].node.y = 400; // idle\n            objects[2].node.x = 250; objects[2].node.y = 400; // unlockPanel \n            objects[3].node.x = 350; objects[3].node.y = 220; // waitingForDrawer\n            objects[4].node.x = 50; objects[4].node.y = 220; // waitingForLight\n        }}>\n            Arrange\n        </button>\n    </div>`;\nModelViews.one = `<div className={'root'}>\n        {!data && 'Model data missing.'}\n        <div className='edges' style={{zIndex: 101, position: 'absolute', height: 0, width: 0, overflow: 'visible'}}>\n            {data.$transitions\n                .map((t, i) => {\n                    if(t.$source.value && t.$target.value && t.$trigger.value)\n                        return(<Edge key={i} label={() => t.$trigger.value.$name.value} \n                                    data={t.id}\n                                    view={'Pointer_ViewEdgeAssociation'} \n                                    start={t.$source.value.node} \n                                    end={t.$target.value.node} \n                           />)\n                    return(<DefaultNode key={t.id} data={t} />)\n                })\n            }\n            {data.$resets && data.$resets\n                .map((reset) => {\n                    if(!reset.node || !reset.$transition.value) \n                         return(<DefaultNode key={reset.id} data={reset} />)\n                    return(<Edge key={i}\n                        view={'Pointer_ViewEdgeAssociation'} \n                        start={reset.node} \n                        end={reset.$transition.value.node} \n                    />)\n            })}\n        </div>\n        {data.otherObjects(['Event', 'Command', 'Reset'])\n            .map(object => <DefaultNode key={object.id} data={object} />)\n        }\n        <button style={{position: 'absolute', right: 10, top: 10}} className={'p-1 btn btn-danger'} onClick={e => {\n            const objects = [];\n            if(data.$state) objects.push(...data.$state.instances);\n            if(data.$situation) objects.push(...data.$situation.instances);\n            if(objects.length < 5) return;\n            objects.sort((a, b) => a.name.localeCompare(b.name))\n            objects[0].node.x = 670; objects[0].node.y = 60; // active\n            objects[1].node.x = 670; objects[1].node.y = 400; // idle\n            objects[2].node.x = 250; objects[2].node.y = 400; // unlockPanel \n            objects[3].node.x = 350; objects[3].node.y = 220; // waitingForDrawer\n            objects[4].node.x = 50; objects[4].node.y = 220; // waitingForLight\n        }}>\n            Arrange\n        </button>\n    </div>`;","map":{"version":3,"names":["ModelViews","zero","one"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/src/examples/StateMachine/views/model.ts"],"sourcesContent":["export default class ModelViews {\r\n    static zero = `<div className={'root'}>\r\n        {!data && 'Model data missing.'}\r\n        <div className='edges' style={{zIndex: 101, position: 'absolute', height: 0, width: 0, overflow: 'visible'}}>\r\n            {data.$transitions\r\n                .map((t, i) => {\r\n                    if(t.$source.value && t.$target.value && t.$trigger.value)\r\n                        return(<Edge key={i} label={() => t.$trigger.value.$name.value} \r\n                                    data={t.id}\r\n                                    view={'Pointer_ViewEdgeAssociation'} \r\n                                    start={t.$source.value.node} \r\n                                    end={t.$target.value.node} \r\n                           />)\r\n                    return(<DefaultNode key={t.id} data={t} />)\r\n                })\r\n            }\r\n        </div>\r\n        {data.otherObjects(['Event', 'Command'])\r\n            .map(object => <DefaultNode key={object.id} data={object} />)\r\n        }\r\n        <button style={{position: 'absolute', right: 10, top: 10}} className={'p-1 btn btn-danger'} onClick={e => {\r\n            const objects = [];\r\n            if(data.$state) objects.push(...data.$state.instances);\r\n            if(data.$situation) objects.push(...data.$situation.instances);\r\n            if(objects.length < 5) return;\r\n            objects.sort((a, b) => a.name.localeCompare(b.name))\r\n            objects[0].node.x = 670; objects[0].node.y = 60; // active\r\n            objects[1].node.x = 670; objects[1].node.y = 400; // idle\r\n            objects[2].node.x = 250; objects[2].node.y = 400; // unlockPanel \r\n            objects[3].node.x = 350; objects[3].node.y = 220; // waitingForDrawer\r\n            objects[4].node.x = 50; objects[4].node.y = 220; // waitingForLight\r\n        }}>\r\n            Arrange\r\n        </button>\r\n    </div>`;\r\n    static one = `<div className={'root'}>\r\n        {!data && 'Model data missing.'}\r\n        <div className='edges' style={{zIndex: 101, position: 'absolute', height: 0, width: 0, overflow: 'visible'}}>\r\n            {data.$transitions\r\n                .map((t, i) => {\r\n                    if(t.$source.value && t.$target.value && t.$trigger.value)\r\n                        return(<Edge key={i} label={() => t.$trigger.value.$name.value} \r\n                                    data={t.id}\r\n                                    view={'Pointer_ViewEdgeAssociation'} \r\n                                    start={t.$source.value.node} \r\n                                    end={t.$target.value.node} \r\n                           />)\r\n                    return(<DefaultNode key={t.id} data={t} />)\r\n                })\r\n            }\r\n            {data.$resets && data.$resets\r\n                .map((reset) => {\r\n                    if(!reset.node || !reset.$transition.value) \r\n                         return(<DefaultNode key={reset.id} data={reset} />)\r\n                    return(<Edge key={i}\r\n                        view={'Pointer_ViewEdgeAssociation'} \r\n                        start={reset.node} \r\n                        end={reset.$transition.value.node} \r\n                    />)\r\n            })}\r\n        </div>\r\n        {data.otherObjects(['Event', 'Command', 'Reset'])\r\n            .map(object => <DefaultNode key={object.id} data={object} />)\r\n        }\r\n        <button style={{position: 'absolute', right: 10, top: 10}} className={'p-1 btn btn-danger'} onClick={e => {\r\n            const objects = [];\r\n            if(data.$state) objects.push(...data.$state.instances);\r\n            if(data.$situation) objects.push(...data.$situation.instances);\r\n            if(objects.length < 5) return;\r\n            objects.sort((a, b) => a.name.localeCompare(b.name))\r\n            objects[0].node.x = 670; objects[0].node.y = 60; // active\r\n            objects[1].node.x = 670; objects[1].node.y = 400; // idle\r\n            objects[2].node.x = 250; objects[2].node.y = 400; // unlockPanel \r\n            objects[3].node.x = 350; objects[3].node.y = 220; // waitingForDrawer\r\n            objects[4].node.x = 50; objects[4].node.y = 220; // waitingForLight\r\n        }}>\r\n            Arrange\r\n        </button>\r\n    </div>`;\r\n}\r\n"],"mappings":"AAAA,eAAe,MAAMA,UAAU,CAAC;AAAXA,UAAU,CACpBC,IAAI,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AAlCUD,UAAU,CAmCpBE,GAAG,GAAG;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module"}