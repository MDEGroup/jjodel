{"ast":null,"code":"import '../source/modules/smart.slider';\nimport React from 'react';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nfunction __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\nconst Smart = window.Smart;\n/**\r\n Sliders allow users to make selections from a range of values.\r\n*/\nclass Slider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.componentRef = React.createRef();\n  }\n  // Gets the id of the React component.\n  get id() {\n    if (!this._id) {\n      this._id = 'Slider' + Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    }\n    return this._id;\n  }\n  /** Sets or gets the animation mode. Animation is disabled when the property is set to 'none'\r\n  *\tProperty type: Animation\r\n  */\n  get animation() {\n    return this.nativeElement ? this.nativeElement.animation : undefined;\n  }\n  set animation(value) {\n    if (this.nativeElement) {\n      this.nativeElement.animation = value;\n    }\n  }\n  /** With the coerce property true and clicking the track, the thumb and value are moved and set to the nearest value allowed by the interval property.\r\n  *\tProperty type: boolean\r\n  */\n  get coerce() {\n    return this.nativeElement ? this.nativeElement.coerce : undefined;\n  }\n  set coerce(value) {\n    if (this.nativeElement) {\n      this.nativeElement.coerce = value;\n    }\n  }\n  /** Sets or gets whether custom ticks at (possibly) uneven interval will be plotted. The ticks to be plotted are defined with the property customTicks.\r\n  *\tProperty type: boolean\r\n  */\n  get customInterval() {\n    return this.nativeElement ? this.nativeElement.customInterval : undefined;\n  }\n  set customInterval(value) {\n    if (this.nativeElement) {\n      this.nativeElement.customInterval = value;\n    }\n  }\n  /** If customInterval is enabled, sets a list of ticks to be plotted. If coerce is set to true, the value will snap to these ticks.\r\n  *\tProperty type: number[]\r\n  */\n  get customTicks() {\n    return this.nativeElement ? this.nativeElement.customTicks : undefined;\n  }\n  set customTicks(value) {\n    if (this.nativeElement) {\n      this.nativeElement.customTicks = value;\n    }\n  }\n  /** Sets or gets the pattern which labels are displayed in when mode is 'date'.\r\n  *\tProperty type: string\r\n  */\n  get dateLabelFormatString() {\n    return this.nativeElement ? this.nativeElement.dateLabelFormatString : undefined;\n  }\n  set dateLabelFormatString(value) {\n    if (this.nativeElement) {\n      this.nativeElement.dateLabelFormatString = value;\n    }\n  }\n  /** Sets or gets the char to use as the decimal separator in numeric values.\r\n  *\tProperty type: string\r\n  */\n  get decimalSeparator() {\n    return this.nativeElement ? this.nativeElement.decimalSeparator : undefined;\n  }\n  set decimalSeparator(value) {\n    if (this.nativeElement) {\n      this.nativeElement.decimalSeparator = value;\n    }\n  }\n  /** Enables or disables the widget.\r\n  *\tProperty type: boolean\r\n  */\n  get disabled() {\n    return this.nativeElement ? this.nativeElement.disabled : undefined;\n  }\n  set disabled(value) {\n    if (this.nativeElement) {\n      this.nativeElement.disabled = value;\n    }\n  }\n  /** Enables or disables incrementing/decrementing the value using the mouse wheel in jqxSlider.\r\n  *\tProperty type: boolean\r\n  */\n  get enableMouseWheelAction() {\n    return this.nativeElement ? this.nativeElement.enableMouseWheelAction : undefined;\n  }\n  set enableMouseWheelAction(value) {\n    if (this.nativeElement) {\n      this.nativeElement.enableMouseWheelAction = value;\n    }\n  }\n  /** Determines what values the thumb snaps to.\r\n  *\tProperty type: string | number\r\n  */\n  get interval() {\n    return this.nativeElement ? this.nativeElement.interval : undefined;\n  }\n  set interval(value) {\n    if (this.nativeElement) {\n      this.nativeElement.interval = value;\n    }\n  }\n  /** Sets the direction of the slider. If is true - positions of the slider's begin and end are changed.\r\n  *\tProperty type: boolean\r\n  */\n  get inverted() {\n    return this.nativeElement ? this.nativeElement.inverted : undefined;\n  }\n  set inverted(value) {\n    if (this.nativeElement) {\n      this.nativeElement.inverted = value;\n    }\n  }\n  /** A callback function that can be used to format the values displayed on the slider labels and tooltip.\r\n  *\tProperty type: any\r\n  */\n  get labelFormatFunction() {\n    return this.nativeElement ? this.nativeElement.labelFormatFunction : undefined;\n  }\n  set labelFormatFunction(value) {\n    if (this.nativeElement) {\n      this.nativeElement.labelFormatFunction = value;\n    }\n  }\n  /** Sets or gets the widget's label visibility.\r\n  *\tProperty type: LabelsVisibility\r\n  */\n  get labelsVisibility() {\n    return this.nativeElement ? this.nativeElement.labelsVisibility : undefined;\n  }\n  set labelsVisibility(value) {\n    if (this.nativeElement) {\n      this.nativeElement.labelsVisibility = value;\n    }\n  }\n  /** Sets or gets the locale. Used in conjunction with the property messages.\r\n  *\tProperty type: string\r\n  */\n  get locale() {\n    return this.nativeElement ? this.nativeElement.locale : undefined;\n  }\n  set locale(value) {\n    if (this.nativeElement) {\n      this.nativeElement.locale = value;\n    }\n  }\n  /** Callback, related to localization module.\r\n  *\tProperty type: any\r\n  */\n  get localizeFormatFunction() {\n    return this.nativeElement ? this.nativeElement.localizeFormatFunction : undefined;\n  }\n  set localizeFormatFunction(value) {\n    if (this.nativeElement) {\n      this.nativeElement.localizeFormatFunction = value;\n    }\n  }\n  /** Enables or disables the usage of logarithmic scale in the widget.\r\n  *\tProperty type: boolean\r\n  */\n  get logarithmicScale() {\n    return this.nativeElement ? this.nativeElement.logarithmicScale : undefined;\n  }\n  set logarithmicScale(value) {\n    if (this.nativeElement) {\n      this.nativeElement.logarithmicScale = value;\n    }\n  }\n  /** Sets or gets the maximum value of the widget.\r\n  *\tProperty type: string | number\r\n  */\n  get max() {\n    return this.nativeElement ? this.nativeElement.max : undefined;\n  }\n  set max(value) {\n    if (this.nativeElement) {\n      this.nativeElement.max = value;\n    }\n  }\n  /** Sets or gets the type of used mechanical action.\r\n  *\tProperty type: DragMechanicalAction\r\n  */\n  get mechanicalAction() {\n    return this.nativeElement ? this.nativeElement.mechanicalAction : undefined;\n  }\n  set mechanicalAction(value) {\n    if (this.nativeElement) {\n      this.nativeElement.mechanicalAction = value;\n    }\n  }\n  /** Sets or gets an object specifying strings used in the widget that can be localized. Used in conjunction with the property locale.\r\n  *\tProperty type: any\r\n  */\n  get messages() {\n    return this.nativeElement ? this.nativeElement.messages : undefined;\n  }\n  set messages(value) {\n    if (this.nativeElement) {\n      this.nativeElement.messages = value;\n    }\n  }\n  /** Sets or gets the minimum value of the widget.\r\n  *\tProperty type: string | number\r\n  */\n  get min() {\n    return this.nativeElement ? this.nativeElement.min : undefined;\n  }\n  set min(value) {\n    if (this.nativeElement) {\n      this.nativeElement.min = value;\n    }\n  }\n  /** Sets or gets whether the widget works with numbers or dates.\r\n  *\tProperty type: ScaleMode\r\n  */\n  get mode() {\n    return this.nativeElement ? this.nativeElement.mode : undefined;\n  }\n  set mode(value) {\n    if (this.nativeElement) {\n      this.nativeElement.mode = value;\n    }\n  }\n  /** Sets or gets the element's name, which is used as a reference when the data is submitted.\r\n  *\tProperty type: string\r\n  */\n  get name() {\n    return this.nativeElement ? this.nativeElement.name : undefined;\n  }\n  set name(value) {\n    if (this.nativeElement) {\n      this.nativeElement.name = value;\n    }\n  }\n  /** Sets the orientation of the widget.\r\n  *\tProperty type: Orientation\r\n  */\n  get orientation() {\n    return this.nativeElement ? this.nativeElement.orientation : undefined;\n  }\n  set orientation(value) {\n    if (this.nativeElement) {\n      this.nativeElement.orientation = value;\n    }\n  }\n  /** Determines the number of digits after the decimal point. Applicable only when scaleType is 'integer'.\r\n  *\tProperty type: number\r\n  */\n  get precisionDigits() {\n    return this.nativeElement ? this.nativeElement.precisionDigits : undefined;\n  }\n  set precisionDigits(value) {\n    if (this.nativeElement) {\n      this.nativeElement.precisionDigits = value;\n    }\n  }\n  /** Enables or disables the slider to be in range mode. If is  set to true, the range is represented between two thumbs.\r\n  *\tProperty type: boolean\r\n  */\n  get rangeSlider() {\n    return this.nativeElement ? this.nativeElement.rangeSlider : undefined;\n  }\n  set rangeSlider(value) {\n    if (this.nativeElement) {\n      this.nativeElement.rangeSlider = value;\n    }\n  }\n  /** When the slider is read only the users cannot drag or click in the fill of the slider.\r\n  *\tProperty type: boolean\r\n  */\n  get readonly() {\n    return this.nativeElement ? this.nativeElement.readonly : undefined;\n  }\n  set readonly(value) {\n    if (this.nativeElement) {\n      this.nativeElement.readonly = value;\n    }\n  }\n  /** Sets or gets the value indicating whether the element is aligned to support locales using right-to-left fonts.\r\n  *\tProperty type: boolean\r\n  */\n  get rightToLeft() {\n    return this.nativeElement ? this.nativeElement.rightToLeft : undefined;\n  }\n  set rightToLeft(value) {\n    if (this.nativeElement) {\n      this.nativeElement.rightToLeft = value;\n    }\n  }\n  /** Sets the position of the widget's scales.\r\n  *\tProperty type: ScalePosition\r\n  */\n  get scalePosition() {\n    return this.nativeElement ? this.nativeElement.scalePosition : undefined;\n  }\n  set scalePosition(value) {\n    if (this.nativeElement) {\n      this.nativeElement.scalePosition = value;\n    }\n  }\n  /** Sets the type of the slider's scale.\r\n  *\tProperty type: ScaleType\r\n  */\n  get scaleType() {\n    return this.nativeElement ? this.nativeElement.scaleType : undefined;\n  }\n  set scaleType(value) {\n    if (this.nativeElement) {\n      this.nativeElement.scaleType = value;\n    }\n  }\n  /** Enables or disables scientific notation.\r\n  *\tProperty type: boolean\r\n  */\n  get scientificNotation() {\n    return this.nativeElement ? this.nativeElement.scientificNotation : undefined;\n  }\n  set scientificNotation(value) {\n    if (this.nativeElement) {\n      this.nativeElement.scientificNotation = value;\n    }\n  }\n  /** Enables or disables displaying of the buttons.\r\n  *\tProperty type: boolean\r\n  */\n  get showButtons() {\n    return this.nativeElement ? this.nativeElement.showButtons : undefined;\n  }\n  set showButtons(value) {\n    if (this.nativeElement) {\n      this.nativeElement.showButtons = value;\n    }\n  }\n  /** Enables or disables displaying of the thumb label.\r\n  *\tProperty type: boolean\r\n  */\n  get showThumbLabel() {\n    return this.nativeElement ? this.nativeElement.showThumbLabel : undefined;\n  }\n  set showThumbLabel(value) {\n    if (this.nativeElement) {\n      this.nativeElement.showThumbLabel = value;\n    }\n  }\n  /** Enables or disables displaying of the tooltip.\r\n  *\tProperty type: boolean\r\n  */\n  get showTooltip() {\n    return this.nativeElement ? this.nativeElement.showTooltip : undefined;\n  }\n  set showTooltip(value) {\n    if (this.nativeElement) {\n      this.nativeElement.showTooltip = value;\n    }\n  }\n  /** Enables or disables displaying of the units.\r\n  *\tProperty type: boolean\r\n  */\n  get showUnit() {\n    return this.nativeElement ? this.nativeElement.showUnit : undefined;\n  }\n  set showUnit(value) {\n    if (this.nativeElement) {\n      this.nativeElement.showUnit = value;\n    }\n  }\n  /** Determining how many significant digits are in a number. Applicable only when scaleType is 'integer'.\r\n  *\tProperty type: number\r\n  */\n  get significantDigits() {\n    return this.nativeElement ? this.nativeElement.significantDigits : undefined;\n  }\n  set significantDigits(value) {\n    if (this.nativeElement) {\n      this.nativeElement.significantDigits = value;\n    }\n  }\n  /** Sets or gets the element's visual theme.\r\n  *\tProperty type: string\r\n  */\n  get theme() {\n    return this.nativeElement ? this.nativeElement.theme : undefined;\n  }\n  set theme(value) {\n    if (this.nativeElement) {\n      this.nativeElement.theme = value;\n    }\n  }\n  /** Sets or gets the position of the thumb label.\r\n  *\tProperty type: Position\r\n  */\n  get thumbLabelPosition() {\n    return this.nativeElement ? this.nativeElement.thumbLabelPosition : undefined;\n  }\n  set thumbLabelPosition(value) {\n    if (this.nativeElement) {\n      this.nativeElement.thumbLabelPosition = value;\n    }\n  }\n  /** Sets or gets the position of the ticks in jqxSlider widget.\r\n  *\tProperty type: TicksPosition\r\n  */\n  get ticksPosition() {\n    return this.nativeElement ? this.nativeElement.ticksPosition : undefined;\n  }\n  set ticksPosition(value) {\n    if (this.nativeElement) {\n      this.nativeElement.ticksPosition = value;\n    }\n  }\n  /** Sets or gets the visibility of the ticks.\r\n  *\tProperty type: TicksVisibility\r\n  */\n  get ticksVisibility() {\n    return this.nativeElement ? this.nativeElement.ticksVisibility : undefined;\n  }\n  set ticksVisibility(value) {\n    if (this.nativeElement) {\n      this.nativeElement.ticksVisibility = value;\n    }\n  }\n  /** Sets or gets the position of the tooltip in jqxSlider widget.\r\n  *\tProperty type: Position\r\n  */\n  get tooltipPosition() {\n    return this.nativeElement ? this.nativeElement.tooltipPosition : undefined;\n  }\n  set tooltipPosition(value) {\n    if (this.nativeElement) {\n      this.nativeElement.tooltipPosition = value;\n    }\n  }\n  /** Sets or gets if the element can be focused.\r\n  *\tProperty type: boolean\r\n  */\n  get unfocusable() {\n    return this.nativeElement ? this.nativeElement.unfocusable : undefined;\n  }\n  set unfocusable(value) {\n    if (this.nativeElement) {\n      this.nativeElement.unfocusable = value;\n    }\n  }\n  /** Sets or gets the name of unit used in jqxSlider widget.\r\n  *\tProperty type: string\r\n  */\n  get unit() {\n    return this.nativeElement ? this.nativeElement.unit : undefined;\n  }\n  set unit(value) {\n    if (this.nativeElement) {\n      this.nativeElement.unit = value;\n    }\n  }\n  /** Sets the value's validation by min/max. If 'strict' is applied, the value is always validated by min and max. If 'interaction' is applied, programmatic value changes are not coerced to min/max and if min/max are changed, resulting in the current value being out of range, the value is not coerced, and no change event is fired.\r\n  *\tProperty type: Validation\r\n  */\n  get validation() {\n    return this.nativeElement ? this.nativeElement.validation : undefined;\n  }\n  set validation(value) {\n    if (this.nativeElement) {\n      this.nativeElement.validation = value;\n    }\n  }\n  /** Sets or gets the value of the jqxSlider widget. The property is used when the rangeSlider property is set to false.\r\n  *\tProperty type: any\r\n  */\n  get value() {\n    return this.nativeElement ? this.nativeElement.value : undefined;\n  }\n  set value(value) {\n    if (this.nativeElement) {\n      this.nativeElement.value = value;\n    }\n  }\n  /** Sets or gets the value of the jqxSlider widget. The property is used when the rangeSlider property is set to true.\r\n  *\tProperty type: number[]\r\n  */\n  get values() {\n    return this.nativeElement ? this.nativeElement.values : undefined;\n  }\n  set values(value) {\n    if (this.nativeElement) {\n      this.nativeElement.values = value;\n    }\n  }\n  /** Sets or gets the word length. Applicable only when scaleType is 'integer'.\r\n  *\tProperty type: WordLength\r\n  */\n  get wordLength() {\n    return this.nativeElement ? this.nativeElement.wordLength : undefined;\n  }\n  set wordLength(value) {\n    if (this.nativeElement) {\n      this.nativeElement.wordLength = value;\n    }\n  }\n  // Gets the properties of the React component.\n  get properties() {\n    return [\"animation\", \"coerce\", \"customInterval\", \"customTicks\", \"dateLabelFormatString\", \"decimalSeparator\", \"disabled\", \"enableMouseWheelAction\", \"interval\", \"inverted\", \"labelFormatFunction\", \"labelsVisibility\", \"locale\", \"localizeFormatFunction\", \"logarithmicScale\", \"max\", \"mechanicalAction\", \"messages\", \"min\", \"mode\", \"name\", \"orientation\", \"precisionDigits\", \"rangeSlider\", \"readonly\", \"rightToLeft\", \"scalePosition\", \"scaleType\", \"scientificNotation\", \"showButtons\", \"showThumbLabel\", \"showTooltip\", \"showUnit\", \"significantDigits\", \"theme\", \"thumbLabelPosition\", \"ticksPosition\", \"ticksVisibility\", \"tooltipPosition\", \"unfocusable\", \"unit\", \"validation\", \"value\", \"values\", \"wordLength\"];\n  }\n  // Gets the events of the React component.\n  get eventListeners() {\n    return [\"onChange\", \"onCreate\", \"onReady\"];\n  }\n  /** Focuses the slider.\r\n  */\n  focus() {\n    if (this.nativeElement.isRendered) {\n      this.nativeElement.focus();\n    } else {\n      this.nativeElement.whenRendered(() => {\n        this.nativeElement.focus();\n      });\n    }\n  }\n  /** Gets the optimal size of the widget.\r\n  * @returns {any}\r\n  */\n  getOptimalSize() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const getResultOnRender = () => {\n        return new Promise(resolve => {\n          this.nativeElement.whenRendered(() => {\n            const result = this.nativeElement.getOptimalSize();\n            resolve(result);\n          });\n        });\n      };\n      const result = yield getResultOnRender();\n      return result;\n    });\n  }\n  /** Get/set the value of the slider.\r\n  * @param {string | number | number[] | string[]} value?. The value to be set. If no parameter is passed, returns the displayed value of the slider.\r\n  * @returns {string}\r\n  */\n  val(value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const getResultOnRender = () => {\n        return new Promise(resolve => {\n          this.nativeElement.whenRendered(() => {\n            const result = this.nativeElement.val(value);\n            resolve(result);\n          });\n        });\n      };\n      const result = yield getResultOnRender();\n      return result;\n    });\n  }\n  componentDidRender(initialize) {\n    const that = this;\n    const props = {};\n    const events = {};\n    let styles = null;\n    for (let prop in that.props) {\n      if (prop === 'children') {\n        continue;\n      }\n      if (prop === 'style') {\n        styles = that.props[prop];\n        continue;\n      }\n      if (prop.startsWith('on') && that.properties.indexOf(prop) === -1) {\n        events[prop] = that.props[prop];\n        continue;\n      }\n      props[prop] = that.props[prop];\n    }\n    if (initialize) {\n      that.nativeElement = this.componentRef.current;\n    }\n    for (let prop in props) {\n      if (prop === 'class') {\n        const classNames = props[prop].trim().split(' ');\n        for (let className in classNames) {\n          if (!that.nativeElement.classList.contains(classNames[className]) && classNames[className] !== \"\") {\n            that.nativeElement.classList.add(classNames[className]);\n          }\n        }\n        continue;\n      }\n      if (props[prop] !== that.nativeElement[prop]) {\n        const normalizeProp = str => {\n          return str.replace(/-([a-z])/g, function (g) {\n            return g[1].toUpperCase();\n          });\n        };\n        if (prop === 'hover' || prop === 'active' || prop === 'focus' || prop === 'selected') {\n          that.nativeElement.setAttribute(prop, '');\n        }\n        const normalizedProp = normalizeProp(prop);\n        that.nativeElement[normalizedProp] = props[prop];\n      }\n    }\n    for (let eventName in events) {\n      that[eventName] = events[eventName];\n      that.nativeElement[eventName.toLowerCase()] = events[eventName];\n    }\n    if (initialize) {\n      if (that.onCreate) {\n        that.onCreate();\n      }\n      that.nativeElement.whenRendered(() => {\n        if (that.onReady) {\n          that.onReady();\n        }\n      });\n    }\n    // setup styles.\n    if (styles) {\n      for (let styleName in styles) {\n        that.nativeElement.style[styleName] = styles[styleName];\n      }\n    }\n  }\n  componentDidMount() {\n    this.componentDidRender(true);\n  }\n  componentDidUpdate() {\n    this.componentDidRender(false);\n  }\n  componentWillUnmount() {\n    const that = this;\n    if (!that.nativeElement) {\n      return;\n    }\n    that.nativeElement.whenRenderedCallbacks = [];\n    for (let i = 0; i < that.eventListeners.length; i++) {\n      const eventName = that.eventListeners[i];\n      that.nativeElement.removeEventListener(eventName.substring(2).toLowerCase(), that[eventName]);\n    }\n  }\n  render() {\n    return React.createElement(\"smart-slider\", {\n      ref: this.componentRef\n    }, this.props.children);\n  }\n}\nexport default Slider;\nexport { Smart, Slider };","map":{"version":3,"names":["React","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Smart","window","Slider","Component","constructor","props","componentRef","createRef","id","_id","Math","floor","random","toString","substring","animation","nativeElement","undefined","coerce","customInterval","customTicks","dateLabelFormatString","decimalSeparator","disabled","enableMouseWheelAction","interval","inverted","labelFormatFunction","labelsVisibility","locale","localizeFormatFunction","logarithmicScale","max","mechanicalAction","messages","min","mode","name","orientation","precisionDigits","rangeSlider","readonly","rightToLeft","scalePosition","scaleType","scientificNotation","showButtons","showThumbLabel","showTooltip","showUnit","significantDigits","theme","thumbLabelPosition","ticksPosition","ticksVisibility","tooltipPosition","unfocusable","unit","validation","values","wordLength","properties","eventListeners","focus","isRendered","whenRendered","getOptimalSize","getResultOnRender","val","componentDidRender","initialize","that","events","styles","prop","startsWith","indexOf","current","classNames","trim","split","className","classList","contains","add","normalizeProp","str","replace","g","toUpperCase","setAttribute","normalizedProp","eventName","toLowerCase","onCreate","onReady","styleName","style","componentDidMount","componentDidUpdate","componentWillUnmount","whenRenderedCallbacks","i","length","removeEventListener","render","createElement","ref","children"],"sources":["C:/d/Programming/web/jodel-mde/node_modules/smart-webcomponents-react/slider/slider.esm.js"],"sourcesContent":["\nimport '../source/modules/smart.slider';\n\nimport React from 'react';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\n\nconst Smart = window.Smart;\r\n/**\r\n Sliders allow users to make selections from a range of values.\r\n*/\r\nclass Slider extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.componentRef = React.createRef();\r\n    }\r\n    // Gets the id of the React component.\r\n    get id() {\r\n        if (!this._id) {\r\n            this._id = 'Slider' + Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n        }\r\n        return this._id;\r\n    }\r\n    /** Sets or gets the animation mode. Animation is disabled when the property is set to 'none'\r\n    *\tProperty type: Animation\r\n    */\r\n    get animation() {\r\n        return this.nativeElement ? this.nativeElement.animation : undefined;\r\n    }\r\n    set animation(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.animation = value;\r\n        }\r\n    }\r\n    /** With the coerce property true and clicking the track, the thumb and value are moved and set to the nearest value allowed by the interval property.\r\n    *\tProperty type: boolean\r\n    */\r\n    get coerce() {\r\n        return this.nativeElement ? this.nativeElement.coerce : undefined;\r\n    }\r\n    set coerce(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.coerce = value;\r\n        }\r\n    }\r\n    /** Sets or gets whether custom ticks at (possibly) uneven interval will be plotted. The ticks to be plotted are defined with the property customTicks.\r\n    *\tProperty type: boolean\r\n    */\r\n    get customInterval() {\r\n        return this.nativeElement ? this.nativeElement.customInterval : undefined;\r\n    }\r\n    set customInterval(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.customInterval = value;\r\n        }\r\n    }\r\n    /** If customInterval is enabled, sets a list of ticks to be plotted. If coerce is set to true, the value will snap to these ticks.\r\n    *\tProperty type: number[]\r\n    */\r\n    get customTicks() {\r\n        return this.nativeElement ? this.nativeElement.customTicks : undefined;\r\n    }\r\n    set customTicks(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.customTicks = value;\r\n        }\r\n    }\r\n    /** Sets or gets the pattern which labels are displayed in when mode is 'date'.\r\n    *\tProperty type: string\r\n    */\r\n    get dateLabelFormatString() {\r\n        return this.nativeElement ? this.nativeElement.dateLabelFormatString : undefined;\r\n    }\r\n    set dateLabelFormatString(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.dateLabelFormatString = value;\r\n        }\r\n    }\r\n    /** Sets or gets the char to use as the decimal separator in numeric values.\r\n    *\tProperty type: string\r\n    */\r\n    get decimalSeparator() {\r\n        return this.nativeElement ? this.nativeElement.decimalSeparator : undefined;\r\n    }\r\n    set decimalSeparator(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.decimalSeparator = value;\r\n        }\r\n    }\r\n    /** Enables or disables the widget.\r\n    *\tProperty type: boolean\r\n    */\r\n    get disabled() {\r\n        return this.nativeElement ? this.nativeElement.disabled : undefined;\r\n    }\r\n    set disabled(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.disabled = value;\r\n        }\r\n    }\r\n    /** Enables or disables incrementing/decrementing the value using the mouse wheel in jqxSlider.\r\n    *\tProperty type: boolean\r\n    */\r\n    get enableMouseWheelAction() {\r\n        return this.nativeElement ? this.nativeElement.enableMouseWheelAction : undefined;\r\n    }\r\n    set enableMouseWheelAction(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.enableMouseWheelAction = value;\r\n        }\r\n    }\r\n    /** Determines what values the thumb snaps to.\r\n    *\tProperty type: string | number\r\n    */\r\n    get interval() {\r\n        return this.nativeElement ? this.nativeElement.interval : undefined;\r\n    }\r\n    set interval(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.interval = value;\r\n        }\r\n    }\r\n    /** Sets the direction of the slider. If is true - positions of the slider's begin and end are changed.\r\n    *\tProperty type: boolean\r\n    */\r\n    get inverted() {\r\n        return this.nativeElement ? this.nativeElement.inverted : undefined;\r\n    }\r\n    set inverted(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.inverted = value;\r\n        }\r\n    }\r\n    /** A callback function that can be used to format the values displayed on the slider labels and tooltip.\r\n    *\tProperty type: any\r\n    */\r\n    get labelFormatFunction() {\r\n        return this.nativeElement ? this.nativeElement.labelFormatFunction : undefined;\r\n    }\r\n    set labelFormatFunction(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.labelFormatFunction = value;\r\n        }\r\n    }\r\n    /** Sets or gets the widget's label visibility.\r\n    *\tProperty type: LabelsVisibility\r\n    */\r\n    get labelsVisibility() {\r\n        return this.nativeElement ? this.nativeElement.labelsVisibility : undefined;\r\n    }\r\n    set labelsVisibility(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.labelsVisibility = value;\r\n        }\r\n    }\r\n    /** Sets or gets the locale. Used in conjunction with the property messages.\r\n    *\tProperty type: string\r\n    */\r\n    get locale() {\r\n        return this.nativeElement ? this.nativeElement.locale : undefined;\r\n    }\r\n    set locale(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.locale = value;\r\n        }\r\n    }\r\n    /** Callback, related to localization module.\r\n    *\tProperty type: any\r\n    */\r\n    get localizeFormatFunction() {\r\n        return this.nativeElement ? this.nativeElement.localizeFormatFunction : undefined;\r\n    }\r\n    set localizeFormatFunction(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.localizeFormatFunction = value;\r\n        }\r\n    }\r\n    /** Enables or disables the usage of logarithmic scale in the widget.\r\n    *\tProperty type: boolean\r\n    */\r\n    get logarithmicScale() {\r\n        return this.nativeElement ? this.nativeElement.logarithmicScale : undefined;\r\n    }\r\n    set logarithmicScale(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.logarithmicScale = value;\r\n        }\r\n    }\r\n    /** Sets or gets the maximum value of the widget.\r\n    *\tProperty type: string | number\r\n    */\r\n    get max() {\r\n        return this.nativeElement ? this.nativeElement.max : undefined;\r\n    }\r\n    set max(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.max = value;\r\n        }\r\n    }\r\n    /** Sets or gets the type of used mechanical action.\r\n    *\tProperty type: DragMechanicalAction\r\n    */\r\n    get mechanicalAction() {\r\n        return this.nativeElement ? this.nativeElement.mechanicalAction : undefined;\r\n    }\r\n    set mechanicalAction(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.mechanicalAction = value;\r\n        }\r\n    }\r\n    /** Sets or gets an object specifying strings used in the widget that can be localized. Used in conjunction with the property locale.\r\n    *\tProperty type: any\r\n    */\r\n    get messages() {\r\n        return this.nativeElement ? this.nativeElement.messages : undefined;\r\n    }\r\n    set messages(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.messages = value;\r\n        }\r\n    }\r\n    /** Sets or gets the minimum value of the widget.\r\n    *\tProperty type: string | number\r\n    */\r\n    get min() {\r\n        return this.nativeElement ? this.nativeElement.min : undefined;\r\n    }\r\n    set min(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.min = value;\r\n        }\r\n    }\r\n    /** Sets or gets whether the widget works with numbers or dates.\r\n    *\tProperty type: ScaleMode\r\n    */\r\n    get mode() {\r\n        return this.nativeElement ? this.nativeElement.mode : undefined;\r\n    }\r\n    set mode(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.mode = value;\r\n        }\r\n    }\r\n    /** Sets or gets the element's name, which is used as a reference when the data is submitted.\r\n    *\tProperty type: string\r\n    */\r\n    get name() {\r\n        return this.nativeElement ? this.nativeElement.name : undefined;\r\n    }\r\n    set name(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.name = value;\r\n        }\r\n    }\r\n    /** Sets the orientation of the widget.\r\n    *\tProperty type: Orientation\r\n    */\r\n    get orientation() {\r\n        return this.nativeElement ? this.nativeElement.orientation : undefined;\r\n    }\r\n    set orientation(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.orientation = value;\r\n        }\r\n    }\r\n    /** Determines the number of digits after the decimal point. Applicable only when scaleType is 'integer'.\r\n    *\tProperty type: number\r\n    */\r\n    get precisionDigits() {\r\n        return this.nativeElement ? this.nativeElement.precisionDigits : undefined;\r\n    }\r\n    set precisionDigits(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.precisionDigits = value;\r\n        }\r\n    }\r\n    /** Enables or disables the slider to be in range mode. If is  set to true, the range is represented between two thumbs.\r\n    *\tProperty type: boolean\r\n    */\r\n    get rangeSlider() {\r\n        return this.nativeElement ? this.nativeElement.rangeSlider : undefined;\r\n    }\r\n    set rangeSlider(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.rangeSlider = value;\r\n        }\r\n    }\r\n    /** When the slider is read only the users cannot drag or click in the fill of the slider.\r\n    *\tProperty type: boolean\r\n    */\r\n    get readonly() {\r\n        return this.nativeElement ? this.nativeElement.readonly : undefined;\r\n    }\r\n    set readonly(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.readonly = value;\r\n        }\r\n    }\r\n    /** Sets or gets the value indicating whether the element is aligned to support locales using right-to-left fonts.\r\n    *\tProperty type: boolean\r\n    */\r\n    get rightToLeft() {\r\n        return this.nativeElement ? this.nativeElement.rightToLeft : undefined;\r\n    }\r\n    set rightToLeft(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.rightToLeft = value;\r\n        }\r\n    }\r\n    /** Sets the position of the widget's scales.\r\n    *\tProperty type: ScalePosition\r\n    */\r\n    get scalePosition() {\r\n        return this.nativeElement ? this.nativeElement.scalePosition : undefined;\r\n    }\r\n    set scalePosition(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.scalePosition = value;\r\n        }\r\n    }\r\n    /** Sets the type of the slider's scale.\r\n    *\tProperty type: ScaleType\r\n    */\r\n    get scaleType() {\r\n        return this.nativeElement ? this.nativeElement.scaleType : undefined;\r\n    }\r\n    set scaleType(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.scaleType = value;\r\n        }\r\n    }\r\n    /** Enables or disables scientific notation.\r\n    *\tProperty type: boolean\r\n    */\r\n    get scientificNotation() {\r\n        return this.nativeElement ? this.nativeElement.scientificNotation : undefined;\r\n    }\r\n    set scientificNotation(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.scientificNotation = value;\r\n        }\r\n    }\r\n    /** Enables or disables displaying of the buttons.\r\n    *\tProperty type: boolean\r\n    */\r\n    get showButtons() {\r\n        return this.nativeElement ? this.nativeElement.showButtons : undefined;\r\n    }\r\n    set showButtons(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.showButtons = value;\r\n        }\r\n    }\r\n    /** Enables or disables displaying of the thumb label.\r\n    *\tProperty type: boolean\r\n    */\r\n    get showThumbLabel() {\r\n        return this.nativeElement ? this.nativeElement.showThumbLabel : undefined;\r\n    }\r\n    set showThumbLabel(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.showThumbLabel = value;\r\n        }\r\n    }\r\n    /** Enables or disables displaying of the tooltip.\r\n    *\tProperty type: boolean\r\n    */\r\n    get showTooltip() {\r\n        return this.nativeElement ? this.nativeElement.showTooltip : undefined;\r\n    }\r\n    set showTooltip(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.showTooltip = value;\r\n        }\r\n    }\r\n    /** Enables or disables displaying of the units.\r\n    *\tProperty type: boolean\r\n    */\r\n    get showUnit() {\r\n        return this.nativeElement ? this.nativeElement.showUnit : undefined;\r\n    }\r\n    set showUnit(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.showUnit = value;\r\n        }\r\n    }\r\n    /** Determining how many significant digits are in a number. Applicable only when scaleType is 'integer'.\r\n    *\tProperty type: number\r\n    */\r\n    get significantDigits() {\r\n        return this.nativeElement ? this.nativeElement.significantDigits : undefined;\r\n    }\r\n    set significantDigits(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.significantDigits = value;\r\n        }\r\n    }\r\n    /** Sets or gets the element's visual theme.\r\n    *\tProperty type: string\r\n    */\r\n    get theme() {\r\n        return this.nativeElement ? this.nativeElement.theme : undefined;\r\n    }\r\n    set theme(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.theme = value;\r\n        }\r\n    }\r\n    /** Sets or gets the position of the thumb label.\r\n    *\tProperty type: Position\r\n    */\r\n    get thumbLabelPosition() {\r\n        return this.nativeElement ? this.nativeElement.thumbLabelPosition : undefined;\r\n    }\r\n    set thumbLabelPosition(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.thumbLabelPosition = value;\r\n        }\r\n    }\r\n    /** Sets or gets the position of the ticks in jqxSlider widget.\r\n    *\tProperty type: TicksPosition\r\n    */\r\n    get ticksPosition() {\r\n        return this.nativeElement ? this.nativeElement.ticksPosition : undefined;\r\n    }\r\n    set ticksPosition(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.ticksPosition = value;\r\n        }\r\n    }\r\n    /** Sets or gets the visibility of the ticks.\r\n    *\tProperty type: TicksVisibility\r\n    */\r\n    get ticksVisibility() {\r\n        return this.nativeElement ? this.nativeElement.ticksVisibility : undefined;\r\n    }\r\n    set ticksVisibility(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.ticksVisibility = value;\r\n        }\r\n    }\r\n    /** Sets or gets the position of the tooltip in jqxSlider widget.\r\n    *\tProperty type: Position\r\n    */\r\n    get tooltipPosition() {\r\n        return this.nativeElement ? this.nativeElement.tooltipPosition : undefined;\r\n    }\r\n    set tooltipPosition(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.tooltipPosition = value;\r\n        }\r\n    }\r\n    /** Sets or gets if the element can be focused.\r\n    *\tProperty type: boolean\r\n    */\r\n    get unfocusable() {\r\n        return this.nativeElement ? this.nativeElement.unfocusable : undefined;\r\n    }\r\n    set unfocusable(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.unfocusable = value;\r\n        }\r\n    }\r\n    /** Sets or gets the name of unit used in jqxSlider widget.\r\n    *\tProperty type: string\r\n    */\r\n    get unit() {\r\n        return this.nativeElement ? this.nativeElement.unit : undefined;\r\n    }\r\n    set unit(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.unit = value;\r\n        }\r\n    }\r\n    /** Sets the value's validation by min/max. If 'strict' is applied, the value is always validated by min and max. If 'interaction' is applied, programmatic value changes are not coerced to min/max and if min/max are changed, resulting in the current value being out of range, the value is not coerced, and no change event is fired.\r\n    *\tProperty type: Validation\r\n    */\r\n    get validation() {\r\n        return this.nativeElement ? this.nativeElement.validation : undefined;\r\n    }\r\n    set validation(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.validation = value;\r\n        }\r\n    }\r\n    /** Sets or gets the value of the jqxSlider widget. The property is used when the rangeSlider property is set to false.\r\n    *\tProperty type: any\r\n    */\r\n    get value() {\r\n        return this.nativeElement ? this.nativeElement.value : undefined;\r\n    }\r\n    set value(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.value = value;\r\n        }\r\n    }\r\n    /** Sets or gets the value of the jqxSlider widget. The property is used when the rangeSlider property is set to true.\r\n    *\tProperty type: number[]\r\n    */\r\n    get values() {\r\n        return this.nativeElement ? this.nativeElement.values : undefined;\r\n    }\r\n    set values(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.values = value;\r\n        }\r\n    }\r\n    /** Sets or gets the word length. Applicable only when scaleType is 'integer'.\r\n    *\tProperty type: WordLength\r\n    */\r\n    get wordLength() {\r\n        return this.nativeElement ? this.nativeElement.wordLength : undefined;\r\n    }\r\n    set wordLength(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.wordLength = value;\r\n        }\r\n    }\r\n    // Gets the properties of the React component.\r\n    get properties() {\r\n        return [\"animation\", \"coerce\", \"customInterval\", \"customTicks\", \"dateLabelFormatString\", \"decimalSeparator\", \"disabled\", \"enableMouseWheelAction\", \"interval\", \"inverted\", \"labelFormatFunction\", \"labelsVisibility\", \"locale\", \"localizeFormatFunction\", \"logarithmicScale\", \"max\", \"mechanicalAction\", \"messages\", \"min\", \"mode\", \"name\", \"orientation\", \"precisionDigits\", \"rangeSlider\", \"readonly\", \"rightToLeft\", \"scalePosition\", \"scaleType\", \"scientificNotation\", \"showButtons\", \"showThumbLabel\", \"showTooltip\", \"showUnit\", \"significantDigits\", \"theme\", \"thumbLabelPosition\", \"ticksPosition\", \"ticksVisibility\", \"tooltipPosition\", \"unfocusable\", \"unit\", \"validation\", \"value\", \"values\", \"wordLength\"];\r\n    }\r\n    // Gets the events of the React component.\r\n    get eventListeners() {\r\n        return [\"onChange\", \"onCreate\", \"onReady\"];\r\n    }\r\n    /** Focuses the slider.\r\n    */\r\n    focus() {\r\n        if (this.nativeElement.isRendered) {\r\n            this.nativeElement.focus();\r\n        }\r\n        else {\r\n            this.nativeElement.whenRendered(() => {\r\n                this.nativeElement.focus();\r\n            });\r\n        }\r\n    }\r\n    /** Gets the optimal size of the widget.\r\n    * @returns {any}\r\n  */\r\n    getOptimalSize() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const getResultOnRender = () => {\r\n                return new Promise(resolve => {\r\n                    this.nativeElement.whenRendered(() => {\r\n                        const result = this.nativeElement.getOptimalSize();\r\n                        resolve(result);\r\n                    });\r\n                });\r\n            };\r\n            const result = yield getResultOnRender();\r\n            return result;\r\n        });\r\n    }\r\n    /** Get/set the value of the slider.\r\n    * @param {string | number | number[] | string[]} value?. The value to be set. If no parameter is passed, returns the displayed value of the slider.\r\n    * @returns {string}\r\n  */\r\n    val(value) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const getResultOnRender = () => {\r\n                return new Promise(resolve => {\r\n                    this.nativeElement.whenRendered(() => {\r\n                        const result = this.nativeElement.val(value);\r\n                        resolve(result);\r\n                    });\r\n                });\r\n            };\r\n            const result = yield getResultOnRender();\r\n            return result;\r\n        });\r\n    }\r\n    componentDidRender(initialize) {\r\n        const that = this;\r\n        const props = {};\r\n        const events = {};\r\n        let styles = null;\r\n        for (let prop in that.props) {\r\n            if (prop === 'children') {\r\n                continue;\r\n            }\r\n            if (prop === 'style') {\r\n                styles = that.props[prop];\r\n                continue;\r\n            }\r\n            if (prop.startsWith('on') && that.properties.indexOf(prop) === -1) {\r\n                events[prop] = that.props[prop];\r\n                continue;\r\n            }\r\n            props[prop] = that.props[prop];\r\n        }\r\n        if (initialize) {\r\n            that.nativeElement = this.componentRef.current;\r\n        }\r\n        for (let prop in props) {\r\n            if (prop === 'class') {\r\n                const classNames = props[prop].trim().split(' ');\r\n                for (let className in classNames) {\r\n                    if (!that.nativeElement.classList.contains(classNames[className]) && classNames[className] !== \"\") {\r\n                        that.nativeElement.classList.add(classNames[className]);\r\n                    }\r\n                }\r\n                continue;\r\n            }\r\n            if (props[prop] !== that.nativeElement[prop]) {\r\n                const normalizeProp = (str) => {\r\n                    return str.replace(/-([a-z])/g, function (g) {\r\n                        return g[1].toUpperCase();\r\n                    });\r\n                };\r\n                if (prop === 'hover' || prop === 'active' || prop === 'focus' || prop === 'selected') {\r\n                    that.nativeElement.setAttribute(prop, '');\r\n                }\r\n                const normalizedProp = normalizeProp(prop);\r\n                that.nativeElement[normalizedProp] = props[prop];\r\n            }\r\n        }\r\n        for (let eventName in events) {\r\n            that[eventName] = events[eventName];\r\n            that.nativeElement[eventName.toLowerCase()] = events[eventName];\r\n        }\r\n        if (initialize) {\r\n            if (that.onCreate) {\r\n                that.onCreate();\r\n            }\r\n            that.nativeElement.whenRendered(() => {\r\n                if (that.onReady) {\r\n                    that.onReady();\r\n                }\r\n            });\r\n        }\r\n        // setup styles.\r\n        if (styles) {\r\n            for (let styleName in styles) {\r\n                that.nativeElement.style[styleName] = styles[styleName];\r\n            }\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.componentDidRender(true);\r\n    }\r\n    componentDidUpdate() {\r\n        this.componentDidRender(false);\r\n    }\r\n    componentWillUnmount() {\r\n        const that = this;\r\n        if (!that.nativeElement) {\r\n            return;\r\n        }\r\n        that.nativeElement.whenRenderedCallbacks = [];\r\n        for (let i = 0; i < that.eventListeners.length; i++) {\r\n            const eventName = that.eventListeners[i];\r\n            that.nativeElement.removeEventListener(eventName.substring(2).toLowerCase(), that[eventName]);\r\n        }\r\n    }\r\n    render() {\r\n        return (React.createElement(\"smart-slider\", { ref: this.componentRef }, this.props.children));\r\n    }\r\n}\n\nexport default Slider;\nexport { Smart, Slider };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}