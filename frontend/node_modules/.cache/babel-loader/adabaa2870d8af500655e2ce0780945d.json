{"ast":null,"code":"import { DViewElement, DViewPoint, LViewPoint, LViewElement } from '../../../joiner';\nimport { Dependencies } from './dependencies';\nimport ModelViews from \"./model\";\nimport TextView from \"./text\";\nexport class StateMachine_Views {\n  static load(project, state, command, event, transition) {\n    return this.create(project, state, command, event, transition);\n  }\n  static create(project, state, command, event, transition) {\n    /* Viewpoint */\n    const viewpoint = DViewPoint.new2('StateMachine', '');\n    /* Model */\n    const modelView = DViewElement.new('Model', ModelViews.zero);\n    modelView.viewpoint = viewpoint.id;\n    modelView.explicitApplicationPriority = 10;\n    modelView.oclCondition = 'context DModel inv: self.isMetamodel = false';\n    /* State */\n    const stateView = DViewElement.new('State', this.state(command));\n    stateView.viewpoint = viewpoint.id;\n    stateView.explicitApplicationPriority = 10;\n    stateView.oclCondition = `context DObject inv: self.instanceof.id = '${state.id}'`;\n    stateView.adaptWidth = true;\n    stateView.adaptHeight = true;\n    stateView.usageDeclarations = Dependencies.state;\n    /* Command */\n    const commandView = DViewElement.new('Command', this.command);\n    commandView.viewpoint = viewpoint.id;\n    commandView.explicitApplicationPriority = 10;\n    commandView.oclCondition = `context DObject inv: self.instanceof.id = '${command.id}'`;\n    commandView.draggable = false;\n    commandView.resizable = false;\n    commandView.usageDeclarations = Dependencies.command;\n    /* Events */\n    const eventsView = DViewElement.new('Events', this.events);\n    eventsView.viewpoint = viewpoint.id;\n    eventsView.explicitApplicationPriority = 10;\n    eventsView.oclCondition = `context DObject inv: self.name = 'obj_1'`;\n    eventsView.adaptWidth = true;\n    eventsView.adaptHeight = true;\n    eventsView.usageDeclarations = Dependencies.events(event);\n    /* Event */\n    const eventView = DViewElement.new('Event', this.event);\n    eventView.viewpoint = viewpoint.id;\n    eventView.explicitApplicationPriority = 10;\n    eventView.oclCondition = `context DObject inv: self.instanceof.id = '${event.id}'`;\n    eventView.draggable = false;\n    eventView.resizable = false;\n    eventView.usageDeclarations = Dependencies.event;\n    /* Transition */\n    const transitionView = DViewElement.new('Transition', this.transition);\n    transitionView.viewpoint = viewpoint.id;\n    transitionView.explicitApplicationPriority = 2;\n    transitionView.oclCondition = `context DObject inv: self.instanceof.id = '${transition.id}'`;\n    transitionView.adaptWidth = true;\n    transitionView.adaptHeight = true;\n    transitionView.usageDeclarations = Dependencies.transition;\n\n    /* Model to Text */\n    const textViewpoint = DViewPoint.new('Text', '');\n    const textView = DViewElement.new('Model', TextView.zero);\n    textView.viewpoint = textViewpoint.id;\n    textView.explicitApplicationPriority = 10;\n    textView.oclCondition = `context DModel inv: not self.isMetamodel`;\n    // textView.oclCondition = `context DModel inv: self.id = '${m1.id}'`;\n\n    // @ts-ignore\n    viewpoint.subViews = [modelView, stateView, commandView, eventsView, transitionView].map(v => v.id);\n    // @ts-ignore\n    textViewpoint.subViews = [textView.id];\n    return [LViewPoint.fromD(viewpoint), LViewElement.fromD(modelView), LViewElement.fromD(textView)];\n  }\n  static state(command) {\n    const view = `<div className={'root bg-white'} style={{'border-radius':'8px', 'border':'black solid 1px'}}>\n            <div style={{\n                'text-align':'center',\n                'border-bottom': (data.$actions.values.length > 0) ? 'black solid 1px' : 'none',\n                'padding':'4px 2px 4px 2px'\n            }}>\n                {data.instanceof.name}:<b className={'ms-1'}>{data.$name.value}</b>\n                <button className={'ms-1 circle btn btn-primary p-0'} onClick={e => {\n                    const dObject = data.model.addObject({}, command.id);\n                    const lObject = LObject.fromD(dObject);\n                    lObject.features[0].value = 'Unnamed';\n                    lObject.features[1].value = U.getRandomString(2);\n                    data.features[1].values = [lObject, ...data.features[1].values];\n                }}><i class=\"p-1 bi bi-plus\"></i></button>\n            </div>\n            <div className={'children px-2'}>\n                {data.$actions.values.map(a => <Field key={a.id} data={a} />)}\n            </div>\n        </div>`;\n    return view.replace('command.id', `'${command.id}'`);\n  }\n}\nStateMachine_Views.command = `<div className={'w-100 root text-center'}>\n        <label className={'p-1'}>{data.$name.value}</label>\n    </div>`;\nStateMachine_Views.events = `<div className={'root bg-white rounded'}>\n        <label className={'d-block text-center bg-success text-white p-1'}>\n            <b>Events</b>\n        </label>\n        {data.model.$event.instances\n            .map(o => <Field key={o.id} data={o}></Field>)\n        }\n    </div>`;\nStateMachine_Views.event = `<div className={'w-100 root text-center'}>\n        <label className={'p-1'}>{data.name}</label>\n    </div>`;\nStateMachine_Views.transition = `<div className={'root bg-white'}>\n        <label style={{color: data.$source.value ? 'green' : 'red'}} className={'p-1'}>Source</label>\n        <label style={{color: data.$target.value ? 'green' : 'red'}} className={'p-1'}>Target</label>\n        <label style={{color: data.$trigger.value ? 'green' : 'red'}} className={'p-1'}>Trigger</label>\n    </div>`;","map":{"version":3,"names":["DViewElement","DViewPoint","LViewPoint","LViewElement","Dependencies","ModelViews","TextView","StateMachine_Views","load","project","state","command","event","transition","create","viewpoint","new2","modelView","new","zero","id","explicitApplicationPriority","oclCondition","stateView","adaptWidth","adaptHeight","usageDeclarations","commandView","draggable","resizable","eventsView","events","eventView","transitionView","textViewpoint","textView","subViews","map","v","fromD","view","replace"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/src/examples/StateMachine/views/index.ts"],"sourcesContent":["import type {LClass, LProject} from '../../../joiner';\r\nimport {DViewElement, DViewPoint, DObject, LModel, LObject, LViewPoint, LViewElement} from '../../../joiner';\r\nimport {Dependencies} from './dependencies';\r\nimport ModelViews from \"./model\";\r\nimport TextView from \"./text\";\r\n\r\nexport class StateMachine_Views {\r\n    static load(project: LProject, state: LClass, command: LClass, event: LClass, transition: LClass): [LViewPoint, LViewElement, LViewElement] {\r\n        return this.create(project, state, command, event, transition);\r\n    }\r\n\r\n    private static create(project: LProject, state: LClass, command: LClass, event: LClass, transition: LClass): [LViewPoint, LViewElement, LViewElement] {\r\n        /* Viewpoint */\r\n        const viewpoint = DViewPoint.new2('StateMachine', '');\r\n        /* Model */\r\n        const modelView = DViewElement.new('Model', ModelViews.zero);\r\n        modelView.viewpoint = viewpoint.id; modelView.explicitApplicationPriority = 10;\r\n        modelView.oclCondition = 'context DModel inv: self.isMetamodel = false';\r\n        /* State */\r\n        const stateView = DViewElement.new('State', this.state(command));\r\n        stateView.viewpoint = viewpoint.id; stateView.explicitApplicationPriority = 10;\r\n        stateView.oclCondition = `context DObject inv: self.instanceof.id = '${state.id}'`;\r\n        stateView.adaptWidth = true; stateView.adaptHeight = true;\r\n        stateView.usageDeclarations = Dependencies.state;\r\n        /* Command */\r\n        const commandView = DViewElement.new('Command', this.command);\r\n        commandView.viewpoint = viewpoint.id; commandView.explicitApplicationPriority = 10;\r\n        commandView.oclCondition = `context DObject inv: self.instanceof.id = '${command.id}'`;\r\n        commandView.draggable = false; commandView.resizable = false;\r\n        commandView.usageDeclarations = Dependencies.command;\r\n        /* Events */\r\n        const eventsView = DViewElement.new('Events', this.events);\r\n        eventsView.viewpoint = viewpoint.id; eventsView.explicitApplicationPriority = 10;\r\n        eventsView.oclCondition = `context DObject inv: self.name = 'obj_1'`;\r\n        eventsView.adaptWidth = true; eventsView.adaptHeight = true;\r\n        eventsView.usageDeclarations = Dependencies.events(event);\r\n        /* Event */\r\n        const eventView = DViewElement.new('Event', this.event);\r\n        eventView.viewpoint = viewpoint.id; eventView.explicitApplicationPriority = 10;\r\n        eventView.oclCondition = `context DObject inv: self.instanceof.id = '${event.id}'`;\r\n        eventView.draggable = false; eventView.resizable = false;\r\n        eventView.usageDeclarations = Dependencies.event;\r\n        /* Transition */\r\n        const transitionView = DViewElement.new('Transition', this.transition);\r\n        transitionView.viewpoint = viewpoint.id; transitionView.explicitApplicationPriority = 2;\r\n        transitionView.oclCondition = `context DObject inv: self.instanceof.id = '${transition.id}'`;\r\n        transitionView.adaptWidth = true; transitionView.adaptHeight = true;\r\n        transitionView.usageDeclarations = Dependencies.transition;\r\n\r\n        /* Model to Text */\r\n        const textViewpoint = DViewPoint.new('Text', '');\r\n        const textView = DViewElement.new('Model', TextView.zero);\r\n        textView.viewpoint = textViewpoint.id; textView.explicitApplicationPriority = 10;\r\n        textView.oclCondition = `context DModel inv: not self.isMetamodel`;\r\n        // textView.oclCondition = `context DModel inv: self.id = '${m1.id}'`;\r\n\r\n        // @ts-ignore\r\n        viewpoint.subViews = [modelView, stateView, commandView, eventsView, transitionView].map(v => v.id);\r\n        // @ts-ignore\r\n        textViewpoint.subViews = [textView.id];\r\n        return [LViewPoint.fromD(viewpoint), LViewElement.fromD(modelView), LViewElement.fromD(textView)];\r\n    }\r\n\r\n    private static state(command: LClass): string {\r\n        const view = `<div className={'root bg-white'} style={{'border-radius':'8px', 'border':'black solid 1px'}}>\r\n            <div style={{\r\n                'text-align':'center',\r\n                'border-bottom': (data.$actions.values.length > 0) ? 'black solid 1px' : 'none',\r\n                'padding':'4px 2px 4px 2px'\r\n            }}>\r\n                {data.instanceof.name}:<b className={'ms-1'}>{data.$name.value}</b>\r\n                <button className={'ms-1 circle btn btn-primary p-0'} onClick={e => {\r\n                    const dObject = data.model.addObject({}, command.id);\r\n                    const lObject = LObject.fromD(dObject);\r\n                    lObject.features[0].value = 'Unnamed';\r\n                    lObject.features[1].value = U.getRandomString(2);\r\n                    data.features[1].values = [lObject, ...data.features[1].values];\r\n                }}><i class=\"p-1 bi bi-plus\"></i></button>\r\n            </div>\r\n            <div className={'children px-2'}>\r\n                {data.$actions.values.map(a => <Field key={a.id} data={a} />)}\r\n            </div>\r\n        </div>`;\r\n        return view.replace('command.id', `'${command.id}'`);\r\n    }\r\n\r\n    private static command = `<div className={'w-100 root text-center'}>\r\n        <label className={'p-1'}>{data.$name.value}</label>\r\n    </div>`;\r\n\r\n    private static events = `<div className={'root bg-white rounded'}>\r\n        <label className={'d-block text-center bg-success text-white p-1'}>\r\n            <b>Events</b>\r\n        </label>\r\n        {data.model.$event.instances\r\n            .map(o => <Field key={o.id} data={o}></Field>)\r\n        }\r\n    </div>`;\r\n    private static event = `<div className={'w-100 root text-center'}>\r\n        <label className={'p-1'}>{data.name}</label>\r\n    </div>`;\r\n\r\n    private static transition = `<div className={'root bg-white'}>\r\n        <label style={{color: data.$source.value ? 'green' : 'red'}} className={'p-1'}>Source</label>\r\n        <label style={{color: data.$target.value ? 'green' : 'red'}} className={'p-1'}>Target</label>\r\n        <label style={{color: data.$trigger.value ? 'green' : 'red'}} className={'p-1'}>Trigger</label>\r\n    </div>`;\r\n\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}