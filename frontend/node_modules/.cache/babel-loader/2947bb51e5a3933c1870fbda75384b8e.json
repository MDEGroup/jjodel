{"ast":null,"code":"/*!\r\n * jsx-transform\r\n * https://github.com/alexmingoia/jsx-transform\r\n */\n\n/**\r\n * This module aims to be a standard and configurable implementation of JSX\r\n * decoupled from {@link https://github.com/facebook/react|React} for use with\r\n * {@link https://github.com/Raynos/mercury|Mercury} or other modules.\r\n *\r\n * JSX is a JavaScript syntax for composing virtual DOM elements.\r\n * See React's [documentation][0] for an explanation.\r\n *\r\n * For linting files containing JSX see\r\n * {@link https://github.com/STRML/JSXHint|JSXHint}.\r\n *\r\n * @module jsx-transform\r\n */\n\n'use strict';\n\nvar fs = require('fs');\nvar getExtension = require('path').extname;\nvar jstransform = require('jstransform').transform;\nvar visitNode = require('./visitor');\nvar trimTrailingSpaces = require('./trimTrailingSpaces');\nvar through = require('through2');\nmodule.exports = {\n  fromString: fromString,\n  fromFile: fromFile,\n  browserifyTransform: browserifyTransform,\n  visitor: visitNode\n};\n\n/**\r\n * Desugar JSX and return transformed string.\r\n *\r\n * @example\r\n *\r\n * ```javascript\r\n * var jsx = require('jsx-transform');\r\n *\r\n * jsx.fromString('<h1>Hello World</h1>', {\r\n *   factory: 'mercury.h'\r\n * });\r\n * // => 'mercury.h(\"h1\", null, [\"Hello World\"])'\r\n * ```\r\n *\r\n * @param {String} str\r\n * @param {Object=} options\r\n * @param {String} options.factory Factory function name for element creation.\r\n * @param {String=} options.spreadFn Name of function for use with spread\r\n * attributes (default: Object.assign).\r\n * @param {String=} options.unknownTagPattern uses given pattern for unknown\r\n * tags where `{tag}` is replaced by the tag name. Useful for rending mercury\r\n * components as `Component.render()` instead of `Component()`.\r\n * @param {Boolean=} options.passUnknownTagsToFactory Handle unknown tags\r\n * like known tags, and pass them as an object to `options.factory`. If\r\n * true, `createElement(Component)` instead of `Component()` (default: false).\r\n * @param {Boolean=} options.unknownTagsAsString Pass unknown tags as string\r\n * to `options.factory` (default: false).\r\n * @param {Boolean=} options.arrayChildren Pass children as array instead of\r\n * arguments (default: true).\r\n * @returns {String}\r\n */\nfunction fromString(str, options) {\n  options = processOptions(options);\n  var transformed = jstransform([visitNode], str, options).code;\n  return trimTrailingSpaces(transformed);\n}\n\n/**\r\n * @param {String} path\r\n * @param {Object=} options\r\n * @returns {String}\r\n */\nfunction fromFile(path, options) {\n  options = processOptions(options);\n  var transformed = jstransform([visitNode], fs.readFileSync(path, 'utf8'), options).code;\n  return trimTrailingSpaces(transformed);\n}\nfunction processOptions(options) {\n  if (typeof options !== 'object') {\n    options = {};\n  }\n  if (typeof options.factory !== 'string') {\n    throw new Error('Missing options.factory function name.');\n  }\n\n  // parses the file as an ES6 module, except disabled implicit strict-mode\n  if (typeof options.sourceType === 'undefined') {\n    options.sourceType = 'nonStrictModule';\n  }\n\n  // defaults to true to keep existing behaviour (but inconsietent with babel and react-tools)\n  if (typeof options.arrayChildren === 'undefined') {\n    options.arrayChildren = true;\n  }\n  if (typeof options.spreadFn !== 'string') {\n    options.spreadFn = 'Object.assign';\n  }\n  if (typeof options.unknownTagPattern !== 'string') {\n    options.unknownTagPattern = '{tag}';\n  }\n  return options;\n}\n\n/**\r\n * Make a browserify transform.\r\n *\r\n * @example\r\n *\r\n * ```javascript\r\n * var browserify = require('browserify');\r\n * var jsxify = require('jsx-transform').browserifyTransform;\r\n *\r\n * browserify()\r\n *   .transform(jsxify, options)\r\n *   .bundle()\r\n * ```\r\n *\r\n * Use `.configure(options)` to return a configured transform:\r\n *\r\n * ```javascript\r\n * var browserify = require('browserify');\r\n * var jsxify = require('jsx-transform').browserifyTransform;\r\n *\r\n * browserify({\r\n *   transforms: [jsxify.configure(options)]\r\n * }).bundle()\r\n * ```\r\n *\r\n * Use in `package.json`:\r\n *\r\n * ```json\r\n * \"browserify\": {\r\n *   \"transform\": [\r\n *     [\"jsx-transform/browserify\", { \"factory\": \"h\" }]\r\n *   ]\r\n * }\r\n * ```\r\n *\r\n * @param {String=} filename\r\n * @param {Object=} options\r\n * @param {String=} options.extensions Array of file extensions to run\r\n * browserify transform on (default: `['.js', '.jsx', '.es', '.es6']`).\r\n * @returns {Function} browserify transform\r\n */\nfunction browserifyTransform(filename, options) {\n  return browserifyTransform.configure(options)(filename);\n}\nbrowserifyTransform.configure = function (options) {\n  if (typeof options.extensions === 'undefined') {\n    options.extensions = ['.js', '.jsx', '.es', '.es6'];\n  }\n  return function (filename) {\n    if (!~options.extensions.indexOf(getExtension(filename))) {\n      // We don't need to apply any transforms, just provide a simple pass-through stream\n      return through();\n    }\n    var data = \"\";\n    return through(function (chunk, enc, next) {\n      // This function receives chunks of data and we don't want to perform any transforms on an incomplete file.\n      // We buffer the data until the flush function is called. We can then safely perform the transforms on the full file.\n      data += chunk.toString('utf8');\n      next();\n    }, function (next) {\n      try {\n        this.push(fromString(data, options));\n        next();\n      } catch (err) {\n        next(err);\n      }\n    });\n  };\n};","map":{"version":3,"names":["fs","require","getExtension","extname","jstransform","transform","visitNode","trimTrailingSpaces","through","module","exports","fromString","fromFile","browserifyTransform","visitor","str","options","processOptions","transformed","code","path","readFileSync","factory","Error","sourceType","arrayChildren","spreadFn","unknownTagPattern","filename","configure","extensions","indexOf","data","chunk","enc","next","toString","push","err"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/frontend/node_modules/jsx-transform/lib/jsx.js"],"sourcesContent":["/*!\r\n * jsx-transform\r\n * https://github.com/alexmingoia/jsx-transform\r\n */\r\n\r\n/**\r\n * This module aims to be a standard and configurable implementation of JSX\r\n * decoupled from {@link https://github.com/facebook/react|React} for use with\r\n * {@link https://github.com/Raynos/mercury|Mercury} or other modules.\r\n *\r\n * JSX is a JavaScript syntax for composing virtual DOM elements.\r\n * See React's [documentation][0] for an explanation.\r\n *\r\n * For linting files containing JSX see\r\n * {@link https://github.com/STRML/JSXHint|JSXHint}.\r\n *\r\n * @module jsx-transform\r\n */\r\n\r\n'use strict';\r\n\r\nvar fs = require('fs');\r\nvar getExtension = require('path').extname;\r\nvar jstransform = require('jstransform').transform;\r\nvar visitNode = require('./visitor');\r\nvar trimTrailingSpaces = require('./trimTrailingSpaces');\r\nvar through = require('through2');\r\n\r\nmodule.exports = {\r\n  fromString: fromString,\r\n  fromFile: fromFile,\r\n  browserifyTransform: browserifyTransform,\r\n  visitor: visitNode\r\n};\r\n\r\n/**\r\n * Desugar JSX and return transformed string.\r\n *\r\n * @example\r\n *\r\n * ```javascript\r\n * var jsx = require('jsx-transform');\r\n *\r\n * jsx.fromString('<h1>Hello World</h1>', {\r\n *   factory: 'mercury.h'\r\n * });\r\n * // => 'mercury.h(\"h1\", null, [\"Hello World\"])'\r\n * ```\r\n *\r\n * @param {String} str\r\n * @param {Object=} options\r\n * @param {String} options.factory Factory function name for element creation.\r\n * @param {String=} options.spreadFn Name of function for use with spread\r\n * attributes (default: Object.assign).\r\n * @param {String=} options.unknownTagPattern uses given pattern for unknown\r\n * tags where `{tag}` is replaced by the tag name. Useful for rending mercury\r\n * components as `Component.render()` instead of `Component()`.\r\n * @param {Boolean=} options.passUnknownTagsToFactory Handle unknown tags\r\n * like known tags, and pass them as an object to `options.factory`. If\r\n * true, `createElement(Component)` instead of `Component()` (default: false).\r\n * @param {Boolean=} options.unknownTagsAsString Pass unknown tags as string\r\n * to `options.factory` (default: false).\r\n * @param {Boolean=} options.arrayChildren Pass children as array instead of\r\n * arguments (default: true).\r\n * @returns {String}\r\n */\r\nfunction fromString(str, options) {\r\n  options = processOptions(options);\r\n\r\n  var transformed = jstransform([visitNode], str, options).code;\r\n\r\n  return trimTrailingSpaces(transformed);\r\n}\r\n\r\n/**\r\n * @param {String} path\r\n * @param {Object=} options\r\n * @returns {String}\r\n */\r\nfunction fromFile(path, options) {\r\n  options = processOptions(options);\r\n  var transformed = jstransform([visitNode], fs.readFileSync(path, 'utf8'), options).code;\r\n  return trimTrailingSpaces(transformed);\r\n}\r\n\r\nfunction processOptions(options){\r\n  if (typeof options !== 'object') {\r\n    options = {};\r\n  }\r\n\r\n  if (typeof options.factory !== 'string') {\r\n    throw new Error('Missing options.factory function name.');\r\n  }\r\n\r\n  // parses the file as an ES6 module, except disabled implicit strict-mode\r\n  if (typeof options.sourceType === 'undefined') {\r\n    options.sourceType = 'nonStrictModule';\r\n  }\r\n\r\n  // defaults to true to keep existing behaviour (but inconsietent with babel and react-tools)\r\n  if (typeof options.arrayChildren === 'undefined') {\r\n    options.arrayChildren = true;\r\n  }\r\n\r\n  if (typeof options.spreadFn !== 'string') {\r\n    options.spreadFn = 'Object.assign';\r\n  }\r\n\r\n  if (typeof options.unknownTagPattern !== 'string') {\r\n    options.unknownTagPattern = '{tag}';\r\n  }\r\n\r\n  return options;\r\n}\r\n\r\n/**\r\n * Make a browserify transform.\r\n *\r\n * @example\r\n *\r\n * ```javascript\r\n * var browserify = require('browserify');\r\n * var jsxify = require('jsx-transform').browserifyTransform;\r\n *\r\n * browserify()\r\n *   .transform(jsxify, options)\r\n *   .bundle()\r\n * ```\r\n *\r\n * Use `.configure(options)` to return a configured transform:\r\n *\r\n * ```javascript\r\n * var browserify = require('browserify');\r\n * var jsxify = require('jsx-transform').browserifyTransform;\r\n *\r\n * browserify({\r\n *   transforms: [jsxify.configure(options)]\r\n * }).bundle()\r\n * ```\r\n *\r\n * Use in `package.json`:\r\n *\r\n * ```json\r\n * \"browserify\": {\r\n *   \"transform\": [\r\n *     [\"jsx-transform/browserify\", { \"factory\": \"h\" }]\r\n *   ]\r\n * }\r\n * ```\r\n *\r\n * @param {String=} filename\r\n * @param {Object=} options\r\n * @param {String=} options.extensions Array of file extensions to run\r\n * browserify transform on (default: `['.js', '.jsx', '.es', '.es6']`).\r\n * @returns {Function} browserify transform\r\n */\r\nfunction browserifyTransform(filename, options) {\r\n  return browserifyTransform.configure(options)(filename);\r\n}\r\n\r\nbrowserifyTransform.configure = function (options) {\r\n  if (typeof options.extensions === 'undefined') {\r\n    options.extensions = ['.js', '.jsx', '.es', '.es6'];\r\n  }\r\n\r\n  return function (filename) {\r\n    if (!~options.extensions.indexOf(getExtension(filename))) {\r\n      // We don't need to apply any transforms, just provide a simple pass-through stream\r\n      return through();\r\n    }\r\n\r\n    var data = \"\";\r\n\r\n    return through(function (chunk, enc, next) {\r\n      // This function receives chunks of data and we don't want to perform any transforms on an incomplete file.\r\n      // We buffer the data until the flush function is called. We can then safely perform the transforms on the full file.\r\n      data += chunk.toString('utf8');\r\n      next();\r\n    }, function (next) {\r\n      try {\r\n        this.push(fromString(data, options));\r\n        next();\r\n      } catch (err) {\r\n        next(err);\r\n      }\r\n    });\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}