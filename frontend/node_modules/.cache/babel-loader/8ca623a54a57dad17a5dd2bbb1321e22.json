{"ast":null,"code":"// import './style.scss';\n// import React, {useEffect, useRef, useState} from 'react';\n// import {Info, Skeleton, Viewpoints, Views, Settings, Console} from \"../../components/editors\";\n// import {GObject} from \"../../joiner\";\n// import $ from 'jquery';\n// import {useEffectOnce} from \"usehooks-ts\";\n//\n// type Props = {};\n// function Editors(props: Props): JSX.Element {\n//     const [selected, setSelected] = useState(-1);\n//     const [background, setBackground] = useState('#5F0F40');\n//     const [color, setColor] = useState('#FFFFFF');\n//     const editors = [\n//         {icon: 'bi bi-info-lg', name: 'Info', component: <Info />},\n//         {icon: 'bi bi-stack', name: 'Skeleton', component: <Skeleton />},\n//         {icon: 'bi bi-stars', name: 'Views', component: <Views />},\n//         {icon: 'bi bi-box', name: 'Viewpoints', component: <Viewpoints />},\n//         {icon: 'bi bi-terminal', name: 'Console', component: <Console />},\n//         {icon: 'bi bi-gear', name: 'Options', component: <Settings {...{background, setBackground, color, setColor}} />}\n//     ];\n//\n//     const htmlReference: React.MutableRefObject<null | HTMLDivElement>= useRef(null);\n//     useEffect(() => {\n//         if (!htmlReference.current) return;\n//         const resizeOptions = {handles: 'w'};\n//         ($(htmlReference.current) as GObject<'JQuery + ui plugin'>).resizable(resizeOptions);\n//     }, [htmlReference.current]);\n//     useEffect(() => {\n//         if (!htmlReference.current) return;\n//         if(selected !== 5) ($(htmlReference.current) as GObject<'JQuery + ui plugin'>).resizable('disable');\n//         else ($(htmlReference.current) as GObject<'JQuery + ui plugin'>).resizable('enable');\n//     }, [selected]);\n//\n//     return(<div className={'editors'} ref={htmlReference} style={{borderLeft: (selected === 5) ? `1px dashed ${background}` : 'none'}}>\n//         <div className={'d-flex h-100'}>\n//             <section className={'mt-2'} style={{position: (selected >= 0) ? 'relative' : 'fixed', right: (selected >= 0) ? 'inherit' : '0'}}>\n//                 {editors.map((e, i) => <div style={{background: background}} key={i} className={'editor-button'} tabIndex={-1} onClick={() => {\n//                     if(selected !== i) setSelected(i);\n//                     else setSelected(-1);\n//                 }}>\n//                         <i style={{color}} className={`${e.icon} d-block m-auto`} />\n//                 </div>)}\n//                 {(selected >= 0) && <div className={'editor-button bg-danger'} tabIndex={-1} onClick={() => setSelected(-1)}>\n//                     <i className={'bi bi-x d-block text-white m-auto'} />\n//                 </div>}\n//             </section>\n//\n//             <section className={'editor-container border'} hidden={selected < 0}>\n//                 {selected >= 0 && <>\n//                     <b className={'d-block text-center'}>{editors[selected].name.toUpperCase()}</b>\n//                     <hr className={'my-2'} />\n//                     {editors[selected].component}\n//                 </>}\n//             </section>\n//\n//         </div>\n//     </div>);\n// }\n//\n// export {Editors};\nexport const removed = true;","map":{"version":3,"names":["removed"],"sources":["C:/d/Programming/web/jodel-mde/src/pages/components/Editors.tsx"],"sourcesContent":["// import './style.scss';\r\n// import React, {useEffect, useRef, useState} from 'react';\r\n// import {Info, Skeleton, Viewpoints, Views, Settings, Console} from \"../../components/editors\";\r\n// import {GObject} from \"../../joiner\";\r\n// import $ from 'jquery';\r\n// import {useEffectOnce} from \"usehooks-ts\";\r\n//\r\n// type Props = {};\r\n// function Editors(props: Props): JSX.Element {\r\n//     const [selected, setSelected] = useState(-1);\r\n//     const [background, setBackground] = useState('#5F0F40');\r\n//     const [color, setColor] = useState('#FFFFFF');\r\n//     const editors = [\r\n//         {icon: 'bi bi-info-lg', name: 'Info', component: <Info />},\r\n//         {icon: 'bi bi-stack', name: 'Skeleton', component: <Skeleton />},\r\n//         {icon: 'bi bi-stars', name: 'Views', component: <Views />},\r\n//         {icon: 'bi bi-box', name: 'Viewpoints', component: <Viewpoints />},\r\n//         {icon: 'bi bi-terminal', name: 'Console', component: <Console />},\r\n//         {icon: 'bi bi-gear', name: 'Options', component: <Settings {...{background, setBackground, color, setColor}} />}\r\n//     ];\r\n//\r\n//     const htmlReference: React.MutableRefObject<null | HTMLDivElement>= useRef(null);\r\n//     useEffect(() => {\r\n//         if (!htmlReference.current) return;\r\n//         const resizeOptions = {handles: 'w'};\r\n//         ($(htmlReference.current) as GObject<'JQuery + ui plugin'>).resizable(resizeOptions);\r\n//     }, [htmlReference.current]);\r\n//     useEffect(() => {\r\n//         if (!htmlReference.current) return;\r\n//         if(selected !== 5) ($(htmlReference.current) as GObject<'JQuery + ui plugin'>).resizable('disable');\r\n//         else ($(htmlReference.current) as GObject<'JQuery + ui plugin'>).resizable('enable');\r\n//     }, [selected]);\r\n//\r\n//     return(<div className={'editors'} ref={htmlReference} style={{borderLeft: (selected === 5) ? `1px dashed ${background}` : 'none'}}>\r\n//         <div className={'d-flex h-100'}>\r\n//             <section className={'mt-2'} style={{position: (selected >= 0) ? 'relative' : 'fixed', right: (selected >= 0) ? 'inherit' : '0'}}>\r\n//                 {editors.map((e, i) => <div style={{background: background}} key={i} className={'editor-button'} tabIndex={-1} onClick={() => {\r\n//                     if(selected !== i) setSelected(i);\r\n//                     else setSelected(-1);\r\n//                 }}>\r\n//                         <i style={{color}} className={`${e.icon} d-block m-auto`} />\r\n//                 </div>)}\r\n//                 {(selected >= 0) && <div className={'editor-button bg-danger'} tabIndex={-1} onClick={() => setSelected(-1)}>\r\n//                     <i className={'bi bi-x d-block text-white m-auto'} />\r\n//                 </div>}\r\n//             </section>\r\n//\r\n//             <section className={'editor-container border'} hidden={selected < 0}>\r\n//                 {selected >= 0 && <>\r\n//                     <b className={'d-block text-center'}>{editors[selected].name.toUpperCase()}</b>\r\n//                     <hr className={'my-2'} />\r\n//                     {editors[selected].component}\r\n//                 </>}\r\n//             </section>\r\n//\r\n//         </div>\r\n//     </div>);\r\n// }\r\n//\r\n// export {Editors};\r\nexport const removed = true;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,OAAO,GAAG,IAAI"},"metadata":{},"sourceType":"module"}