{"ast":null,"code":"class DSL {\n  static parser(jsx) {\n    jsx = DSL.loop('Children', jsx);\n    return jsx;\n  }\n  static loop(component, jsx) {\n    let tag = DSL[component](jsx);\n    while (tag) {\n      jsx = tag;\n      tag = DSL[component](tag);\n    }\n    return jsx;\n  }\n  static Children(jsx) {\n    const params = DSL.extractParameters(jsx, 'Children');\n    if (!params) return undefined;\n    const includes = DSL.extractParameter(params, 'includes') || '[]';\n    const excludes = DSL.extractParameter(params, 'excludes') || '[]';\n    const includesJsx = includes !== '[]' ? `.filter(c => c.name && ${includes}.includes(c.name))` : '';\n    const excludesJsx = excludes !== '[]' ? `.filter(c => c.name && !${excludes}.includes(c.name))` : '';\n    const dsl = `<div className={'children'}>\n                {data.children\n                    ${includesJsx}\n                    ${excludesJsx}\n                    .map(c => <DefaultNode key={c.id} data={c} />)\n                }\n        </div>`;\n    return DSL.replace(jsx, 'Children', dsl);\n  }\n  static extractParameters(jsx, component) {\n    const regex = new RegExp(`<${component}(.*?)\\\\/>`);\n    const match = jsx.match(regex);\n    if (match && match[1]) return match[1];else return undefined;\n  }\n  static extractParameter(params, name) {\n    const regex = new RegExp(`${name}={(.*?)}`);\n    const match = params.match(regex);\n    if (match && match[1]) return match[1];else return undefined;\n  }\n  static replace(jsx, component, dsl) {\n    const regex = new RegExp(`<${component}(.*?)\\\\/>`);\n    return jsx.replace(regex, dsl);\n  }\n}\nexport default DSL;","map":{"version":3,"names":["DSL","parser","jsx","loop","component","tag","Children","params","extractParameters","undefined","includes","extractParameter","excludes","includesJsx","excludesJsx","dsl","replace","regex","RegExp","match","name"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/src/DSL/DSL.ts"],"sourcesContent":["class DSL {\r\n    public static parser(jsx: string): string {\r\n        jsx = DSL.loop('Children', jsx);\r\n        return jsx;\r\n    }\r\n\r\n    private static loop(component: 'Children', jsx: string): string {\r\n        let tag = DSL[component](jsx);\r\n        while(tag) {\r\n            jsx = tag;\r\n            tag = DSL[component](tag);\r\n        }\r\n        return jsx;\r\n    }\r\n\r\n    private static Children(jsx: string): string|undefined {\r\n        const params = DSL.extractParameters(jsx, 'Children');\r\n        if(!params) return undefined;\r\n        const includes = DSL.extractParameter(params, 'includes') || '[]';\r\n        const excludes = DSL.extractParameter(params, 'excludes') || '[]';\r\n        const includesJsx = (includes !== '[]') ? `.filter(c => c.name && ${includes}.includes(c.name))` : '';\r\n        const excludesJsx = (excludes !== '[]') ? `.filter(c => c.name && !${excludes}.includes(c.name))` : '';\r\n        const dsl = `<div className={'children'}>\r\n                {data.children\r\n                    ${includesJsx}\r\n                    ${excludesJsx}\r\n                    .map(c => <DefaultNode key={c.id} data={c} />)\r\n                }\r\n        </div>`;\r\n        return DSL.replace(jsx, 'Children', dsl);\r\n    }\r\n\r\n    private static extractParameters(jsx: string, component: string): string|undefined {\r\n        const regex = new RegExp(`<${component}(.*?)\\\\/>`);\r\n        const match = jsx.match(regex);\r\n        if (match && match[1]) return match[1];\r\n        else return undefined;\r\n    }\r\n\r\n    private static extractParameter(params: string, name: string): string|undefined {\r\n        const regex = new RegExp(`${name}={(.*?)}`);\r\n        const match = params.match(regex);\r\n        if (match && match[1]) return match[1];\r\n        else return undefined;\r\n    }\r\n\r\n    private static replace(jsx: string, component: string, dsl: string): string {\r\n        const regex = new RegExp(`<${component}(.*?)\\\\/>`);\r\n        return jsx.replace(regex, dsl);\r\n    }\r\n\r\n}\r\n\r\nexport default DSL;\r\n"],"mappings":"AAAA,MAAMA,GAAG,CAAC;EACN,OAAcC,MAAMA,CAACC,GAAW,EAAU;IACtCA,GAAG,GAAGF,GAAG,CAACG,IAAI,CAAC,UAAU,EAAED,GAAG,CAAC;IAC/B,OAAOA,GAAG;EACd;EAEA,OAAeC,IAAIA,CAACC,SAAqB,EAAEF,GAAW,EAAU;IAC5D,IAAIG,GAAG,GAAGL,GAAG,CAACI,SAAS,CAAC,CAACF,GAAG,CAAC;IAC7B,OAAMG,GAAG,EAAE;MACPH,GAAG,GAAGG,GAAG;MACTA,GAAG,GAAGL,GAAG,CAACI,SAAS,CAAC,CAACC,GAAG,CAAC;IAC7B;IACA,OAAOH,GAAG;EACd;EAEA,OAAeI,QAAQA,CAACJ,GAAW,EAAoB;IACnD,MAAMK,MAAM,GAAGP,GAAG,CAACQ,iBAAiB,CAACN,GAAG,EAAE,UAAU,CAAC;IACrD,IAAG,CAACK,MAAM,EAAE,OAAOE,SAAS;IAC5B,MAAMC,QAAQ,GAAGV,GAAG,CAACW,gBAAgB,CAACJ,MAAM,EAAE,UAAU,CAAC,IAAI,IAAI;IACjE,MAAMK,QAAQ,GAAGZ,GAAG,CAACW,gBAAgB,CAACJ,MAAM,EAAE,UAAU,CAAC,IAAI,IAAI;IACjE,MAAMM,WAAW,GAAIH,QAAQ,KAAK,IAAI,GAAI,0BAA0BA,QAAQ,oBAAoB,GAAG,EAAE;IACrG,MAAMI,WAAW,GAAIF,QAAQ,KAAK,IAAI,GAAI,2BAA2BA,QAAQ,oBAAoB,GAAG,EAAE;IACtG,MAAMG,GAAG,GAAG;AACpB;AACA,sBAAsBF,WAAW;AACjC,sBAAsBC,WAAW;AACjC;AACA;AACA,eAAe;IACP,OAAOd,GAAG,CAACgB,OAAO,CAACd,GAAG,EAAE,UAAU,EAAEa,GAAG,CAAC;EAC5C;EAEA,OAAeP,iBAAiBA,CAACN,GAAW,EAAEE,SAAiB,EAAoB;IAC/E,MAAMa,KAAK,GAAG,IAAIC,MAAM,CAAC,IAAId,SAAS,WAAW,CAAC;IAClD,MAAMe,KAAK,GAAGjB,GAAG,CAACiB,KAAK,CAACF,KAAK,CAAC;IAC9B,IAAIE,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE,OAAOA,KAAK,CAAC,CAAC,CAAC,CAAC,KAClC,OAAOV,SAAS;EACzB;EAEA,OAAeE,gBAAgBA,CAACJ,MAAc,EAAEa,IAAY,EAAoB;IAC5E,MAAMH,KAAK,GAAG,IAAIC,MAAM,CAAC,GAAGE,IAAI,UAAU,CAAC;IAC3C,MAAMD,KAAK,GAAGZ,MAAM,CAACY,KAAK,CAACF,KAAK,CAAC;IACjC,IAAIE,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE,OAAOA,KAAK,CAAC,CAAC,CAAC,CAAC,KAClC,OAAOV,SAAS;EACzB;EAEA,OAAeO,OAAOA,CAACd,GAAW,EAAEE,SAAiB,EAAEW,GAAW,EAAU;IACxE,MAAME,KAAK,GAAG,IAAIC,MAAM,CAAC,IAAId,SAAS,WAAW,CAAC;IAClD,OAAOF,GAAG,CAACc,OAAO,CAACC,KAAK,EAAEF,GAAG,CAAC;EAClC;AAEJ;AAEA,eAAef,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module"}