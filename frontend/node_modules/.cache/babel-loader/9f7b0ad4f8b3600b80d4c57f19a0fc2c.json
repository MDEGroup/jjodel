{"ast":null,"code":"var _jsxFileName = \"C:\\\\d\\\\Programming\\\\web\\\\jodel-mde\\\\src\\\\common\\\\DV.tsx\",\n  _dec,\n  _class;\nimport { DViewElement, EdgeBendingMode, EdgeHead, RuntimeAccessible, U } from '../joiner';\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// const beautify = require('js-beautify').html; // BEWARE: this adds some newline that might be breaking and introduce syntax errors in our JSX parser\nconst beautify = s => s;\nlet ShortAttribETypes = window.ShortAttribETypes;\nexport let DV = (_dec = RuntimeAccessible('DV'), _dec(_class = class DV {\n  static invisibleJsx() {\n    return '';\n  }\n  static modelView() {\n    return beautify(DefaultView.model());\n  }\n  static packageView() {\n    return beautify(DefaultView.package());\n  }\n  static classView() {\n    return beautify(DefaultView.class());\n  }\n  static attributeView() {\n    return beautify(DefaultView.feature());\n  }\n  static referenceView() {\n    return beautify(DefaultView.feature());\n  }\n  static enumeratorView() {\n    return beautify(DefaultView.enum());\n  }\n  static literalView() {\n    return beautify(DefaultView.literal());\n  }\n  static fallbackView() {\n    return beautify(DefaultView.void());\n  }\n  static operationView() {\n    return beautify(DefaultView.operation());\n  }\n  static parameterView() {\n    return beautify(DefaultView.parameter());\n  }\n\n  // i want to keep it because it will be useful for a candidate next feature in m1 & layoutable elements\n  // it is still work in progress.\n  static operationViewm1() {\n    return beautify(DefaultView.operationm1());\n  }\n  static objectView() {\n    return beautify(DefaultView.object());\n  }\n  static valueView() {\n    return beautify(DefaultView.value());\n  }\n  static defaultPackage() {\n    return beautify(DefaultView.defaultPackage());\n  }\n  static error_raw() {\n    return DefaultView.error(...arguments);\n  }\n  static errorView(publicmsg, debughiddenmsg, errortype, data, node, v) {\n    let visibleMessage = publicmsg && typeof publicmsg === \"string\" ? U.replaceAll(publicmsg, \"Parse Error:\", \"\").trim() : publicmsg;\n    console.error(\"error in view:\", {\n      publicmsg,\n      debuginfo: debughiddenmsg\n    });\n    return DefaultView.error(visibleMessage, errortype, data, node, v);\n  }\n  static errorView_string(publicmsg, debughiddenmsg, errortype, data, node, v) {\n    let visibleMessage = publicmsg && typeof publicmsg === \"string\" ? U.replaceAll(publicmsg, \"Parse Error:\", \"\").trim() : publicmsg;\n    console.error(\"error in view:\", {\n      publicmsg,\n      debuginfo: debughiddenmsg\n    });\n    return DefaultView.error_string(visibleMessage, errortype, data, node, v);\n  }\n\n  // {ancors.map( a => <EdgePoint view={\"aaaaa\"} initialSize={{x: node.w * a.x, y: node.h * a.y}}/>)}\n  static anchorJSX() {\n    return `\n<div className={\"overlap\"}>\n{Object.keys(anchors).map( (k) => { let a = anchors[k]; return(\n<div className={\"anchor draggable resizable\"} data-anchorName={a.name} data-anchorKey={k}\n    onDragEnd={(coords/*Point*/)=>node.events.dragAnchor(coords, k)} onMouseUp={()=>{node.events.assignAnchor(k)}}\n    style={{left: 100*a.x+'%', top:100*a.y+'%', width:a.w+'px', height:a.h+'px'}} />)})\n}</div>\n`;\n  }\n  static edgePointView() {\n    return beautify(`<div className={\"edgePoint\"} tabIndex=\"-1\">\n    {decorators}\n</div>`);\n  }\n  static edgePointViewSVG() {\n    return beautify(`<ellipse stroke={\"black\"} fill={\"red\"} cx={\"50\"} cy={\"50\"} rx={\"20\"} ry={\"20\"} />`\n    //`<ellipse stroke={\"black\"} fill={\"red\"} cx={props.node.x} cy={props.node.y} rx={props.node.w} ry={props.node.h} />`\n    );\n  }\n  static svgHeadTail(head, type) {\n    let ret;\n    let headstr = head === \"head\" ? \"segments.head\" : \"segments.tail\";\n    let styleTranslateRotate = 'transform:\"translate(\" + ' + headstr + '.x + \"px, \" + ' + headstr + '.y + \"px) rotate(\" + (' + headstr + '.rad) + \"rad)\",' + ' \"transformOrigin\":' + headstr + '.w/2+\"px \"+ ' + headstr + '.h/2+\"px\"';\n    let attrs = `\\n\\t\\t\\t\\tstyle={{` + styleTranslateRotate + `}}\\n\\t\\t\\t\\tclassName={\"` + head + ` ` + type + ` preview\"} />\\n`;\n    let path;\n    let hoverAttrs = `\\n\\t\\t\\t\\tstyle={{` + styleTranslateRotate + `}}\\n\\t\\t\\t\\tclassName={\"` + head + ` ` + type + ` clickable content\"} tabIndex=\"-1\" />\\n`;\n    let d;\n    switch (type) {\n      default:\n        ret = \"edge '\" + head + \"' with type: '\" + type + \"' not found\";\n        break;\n      case EdgeHead.extend:\n        //if (head === \"tail\") return undefined;\n        d = `M 0 0   L x y/2   L 0 y   Z`;\n        path = `<path  `;\n        ret = path + attrs + \"\\n\\t\\t\\t\\t\" + path + hoverAttrs;\n        break;\n      case EdgeHead.reference:\n        //if (head === \"tail\") return undefined;\n        d = `M 0 0   L x y/2   L 0 y`;\n        path = `<path  `;\n        ret = path + attrs + \"\\n\\t\\t\\t\\t\" + path + hoverAttrs;\n        break;\n      case EdgeHead.aggregation:\n        //if (head === \"head\") return undefined;\n        d = `M 0 y/2   L x/2 0   L x y/2   L x/2 y   Z`;\n        path = `<path  `;\n        ret = path + attrs + \"\\n\\t\\t\\t\\t\" + path + hoverAttrs;\n        break;\n      case EdgeHead.composition:\n        //if (head === \"head\") return undefined;\n        d = `M 0 y/2   L x/2 0   L x y/2   L x/2 y   Z`;\n        path = `<path  `;\n        ret = path + attrs + \"\\n\\t\\t\\t\\t\" + path + hoverAttrs;\n        break;\n      /* `<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" style={overflow: \"visible\"}>\r\n                                  <path d={\"M 10 0 L 0 20 L 20 20 Z\"} fill=\"#ffffff\" stroke=\"#808080\" strokeWidth=\"1\"></path>\r\n                               </svg>`;*/\n      //  style={transform: \"rotate3d(xcenter, ycenter, zcenter??, 90deg)\"}\n    }\n    //  transform={\"rotate(\"+`+headstr+`.rad+\"rad \"+ segments.all[0].start.pt.toString(false, \" \")}\n    return ret; // no wrap because of .hoverable > .preview  on root & subelements must be consecutive\n    // return `<g className=\"edge`+head + ` ` + type +`\" style={` + styleTranslate + `}>\\n`+ ret +`</g>`\n  }\n\n  // about label rotation in .edge > foreignObect > div (label)\n  // first transform is h-center. second is rotate, third adds [0, 50%] of 50% vertical offset AFTER rotation to take label out of edge. fourth is to add a margin.\n  static edgeView(modename, headSize, tailSize, dashing, vp, name) {\n    let fill;\n    switch (modename) {\n      case EdgeHead.reference:\n      default:\n        fill = '#fff0';\n        break;\n      case EdgeHead.composition:\n        fill = '#000';\n        break;\n      case EdgeHead.aggregation:\n      case EdgeHead.extend:\n        fill = '#fff';\n        break;\n    }\n    const agglabel = \"◇ Aggregation / Composition\";\n    const extendlabel = \"△ \" + EdgeHead.extend;\n    const asslabel = \"Λ \" + EdgeHead.reference;\n    let headdict = {\n      [asslabel]: 'M 0 0   L x y/2   L 0 y',\n      [extendlabel]: 'M 0 0   L x y/2   L 0 y   Z',\n      [agglabel]: 'M 0 y/2   L x/2 0   L x y/2   L x/2 y   Z'\n    };\n    let predefinedPaths = Object.entries(headdict).map(e => ({\n      k: e[0],\n      v: e[1]\n    }));\n    let headPath = '',\n      tailPath = '';\n    switch (modename) {\n      default:\n        break;\n      case EdgeHead.extend:\n        headPath = extendlabel;\n        break;\n      case EdgeHead.reference:\n        headPath = asslabel;\n        break;\n      case EdgeHead.aggregation:\n        tailPath = agglabel;\n        break;\n      case EdgeHead.composition:\n        tailPath = agglabel;\n        break;\n    }\n    headPath = headdict[headPath] || '';\n    tailPath = headdict[tailPath] || '';\n    let palette = {\n      'anchorSize': {\n        type: 'number',\n        value: 20,\n        unit: 'px'\n      },\n      'dashing': {\n        value: dashing || '',\n        type: \"text\"\n      },\n      'stroke-color': U.hexToPalette('#777'),\n      'stroke-width': {\n        value: 1,\n        type: 'number',\n        unit: 'px'\n      },\n      'stroke-color-hover': U.hexToPalette('#000'),\n      'stroke-width-hover': {\n        value: 3,\n        type: 'number',\n        unit: 'px'\n      },\n      'head': {\n        type: 'path',\n        value: headPath,\n        options: predefinedPaths,\n        x: 'edgeHeadSize.x',\n        y: 'edgeHeadSize.y'\n      },\n      'tail': {\n        type: 'path',\n        value: tailPath,\n        options: predefinedPaths,\n        x: 'edgeTailSize.x',\n        y: 'edgeTailSize.y'\n      },\n      'fill': U.hexToPalette(fill)\n    };\n    let css = \".edge-anchor{\" + \"\\n\\tcursor: crosshair;\" + \"\\n\\tstroke: transparent;\" + \"\\n\\tfill: none;\" + \"\\n\\tr:var(--anchorSize);\" + \"\\n\\toutline: var(--stroke-width) solid var(--stroke-color);\" + \"\\n\\toutline-offset: calc(var(--stroke-width) * -1);\" + \"\\n\\tborder-radius: 100%;\" + \"\\n}\" + \"\\n.clickthrough, .unclickable{\" + \"\\n\\tpointer-events: none;\" + \"\\n}\" + \"\\n.clickable{\" + \"\\n\\tpointer-events: all;\" + \"\\n}\" + \"\\n.fullscreen{\" + \"\\n\\toverflow: visible;\" + \"\\n\\twidth: 100vw;\" + \"\\n\\theight: 100vh;\" + \"\\n}\" + \"\\npath{\" + \"\\n\\tfill: none;\" + \"\\n\\tstroke-dasharray: var(--dashing);\" + \"\\n\\t&.head{\" + \"\\n\\t\\td: path(var(--head));\" + \"\\n\\t}\" + \"\\n\\t&.tail{\" + \"\\n\\t\\td: path(var(--tail));\" + \"\\n\\t}\" + \"\\n}\" + \"\\npath.edge.full, path.tail, path.head{\" + \"\\n\\tstroke: var(--stroke-color);\" + \"\\n\\tstroke-width: var(--stroke-width);\" + \"\\n}\" + \"\\npath.tail, path.head{\" + \"\\n\\tfill:var(--fill);\" + \"\\n}\" + \"\\npath.edge.full.hover-activator{\" + \"\\n\\tstroke-width: var(--stroke-width-hover);\" + \"\\n\\tstroke: none;\" + \"\\n}\" + \"\\npath.content{\" + \"\\n\\tstroke: var(--stroke-color-hover);\" + \"\\n\\tstroke-width: var(--stroke-width-hover);\" + \"\\n}\" + \"\\n.label-text{\" + \"\\n\\tcolor: var(--stroke-color);\" + \"\\n}\" + \"\\nforeignObject.label{\" + \"\\n\\toverflow: visible;\" + \"\\n\\tcolor: var(--stroke-color);\" + \"\\n\\twidth: 0;\" + \"\\n\\theight: 0;\" + \"\\n\\twhite-space: pre;\" + \"\\n\\t> div{\" + \"\\n\\t\\twidth: fit-content;\" + \"\\n\\t}\" + \"\\n}\" + \"\\n\\t\" + \"\\n\\t\" + \"\";\n    let head = DV.svgHeadTail(\"head\", modename) || '';\n    let tail = DV.svgHeadTail(\"tail\", modename) || '';\n    let jsx = beautify(`<div className={\"edge hoverable hide-ep clickthrough fullscreen ` + modename + `\"}>\n            <svg className={\"clickthrough fullscreen\"}>\n                { /* edge full paths\n               \n                 first is preview path, normally seen\n                 third (segmented) is path onHover\n                 second is to enlarge the hover area of path.preview to the same as path.content, so i avoid hover loop enter-leave and graphical flashing\n                \n                */ }\n                <path className={\"preview edge full` + (dashing ? ' dashed' : '') + `\"} d={this.edge.d} />\n                <path className={\"preview edge full hover-activator\"} d={this.edge.d} />\n                { /* edge separate segments */ }\n                {segments && segments.all && segments.all.flatMap(s => [\n                    <path tabIndex=\"-1\" className={\"clickable content segment\"} d={s.dpart}></path>,\n                    s.label && <foreignObject className=\"label\" x={(s.start.pt.x + s.end.pt.x)/2+\"px\"} y={(s.start.pt.y + s.end.pt.y)/2+\"px\"}>\n                    <div className={\"label-text\"}\n                     style={{transform: \"translate(-50%, 0%) rotate(\"+s.radLabels+\"rad) translate(0%, -\"+(1-0.5*Math.abs(Math.abs(s.radLabels)%Math.PI)/(Math.PI/2))*100+\"%)\"+\n                     \" translate(0%, -5px\"}}>{s.label}</div>\n                    </foreignObject>\n                ])}\n                { /* edge head */ }\n                ` + head + `\n                { /* edge tail */ }\n                ` + tail + `\n                { /* edge anchor start */ }\n                {edge.start && <circle className=\"edge-anchor content clickable\"\n                 style={{transform: \"translate(\" + segments.all[0].start.pt.x +\"px, \" + segments.all[0].start.pt.y +\"px)\"}}\n                 onMouseDown={()=> edge.startFollow=true}\n                 onMouseUp={()=> edge.startfollow=false} />}\n                { /* edge anchor end */ }\n                {edge.end && <circle className=\"edge-anchor content clickable\" ` +\n    // cx={0*segments.all.last().end.pt.x} cy={0*segments.all.last().end.pt.y}\n    `style={{transform: \"translate(\" + segments.all.last().end.pt.x +\"px, \" + segments.all.last().end.pt.y +\"px)\"}}\n                 onMouseDown={()=> edge.endFollow=true}\n                 onMouseUp={()=> edge.endfollow=false} />}\n\n            </svg>\n            { /* interactively added edgepoints */ }\n            {\n                edge.midPoints.map( m => <EdgePoint data={edge.father.model.id} initialSize={m} key={m.id} view={\"EdgePoint\"} /> )\n            }\n            {decorators}\n        </div>`);\n    let edgePrerenderFunc = \"(ret)=>{\\n\" + \"// ** preparations and default behaviour here ** //\\n\" + \"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\" + \"// ** declarations here ** //\\n\" + \"\\n\" + \"}\";\n    let edgeUsageDeclarations = \"(ret)=>{\\n\" + \"// ** preparations and default behaviour here ** //\\n\" + \"// ret.data = data\\n\" + \"ret.edgeview = edge.view.id\\n\" + \"ret.view = view\\n\" + \"// data, edge, view are dependencies by default. delete them above if you want to remove them.\\n\" + \"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\" + \"// ** declarations here ** //\\n\" + \"ret.start = edge.start\\n\" + \"ret.end = edge.end\\n\" + \"ret.segments = edge.segments\\n\" + \"}\";\n    let ev = DViewElement.new2(\"Edge\" + name, jsx, vp, v => {\n      // v.appliableToClasses = [DVoidEdge.cname];\n      v.appliableTo = 'Edge';\n      v.bendingMode = EdgeBendingMode.Line;\n      v.edgeHeadSize = headSize;\n      v.edgeTailSize = tailSize;\n      //v.constants = edgeConstants;\n      v.palette = palette;\n      v.css = css;\n      v.usageDeclarations = edgeUsageDeclarations;\n      v.preRenderFunc = edgePrerenderFunc;\n    }, false, 'Pointer_ViewEdge' + name);\n    return ev;\n  }\n  /*\r\n  {\r\n      false && edge.end.model.attributes.map( (m, index, arr) => <EdgePoint data={m.id} initialSize={(parent) => {\r\n          let segs = parent.segments.segments;\r\n          let pos = segs[0].start.pt.multiply(1-(index+1)/(arr.length+1), true).add(segs[segs.length-1].end.pt.multiply((index+1)/(arr.length+1), true));\r\n          // console.trace(\"initial ep\", {segs, pos, ratio:(index+1)/(arr.length+1), s:segs[0].start.pt, e:segs[segs.length-1].end.pt});\r\n          return {...pos, w:55, h:55}}} key={m.id} view={\"Pointer_ViewEdgePoint\"} /> )\r\n  }{\r\n      false && <EdgePoint key={\"midnode1\"} view={\"Pointer_ViewEdgePoint\"} />\r\n  }{\r\n      false && <EdgePoint key={\"midnode2\"} view={\"Pointer_ViewEdgePoint\"} />\r\n  }{\r\n      false && props.children && \"this would cause loop no idea why, needs to be fixed to allow passing EdgeNodes here\" || []\r\n  }\r\n  */\n  static semanticErrorOverlay_old() {\n    return `<section className=\"overlap\">\n    <div className=\"error-message\">Lowerbound violation</div>\n</section>`;\n  }\n  static semanticErrorOverlay() {\n    return `<section className=\"overlap\">\n    <div className=\"error-message\">{errors.join(<br/>)}</div>\n</section>`;\n  }\n}) || _class); // DV class end\n\nlet valuecolormap = {};\nvaluecolormap[ShortAttribETypes.EBoolean] = \"orange\";\nvaluecolormap[ShortAttribETypes.EByte] = \"orange\";\nvaluecolormap[ShortAttribETypes.EShort] = \"orange\";\nvaluecolormap[ShortAttribETypes.EInt] = \"orange\";\nvaluecolormap[ShortAttribETypes.ELong] = \"orange\";\nvaluecolormap[ShortAttribETypes.EFloat] = \"orange\";\nvaluecolormap[ShortAttribETypes.EDouble] = \"orange\";\nvaluecolormap[ShortAttribETypes.EDate] = \"green\";\nvaluecolormap[ShortAttribETypes.EString] = \"green\";\nvaluecolormap[ShortAttribETypes.EChar] = \"green\";\nvaluecolormap[ShortAttribETypes.EVoid] = \"gray\";\n\n// &&[]bn\nlet valuecolormap_str = JSON.stringify(valuecolormap); // can this be declared inside view.constants ?\n\nclass DefaultView {\n  static model() {\n    return `\n<div className={'panning-handle'} style={{'--pan-x': node.offset.x+'px', '--pan-y': node.offset.y+'px'}}>\n    <div className={'root model'}>\n        {!data && \"Model data missing.\"}\n        {/*<ControlPanel node={node}></ControlPanel>*/}\n        <label className={\"detail-level\"}>\n            <input onChange={(e)=>{node.state = {level:+e.target.value}}} min=\"0\" max=\"3\" type=\"range\" step=\"1\" value={level}/>\n            <div>Detail level:{level}</div>\n        </label>\n        <div className={'edges'}>\n            {[\n                refEdges.map(se => <Edge anchorStart={0} anchorEnd={0} key={se.id}\n                start={se.start.father.node} end={se.end.node} view={'Edge' + ( se.start.containment && 'Composition' || 'Association')} />),\n                extendEdges.map(se => <Edge start={se.start} end={se.end} view={'EdgeInheritance'} key={se.id} />)\n            ]}\n        </div>\n        {otherPackages.filter(p => p).map(pkg => <DefaultNode key={pkg.id} data={pkg} />)}\n        {level >= 1 && firstPackage && firstPackage.children.filter(c => c).map(classifier => <DefaultNode key={classifier.id} data={classifier} />)}\n        {level >= 1 && m1Objects.filter(o => o).map(m1object => <DefaultNode key={m1object.id} data={m1object} />)}\n        {decorators}\n    </div>\n</div>`;\n  }\n  static void() {\n    return `<div className={'root void model-less round bg-white p-1'}>\n    <div>voidvertex element test</div>\n    <div>data: {props.data ? props.data.name : \"empty\"}</div>\n    {decorators}\n</div>`;\n  }\n  static package() {\n    return `<div className={'root package'}>\n    <Measurable draggable={true} resizable={true}><div>draggable resizable</div></Measurable>\n    <Measurable draggable={true}><div>draggable</div></Measurable>\n    <div className={'package-children'}>\n        {upperLevel >= 1 ? [\n            <label className={\"detail-level\"}>\n                <input onChange={(e)=>{node.state = {level:+e.target.value}}} min=\"0\" max=\"3\" type=\"range\" step=\"1\" value={level}/>\n                <div>Detail level:{level}</div>\n            </label>,\n            data.children.map(c => <DefaultNode key={c.id} data={c} />)\n        ] :\n        [\n            <div className={\"summary\"}><b>URI:</b><span className={\"ms-1\"}>{data.uri}</span></div>,\n            <div className={\"summary\"}>{[\n                data.classes.length ? data.classes.length + \" classes\" : '',\n                data.enumerators.length ? data.enumerators.length + \" enumerators\" : ''\n               ].filter(v=>!!v).join(',')}</div>\n        ]}\n    </div>\n    {decorators}\n</div>`;\n  }\n  static defaultPackage() {\n    return `<div className={'root package'}>\n    <div className={'package-children'}>\n        {data.children.map(c => <DefaultNode key={c.id} data={c} />)}\n    </div>\n    {decorators}\n</div>`;\n  }\n  static class() {\n    return `<View className={'root class'} onClick={()=>{/*node.events.e1(Math.random().toFixed(3))*/}}>\n    <div className={'header'}>\n        <b className={'class-name'}>{interface ? 'Interface' : abstract ? 'Abstract Class' : 'Class'}:</b>\n        <Input data={data} field={'name'} hidden={true} autosize={true} />\n    </div>\n    <hr/>\n    <div className={'class-children'}>\n        {level >= 2 && [\n            attributes.map(c => <DefaultNode key={c.id} data={c} />),\n            references.map(c => <DefaultNode key={c.id} data={c} />),\n            operations.map(c => <DefaultNode key={c.id} data={c} />)\n          ]\n         || [/*\n         <div className={\"\"}><b>isInterface:</b><span className={\"ms-1\"}>{''+data.interface}</span></div>,\n         <div className={\"\"}><b>isAbstract:</b><span className={\"ms-1\"}>{''+data.abstract}</span></div>,\n         <div className={\"\"}><b>Instances:</b><span className={\"ms-1\"}>{data.instances.length}</span></div>,*/\n         <div className={\"summary\"}>{[\n             attributes.length ? attributes.length + \" attributes\" : '',\n             references.length ? references.length + \" references\" : '',\n             operations.length ? operations.length + \" operations\" : '',\n             !(attributes.length + references.length + operations.length) ? '- empty -' : ''\n            ].filter(v=>!!v).join(',')}</div>\n         ]\n        }\n    </div>\n    {decorators}\n</View>`;\n  }\n  static enum() {\n    return `<div className={'root enumerator'}>\n    <div className={'header'}>\n        <b className={'enumerator-name'}>Enum:</b>\n        <Input data={data} field={'name'} hidden={true} autosize={true} />\n    </div>\n    <hr />\n    <div className={'enumerator-children'}>\n        {level >= 2 && literals.map(c => <DefaultNode key={c.id} data={c}/>)\n          || <div className={\"summary\"}>{literals.length} literals</div>}\n    </div>\n    {decorators}\n</div>`;\n  }\n  static feature() {\n    return `<div className={'root feature w-100'}>\n    <span className={'feature-name'}>{data.name}:</span>\n    <Select data={data} field={'type'} />\n    {decorators}\n</div>`;\n  }\n  static literal() {\n    return `<label className={'root literal d-block text-center'}>\n    {data.name}\n    {decorators}\n</label>`;\n  }\n  static operation() {\n    return `<div className={'root operation w-100 hoverable'}>\n        <span className={'feature-name'}>{data.name + ' =>'}</span>\n        <Select data={data} field={'type'} />\n    <div className={\"parameters content\"}>\n    {data.exceptions.length ? \" throws \" + data.exceptions.join(\", \") : ''}\n    {\n        level >= 3 && data.parameters.map(p => <DefaultNode data={p} key={p.id} />)\n    }</div>\n    {decorators}\n</div>`;\n  }\n  static parameter() {\n    return `<div className={'root parameter w-100'}>\n    <span className={'feature-name'}>\n        {data.name + '' + (data.lowerBound === 0 ? '?:' : ':' )}\n    </span>\n    <Select data={data} field={'type'} />\n    <span className={\"modifier\"}>{data.upperBound > 1 || data.upperBound === -1 ? '[]' : ''}</span>\n    {decorators}\n</div>`;\n  }\n\n  // i want to keep it because it will be useful for a candidate next feature in m1 & layoutable elements\n  // it is still work in progress.\n  static operationm1() {\n    return `<div className={'d-flex root operationm1'} style={{paddingRight: \"6px\"}}>\n    <label className={'d-block ms-1'}>{this.props.data.instanceof.name}</label>\n    <label className={'d-block ms-auto hover-root'} style={{color:` + valuecolormap_str + `[this.props.data.values.type] || \"gray\"}}>\n        →→→\n        <div className=\"hover-content\">\n            <ParameterForm operation={this.props.data.id} vertical={true} />\n        </div>\n    </label>\n    {decorators}\n</div>`;\n  }\n  static objectOld() {\n    return `<div className={'round bg-white root class'}>\n    <label className={'ms-1'}>\n        <Input jsxLabel={<b className={'object-name'}>{data.instanceof ? data.instanceof.name : \"Object\"}:</b>} \n           data={data} field={'name'} hidden={true} autosize={true}/>\n    </label>\n    <hr />\n    <div className={'object-children'}>\n        { features.map(c => <DefaultNode key={c.id} data={c} />) }\n    </div>\n    {decorators}\n</div>`;\n  }\n  static object() {\n    return `<div className={'root object'}>\n    <b className={'object-name'}>{data.instanceof ? data.instanceof.name : 'Object'}:</b>\n    <Input data={data} field={'name'} hidden={true} autosize={true} />\n    <hr/>\n    <div className={'object-children'}>\n        {level >= 2 && data.features.map(f => <DefaultNode key={f.id} data={f} />)}\n    </div>\n    {decorators}\n</div>`;\n  }\n  static value() {\n    return `<div className={'root value d-flex'}>\n    {instanceofname && <label className={'d-block ms-1 name'}>{instanceofname}</label>}\n    {!instanceofname && <Input className='name' data={data} field={'name'} hidden={true} autosize={true} />}\n    <label className={'d-block m-auto values_str'} style={{color: constants[typeString] || 'gray'}}>\n        : {valuesString}\n    </label>\n    {decorators}\n</div>`;\n  }\n  static error(msg, errortype, data, node, v) {\n    let dname = data && (data.name || data.className.substring(1));\n    if (dname && dname.length >= 10) dname = dname.substring(0, 7) + '…';\n    let nodename = ((node === null || node === void 0 ? void 0 : node.className) || '').replace(/[^A-Z]+/g, \"\").substring(1);\n    let on = dname && nodename ? \" on \" + dname + \" / \" + nodename : dname || nodename ? \" on \" + (dname || nodename) : '';\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: (v ? 'w-100 h-100' : 'raw_error') + ' round bg-white border border-danger',\n      style: {\n        minHeight: \"50px\",\n        overflow: \"scroll\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'text-center text-danger',\n        tabIndex: -1,\n        style: {\n          background: \"#fff\",\n          overflow: 'visible',\n          zIndex: 100,\n          minWidth: \"min-content\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          \"data-dname\": dname,\n          \"data-nodename\": nodename,\n          \"data-str\": true,\n          children: [errortype, \" ERROR\", on]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 17\n        }, this), v && /*#__PURE__*/_jsxDEV(\"label\", {\n          className: 'text-center mx-1 d-block',\n          children: [\"While applying view \\\"\", v.name, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 23\n        }, this), msg && /*#__PURE__*/_jsxDEV(\"label\", {\n          className: 'text-center mx-1 d-block',\n          style: {\n            color: \"black\"\n          },\n          children: msg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 16\n    }, this);\n  }\n  static error_string(msg, errortype, data, node, v) {\n    let dname = data && (data.name || data.className.substring(1));\n    if (dname && dname.length >= 10) dname = dname.substring(0, 7) + '…';\n    let nodename = ((node === null || node === void 0 ? void 0 : node.className) || '').replace(/[^A-Z]+/g, \"\").substring(1);\n    let on = dname && nodename ? \" on \" + dname + \" / \" + nodename : dname || nodename ? \" on \" + (dname || nodename) : '';\n    return `<div className={'w-100 h-100 round bg-white border border-danger'} style={{minHeight:\"50px\", overflow:\"scroll\"}}>\n            <div className={'text-center text-danger'} tabIndex={-1} style={{background:\"#fff\", overflow: 'visible', zIndex:100, minWidth:\"min-content\"}}>\n                <b>{errortype}_ERROR` + on + `</b>\n                <hr/>\n                <label className={'text-center mx-1 d-block'}>\n                    While applying view \"${v === null || v === void 0 ? void 0 : v.name}\"\n                </label>\n                {${msg} && <label className={'text-center mx-1 d-block'} style={{color:\"black\"}}>${msg}</label>}\n            </div>\n        </div>`;\n  }\n}","map":{"version":3,"names":["DViewElement","EdgeBendingMode","EdgeHead","RuntimeAccessible","U","React","jsxDEV","_jsxDEV","beautify","s","ShortAttribETypes","window","DV","_dec","_class","invisibleJsx","modelView","DefaultView","model","packageView","package","classView","class","attributeView","feature","referenceView","enumeratorView","enum","literalView","literal","fallbackView","void","operationView","operation","parameterView","parameter","operationViewm1","operationm1","objectView","object","valueView","value","defaultPackage","error_raw","error","arguments","errorView","publicmsg","debughiddenmsg","errortype","data","node","v","visibleMessage","replaceAll","trim","console","debuginfo","errorView_string","error_string","anchorJSX","edgePointView","edgePointViewSVG","svgHeadTail","head","type","ret","headstr","styleTranslateRotate","attrs","path","hoverAttrs","d","extend","reference","aggregation","composition","edgeView","modename","headSize","tailSize","dashing","vp","name","fill","agglabel","extendlabel","asslabel","headdict","predefinedPaths","Object","entries","map","e","k","headPath","tailPath","palette","unit","hexToPalette","options","x","y","css","tail","jsx","edgePrerenderFunc","edgeUsageDeclarations","ev","new2","appliableTo","bendingMode","Line","edgeHeadSize","edgeTailSize","usageDeclarations","preRenderFunc","semanticErrorOverlay_old","semanticErrorOverlay","valuecolormap","EBoolean","EByte","EShort","EInt","ELong","EFloat","EDouble","EDate","EString","EChar","EVoid","valuecolormap_str","JSON","stringify","objectOld","msg","dname","className","substring","length","nodename","replace","on","style","minHeight","overflow","children","tabIndex","background","zIndex","minWidth","fileName","_jsxFileName","lineNumber","columnNumber","color"],"sources":["C:/d/Programming/web/jodel-mde/src/common/DV.tsx"],"sourcesContent":["import {\r\n    DGraphElement, Dictionary,\r\n    DModelElement,\r\n    DViewElement,\r\n    DViewPoint,\r\n    DVoidEdge,\r\n    EdgeBendingMode,\r\n    EdgeHead,\r\n    GObject,\r\n    GraphPoint,\r\n    Pointer,\r\n    RuntimeAccessible,\r\n    ShortAttribETypes as SAType,\r\n    U\r\n} from '../joiner';\r\nimport React, {ReactNode} from \"react\";\r\nimport {PaletteType} from \"../view/viewElement/view\";\r\n// const beautify = require('js-beautify').html; // BEWARE: this adds some newline that might be breaking and introduce syntax errors in our JSX parser\r\nconst beautify = (s: string) => s;\r\nlet ShortAttribETypes: typeof SAType = (window as any).ShortAttribETypes;\r\n\r\n@RuntimeAccessible('DV')\r\nexport class DV {\r\n    public static invisibleJsx(): string { return ''; }\r\n    public static modelView(): string { return beautify(DefaultView.model()); }\r\n    public static packageView(): string { return beautify(DefaultView.package()); }\r\n    public static classView(): string { return beautify(DefaultView.class()); }\r\n    public static attributeView(): string { return beautify(DefaultView.feature()); }\r\n    public static referenceView(): string { return beautify(DefaultView.feature()); }\r\n    public static enumeratorView(): string { return beautify(DefaultView.enum()); }\r\n    public static literalView(): string { return beautify(DefaultView.literal()); }\r\n    public static fallbackView(): string { return beautify(DefaultView.void()); }\r\n    public static operationView(): string { return beautify(DefaultView.operation()); }\r\n    public static parameterView(): string { return beautify(DefaultView.parameter()); }\r\n\r\n    // i want to keep it because it will be useful for a candidate next feature in m1 & layoutable elements\r\n    // it is still work in progress.\r\n    public static operationViewm1(): string { return beautify(DefaultView.operationm1()); }\r\n    public static objectView(): string { return beautify(DefaultView.object()); }\r\n    public static valueView(): string { return beautify(DefaultView.value()); }\r\n    public static defaultPackage(): string { return beautify(DefaultView.defaultPackage()); }\r\n    public static error_raw(...a: Parameters<(typeof DefaultView)[\"error\"]>): React.ReactNode {\r\n        return DefaultView.error(...a);\r\n    }\r\n\r\n    public static errorView(publicmsg: ReactNode, debughiddenmsg:any, errortype: string, data?: DModelElement | undefined, node?: DGraphElement | undefined, v?: DViewElement): React.ReactNode {\r\n        let visibleMessage = publicmsg && typeof publicmsg === \"string\" ? U.replaceAll(publicmsg, \"Parse Error:\", \"\").trim() : publicmsg;\r\n        console.error(\"error in view:\", {publicmsg, debuginfo:debughiddenmsg});\r\n        return DefaultView.error(visibleMessage, errortype, data, node, v); }\r\n    public static errorView_string(publicmsg: string, debughiddenmsg:any, errortype: string, data?: DModelElement | undefined, node?: DGraphElement | undefined, v?: DViewElement): React.ReactNode {\r\n        let visibleMessage = publicmsg && typeof publicmsg === \"string\" ? U.replaceAll(publicmsg, \"Parse Error:\", \"\").trim() : publicmsg;\r\n        console.error(\"error in view:\", {publicmsg, debuginfo:debughiddenmsg});\r\n        return DefaultView.error_string(visibleMessage, errortype, data, node, v); }\r\n\r\n    // {ancors.map( a => <EdgePoint view={\"aaaaa\"} initialSize={{x: node.w * a.x, y: node.h * a.y}}/>)}\r\n    public static anchorJSX(): string { return (`\r\n<div className={\"overlap\"}>\r\n{Object.keys(anchors).map( (k) => { let a = anchors[k]; return(\r\n<div className={\"anchor draggable resizable\"} data-anchorName={a.name} data-anchorKey={k}\r\n    onDragEnd={(coords/*Point*/)=>node.events.dragAnchor(coords, k)} onMouseUp={()=>{node.events.assignAnchor(k)}}\r\n    style={{left: 100*a.x+'%', top:100*a.y+'%', width:a.w+'px', height:a.h+'px'}} />)})\r\n}</div>\r\n`);}\r\n    static edgePointView(): string { return beautify((\r\n`<div className={\"edgePoint\"} tabIndex=\"-1\">\r\n    {decorators}\r\n</div>`\r\n))}\r\n    static edgePointViewSVG(): string { return beautify(\r\n        `<ellipse stroke={\"black\"} fill={\"red\"} cx={\"50\"} cy={\"50\"} rx={\"20\"} ry={\"20\"} />`\r\n        //`<ellipse stroke={\"black\"} fill={\"red\"} cx={props.node.x} cy={props.node.y} rx={props.node.w} ry={props.node.h} />`\r\n    )}\r\n\r\n    static svgHeadTail(head: \"head\" | \"tail\", type: EdgeHead): string | undefined {\r\n        let ret: string;\r\n        let headstr = head===\"head\" ? \"segments.head\" : \"segments.tail\";\r\n        let styleTranslateRotate = 'transform:\"translate(\" + ' + headstr + '.x + \"px, \" + ' + headstr + '.y + \"px) rotate(\" + (' + headstr + '.rad) + \"rad)\",' +\r\n            ' \"transformOrigin\":'+headstr+'.w/2+\"px \"+ '+headstr+'.h/2+\"px\"';\r\n        let attrs = `\\n\\t\\t\\t\\tstyle={{`+styleTranslateRotate +`}}\\n\\t\\t\\t\\tclassName={\"` + head + ` ` + type +` preview\"} />\\n`;\r\n        let path: string;\r\n        let hoverAttrs = `\\n\\t\\t\\t\\tstyle={{`+styleTranslateRotate +`}}\\n\\t\\t\\t\\tclassName={\"` + head + ` ` + type +` clickable content\"} tabIndex=\"-1\" />\\n`;\r\n        let d: string;\r\n        switch (type) {\r\n            default:\r\n                ret = \"edge '\" + head + \"' with type: '\" +type + \"' not found\";\r\n                break;\r\n            case EdgeHead.extend:\r\n                //if (head === \"tail\") return undefined;\r\n                d = `M 0 0   L x y/2   L 0 y   Z`;\r\n                path = `<path  `;\r\n                ret = path + attrs + \"\\n\\t\\t\\t\\t\" + path + hoverAttrs;\r\n                break;\r\n            case EdgeHead.reference:\r\n                //if (head === \"tail\") return undefined;\r\n                d = `M 0 0   L x y/2   L 0 y`;\r\n                path = `<path  `;\r\n                ret = path + attrs + \"\\n\\t\\t\\t\\t\" + path + hoverAttrs;\r\n                break;\r\n            case EdgeHead.aggregation:\r\n                //if (head === \"head\") return undefined;\r\n                d = `M 0 y/2   L x/2 0   L x y/2   L x/2 y   Z`;\r\n                path = `<path  `;\r\n                ret = path + attrs + \"\\n\\t\\t\\t\\t\" + path + hoverAttrs;\r\n                break;\r\n            case EdgeHead.composition:\r\n                //if (head === \"head\") return undefined;\r\n                d = `M 0 y/2   L x/2 0   L x y/2   L x/2 y   Z`;\r\n                path = `<path  `;\r\n                ret = path + attrs + \"\\n\\t\\t\\t\\t\" + path + hoverAttrs;\r\n                break;\r\n                /* `<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" style={overflow: \"visible\"}>\r\n                                            <path d={\"M 10 0 L 0 20 L 20 20 Z\"} fill=\"#ffffff\" stroke=\"#808080\" strokeWidth=\"1\"></path>\r\n                                         </svg>`;*/\r\n                //  style={transform: \"rotate3d(xcenter, ycenter, zcenter??, 90deg)\"}\r\n        }\r\n        //  transform={\"rotate(\"+`+headstr+`.rad+\"rad \"+ segments.all[0].start.pt.toString(false, \" \")}\r\n        return ret; // no wrap because of .hoverable > .preview  on root & subelements must be consecutive\r\n        // return `<g className=\"edge`+head + ` ` + type +`\" style={` + styleTranslate + `}>\\n`+ ret +`</g>`\r\n    }\r\n\r\n    // about label rotation in .edge > foreignObect > div (label)\r\n    // first transform is h-center. second is rotate, third adds [0, 50%] of 50% vertical offset AFTER rotation to take label out of edge. fourth is to add a margin.\r\n    static edgeView(modename: EdgeHead, headSize: GraphPoint, tailSize: GraphPoint, dashing: string | undefined, vp: DViewElement, name: string): DViewElement {\r\n        let fill: string;\r\n        switch (modename){\r\n            case EdgeHead.reference:\r\n            default: fill = '#fff0'; break;\r\n            case EdgeHead.composition: fill = '#000'; break;\r\n            case EdgeHead.aggregation:\r\n            case EdgeHead.extend: fill = '#fff'; break;\r\n        }\r\n\r\n        const agglabel = \"◇ Aggregation / Composition\";\r\n        const extendlabel = \"△ \"+EdgeHead.extend;\r\n        const asslabel = \"Λ \"+EdgeHead.reference;\r\n        let headdict: Dictionary<string, string> = {\r\n            [asslabel]: 'M 0 0   L x y/2   L 0 y',\r\n            [extendlabel]: 'M 0 0   L x y/2   L 0 y   Z',\r\n            [agglabel]: 'M 0 y/2   L x/2 0   L x y/2   L x/2 y   Z',\r\n        };\r\n        let predefinedPaths: {k:string, v:string}[] = Object.entries(headdict).map((e)=>({k:e[0], v:e[1]}));\r\n\r\n        let headPath: string = '', tailPath: string = '';\r\n        switch (modename) {\r\n            default: break;\r\n            case EdgeHead.extend: headPath = extendlabel; break;\r\n            case EdgeHead.reference: headPath = asslabel; break;\r\n            case EdgeHead.aggregation: tailPath = agglabel; break;\r\n            case EdgeHead.composition: tailPath = agglabel; break;\r\n        }\r\n        headPath = headdict[headPath] || '';\r\n        tailPath = headdict[tailPath] || '';\r\n\r\n        let palette: PaletteType = {\r\n            'anchorSize': {type: 'number', value:20, unit:'px'},\r\n            'dashing': {value:dashing || '', type: \"text\"},\r\n            'stroke-color': U.hexToPalette('#777'),\r\n            'stroke-width': {value:1, type: 'number', unit: 'px'},\r\n            'stroke-color-hover': U.hexToPalette('#000'),\r\n            'stroke-width-hover': {value:3, type: 'number', unit: 'px'},\r\n            'head': {type:'path', value:headPath, options: predefinedPaths, x:'edgeHeadSize.x', y:'edgeHeadSize.y'},\r\n            'tail': {type:'path', value:tailPath, options: predefinedPaths, x:'edgeTailSize.x', y:'edgeTailSize.y'},\r\n            'fill': U.hexToPalette(fill),\r\n        };\r\n\r\n        let css = \".edge-anchor{\" +\r\n        \"\\n\\tcursor: crosshair;\" +\r\n        \"\\n\\tstroke: transparent;\" +\r\n        \"\\n\\tfill: none;\" +\r\n        \"\\n\\tr:var(--anchorSize);\" +\r\n        \"\\n\\toutline: var(--stroke-width) solid var(--stroke-color);\"+\r\n        \"\\n\\toutline-offset: calc(var(--stroke-width) * -1);\" +\r\n        \"\\n\\tborder-radius: 100%;\" +\r\n        \"\\n}\" +\r\n        \"\\n.clickthrough, .unclickable{\" +\r\n        \"\\n\\tpointer-events: none;\" +\r\n        \"\\n}\" +\r\n        \"\\n.clickable{\" +\r\n        \"\\n\\tpointer-events: all;\" +\r\n        \"\\n}\" +\r\n        \"\\n.fullscreen{\" +\r\n        \"\\n\\toverflow: visible;\" +\r\n        \"\\n\\twidth: 100vw;\" +\r\n        \"\\n\\theight: 100vh;\" +\r\n        \"\\n}\" +\r\n        \"\\npath{\" +\r\n        \"\\n\\tfill: none;\" +\r\n        \"\\n\\tstroke-dasharray: var(--dashing);\" +\r\n        \"\\n\\t&.head{\" +\r\n        \"\\n\\t\\td: path(var(--head));\" +\r\n        \"\\n\\t}\" +\r\n        \"\\n\\t&.tail{\" +\r\n        \"\\n\\t\\td: path(var(--tail));\" +\r\n        \"\\n\\t}\" +\r\n        \"\\n}\" +\r\n        \"\\npath.edge.full, path.tail, path.head{\" +\r\n        \"\\n\\tstroke: var(--stroke-color);\" +\r\n        \"\\n\\tstroke-width: var(--stroke-width);\" +\r\n        \"\\n}\" +\r\n        \"\\npath.tail, path.head{\" +\r\n        \"\\n\\tfill:var(--fill);\" +\r\n        \"\\n}\" +\r\n        \"\\npath.edge.full.hover-activator{\" +\r\n        \"\\n\\tstroke-width: var(--stroke-width-hover);\" +\r\n        \"\\n\\tstroke: none;\" +\r\n        \"\\n}\" +\r\n        \"\\npath.content{\" +\r\n        \"\\n\\tstroke: var(--stroke-color-hover);\" +\r\n        \"\\n\\tstroke-width: var(--stroke-width-hover);\" +\r\n        \"\\n}\" +\r\n        \"\\n.label-text{\" +\r\n        \"\\n\\tcolor: var(--stroke-color);\" +\r\n        \"\\n}\" +\r\n        \"\\nforeignObject.label{\" +\r\n        \"\\n\\toverflow: visible;\" +\r\n        \"\\n\\tcolor: var(--stroke-color);\" +\r\n        \"\\n\\twidth: 0;\" +\r\n        \"\\n\\theight: 0;\" +\r\n        \"\\n\\twhite-space: pre;\" +\r\n        \"\\n\\t> div{\" +\r\n        \"\\n\\t\\twidth: fit-content;\" +\r\n        \"\\n\\t}\" +\r\n        \"\\n}\" +\r\n        \"\\n\\t\" +\r\n        \"\\n\\t\" +\r\n        \"\";\r\n        let head = DV.svgHeadTail(\"head\", modename) || '';\r\n        let tail = DV.svgHeadTail(\"tail\", modename) || '';\r\n        let jsx = beautify(\r\n        `<div className={\"edge hoverable hide-ep clickthrough fullscreen ` + modename + `\"}>\r\n            <svg className={\"clickthrough fullscreen\"}>\r\n                { /* edge full paths\r\n               \r\n                 first is preview path, normally seen\r\n                 third (segmented) is path onHover\r\n                 second is to enlarge the hover area of path.preview to the same as path.content, so i avoid hover loop enter-leave and graphical flashing\r\n                \r\n                */ }\r\n                <path className={\"preview edge full` + (dashing ? ' dashed' : '') + `\"} d={this.edge.d} />\r\n                <path className={\"preview edge full hover-activator\"} d={this.edge.d} />\r\n                { /* edge separate segments */ }\r\n                {segments && segments.all && segments.all.flatMap(s => [\r\n                    <path tabIndex=\"-1\" className={\"clickable content segment\"} d={s.dpart}></path>,\r\n                    s.label && <foreignObject className=\"label\" x={(s.start.pt.x + s.end.pt.x)/2+\"px\"} y={(s.start.pt.y + s.end.pt.y)/2+\"px\"}>\r\n                    <div className={\"label-text\"}\r\n                     style={{transform: \"translate(-50%, 0%) rotate(\"+s.radLabels+\"rad) translate(0%, -\"+(1-0.5*Math.abs(Math.abs(s.radLabels)%Math.PI)/(Math.PI/2))*100+\"%)\"+\r\n                     \" translate(0%, -5px\"}}>{s.label}</div>\r\n                    </foreignObject>\r\n                ])}\r\n                { /* edge head */ }\r\n                ` + head + `\r\n                { /* edge tail */ }\r\n                ` + tail + `\r\n                { /* edge anchor start */ }\r\n                {edge.start && <circle className=\"edge-anchor content clickable\"\r\n                 style={{transform: \"translate(\" + segments.all[0].start.pt.x +\"px, \" + segments.all[0].start.pt.y +\"px)\"}}\r\n                 onMouseDown={()=> edge.startFollow=true}\r\n                 onMouseUp={()=> edge.startfollow=false} />}\r\n                { /* edge anchor end */ }\r\n                {edge.end && <circle className=\"edge-anchor content clickable\" `+ // cx={0*segments.all.last().end.pt.x} cy={0*segments.all.last().end.pt.y}\r\n                `style={{transform: \"translate(\" + segments.all.last().end.pt.x +\"px, \" + segments.all.last().end.pt.y +\"px)\"}}\r\n                 onMouseDown={()=> edge.endFollow=true}\r\n                 onMouseUp={()=> edge.endfollow=false} />}\r\n\r\n            </svg>\r\n            { /* interactively added edgepoints */ }\r\n            {\r\n                edge.midPoints.map( m => <EdgePoint data={edge.father.model.id} initialSize={m} key={m.id} view={\"EdgePoint\"} /> )\r\n            }\r\n            {decorators}\r\n        </div>`\r\n    );\r\n        let edgePrerenderFunc: string = \"(ret)=>{\\n\" +\r\n            \"// ** preparations and default behaviour here ** //\\n\" +\r\n            \"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\" +\r\n            \"// ** declarations here ** //\\n\" +\r\n            \"\\n\"+\r\n            \"}\";\r\n\r\n        let edgeUsageDeclarations = \"(ret)=>{\\n\" +\r\n            \"// ** preparations and default behaviour here ** //\\n\" +\r\n            \"// ret.data = data\\n\" +\r\n            \"ret.edgeview = edge.view.id\\n\" +\r\n            \"ret.view = view\\n\" +\r\n            \"// data, edge, view are dependencies by default. delete them above if you want to remove them.\\n\" +\r\n            \"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\" +\r\n            \"// ** declarations here ** //\\n\" +\r\n            \"ret.start = edge.start\\n\"+\r\n            \"ret.end = edge.end\\n\"+\r\n            \"ret.segments = edge.segments\\n\"+\r\n            \"}\";\r\n        let ev = DViewElement.new2(\"Edge\"+name, jsx, vp,\r\n            (v: DViewElement) => {\r\n                // v.appliableToClasses = [DVoidEdge.cname];\r\n                v.appliableTo = 'Edge';\r\n                v.bendingMode = EdgeBendingMode.Line;\r\n                v.edgeHeadSize = headSize;\r\n                v.edgeTailSize = tailSize;\r\n                //v.constants = edgeConstants;\r\n                v.palette = palette;\r\n                v.css = css\r\n                v.usageDeclarations = edgeUsageDeclarations;\r\n                v.preRenderFunc = edgePrerenderFunc;\r\n            }, false, 'Pointer_ViewEdge' + name);\r\n        return ev;\r\n    }\r\n    /*\r\n    {\r\n        false && edge.end.model.attributes.map( (m, index, arr) => <EdgePoint data={m.id} initialSize={(parent) => {\r\n            let segs = parent.segments.segments;\r\n            let pos = segs[0].start.pt.multiply(1-(index+1)/(arr.length+1), true).add(segs[segs.length-1].end.pt.multiply((index+1)/(arr.length+1), true));\r\n            // console.trace(\"initial ep\", {segs, pos, ratio:(index+1)/(arr.length+1), s:segs[0].start.pt, e:segs[segs.length-1].end.pt});\r\n            return {...pos, w:55, h:55}}} key={m.id} view={\"Pointer_ViewEdgePoint\"} /> )\r\n    }{\r\n        false && <EdgePoint key={\"midnode1\"} view={\"Pointer_ViewEdgePoint\"} />\r\n    }{\r\n        false && <EdgePoint key={\"midnode2\"} view={\"Pointer_ViewEdgePoint\"} />\r\n    }{\r\n        false && props.children && \"this would cause loop no idea why, needs to be fixed to allow passing EdgeNodes here\" || []\r\n    }\r\n    */\r\n    static semanticErrorOverlay_old() { return (\r\n`<section className=\"overlap\">\r\n    <div className=\"error-message\">Lowerbound violation</div>\r\n</section>`\r\n)}    static semanticErrorOverlay() { return (\r\n`<section className=\"overlap\">\r\n    <div className=\"error-message\">{errors.join(<br/>)}</div>\r\n</section>`\r\n)}\r\n\r\n\r\n} // DV class end\r\n\r\nlet valuecolormap: GObject = {};\r\nvaluecolormap[ShortAttribETypes.EBoolean] = \"orange\";\r\nvaluecolormap[ShortAttribETypes.EByte] = \"orange\";\r\nvaluecolormap[ShortAttribETypes.EShort] = \"orange\";\r\nvaluecolormap[ShortAttribETypes.EInt] = \"orange\";\r\nvaluecolormap[ShortAttribETypes.ELong] = \"orange\";\r\nvaluecolormap[ShortAttribETypes.EFloat] = \"orange\";\r\nvaluecolormap[ShortAttribETypes.EDouble] = \"orange\";\r\nvaluecolormap[ShortAttribETypes.EDate] = \"green\";\r\nvaluecolormap[ShortAttribETypes.EString] = \"green\";\r\nvaluecolormap[ShortAttribETypes.EChar] = \"green\";\r\nvaluecolormap[ShortAttribETypes.EVoid] = \"gray\";\r\n\r\n// &&[]bn\r\nlet valuecolormap_str = JSON.stringify(valuecolormap); // can this be declared inside view.constants ?\r\n\r\n\r\nclass DefaultView {\r\n\r\n    public static model(): string { return (\r\n`\r\n<div className={'panning-handle'} style={{'--pan-x': node.offset.x+'px', '--pan-y': node.offset.y+'px'}}>\r\n    <div className={'root model'}>\r\n        {!data && \"Model data missing.\"}\r\n        {/*<ControlPanel node={node}></ControlPanel>*/}\r\n        <label className={\"detail-level\"}>\r\n            <input onChange={(e)=>{node.state = {level:+e.target.value}}} min=\"0\" max=\"3\" type=\"range\" step=\"1\" value={level}/>\r\n            <div>Detail level:{level}</div>\r\n        </label>\r\n        <div className={'edges'}>\r\n            {[\r\n                refEdges.map(se => <Edge anchorStart={0} anchorEnd={0} key={se.id}\r\n                start={se.start.father.node} end={se.end.node} view={'Edge' + ( se.start.containment && 'Composition' || 'Association')} />),\r\n                extendEdges.map(se => <Edge start={se.start} end={se.end} view={'EdgeInheritance'} key={se.id} />)\r\n            ]}\r\n        </div>\r\n        {otherPackages.filter(p => p).map(pkg => <DefaultNode key={pkg.id} data={pkg} />)}\r\n        {level >= 1 && firstPackage && firstPackage.children.filter(c => c).map(classifier => <DefaultNode key={classifier.id} data={classifier} />)}\r\n        {level >= 1 && m1Objects.filter(o => o).map(m1object => <DefaultNode key={m1object.id} data={m1object} />)}\r\n        {decorators}\r\n    </div>\r\n</div>`\r\n);}\r\n\r\n    public static void(): string { return (\r\n`<div className={'root void model-less round bg-white p-1'}>\r\n    <div>voidvertex element test</div>\r\n    <div>data: {props.data ? props.data.name : \"empty\"}</div>\r\n    {decorators}\r\n</div>`\r\n);}\r\n\r\n    public static package(): string { return (\r\n`<div className={'root package'}>\r\n    <Measurable draggable={true} resizable={true}><div>draggable resizable</div></Measurable>\r\n    <Measurable draggable={true}><div>draggable</div></Measurable>\r\n    <div className={'package-children'}>\r\n        {upperLevel >= 1 ? [\r\n            <label className={\"detail-level\"}>\r\n                <input onChange={(e)=>{node.state = {level:+e.target.value}}} min=\"0\" max=\"3\" type=\"range\" step=\"1\" value={level}/>\r\n                <div>Detail level:{level}</div>\r\n            </label>,\r\n            data.children.map(c => <DefaultNode key={c.id} data={c} />)\r\n        ] :\r\n        [\r\n            <div className={\"summary\"}><b>URI:</b><span className={\"ms-1\"}>{data.uri}</span></div>,\r\n            <div className={\"summary\"}>{[\r\n                data.classes.length ? data.classes.length + \" classes\" : '',\r\n                data.enumerators.length ? data.enumerators.length + \" enumerators\" : ''\r\n               ].filter(v=>!!v).join(',')}</div>\r\n        ]}\r\n    </div>\r\n    {decorators}\r\n</div>`\r\n);}\r\n\r\n    public static defaultPackage(): string { return (\r\n`<div className={'root package'}>\r\n    <div className={'package-children'}>\r\n        {data.children.map(c => <DefaultNode key={c.id} data={c} />)}\r\n    </div>\r\n    {decorators}\r\n</div>`\r\n);}\r\n\r\n    public static class(): string { return (\r\n`<View className={'root class'} onClick={()=>{/*node.events.e1(Math.random().toFixed(3))*/}}>\r\n    <div className={'header'}>\r\n        <b className={'class-name'}>{interface ? 'Interface' : abstract ? 'Abstract Class' : 'Class'}:</b>\r\n        <Input data={data} field={'name'} hidden={true} autosize={true} />\r\n    </div>\r\n    <hr/>\r\n    <div className={'class-children'}>\r\n        {level >= 2 && [\r\n            attributes.map(c => <DefaultNode key={c.id} data={c} />),\r\n            references.map(c => <DefaultNode key={c.id} data={c} />),\r\n            operations.map(c => <DefaultNode key={c.id} data={c} />)\r\n          ]\r\n         || [/*\r\n         <div className={\"\"}><b>isInterface:</b><span className={\"ms-1\"}>{''+data.interface}</span></div>,\r\n         <div className={\"\"}><b>isAbstract:</b><span className={\"ms-1\"}>{''+data.abstract}</span></div>,\r\n         <div className={\"\"}><b>Instances:</b><span className={\"ms-1\"}>{data.instances.length}</span></div>,*/\r\n         <div className={\"summary\"}>{[\r\n             attributes.length ? attributes.length + \" attributes\" : '',\r\n             references.length ? references.length + \" references\" : '',\r\n             operations.length ? operations.length + \" operations\" : '',\r\n             !(attributes.length + references.length + operations.length) ? '- empty -' : ''\r\n            ].filter(v=>!!v).join(',')}</div>\r\n         ]\r\n        }\r\n    </div>\r\n    {decorators}\r\n</View>`\r\n);}\r\n\r\n    public static enum(): string { return (\r\n`<div className={'root enumerator'}>\r\n    <div className={'header'}>\r\n        <b className={'enumerator-name'}>Enum:</b>\r\n        <Input data={data} field={'name'} hidden={true} autosize={true} />\r\n    </div>\r\n    <hr />\r\n    <div className={'enumerator-children'}>\r\n        {level >= 2 && literals.map(c => <DefaultNode key={c.id} data={c}/>)\r\n          || <div className={\"summary\"}>{literals.length} literals</div>}\r\n    </div>\r\n    {decorators}\r\n</div>`\r\n);}\r\n\r\n    public static feature(): string { return (\r\n`<div className={'root feature w-100'}>\r\n    <span className={'feature-name'}>{data.name}:</span>\r\n    <Select data={data} field={'type'} />\r\n    {decorators}\r\n</div>`\r\n);}\r\n\r\n    public static literal(): string { return (\r\n`<label className={'root literal d-block text-center'}>\r\n    {data.name}\r\n    {decorators}\r\n</label>`\r\n);}\r\n\r\n    public static operation(): string { return (\r\n`<div className={'root operation w-100 hoverable'}>\r\n        <span className={'feature-name'}>{data.name + ' =>'}</span>\r\n        <Select data={data} field={'type'} />\r\n    <div className={\"parameters content\"}>\r\n    {data.exceptions.length ? \" throws \" + data.exceptions.join(\", \") : ''}\r\n    {\r\n        level >= 3 && data.parameters.map(p => <DefaultNode data={p} key={p.id} />)\r\n    }</div>\r\n    {decorators}\r\n</div>`\r\n);}\r\n\r\npublic static parameter(): string { return (\r\n`<div className={'root parameter w-100'}>\r\n    <span className={'feature-name'}>\r\n        {data.name + '' + (data.lowerBound === 0 ? '?:' : ':' )}\r\n    </span>\r\n    <Select data={data} field={'type'} />\r\n    <span className={\"modifier\"}>{data.upperBound > 1 || data.upperBound === -1 ? '[]' : ''}</span>\r\n    {decorators}\r\n</div>`\r\n);}\r\n\r\n    // i want to keep it because it will be useful for a candidate next feature in m1 & layoutable elements\r\n    // it is still work in progress.\r\n    public static operationm1(): string { return (\r\n`<div className={'d-flex root operationm1'} style={{paddingRight: \"6px\"}}>\r\n    <label className={'d-block ms-1'}>{this.props.data.instanceof.name}</label>\r\n    <label className={'d-block ms-auto hover-root'} style={{color:` + valuecolormap_str + `[this.props.data.values.type] || \"gray\"}}>\r\n        →→→\r\n        <div className=\"hover-content\">\r\n            <ParameterForm operation={this.props.data.id} vertical={true} />\r\n        </div>\r\n    </label>\r\n    {decorators}\r\n</div>`\r\n);}\r\n\r\n    public static objectOld(): string { return (\r\n`<div className={'round bg-white root class'}>\r\n    <label className={'ms-1'}>\r\n        <Input jsxLabel={<b className={'object-name'}>{data.instanceof ? data.instanceof.name : \"Object\"}:</b>} \r\n           data={data} field={'name'} hidden={true} autosize={true}/>\r\n    </label>\r\n    <hr />\r\n    <div className={'object-children'}>\r\n        { features.map(c => <DefaultNode key={c.id} data={c} />) }\r\n    </div>\r\n    {decorators}\r\n</div>`);\r\n}\r\n\r\n    public static object(): string { return (\r\n`<div className={'root object'}>\r\n    <b className={'object-name'}>{data.instanceof ? data.instanceof.name : 'Object'}:</b>\r\n    <Input data={data} field={'name'} hidden={true} autosize={true} />\r\n    <hr/>\r\n    <div className={'object-children'}>\r\n        {level >= 2 && data.features.map(f => <DefaultNode key={f.id} data={f} />)}\r\n    </div>\r\n    {decorators}\r\n</div>`\r\n);}\r\n\r\n    public static value() { return (\r\n`<div className={'root value d-flex'}>\r\n    {instanceofname && <label className={'d-block ms-1 name'}>{instanceofname}</label>}\r\n    {!instanceofname && <Input className='name' data={data} field={'name'} hidden={true} autosize={true} />}\r\n    <label className={'d-block m-auto values_str'} style={{color: constants[typeString] || 'gray'}}>\r\n        : {valuesString}\r\n    </label>\r\n    {decorators}\r\n</div>`\r\n);}\r\n\r\n\r\n\r\n    public static error(msg: undefined | ReactNode, errortype: string | \"SYNTAX\" | \"RUNTIME\",\r\n                        data?: DModelElement | undefined, node?: DGraphElement | undefined, v?: DViewElement): React.ReactNode {\r\n\r\n        let dname: string | undefined = data && ((data as any).name || data.className.substring(1));\r\n        if (dname && dname.length >= 10) dname = dname.substring(0, 7) + '…';\r\n        let nodename: string = (node?.className || '').replace(/[^A-Z]+/g, \"\").substring(1);\r\n        let on = dname && nodename ? \" on \" + dname + \" / \" + nodename : (dname || nodename ? \" on \" + (dname || nodename) : '');\r\n        return <div className={(v ? 'w-100 h-100' : 'raw_error') + ' round bg-white border border-danger'} style={{minHeight:\"50px\", overflow:\"scroll\"}}>\r\n            <div className={'text-center text-danger'} tabIndex={-1} style={{background:\"#fff\", overflow: 'visible', zIndex:100, minWidth:\"min-content\"}}>\r\n                <b data-dname={dname} data-nodename={nodename} data-str={true}>\r\n                    {errortype} ERROR{on}</b>\r\n                <hr/>\r\n                {v && <label className={'text-center mx-1 d-block'}>\r\n                    While applying view \"{v.name}\"\r\n                </label>}\r\n                {msg && <label className={'text-center mx-1 d-block'} style={{color:\"black\"}}>{msg}</label>}\r\n            </div>\r\n        </div>;\r\n    }\r\n    public static error_string(msg: undefined | ReactNode, errortype: string | \"SYNTAX\" | \"RUNTIME\", data?: DModelElement | undefined, node?: DGraphElement | undefined, v?: DViewElement) {\r\n        let dname: string | undefined = data && ((data as any).name || data.className.substring(1));\r\n        if (dname && dname.length >= 10) dname = dname.substring(0, 7) + '…';\r\n        let nodename: string = (node?.className || '').replace(/[^A-Z]+/g, \"\").substring(1);\r\n        let on = dname && nodename ? \" on \" + dname + \" / \" + nodename : (dname || nodename ? \" on \" + (dname || nodename) : '');\r\n        return `<div className={'w-100 h-100 round bg-white border border-danger'} style={{minHeight:\"50px\", overflow:\"scroll\"}}>\r\n            <div className={'text-center text-danger'} tabIndex={-1} style={{background:\"#fff\", overflow: 'visible', zIndex:100, minWidth:\"min-content\"}}>\r\n                <b>{errortype}_ERROR` + on + `</b>\r\n                <hr/>\r\n                <label className={'text-center mx-1 d-block'}>\r\n                    While applying view \"${v?.name}\"\r\n                </label>\r\n                {${msg} && <label className={'text-center mx-1 d-block'} style={{color:\"black\"}}>${msg}</label>}\r\n            </div>\r\n        </div>`;\r\n    }\r\n\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}