{"ast":null,"code":"var _jsxFileName = \"C:\\\\d\\\\Programming\\\\web\\\\jodel-mde\\\\src\\\\components\\\\forEndUser\\\\TextArea.tsx\",\n  _s = $RefreshSig$(),\n  _this = this;\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Defaults } from '../../joiner';\nimport { useStateIfMounted } from 'use-state-if-mounted';\nimport './inputselect.scss';\nimport { InputComponent, InputMapStateToProps } from \"./Input\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TextAreaComponent(props) {\n  // better as function than as component, so i avoid a duoble mapstatetoprops subscription.\n  return InputComponent({\n    ...props,\n    isTextArea: true\n  });\n  // <Input {...props as any} isTextArea={true}></Input>;\n}\n_c = TextAreaComponent;\nfunction TextAreaComponentOld(props) {\n  _s();\n  const data = props.data;\n  const readOnly = props.readonly !== undefined ? props.readonly : !props.debugmode && Defaults.check(data.id);\n  const field = props.field;\n  const getter = props.getter;\n  const setter = props.setter;\n  const label = props.label;\n  const jsxLabel = props.jsxLabel;\n  const info = data && field && data['__info_of__' + field];\n  let tooltip = (props.tooltip === true ? info ? info.txt : '' : props.tooltip) || '';\n  let __value = !data ? 'undefined' : getter ? getter(data, field) : data[field] !== undefined ? data[field] : 'undefined';\n  const [value, setValue] = useStateIfMounted(__value);\n  const [isTouched, setIsTouched] = useStateIfMounted(false);\n  const [showTooltip, setShowTooltip] = useStateIfMounted(false);\n  if (!data) return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  let css = 'my-auto input ';\n  css += jsxLabel || label ? 'ms-auto' : '';\n  css += props.hidden ? ' hidden-input' : '';\n  const change = evt => {\n    setValue(evt.target.value);\n    setIsTouched(true); // I'm editing the element in my local state.\n  };\n\n  const blur = evt => {\n    if (readOnly) return;\n    const target = evt.target.value;\n    const oldValue = data && (getter ? getter(data, field) : data[field]);\n    if (target !== oldValue) {\n      if (setter) setter(target, data, field);else data[field] = target;\n    }\n    // I terminate my editing, so I communicate it to other <Input /> that render the same field.\n    setIsTouched(false);\n  };\n  const otherprops = {\n    ...props\n  };\n  delete otherprops.data;\n  delete otherprops.field;\n  delete otherprops.getter;\n  delete otherprops.setter;\n  delete otherprops.label;\n  delete otherprops.jsxLabel;\n  delete otherprops.tooltip;\n  delete otherprops.hidden;\n  delete otherprops.inputStyle;\n  delete otherprops.children;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: jsxLabel || label ? 'flex' : 'block'\n    },\n    className: 'p-1 w-fill',\n    ...otherprops,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      onMouseEnter: e => setShowTooltip(true),\n      onMouseLeave: e => setShowTooltip(false),\n      className: `h-100 ${label || jsxLabel ? 'd-block' : 'd-none'}`,\n      children: label ? label : jsxLabel ? jsxLabel : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), tooltip && showTooltip && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'my-tooltip',\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        className: 'text-center text-capitalize',\n        children: field\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: tooltip\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 38\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      spellCheck: false,\n      readOnly: readOnly,\n      className: props.inputClassName || css,\n      style: props.inputStyle,\n      onChange: change,\n      onBlur: blur,\n      value: value,\n      placeholder: props.placeholder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 12\n  }, this);\n}\n_s(TextAreaComponentOld, \"9ozUTWaLJTktvX9x66LwpsnOFRw=\", false, function () {\n  return [useStateIfMounted, useStateIfMounted, useStateIfMounted];\n});\n_c2 = TextAreaComponentOld;\nfunction mapStateToProps(state, ownProps) {\n  return InputMapStateToProps(state, ownProps);\n  /*const ret: StateProps = {} as any;\r\n  const pointer: Pointer = typeof ownProps.data === 'string' ? ownProps.data : ownProps.data.id;\r\n  ret.debugmode = state.debug;\r\n  ret.data = LPointerTargetable.fromPointer(pointer);\r\n  return ret;*/\n}\n\nfunction mapDispatchToProps(dispatch) {\n  const ret = {};\n  return ret;\n}\nexport const TextAreaConnected = connect(mapStateToProps, mapDispatchToProps)(TextAreaComponent);\nexport const TextArea = function (props) {\n  let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return /*#__PURE__*/_jsxDEV(TextAreaConnected, {\n    ...props,\n    children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 12\n  }, _this);\n};\n_c3 = TextArea;\nTextAreaComponent.cname = 'TextAreaComponent';\nTextAreaConnected.cname = 'TextAreaConnected';\nTextArea.cname = 'TextArea';\nexport default TextArea;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"TextAreaComponent\");\n$RefreshReg$(_c2, \"TextAreaComponentOld\");\n$RefreshReg$(_c3, \"TextArea\");","map":{"version":3,"names":["React","connect","Defaults","useStateIfMounted","InputComponent","InputMapStateToProps","Fragment","_Fragment","jsxDEV","_jsxDEV","TextAreaComponent","props","isTextArea","_c","TextAreaComponentOld","_s","data","readOnly","readonly","undefined","debugmode","check","id","field","getter","setter","label","jsxLabel","info","tooltip","txt","__value","value","setValue","isTouched","setIsTouched","showTooltip","setShowTooltip","css","hidden","change","evt","target","blur","oldValue","otherprops","inputStyle","children","style","display","className","onMouseEnter","e","onMouseLeave","fileName","_jsxFileName","lineNumber","columnNumber","spellCheck","inputClassName","onChange","onBlur","placeholder","_c2","mapStateToProps","state","ownProps","mapDispatchToProps","dispatch","ret","TextAreaConnected","TextArea","arguments","length","_this","_c3","cname","$RefreshReg$"],"sources":["C:/d/Programming/web/jodel-mde/src/components/forEndUser/TextArea.tsx"],"sourcesContent":["import React, {Dispatch, ReactElement, ReactNode} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    DocString,\r\n    DPointerTargetable,\r\n    DState,\r\n    GObject,\r\n    LPointerTargetable,\r\n    Overlap,\r\n    Pointer,\r\n    Defaults,\r\n    Info,\r\n    Input\r\n} from '../../joiner';\r\nimport {useStateIfMounted} from 'use-state-if-mounted';\r\nimport './inputselect.scss';\r\nimport {InputComponent, InputMapStateToProps} from \"./Input\";\r\n\r\n\r\nfunction TextAreaComponent(props: AllProps) {\r\n    // better as function than as component, so i avoid a duoble mapstatetoprops subscription.\r\n    return InputComponent({...props, isTextArea:true} as any);\r\n    // <Input {...props as any} isTextArea={true}></Input>;\r\n}\r\nfunction TextAreaComponentOld(props: AllProps) {\r\n    const data = props.data;\r\n    const readOnly = (props.readonly !== undefined) ? props.readonly : !props.debugmode && Defaults.check(data.id);\r\n    const field = props.field;\r\n    const getter = props.getter;\r\n    const setter = props.setter;\r\n    const label: string|undefined = props.label;\r\n    const jsxLabel: ReactNode|undefined = props.jsxLabel;\r\n    const info: Info | undefined = data && field && data['__info_of__' + field];\r\n    let tooltip: ReactNode = ((props.tooltip === true) ? (info ? info.txt : '') : props.tooltip) || '';\r\n    let __value = (!data) ? 'undefined' : ((getter) ? getter(data, field) : (data[field] !== undefined) ? data[field] : 'undefined');\r\n    const [value, setValue] = useStateIfMounted(__value);\r\n    const [isTouched, setIsTouched] = useStateIfMounted(false);\r\n    const [showTooltip, setShowTooltip] = useStateIfMounted(false);\r\n    if (!data) return(<></>);\r\n    let css = 'my-auto input ';\r\n    css += (jsxLabel || label) ? 'ms-auto' : '';\r\n    css += (props.hidden) ? ' hidden-input' : '';\r\n\r\n\r\n    const change = (evt: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        setValue(evt.target.value);\r\n        setIsTouched(true);     // I'm editing the element in my local state.\r\n    }\r\n\r\n    const blur = (evt: React.FocusEvent<HTMLTextAreaElement>) => {\r\n        if (readOnly) return;\r\n        const target = evt.target.value;\r\n        const oldValue = data && (getter ? getter(data, field) : data[field]);\r\n        if (target !== oldValue) {\r\n            if (setter) setter(target, data, field);\r\n            else data[field] = target;\r\n        }\r\n        // I terminate my editing, so I communicate it to other <Input /> that render the same field.\r\n        setIsTouched(false);\r\n    }\r\n\r\n    const otherprops: GObject = {...props};\r\n    delete otherprops.data;\r\n    delete otherprops.field;\r\n    delete otherprops.getter;\r\n    delete otherprops.setter;\r\n    delete otherprops.label;\r\n    delete otherprops.jsxLabel;\r\n    delete otherprops.tooltip;\r\n    delete otherprops.hidden;\r\n    delete otherprops.inputStyle;\r\n    delete otherprops.children;\r\n\r\n    return(<div style={{display: (jsxLabel || label) ? 'flex' : 'block'}} className={'p-1 w-fill'} {...otherprops}>\r\n        <label onMouseEnter={e => setShowTooltip(true)} onMouseLeave={e => setShowTooltip(false)}\r\n               className={`h-100 ${(label || jsxLabel) ? 'd-block' : 'd-none'}`}>\r\n            {(label) ? label : (jsxLabel) ? jsxLabel : ''}\r\n        </label>\r\n\r\n        {(tooltip && showTooltip) && <div className={'my-tooltip'}>\r\n            <b className={'text-center text-capitalize'}>{field}</b>\r\n            <br />\r\n            <label>{tooltip}</label>\r\n        </div>}\r\n\r\n        <textarea spellCheck={false} readOnly={readOnly} className={props.inputClassName || css} style={props.inputStyle}\r\n                  onChange={change} onBlur={blur} value={value} placeholder={props.placeholder}/>\r\n    </div>);\r\n}\r\n\r\nexport interface TextAreaOwnProps {\r\n    data: LPointerTargetable | DPointerTargetable | Pointer<DPointerTargetable, 1, 1, LPointerTargetable>;\r\n    field: string;\r\n    label?: string;\r\n    getter?: <T extends LPointerTargetable>(data: T, field: DocString<\"keyof T\">) => string;\r\n    setter?: <T extends LPointerTargetable>(value: string|boolean, data: T, field: DocString<\"keyof T\">) => void;\r\n    jsxLabel?: ReactNode;\r\n    tooltip?: ReactNode;\r\n    readonly?: boolean;\r\n    hidden?: boolean;\r\n    key?: React.Key | null;\r\n    className?: string;\r\n    inputClassName?: string;\r\n    style?: GObject;\r\n    inputStyle?: GObject;\r\n    placeholder?: string;\r\n}\r\n\r\ninterface StateProps {\r\n    data: LPointerTargetable & GObject;\r\n}\r\ninterface DispatchProps { }\r\n\r\ntype AllProps = Overlap<TextAreaOwnProps, Overlap<StateProps, DispatchProps>>;\r\n\r\n\r\nfunction mapStateToProps(state: DState, ownProps: TextAreaOwnProps): StateProps {\r\n    return InputMapStateToProps(state, ownProps);\r\n    /*const ret: StateProps = {} as any;\r\n    const pointer: Pointer = typeof ownProps.data === 'string' ? ownProps.data : ownProps.data.id;\r\n    ret.debugmode = state.debug;\r\n    ret.data = LPointerTargetable.fromPointer(pointer);\r\n    return ret;*/\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<any>): DispatchProps {\r\n    const ret: DispatchProps = {};\r\n    return ret;\r\n}\r\n\r\n\r\nexport const TextAreaConnected = connect<StateProps, DispatchProps, TextAreaOwnProps, DState>(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TextAreaComponent);\r\n\r\nexport const TextArea = (props: TextAreaOwnProps, children: (string | React.Component)[] = []): ReactElement => {\r\n    return <TextAreaConnected {...{...props, children}} />;\r\n}\r\n\r\nTextAreaComponent.cname = 'TextAreaComponent';\r\nTextAreaConnected.cname = 'TextAreaConnected';\r\nTextArea.cname = 'TextArea';\r\nexport default TextArea;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}