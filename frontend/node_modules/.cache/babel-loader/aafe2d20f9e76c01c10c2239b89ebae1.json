{"ast":null,"code":"import React from \"react\";\nimport { DockContextType } from \"./DockData\";\nimport { DockTabs } from \"./DockTabs\";\nimport { DragDropDiv } from \"./dragdrop/DragDropDiv\";\nimport { DragState } from \"./dragdrop/DragManager\";\nimport { DockDropLayer } from \"./DockDropLayer\";\nimport { getFloatPanelSize, nextZIndex } from \"./Algorithm\";\nimport { DockDropEdge } from \"./DockDropEdge\";\nexport class DockPanel extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n    this.getRef = r => {\n      this._ref = r;\n    };\n    this.state = {\n      dropFromPanel: null,\n      draggingHeader: false\n    };\n    this.onDragOver = e => {\n      if (DockPanel._droppingPanel === this) {\n        return;\n      }\n      let {\n        panelData\n      } = this.props;\n      let dockId = this.context.getDockId();\n      let tab = DragState.getData('tab', dockId);\n      let panel = DragState.getData('panel', dockId);\n      if (tab || panel) {\n        DockPanel.droppingPanel = this;\n      }\n      if (tab) {\n        if (tab.parent) {\n          this.setState({\n            dropFromPanel: tab.parent\n          });\n        } else {\n          // add a fake panel\n          this.setState({\n            dropFromPanel: {\n              activeId: '',\n              tabs: [],\n              group: tab.group\n            }\n          });\n        }\n      } else if (panel) {\n        this.setState({\n          dropFromPanel: panel\n        });\n      }\n    };\n    // drop to move in float mode\n    this.onPanelHeaderDragStart = event => {\n      let {\n        panelData\n      } = this.props;\n      let {\n        parent,\n        x,\n        y,\n        z\n      } = panelData;\n      let dockId = this.context.getDockId();\n      if (parent && parent.mode === 'float') {\n        this._movingX = x;\n        this._movingY = y;\n        // hide the panel, but not create drag layer element\n        event.setData({\n          panel: this.props.panelData\n        }, dockId);\n        event.startDrag(null, null);\n        this.onFloatPointerDown();\n      } else {\n        let tabGroup = this.context.getGroup(panelData.group);\n        let [panelWidth, panelHeight] = getFloatPanelSize(this._ref, tabGroup);\n        event.setData({\n          panel: panelData,\n          panelSize: [panelWidth, panelHeight]\n        }, dockId);\n        event.startDrag(null);\n      }\n      this.setState({\n        draggingHeader: true\n      });\n    };\n    this.onPanelHeaderDragMove = e => {\n      let {\n        width,\n        height\n      } = this.context.getLayoutSize();\n      let {\n        panelData\n      } = this.props;\n      panelData.x = this._movingX + e.dx;\n      panelData.y = this._movingY + e.dy;\n      if (width > 200 && height > 200) {\n        if (panelData.y < 0) {\n          panelData.y = 0;\n        } else if (panelData.y > height - 16) {\n          panelData.y = height - 16;\n        }\n        if (panelData.x + panelData.w < 16) {\n          panelData.x = 16 - panelData.w;\n        } else if (panelData.x > width - 16) {\n          panelData.x = width - 16;\n        }\n      }\n      this.forceUpdate();\n    };\n    this.onPanelHeaderDragEnd = e => {\n      if (!this._unmounted) {\n        this.setState({\n          draggingHeader: false\n        });\n        this.context.onSilentChange(this.props.panelData.activeId, 'move');\n      }\n    };\n    this.onPanelCornerDragTL = e => {\n      this.onPanelCornerDrag(e, 'tl');\n    };\n    this.onPanelCornerDragTR = e => {\n      this.onPanelCornerDrag(e, 'tr');\n    };\n    this.onPanelCornerDragBL = e => {\n      this.onPanelCornerDrag(e, 'bl');\n    };\n    this.onPanelCornerDragBR = e => {\n      this.onPanelCornerDrag(e, 'br');\n    };\n    this.onPanelCornerDragMove = e => {\n      let {\n        panelData\n      } = this.props;\n      let {\n        dx,\n        dy\n      } = e;\n      if (this._movingCorner.startsWith('t')) {\n        // when moving top corners, dont let it move header out of screen\n        let {\n          width,\n          height\n        } = this.context.getLayoutSize();\n        if (this._movingY + dy < 0) {\n          dy = -this._movingY;\n        } else if (this._movingY + dy > height - 16) {\n          dy = height - 16 - this._movingY;\n        }\n      }\n      switch (this._movingCorner) {\n        case 'tl':\n          {\n            panelData.x = this._movingX + dx;\n            panelData.w = this._movingW - dx;\n            panelData.y = this._movingY + dy;\n            panelData.h = this._movingH - dy;\n            break;\n          }\n        case 'tr':\n          {\n            panelData.w = this._movingW + dx;\n            panelData.y = this._movingY + dy;\n            panelData.h = this._movingH - dy;\n            break;\n          }\n        case 'bl':\n          {\n            panelData.x = this._movingX + dx;\n            panelData.w = this._movingW - dx;\n            panelData.h = this._movingH + dy;\n            break;\n          }\n        case 'br':\n          {\n            panelData.w = this._movingW + dx;\n            panelData.h = this._movingH + dy;\n            break;\n          }\n      }\n      this.forceUpdate();\n    };\n    this.onPanelCornerDragEnd = e => {\n      this.context.onSilentChange(this.props.panelData.activeId, 'move');\n    };\n    this.onFloatPointerDown = () => {\n      let {\n        panelData\n      } = this.props;\n      let {\n        z\n      } = panelData;\n      let newZ = nextZIndex(z);\n      if (newZ !== z) {\n        panelData.z = newZ;\n        this.forceUpdate();\n      }\n    };\n    this.onPanelClicked = e => {\n      const target = e.nativeEvent.target;\n      if (!this._ref.contains(this._ref.ownerDocument.activeElement) && target instanceof Node && this._ref.contains(target)) {\n        this._ref.querySelector('.dock-bar').focus();\n      }\n    };\n    this._unmounted = false;\n  }\n  static set droppingPanel(panel) {\n    if (DockPanel._droppingPanel === panel) {\n      return;\n    }\n    if (DockPanel._droppingPanel) {\n      DockPanel._droppingPanel.onDragOverOtherPanel();\n    }\n    DockPanel._droppingPanel = panel;\n  }\n  onDragOverOtherPanel() {\n    if (this.state.dropFromPanel) {\n      this.setState({\n        dropFromPanel: null\n      });\n    }\n  }\n  onPanelCornerDrag(e, corner) {\n    let {\n      parent,\n      x,\n      y,\n      w,\n      h\n    } = this.props.panelData;\n    if (parent && parent.mode === 'float') {\n      this._movingCorner = corner;\n      this._movingX = x;\n      this._movingY = y;\n      this._movingW = w;\n      this._movingH = h;\n      e.startDrag(null, null);\n    }\n  }\n  render() {\n    let {\n      dropFromPanel,\n      draggingHeader\n    } = this.state;\n    let {\n      panelData,\n      size\n    } = this.props;\n    let {\n      minWidth,\n      minHeight,\n      group: styleName,\n      id,\n      parent,\n      panelLock\n    } = panelData;\n    if (panelLock) {\n      if (panelLock.panelStyle) {\n        styleName = panelLock.panelStyle;\n      }\n    }\n    let panelClass;\n    if (styleName) {\n      panelClass = styleName.split(' ').map(name => `dock-style-${name}`).join(' ');\n    }\n    let isMax = parent && parent.mode === 'maximize';\n    let isFloat = parent && parent.mode === 'float';\n    let pointerDownCallback = this.onFloatPointerDown;\n    let onPanelHeaderDragStart = this.onPanelHeaderDragStart;\n    if (!isFloat || isMax) {\n      pointerDownCallback = null;\n    }\n    if (isMax) {\n      dropFromPanel = null;\n      onPanelHeaderDragStart = null;\n    }\n    let cls = `dock-panel ${panelClass ? panelClass : ''}${dropFromPanel ? ' dock-panel-dropping' : ''}${draggingHeader ? ' dragging' : ''}`;\n    let style = {\n      minWidth,\n      minHeight,\n      flex: `${size} 1 ${size}px`\n    };\n    if (isFloat) {\n      style.left = panelData.x;\n      style.top = panelData.y;\n      style.width = panelData.w;\n      style.height = panelData.h;\n      style.zIndex = panelData.z;\n    }\n    let droppingLayer;\n    if (dropFromPanel) {\n      let tabGroup = this.context.getGroup(dropFromPanel.group);\n      let dockId = this.context.getDockId();\n      if (!tabGroup.tabLocked || DragState.getData('tab', dockId) == null) {\n        // not allowed locked tab to create new panel\n        let DockDropClass = this.context.useEdgeDrop() ? DockDropEdge : DockDropLayer;\n        droppingLayer = React.createElement(DockDropClass, {\n          panelData: panelData,\n          panelElement: this._ref,\n          dropFromPanel: dropFromPanel\n        });\n      }\n    }\n    return React.createElement(DragDropDiv, {\n      getRef: this.getRef,\n      className: cls,\n      style: style,\n      \"data-dockid\": id,\n      onMouseDownCapture: pointerDownCallback,\n      onTouchStartCapture: pointerDownCallback,\n      onDragOverT: isFloat ? null : this.onDragOver,\n      onClick: this.onPanelClicked\n    }, React.createElement(DockTabs, {\n      panelData: panelData,\n      onPanelDragStart: onPanelHeaderDragStart,\n      onPanelDragMove: this.onPanelHeaderDragMove,\n      onPanelDragEnd: this.onPanelHeaderDragEnd\n    }), isFloat ? [React.createElement(DragDropDiv, {\n      key: \"drag-size-t-l\",\n      className: \"dock-panel-drag-size dock-panel-drag-size-t-l\",\n      onDragStartT: this.onPanelCornerDragTL,\n      onDragMoveT: this.onPanelCornerDragMove,\n      onDragEndT: this.onPanelCornerDragEnd\n    }), React.createElement(DragDropDiv, {\n      key: \"drag-size-t-r\",\n      className: \"dock-panel-drag-size dock-panel-drag-size-t-r\",\n      onDragStartT: this.onPanelCornerDragTR,\n      onDragMoveT: this.onPanelCornerDragMove,\n      onDragEndT: this.onPanelCornerDragEnd\n    }), React.createElement(DragDropDiv, {\n      key: \"drag-size-b-l\",\n      className: \"dock-panel-drag-size dock-panel-drag-size-b-l\",\n      onDragStartT: this.onPanelCornerDragBL,\n      onDragMoveT: this.onPanelCornerDragMove,\n      onDragEndT: this.onPanelCornerDragEnd\n    }), React.createElement(DragDropDiv, {\n      key: \"drag-size-b-r\",\n      className: \"dock-panel-drag-size dock-panel-drag-size-b-r\",\n      onDragStartT: this.onPanelCornerDragBR,\n      onDragMoveT: this.onPanelCornerDragMove,\n      onDragEndT: this.onPanelCornerDragEnd\n    })] : null, droppingLayer);\n  }\n  componentWillUnmount() {\n    if (DockPanel._droppingPanel === this) {\n      DockPanel.droppingPanel = null;\n    }\n    this._unmounted = true;\n  }\n}\nDockPanel.contextType = DockContextType;","map":{"version":3,"names":["React","DockContextType","DockTabs","DragDropDiv","DragState","DockDropLayer","getFloatPanelSize","nextZIndex","DockDropEdge","DockPanel","PureComponent","constructor","arguments","getRef","r","_ref","state","dropFromPanel","draggingHeader","onDragOver","e","_droppingPanel","panelData","props","dockId","context","getDockId","tab","getData","panel","droppingPanel","parent","setState","activeId","tabs","group","onPanelHeaderDragStart","event","x","y","z","mode","_movingX","_movingY","setData","startDrag","onFloatPointerDown","tabGroup","getGroup","panelWidth","panelHeight","panelSize","onPanelHeaderDragMove","width","height","getLayoutSize","dx","dy","w","forceUpdate","onPanelHeaderDragEnd","_unmounted","onSilentChange","onPanelCornerDragTL","onPanelCornerDrag","onPanelCornerDragTR","onPanelCornerDragBL","onPanelCornerDragBR","onPanelCornerDragMove","_movingCorner","startsWith","_movingW","h","_movingH","onPanelCornerDragEnd","newZ","onPanelClicked","target","nativeEvent","contains","ownerDocument","activeElement","Node","querySelector","focus","onDragOverOtherPanel","corner","render","size","minWidth","minHeight","styleName","id","panelLock","panelStyle","panelClass","split","map","name","join","isMax","isFloat","pointerDownCallback","cls","style","flex","left","top","zIndex","droppingLayer","tabLocked","DockDropClass","useEdgeDrop","createElement","panelElement","className","onMouseDownCapture","onTouchStartCapture","onDragOverT","onClick","onPanelDragStart","onPanelDragMove","onPanelDragEnd","key","onDragStartT","onDragMoveT","onDragEndT","componentWillUnmount","contextType"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/node_modules/rc-dock/es/DockPanel.js"],"sourcesContent":["import React from \"react\";\nimport { DockContextType } from \"./DockData\";\nimport { DockTabs } from \"./DockTabs\";\nimport { DragDropDiv } from \"./dragdrop/DragDropDiv\";\nimport { DragState } from \"./dragdrop/DragManager\";\nimport { DockDropLayer } from \"./DockDropLayer\";\nimport { getFloatPanelSize, nextZIndex } from \"./Algorithm\";\nimport { DockDropEdge } from \"./DockDropEdge\";\nexport class DockPanel extends React.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.getRef = (r) => {\n            this._ref = r;\n        };\n        this.state = { dropFromPanel: null, draggingHeader: false };\n        this.onDragOver = (e) => {\n            if (DockPanel._droppingPanel === this) {\n                return;\n            }\n            let { panelData } = this.props;\n            let dockId = this.context.getDockId();\n            let tab = DragState.getData('tab', dockId);\n            let panel = DragState.getData('panel', dockId);\n            if (tab || panel) {\n                DockPanel.droppingPanel = this;\n            }\n            if (tab) {\n                if (tab.parent) {\n                    this.setState({ dropFromPanel: tab.parent });\n                }\n                else {\n                    // add a fake panel\n                    this.setState({ dropFromPanel: { activeId: '', tabs: [], group: tab.group } });\n                }\n            }\n            else if (panel) {\n                this.setState({ dropFromPanel: panel });\n            }\n        };\n        // drop to move in float mode\n        this.onPanelHeaderDragStart = (event) => {\n            let { panelData } = this.props;\n            let { parent, x, y, z } = panelData;\n            let dockId = this.context.getDockId();\n            if (parent && parent.mode === 'float') {\n                this._movingX = x;\n                this._movingY = y;\n                // hide the panel, but not create drag layer element\n                event.setData({ panel: this.props.panelData }, dockId);\n                event.startDrag(null, null);\n                this.onFloatPointerDown();\n            }\n            else {\n                let tabGroup = this.context.getGroup(panelData.group);\n                let [panelWidth, panelHeight] = getFloatPanelSize(this._ref, tabGroup);\n                event.setData({ panel: panelData, panelSize: [panelWidth, panelHeight] }, dockId);\n                event.startDrag(null);\n            }\n            this.setState({ draggingHeader: true });\n        };\n        this.onPanelHeaderDragMove = (e) => {\n            let { width, height } = this.context.getLayoutSize();\n            let { panelData } = this.props;\n            panelData.x = this._movingX + e.dx;\n            panelData.y = this._movingY + e.dy;\n            if (width > 200 && height > 200) {\n                if (panelData.y < 0) {\n                    panelData.y = 0;\n                }\n                else if (panelData.y > height - 16) {\n                    panelData.y = height - 16;\n                }\n                if (panelData.x + panelData.w < 16) {\n                    panelData.x = 16 - panelData.w;\n                }\n                else if (panelData.x > width - 16) {\n                    panelData.x = width - 16;\n                }\n            }\n            this.forceUpdate();\n        };\n        this.onPanelHeaderDragEnd = (e) => {\n            if (!this._unmounted) {\n                this.setState({ draggingHeader: false });\n                this.context.onSilentChange(this.props.panelData.activeId, 'move');\n            }\n        };\n        this.onPanelCornerDragTL = (e) => {\n            this.onPanelCornerDrag(e, 'tl');\n        };\n        this.onPanelCornerDragTR = (e) => {\n            this.onPanelCornerDrag(e, 'tr');\n        };\n        this.onPanelCornerDragBL = (e) => {\n            this.onPanelCornerDrag(e, 'bl');\n        };\n        this.onPanelCornerDragBR = (e) => {\n            this.onPanelCornerDrag(e, 'br');\n        };\n        this.onPanelCornerDragMove = (e) => {\n            let { panelData } = this.props;\n            let { dx, dy } = e;\n            if (this._movingCorner.startsWith('t')) {\n                // when moving top corners, dont let it move header out of screen\n                let { width, height } = this.context.getLayoutSize();\n                if (this._movingY + dy < 0) {\n                    dy = -this._movingY;\n                }\n                else if (this._movingY + dy > height - 16) {\n                    dy = height - 16 - this._movingY;\n                }\n            }\n            switch (this._movingCorner) {\n                case 'tl': {\n                    panelData.x = this._movingX + dx;\n                    panelData.w = this._movingW - dx;\n                    panelData.y = this._movingY + dy;\n                    panelData.h = this._movingH - dy;\n                    break;\n                }\n                case 'tr': {\n                    panelData.w = this._movingW + dx;\n                    panelData.y = this._movingY + dy;\n                    panelData.h = this._movingH - dy;\n                    break;\n                }\n                case 'bl': {\n                    panelData.x = this._movingX + dx;\n                    panelData.w = this._movingW - dx;\n                    panelData.h = this._movingH + dy;\n                    break;\n                }\n                case 'br': {\n                    panelData.w = this._movingW + dx;\n                    panelData.h = this._movingH + dy;\n                    break;\n                }\n            }\n            this.forceUpdate();\n        };\n        this.onPanelCornerDragEnd = (e) => {\n            this.context.onSilentChange(this.props.panelData.activeId, 'move');\n        };\n        this.onFloatPointerDown = () => {\n            let { panelData } = this.props;\n            let { z } = panelData;\n            let newZ = nextZIndex(z);\n            if (newZ !== z) {\n                panelData.z = newZ;\n                this.forceUpdate();\n            }\n        };\n        this.onPanelClicked = (e) => {\n            const target = e.nativeEvent.target;\n            if (!this._ref.contains(this._ref.ownerDocument.activeElement) && target instanceof Node && this._ref.contains(target)) {\n                this._ref.querySelector('.dock-bar').focus();\n            }\n        };\n        this._unmounted = false;\n    }\n    static set droppingPanel(panel) {\n        if (DockPanel._droppingPanel === panel) {\n            return;\n        }\n        if (DockPanel._droppingPanel) {\n            DockPanel._droppingPanel.onDragOverOtherPanel();\n        }\n        DockPanel._droppingPanel = panel;\n    }\n    onDragOverOtherPanel() {\n        if (this.state.dropFromPanel) {\n            this.setState({ dropFromPanel: null });\n        }\n    }\n    onPanelCornerDrag(e, corner) {\n        let { parent, x, y, w, h } = this.props.panelData;\n        if (parent && parent.mode === 'float') {\n            this._movingCorner = corner;\n            this._movingX = x;\n            this._movingY = y;\n            this._movingW = w;\n            this._movingH = h;\n            e.startDrag(null, null);\n        }\n    }\n    render() {\n        let { dropFromPanel, draggingHeader } = this.state;\n        let { panelData, size } = this.props;\n        let { minWidth, minHeight, group: styleName, id, parent, panelLock } = panelData;\n        if (panelLock) {\n            if (panelLock.panelStyle) {\n                styleName = panelLock.panelStyle;\n            }\n        }\n        let panelClass;\n        if (styleName) {\n            panelClass = styleName\n                .split(' ')\n                .map((name) => `dock-style-${name}`)\n                .join(' ');\n        }\n        let isMax = parent && parent.mode === 'maximize';\n        let isFloat = parent && parent.mode === 'float';\n        let pointerDownCallback = this.onFloatPointerDown;\n        let onPanelHeaderDragStart = this.onPanelHeaderDragStart;\n        if (!isFloat || isMax) {\n            pointerDownCallback = null;\n        }\n        if (isMax) {\n            dropFromPanel = null;\n            onPanelHeaderDragStart = null;\n        }\n        let cls = `dock-panel ${panelClass ? panelClass : ''}${dropFromPanel ? ' dock-panel-dropping' : ''}${draggingHeader ? ' dragging' : ''}`;\n        let style = { minWidth, minHeight, flex: `${size} 1 ${size}px` };\n        if (isFloat) {\n            style.left = panelData.x;\n            style.top = panelData.y;\n            style.width = panelData.w;\n            style.height = panelData.h;\n            style.zIndex = panelData.z;\n        }\n        let droppingLayer;\n        if (dropFromPanel) {\n            let tabGroup = this.context.getGroup(dropFromPanel.group);\n            let dockId = this.context.getDockId();\n            if (!tabGroup.tabLocked || DragState.getData('tab', dockId) == null) {\n                // not allowed locked tab to create new panel\n                let DockDropClass = this.context.useEdgeDrop() ? DockDropEdge : DockDropLayer;\n                droppingLayer = React.createElement(DockDropClass, { panelData: panelData, panelElement: this._ref, dropFromPanel: dropFromPanel });\n            }\n        }\n        return (React.createElement(DragDropDiv, { getRef: this.getRef, className: cls, style: style, \"data-dockid\": id, onMouseDownCapture: pointerDownCallback, onTouchStartCapture: pointerDownCallback, onDragOverT: isFloat ? null : this.onDragOver, onClick: this.onPanelClicked },\n            React.createElement(DockTabs, { panelData: panelData, onPanelDragStart: onPanelHeaderDragStart, onPanelDragMove: this.onPanelHeaderDragMove, onPanelDragEnd: this.onPanelHeaderDragEnd }),\n            isFloat ?\n                [\n                    React.createElement(DragDropDiv, { key: \"drag-size-t-l\", className: \"dock-panel-drag-size dock-panel-drag-size-t-l\", onDragStartT: this.onPanelCornerDragTL, onDragMoveT: this.onPanelCornerDragMove, onDragEndT: this.onPanelCornerDragEnd }),\n                    React.createElement(DragDropDiv, { key: \"drag-size-t-r\", className: \"dock-panel-drag-size dock-panel-drag-size-t-r\", onDragStartT: this.onPanelCornerDragTR, onDragMoveT: this.onPanelCornerDragMove, onDragEndT: this.onPanelCornerDragEnd }),\n                    React.createElement(DragDropDiv, { key: \"drag-size-b-l\", className: \"dock-panel-drag-size dock-panel-drag-size-b-l\", onDragStartT: this.onPanelCornerDragBL, onDragMoveT: this.onPanelCornerDragMove, onDragEndT: this.onPanelCornerDragEnd }),\n                    React.createElement(DragDropDiv, { key: \"drag-size-b-r\", className: \"dock-panel-drag-size dock-panel-drag-size-b-r\", onDragStartT: this.onPanelCornerDragBR, onDragMoveT: this.onPanelCornerDragMove, onDragEndT: this.onPanelCornerDragEnd })\n                ]\n                : null,\n            droppingLayer));\n    }\n    componentWillUnmount() {\n        if (DockPanel._droppingPanel === this) {\n            DockPanel.droppingPanel = null;\n        }\n        this._unmounted = true;\n    }\n}\nDockPanel.contextType = DockContextType;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}