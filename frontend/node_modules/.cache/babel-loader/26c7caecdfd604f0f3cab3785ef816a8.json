{"ast":null,"code":"var _dec,_class,_class2,_dec2,_class3,_class4,_dec3,_class5,_class6,_dec4,_class7,_class8;import{BEGIN,Constructors,CoordinateMode,Debug,Defaults,DPointerTargetable,DViewPoint,EdgeBendingMode,EdgeGapMode,EGraphElements,EModelElements,END,GraphPoint,GraphSize,Log,LPointerTargetable,LUser,LViewPoint,MyProxyHandler,Pointers,RuntimeAccessible,RuntimeAccessibleClass,Selectors,SetFieldAction,SetRootFieldAction,ShortAttribETypes,store,TRANSACTION,U,windoww}from\"../../joiner\";import{DUser,transientProperties}from\"../../joiner/classes\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";let CSS_Units0={'Local-font relative':{'cap':'cap - (Cap height) the nominal height of capital letters of the element\\'s font.','ch':'ch - Average character advance of a narrow glyph in the element\\'s font, as represented by the \"0\" (ZERO, U+0030) glyph.','em':'em - Font size of the element\\'s font.','ex':'ex - x-height of the element\\'s font.','ic':'ic - Average character advance of a full-width glyph in the element\\'s font, as represented by the \"水\" (CJK water ideograph, U+6C34) glyph.','lh':'lh - Line height of the element.'},'Root-font relative':{'rcap':'rcap - Cap height (the nominal height of capital letters) of the root element\\'s font.','rch':'rch - Average character advance of a narrow glyph in the root element\\'s font, as represented by the \"0\" (ZERO, U+0030) glyph.','rem':'rem - Font size of the root element\\'s font.','rex':'rex - x-height of the root element\\'s font.','ric':'ric - Average character advance of a full-width glyph in the root element\\'s font, as represented by the \"水\" (CJK water ideograph, U+6C34) glyph.','rlh':'rlh - Line height of the root element.'},'Relative':{'dvh':'dvh - 1% of the dynamic viewport\\'s height.','dvw':'dvw - 1% of the dynamic viewport\\'s width.','lvh':'lvh - 1% of the large viewport\\'s height.','lvw':'lvw - 1% of the large viewport\\'s width.','svh':'svh - 1% of the small viewport\\'s height.','svw':'svw - 1% of the small viewport\\'s width.','vb':'vb - 1% of viewport\\'s size in the root element\\'s block axis.','vh':'vh - 1% of viewport\\'s height.','vi':'vi - 1% of viewport\\'s size in the root element\\'s inline axis.','vmax':'vmax - 1% of viewport\\'s larger dimension.','vmin':'vmin - 1% of viewport\\'s smaller dimension.','vw':'vw - 1% of viewport\\'s width.','fr':'fr - (Flex) Represents a flexible length within a grid container','%':'% - Percentage'},'Container @Query relative':{'cqb':'cqb - 1% of a query container\\'s block size','cqh':'cqh - 1% of a query container\\'s height','cqi':'cqi - 1% of a query container\\'s inline size','cqmax':'cqmax - The larger value of cqi or cqb','cqmin':'cqmin - The smaller value of cqi or cqb','cqw':'cqw - 1% of a query container\\'s width'},'Absolute lengths':{'cm':'cm - (Centimeters) 1cm = 96px/2.54','in':'in - (Inches) 1in = 2.54cm = 96px','mm':'mm - (Millimeters) 1mm = 1/10th of 1cm','pc':'pc - (Picas) 1pc = 1/6th of 1in','pt':'pt - (Points) 1pt = 1/72th of 1in','px':'px - (Pixels) 1px = 1/96th of 1in','Q':'Q - (Quarter-millimeters) 1Q = 1/40th of 1cm'},'Angles':{'deg':'deg - (Degrees) There are 360 degrees in a full circle.','grad':'grad - (Gradians) There are 400 gradians in a full circle.','rad':'rad - (Radians) There are 2π radians in a full circle.','turn':'turn - (Turns) There is 1 turn in a full circle.'},'Time':{'ms':'ms - Milliseconds','s':'s - (Seconds) There are 1,000 milliseconds in a second.'},'Frequency':{'Hz':'Hz - (Hertz) Represents the number of occurrences per second.','kHz':'kHz - (KiloHertz) A kiloHertz is 1000 Hertz.'},'Resolution':{'dpcm':'dpcm - Dots per centimeter.','dpi':'dpi - Dots per inch.','dppx':'dppx - Dots per px unit.'}};export let CSS_Units=CSS_Units0;let pattern=[];CSS_Units.jsx=/*#__PURE__*/_jsx(\"datalist\",{id:\"__jodel_CSS_units\",children:Object.keys(CSS_Units).map(k1=>{let v1=CSS_Units[k1];console.log(\"optgroup css units\",{k1,v1,karr:Object.keys(v1),k1arr:Object.keys(CSS_Units)});return/*#__PURE__*/_jsx(\"optgroup\",{label:k1,children:Object.keys(v1).map(k=>{let v=v1[k];console.log(\"css units\",{k,v,k1,v1,karr:Object.keys(v1),k1arr:Object.keys(CSS_Units)});pattern.push(k);return/*#__PURE__*/_jsx(\"option\",{value:k,title:v});})});})});//throw new Error(\"Stop\");\nCSS_Units.pattern=\"^(\"+pattern.join('|')+\")$\";windoww.CSS_Units=CSS_Units;/*\r\nexport type CSS_AbsoluteUnit = 'px' | 'cm' | 'mm' | 'pt' | 'pc' | 'in' | '';\r\nexport type CSS_RelativeDomUnit = '%' | 'fr' | 'vw' | 'vh' | 'vmin' | 'vmax';\r\nexport type CSS_RelativeFontUnit =  'em' | 'rem' | 'ex' | 'ch';\r\nexport type CSSUnit = CSS_AbsoluteUnit | CSS_RelativeFontUnit | CSS_RelativeDomUnit;*/ // array of rgba: red, green, blue, alpha\nexport let DViewElement=(_dec=RuntimeAccessible('DViewElement'),_dec(_class=(_class2=class DViewElement extends DPointerTargetable{constructor(){super(...arguments);this.id=void 0;this.isValidation=void 0;this.name=void 0;this.isExclusiveView=void 0;this.constants=void 0;this.preRenderFunc=void 0;this.jsxString=void 0;this.usageDeclarations=void 0;this.longestLabel=void 0;this.labels=void 0;this.forceNodeType=void 0;this.appliableToClasses=void 0;this.appliableTo=void 0;this.subViews=void 0;this.oclCondition=void 0;this.jsCondition=void 0;this.oclUpdateCondition=void 0;this.OCL_NEEDS_RECALCULATION=void 0;this.OCL_UPDATE_NEEDS_RECALCULATION=void 0;this.explicitApplicationPriority=void 0;this.defaultVSize=void 0;this.adaptHeight=void 0;this.adaptWidth=void 0;this.draggable=void 0;this.resizable=void 0;this.viewpoint=void 0;this.onDataUpdate=void 0;this.onDragStart=void 0;this.onDragEnd=void 0;this.whileDragging=void 0;this.onResizeStart=void 0;this.onResizeEnd=void 0;this.whileResizing=void 0;this.onRotationStart=void 0;this.onRotationEnd=void 0;this.whileRotating=void 0;this.events=void 0;this.bendingMode=void 0;this.edgeGapMode=void 0;this.storeSize=void 0;this.size=void 0;this.lazySizeUpdate=void 0;this.edgeStartOffset=void 0;this.edgeEndOffset=void 0;this.edgeStartOffset_isPercentage=void 0;this.edgeEndOffset_isPercentage=void 0;this.edgeStartStopAtBoundaries=void 0;this.edgeEndStopAtBoundaries=void 0;this.edgePointCoordMode=void 0;this.edgeHeadSize=void 0;this.edgeTailSize=void 0;this.palette=void 0;this.css=void 0;this.cssIsGlobal=void 0;this.compiled_css=void 0;this.css_MUST_RECOMPILE=void 0;this.father=void 0;}// static singleton: LViewElement;\n// static logic: typeof LViewDViewElementElement;\n// static structure: typeof DViewElement;\nstatic LFromHtml(target){return LPointerTargetable.fromPointer(DViewElement.PtrFromHtml(target));}static DFromHtml(target){return DPointerTargetable.fromPointer(DViewElement.PtrFromHtml(target));}static PtrFromHtml(target){while(target){if(target.attributes.viewid)return target.attributes.viewid.value;target=target.parentElement;}return undefined;}// inherited redefine\n// public __raw!: DViewElement;\n// own properties\n// only for root views (ex viewpoints) to group views semantically.\n// processate 1 sola volta all'applicazione della vista o all'editing del campo\n// _parsedConstants?: GObject; // should be protected but LView is not subclass\n// evaluate tutte le volte che l'elemento viene aggiornato (il model o la view cambia).\n// l'html template\n// used in DefaultNode\n// scalezoomx: boolean = false; // whether to resize the element normally using width-height or resize it using zoom-scale css\n// scalezoomy: boolean = false;\n// not persistent, some not shared. deve essere diverso da utente ad utente perchè dipende dal pan e zoom nel grafo dell'utente attuale.\n// facendo pan su grafo html sposti gli elementi, per simulare uno spostamento del grafo e farlo sembrare illimitato.\n// __transient: DViewTransientProperties;\n// class names: DModel, DPackage, DAttribute...\n// ocl selector\n// js selector\n//oclUpdateCondition_PARSED!: undefined | ((view: LViewElement)=>boolean); moved in transient\n// if only the oclCondition needs to be reapplied to all model elements\n// if both ocl needsto be reapplied and the oclUpdateCondition -> transient.view[v.id].oclUpdateCondition_PARSED needs to be remade\n// priority of the view, if a node have multiple applicable views, the view with highest priority is applied.\n// | 'fit-content' | '-webkit-fill-available';\n/*width!: number;\r\n    height!: number;*/ //display!: 'block'|'contents'|'flex'|string;\n//constraints!: GObject<\"obsolete, used in Vertex. they are triggered by events (view.onDragStart....) and can bound the size of the vertex\">[];\n//useSizeFrom!: EuseSizeFrom;\n// if true updates it once when the vertex is released. if false updates vertex position every X millisecond while dragging.\n/* private */ /* private */ /*\r\n    public static new(name: string, jsxString: string, father?: DViewElement, defaultVSize?: GraphSize, usageDeclarations: string = '', constants: string = '',\r\n                      preRenderFunc: string = '', appliableToClasses: string[] = [], oclCondition: string = '',\r\n                      priority?: number, persist: boolean = true, isDefaultView: boolean = false): DViewElement {\r\n        let id = isDefaultView ? 'Pointer_View' + name : undefined;\r\n        let vp = father.viewpoint;\r\n        return new Constructors(new DViewElement('dwc'), father.id, persist, undefined, id).DPointerTargetable()\r\n            .DViewElement(name, jsxString, vp, defaultVSize, usageDeclarations, constants,\r\n            preRenderFunc, appliableToClasses, oclCondition, priority).end();\r\n    }*/static new(){}static new2(name,jsxString,father0,callback){let persist=arguments.length>4&&arguments[4]!==undefined?arguments[4]:true;let id=arguments.length>5?arguments[5]:undefined;// let id = isDefaultView ? 'Pointer_View' + name : undefined;\nlet father=father0||DPointerTargetable.from(Defaults.viewpoints[0]);let vp=father.viewpoint||Defaults.viewpoints[0];return new Constructors(new DViewElement('dwc'),father.id,persist,undefined,id).DPointerTargetable().DViewElement(name,jsxString,vp).end(callback);}static newDefault(forData){var _user$project;const jsx=\"<div className={'root'}>\\n    <div className={'header'}>\\n        <div className={'input-container mx-2'}>\\n            <b className={'object-name'}>Name:</b>\\n            <Input data={data} field={'name'} hidden={true} autosize={true} />\\n        </div>\\n    </div>\\n    <div className={'body'}>To add information here,<br/> edit the view<br/><i>\\\"{view.name}\\\"</i></div>\\n    {decorators}\\n</div>\";const palettes={\"border-color-\":{type:\"color\",value:[{r:187,g:187,b:187,a:1}]},\"background-\":{type:\"color\",value:[{r:238,g:242,b:243,a:1}]},\"color-\":{type:\"color\",value:[{r:3,g:54,b:86,a:1}]}};const css=\".root {\\n    border: 1px solid var(--border-color-1);\\n    border-radius: 4px;\\n    background-color: var(--background-1);\\n    \\n    font-family: Verdana, sans-serif;\\n    color: var(--color-1);\\n    font-size: 0.7rem;\\n}\\n \\n.root div.header {\\n    text-align: center;\\n    border-bottom: 1px solid var(--border-color-1);\\n    padding: 0px;\\n    margin: 0px;\\n}\\n \\n.root div.header {\\n    font-size: 1rem;\\n}\\n \\n.root div.header input:empty {\\n    margin-left: 0px;\\n}\\n.root div.body {\\n    text-align: center;\\n    font-weight: normal;  \\n    height: auto;\\n    padding: 5px;\\n}\\n \";let query='';if(forData)switch(forData.className){case'DClass':query=\"context DObject inv: self.instanceof.id = '\".concat(forData.id,\"'\");break;case'DAttribute':case'DReference':query=\"context DValue inv: self.instanceof.id = '\".concat(forData.id,\"'\");break;default:query=\"context \".concat(forData.className,\" inv: self.id = '\").concat(forData.id,\"'\");break;}const user=LUser.fromPointer(DUser.current);// const project = user?.project; if(!project) return this;\nlet name;const vp=(user===null||user===void 0?void 0:(_user$project=user.project)===null||_user$project===void 0?void 0:_user$project.activeViewpoint)||LPointerTargetable.fromPointer(Defaults.viewpoints[0]);if(forData===null||forData===void 0?void 0:forData.name){name=forData.name+'View';}else{let names=vp.subViews.map(v=>v&&v.name);name=U.increaseEndingNumber('view_'+0,false,false,newName=>names.indexOf(newName)>=0);}return DViewElement.new2(name,jsx,vp.__raw,d=>{d.css=css;d.palette=palettes;d.css_MUST_RECOMPILE=true;d.oclCondition=query;},true);}},_class2.subclasses=[],_class2._extends=[],_class2.MeasurableKeys=['onDataUpdate','onDragStart','onDragEnd','whileDragging','onResizeStart','onResizeEnd','whileResizing','onRotationStart','onRotationEnd','whileRotating'],_class2.RecompileKeys=['onDataUpdate','onDragStart','onDragEnd','whileDragging','onResizeStart','onResizeEnd','whileResizing','onRotationStart','onRotationEnd','whileRotating','constants','usageDeclarations','jsxString','preconditions','jsCondition','ocl','events','labels','longestLabel'],_class2))||_class);export let LViewElement=(_dec2=RuntimeAccessible('LViewElement'),_dec2(_class3=(_class4=class LViewElement extends LPointerTargetable{constructor(){super(...arguments);this.__raw=void 0;this.id=void 0;this.r=void 0;this.isValidation=void 0;this.name=void 0;this.__info_of__name={isGlobal:true,type:ShortAttribETypes.EString,txt:/*#__PURE__*/_jsx(\"div\",{children:\"Name of the view\"})};this.isOverlay=void 0;this.__info_of__isOverlay={isGlobal:true,type:ShortAttribETypes.EBoolean,txt:/*#__PURE__*/_jsxs(\"div\",{children:[\"If not exclusive, the view is meant to add a functional outline of tools to a primary View, or css.\",/*#__PURE__*/_jsx(\"br\",{}),\"A non-exclusive view cannot be applied alone and needs an exclusive view to render the main graphical content.\"]})};this.label=void 0;this.longestLabel=void 0;this.labels=void 0;this.__info_of__longestLabel={label:\"Longest label\",type:\"function(edge)=>string\",readType:\"(edge:LEdge, segment: EdgeSegment, allNodes: DGraphElement[], allSegments: EdgeSegment[]) => PrimitiveType\",writeType:\"string\",txt:/*#__PURE__*/_jsx(\"span\",{children:\"Label assigned to the longest path segment.\"})};this.__info_of__label={type:\"\",txt:/*#__PURE__*/_jsx(\"span\",{children:\"Alias for longestLabel\"})};this.__info_of__labels={label:\"Multiple labels\",readType:\"type of longestLabel | longestLabel[]\",writeType:\"string\",txt:/*#__PURE__*/_jsx(\"span\",{children:\"Instructions to label to multiple or all path segments in an edge\"})};this.allPossibleParentViews=void 0;this.__info_of__allPossibleParentViews={isGlobal:true,type:'LViewElement[]',txt:'All views except subviews and this view.'};this.explicitApplicationPriority=void 0;this.__info_of__explicitApplicationPriority={isGlobal:true,type:ShortAttribETypes.EByte,label:\"explicit priority\",txt:'Application priority of view. If multiple views match an element, the highest priority will render the main jsx.'};this.isExclusiveView=void 0;this.__info_of__isExclusiveView={isGlobal:true,type:ShortAttribETypes.EBoolean,txt:/*#__PURE__*/_jsxs(\"div\",{children:[\"If not exclusive, the view is meant to add a functional outline of tools to a primary View, or css.\",/*#__PURE__*/_jsx(\"br\",{}),\"A non-exclusive view cannot be applied alone and needs an exclusive view to render the main graphical content.\"]})};this.constants=void 0;this.__info_of__constants={todo:true,isGlobal:true,type:\"Function():Object\",label:\"constants declaration\",txt:/*#__PURE__*/_jsxs(\"div\",{children:[\"Data used in the visual representation, meant to be static values evaluated only once when the view is first applied.\",/*#__PURE__*/_jsx(\"br\",{}),\"Check default value view for an example.\",/*#__PURE__*/_jsx(\"br\",{})]})};this.preRenderFunc=void 0;this.__info_of__preRenderFunc={isGlobal:true,obsolete:true,type:\"Function():Object\",label:\"pre-render function\",txt:/*#__PURE__*/_jsxs(\"div\",{children:[\"Data used in the visual representation, meant to be dynamic values evaluated every time the visual representation is updated.\",/*#__PURE__*/_jsx(\"br\",{}),\"Replaced by usageDeclarations.\"]})};this.jsxString=void 0;this.__info_of__jsxString={isGlobal:true,type:\"text\",label:\"JSX template\",txt:/*#__PURE__*/_jsxs(\"div\",{children:[\"The main ingredient, a \",/*#__PURE__*/_jsx(\"a\",{href:\"https://react.dev/learn/writing-markup-with-jsx\",children:\"JSX template\"}),\" that will be visualized in the graph.\"]})};this.usageDeclarations=void 0;this.__info_of__usageDeclarations={todo:false,isGlobal:true,type:\"Function():Object\",label:\"usage declarations\",txt:/*#__PURE__*/_jsxs(\"div\",{children:[\"Subset of the global or elements's data state that is graphically used.\",/*#__PURE__*/_jsx(\"br\",{}),\"If specified the element will only update when one of those has changed.\",/*#__PURE__*/_jsx(\"br\",{}),\"Can optimize performance and ensure the node is updated even when navigating remote properties that\",/*#__PURE__*/_jsx(\"br\",{}),\"    don\\\\'t belong to this element, like visualizing the name of an object pointed by a reference.\",/*#__PURE__*/_jsx(\"br\",{}),\"Context: it has the usual variables present in a JSX template (data, view, node...)\",/*#__PURE__*/_jsx(\"br\",{}),\"    plus a special variable \\\"ret\\\" where dependencies are registered.\",/*#__PURE__*/_jsx(\"br\",{}),\"Usage Example: see the default view for value.\"]})};this.oclUpdateCondition=void 0;this.__info_of__oclUpdateCondition={readType:'(view: LViewElement)=>boolean',writeType:'function string',txt:\"[Optionally] Declare variables that are used in OCL condition, so that OCL will be re-checked only when those values have changed.\"};this.css_MUST_RECOMPILE=void 0;this.cssIsGlobal=void 0;this.__info_of__cssIsGlobal={type:ShortAttribETypes.EBoolean,txt:\"Use with caution!\\nIf true, custom css can affect even elements not matched with this view, or outside the graph.\"};this.css=void 0;this.__info_of__css={type:\"css string\",txt:\"Inject custom css that cannot be inserted inline like :hover or css variables.\\nSupport LESS syntax.\"};this.compiled_css=void 0;this.__info_of__compiled_css={hidden:true,txt:'css + palettes compiled from less in css'};this.palette=void 0;this.__info_of__palette={type:\"Dictionary<prefix, colors[]>\",txt:\"Specify a set of colors, numbers or text variables to be used in the graphical syntax through css variables.\"};this.forceNodeType=void 0;this.__info_of__forceNodeType={isGlobal:true,type:\"EGraphElements\",enum:EGraphElements,label:\"force node type\",txt:/*#__PURE__*/_jsx(\"div\",{children:\"Forces this element to be rendered with your component of choice instead of automatic selection when generated by a <DefaultNode> tag.\"})};this.zoom=void 0;this.__info_of__zoom={todo:true,isNode:true,type:GraphPoint.cname,txt:/*#__PURE__*/_jsx(\"div\",{children:\"Zooms in or out the element using css scale.\"})};this.appliableToClasses=void 0;this.__info_of__appliableToClasses={isGlobal:true,type:\"EModelElements | EGraphElements\",enum:{...EModelElements,...EGraphElements,cname:\"EModelElements | EGraphElements\"},label:\"applicable to\",txt:/*#__PURE__*/_jsxs(\"div\",{children:[\"Do a low priority match with elements of this type.\",/*#__PURE__*/_jsx(\"br\",{}),\"This is just a shortcut with a lower priority than a OCL match.\",/*#__PURE__*/_jsx(\"br\",{}),\"The same result can be obtained through OCL.\"]})};this.appliableTo=void 0;this.subViews=void 0;this.__info_of__subViews={isGlobal:true,hidden:true,type:\"DViewElement[]\",label:\"sub-views\",txt:/*#__PURE__*/_jsxs(\"div\",{children:[\"Views that are suggested to render elements contained in the current one with a higher match priority.\",/*#__PURE__*/_jsx(\"br\",{}),\"Like a package view giving priority to a specific Class or Enum view to render his contained Classifiers in a common theme.\",/*#__PURE__*/_jsx(\"br\",{}),\"If you wish to see the subview weight attached to the collection, access view.__raw.subviews instead.\"]})};this.setSubViewScore=void 0;this.__info_of__setSubViewScore={isGlobal:true,hidden:true,type:\"function(ViewElement, numeric_score): void\",txt:/*#__PURE__*/_jsx(\"div\",{children:\"Adds, updates or unsets (if boost = null) a subview with his score.\"})};this.allSubViews=void 0;this.__info_of__allSubViews={type:\"ViewElement[]\",txt:\"recursively get this.subViews.\"};this.defaultVSize=void 0;this.__info_of__defaultVSize={isNode:true,type:\"GraphSize\",label:\"default size\",txt:'starting size of the node'};this.adaptWidth=void 0;this.__info_of__adaptWidth={isNode:true,type:ShortAttribETypes.EBoolean,label:\"adapt width\",txt:'Whether the element should expand his width to accomodate his own contents.'};this.adaptHeight=void 0;this.__info_of__adaptHeight={isNode:true,type:ShortAttribETypes.EBoolean,label:\"adapt height\",txt:'Whether the element should expand his height to accomodate his own contents.'};this.draggable=void 0;this.__info_of__draggable={isNode:true,type:ShortAttribETypes.EBoolean,txt:'if the element can be dragged'};this.resizable=void 0;this.__info_of__resizable={isNode:true,type:ShortAttribETypes.EBoolean,txt:'if the element can be resized'};this.oclCondition=void 0;this.__info_of__oclCondition={isGlobal:true,hidden:true,label:\"OCL apply condition\",type:\"text\",// TODO: what's the difference with this.query?\ntxt:'OCL Query selector to determine which nodes or model elements should apply this view'};this.jsCondition=void 0;this.__info_of__jsCondition={isGlobal:true,hidden:true,label:\"js apply condition\",type:\"text\",txt:'js Query selector to determine which nodes or model elements should apply this view'};this.viewpoint=void 0;this.__info_of__viewpoint={hidden:true,type:LViewPoint.cname,txt:/*#__PURE__*/_jsx(\"div\",{children:\"The collection of views containing this one, useful to activate multiple views at once.\"})};this.display=void 0;this.__info_of__display={obsolete:true,isNode:true,type:ShortAttribETypes.EString,txt:'complete css injection instead'};this.onDragStart=void 0;this.__info_of__onDragStart={isNode:true,type:\"Function():void\",txt:'Custom event activated when a node begins being dragged.'};this.onDragEnd=void 0;this.__info_of__onDragEnd={isNode:true,type:\"Function():void\",txt:'Custom event activated when a node finishes being dragged.'};this.whileDragging=void 0;this.__info_of__whileDragging={isNode:true,type:\"Function():void\",txt:'Custom event activated multiple times when mouse is moved while a node is being dragged.'};this.onResizeStart=void 0;this.__info_of__onResizeStart={isNode:true,type:\"Function():void\",txt:'Custom event activated when a node begins being resized.'};this.onResizeEnd=void 0;this.__info_of__onResizeEnd={isNode:true,type:\"Function():void\",txt:'Custom event activated when a node finishes being resized.'};this.whileResizing=void 0;this.__info_of__whileResizing={isNode:true,type:\"Function():void\",txt:'Custom event activated multiple times when mouse is moved while a node is being resized.'};this.onRotationStart=void 0;this.__info_of__onRotationStart={isNode:true,type:\"Function():void\",txt:'Custom event activated when a node begins being rotated.'};this.onRotationEnd=void 0;this.__info_of__onRotationEnd={isNode:true,type:\"Function():void\",txt:'Custom event activated when a node finishes being rotated.'};this.whileRotating=void 0;this.__info_of__whileRotating={isNode:true,type:\"Function():void\",txt:'Custom event activated multiple times when mouse is moved while a node is being rotated.'};this.onDataUpdate=void 0;this.__info_of__onDataUpdate={isNode:true,type:\"Function():void\",txt:'Custom event activated every time a property of his model, node or view is changed while the element is visibly rendered in a graph.\\n<br>Caution! this might cause loops.'};this.events=void 0;this.event=void 0;this.__info_of__events={todo:true,isGlobal:true,type:\"Dictionary<name, function>\",txt:/*#__PURE__*/_jsxs(\"div\",{children:[\"Custom events callable through JSX user interaction\",/*#__PURE__*/_jsx(\"br\",{}),\"eg: <div onClick={()=>view.eventname()} />\"]})};this.__info_of__event={todo:true,isGlobal:true,type:\"Dictionary<name, function>\",txt:'Alias for this.events'};this.constraints=void 0;this.__info_of__constraints={todo:true,isNode:true,type:\"Function():void\",txt:'not supported yet'};this.bendingMode=void 0;this.__info_of__bendingMode={isEdge:true,enum:EdgeBendingMode,type:'\"L\" | \"Q\" | \"C\" | \"T\" | \"S\" | \"A\" | \"QT\" | \"CS\"',label:\"path mode\",txt:/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"div\",{children:\"How Svg path should use the EdgePoints to bend his shape\"})})};this.edgeGapMode=void 0;this.__info_of__edgeGapMode={isEdge:true,enum:EdgeGapMode,type:'\"gap\" | \"average\" | \"autoFill\" | \"lineFill\" | \"arcFill\"',label:\"gap mode\",txt:/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{children:[\"How the segment should treat the EdgePoint interruptions.\",/*#__PURE__*/_jsx(\"br\",{}),\"\\\"gap\\\" leaves an empty space to not overlap the EdgePoint,\",/*#__PURE__*/_jsx(\"br\",{}),\"\\\"linefill\\\" makes the edge stop at the EdgePoint borders, but then connects the gap with a line.\"]})})};this.storeSize=void 0;this.__info_of__storeSize={isNode:true,type:ShortAttribETypes.EBoolean,label:\"bind sizes to view\",txt:\"Active: the node position depends from the view currently displayed.Inactive: it depends from the graph.\"};this.lazySizeUpdate=void 0;this.__info_of__lazySizeUpdate={isNode:true,type:ShortAttribETypes.EBoolean,txt:/*#__PURE__*/_jsx(\"div\",{children:\"If true updates the node position only when the drag action is finished. (best performance)\"})};this.edgeStartOffset=void 0;this.__info_of__edgeStartOffset={isEdge:true,type:GraphPoint.cname,label:\"start offset\",txt:\"Location where outgoing edges should start their path, relative to top-upper corner of the element.\"};this.edgeEndOffset=void 0;this.__info_of__edgeEndOffset={isEdge:true,type:GraphPoint.cname,label:\"end offset\",txt:'Same as this.edgeStartOffset'};this.edgeStartOffset_isPercentage=void 0;this.__info_of__edgeStartOffset_isPercentage={isEdge:true,type:ShortAttribETypes.EBoolean,label:\"start offset is a %\",txt:/*#__PURE__*/_jsxs(\"div\",{children:[\"Whether edgeStartOffset is an absolute value or a percentage.\",/*#__PURE__*/_jsx(\"br\",{}),\"(eg: 50% of element width, vs 50 pixels flat).\"]})};this.edgeEndOffset_isPercentage=void 0;this.__info_of__edgeEndOffset_isPercentage={isEdge:true,type:ShortAttribETypes.EBoolean,label:\"end offset is a %\",txt:/*#__PURE__*/_jsxs(\"div\",{children:[\"Whether edgeStartOffset is an absolute value or a percentage.\",/*#__PURE__*/_jsx(\"br\",{}),\"(eg: 50% of element width, vs 50 pixels flat).\"]})};this.edgeStartStopAtBoundaries=void 0;this.__info_of__edgeStartStopAtBoundaries={isEdge:true,type:ShortAttribETypes.EBoolean,label:\"start cannot cross boundaries\",txt:/*#__PURE__*/_jsxs(\"div\",{children:[\"Whether outgoing edges should cross the node boundaries overlapping the node\\\\'s html or stop at them.\",/*#__PURE__*/_jsx(\"br\",{}),\"Edge arrows might enter the node if this is on.\"]})};this.edgeEndStopAtBoundaries=void 0;this.__info_of__edgeEndStopAtBoundaries={isEdge:true,type:ShortAttribETypes.EBoolean,label:\"end cannot cross boundaries\",txt:/*#__PURE__*/_jsxs(\"div\",{children:[\"Whether incoming edges should cross the node boundaries overlapping the node\\\\'s html or stop at them.\",/*#__PURE__*/_jsx(\"br\",{}),\"Edge arrows might enter the node if this is on.\"]})};this.edgePointCoordMode=void 0;this.__info_of__edgePointCoordMode={isEdgePoint:true,type:\"CoordinateMode\",enum:CoordinateMode,label:\"coordinate mode\",txt:/*#__PURE__*/_jsx(\"div\",{children:\"Store coordinates as absolute coordinates or relative to start/end nodes.\"})};this.edgeHeadSize=void 0;this.__info_of__edgeHeadSize={isEdge:true,type:GraphPoint.cname,label:\"head decorator size\",txt:/*#__PURE__*/_jsx(\"div\",{children:\"Size of the edge head decorator if present.\"})};this.edgeTailSize=void 0;this.__info_of__edgeTailSize={isEdge:true,type:GraphPoint.cname,label:\"tail decorator size\",txt:/*#__PURE__*/_jsx(\"div\",{children:\"Size of the tail head decorator if present.\"})};this.size=void 0;this.__info_of__size={isNode:true,hidden:true,type:ShortAttribETypes.EInt,txt:/*#__PURE__*/_jsx(\"div\",{children:\"Do not use directly, contains all the sizes stored in this view. use getSize, updateSize instead.\"})};this.__info_of__updateSize={isNode:true,hidden:true,type:\"Function(Pointer<GraphElement | ModelElement>, GraphSize) => GraphSize\",txt:/*#__PURE__*/_jsxs(\"div\",{children:[\"Updates the size stored in this view for target element.\",/*#__PURE__*/_jsx(\"br\",{}),\"@returns: the delta of the change between old value and new value.\"]})};this.__info_of__getSize={isNode:true,hidden:true,type:\"Function(Pointer<GraphElement | ModelElement>) => GraphSize\",txt:/*#__PURE__*/_jsx(\"div\",{children:\"Gets the size stored in this view for target element.\"})};this.fatherChain=void 0;this.__info_of__fatherChain={type:'LViewElement[]',txt:'a list of all father elements sorted from the closest to farthest'};this.father=void 0;this.children=void 0;}// MixOnlyFuncs(DViewElement, LPointerTargetable)\n// static singleton: LViewElement;\n// static logic: typeof LViewElement;\n// static structure: typeof DViewElement;\n// inherited redefine\n// own properties\n// only for root views (ex viewpoints) to group views semantically.\nget_isOverlay(c){return this.get_isExclusiveView(c);}set_isOverlay(val,c){return this.set_isExclusiveView(val,c);}// should never be read change their documentation in write only. their values is \"read\" in this.segments\n// (e:LVoidEdge, segment: EdgeSegment, allNodes: LEdge[\"allNodes\"], allSegments: EdgeSegment[]) => PrimitiveType;\n// (e:LVoidEdge, segment: EdgeSegment, allNodes: LEdge[\"allNodes\"], allSegments: EdgeSegment[]) => PrimitiveType;\nget_label(c){return this.get_longestLabel(c);}set_label(val,c){return this.set_longestLabel(val,c);}get_longestLabel(c){return transientProperties.view[c.data.id].longestLabel;}get_labels(c){return transientProperties.view[c.data.id].labels;}set_longestLabel(val,c){Log.exDevv('Edge.labels are disabled, pass it through props instead');if(val===c.data.longestLabel)return true;TRANSACTION(()=>{SetFieldAction.new(c.data,\"longestLabel\",val);SetRootFieldAction.new(\"VIEWS_RECOMPILE_longestLabel+=\",c.data.id);});return true;}set_labels(val,c){Log.exDevv('Edge.labels are disabled, pass it through props instead');if(val===c.data.labels)return true;TRANSACTION(()=>{SetFieldAction.new(c.data,\"labels\",val);SetRootFieldAction.new(\"VIEWS_RECOMPILE_labels+=\",c.data.id);});return true;}get_allPossibleParentViews(c){let subviewsarr=this.get_allSubViews(c);let subviews=U.objectFromArray(subviewsarr,sv=>sv.id);let allviewsarr=Selectors.getAll(DViewElement,undefined,undefined,true,true);let allviews=U.objectFromArray(allviewsarr,sv=>sv.id);console.log('allPossibleParentViews',{subviews,subviewsarr,allviews:{...allviews},allviewsarr});for(let k in subviews){delete allviews[k];}delete allviews[c.data.id];console.log('allPossibleParentViews ret',{allviews});return Object.values(allviews);}// priority of the view, if a node have multiple applicable views, the view with highest priority is applied.\nget_explicitApplicationPriority(c){var _c$data$jsCondition,_c$data$oclCondition;if(c.data.explicitApplicationPriority!==undefined)return c.data.explicitApplicationPriority;else return(((_c$data$jsCondition=c.data.jsCondition)===null||_c$data$jsCondition===void 0?void 0:_c$data$jsCondition.length)||1)+(((_c$data$oclCondition=c.data.oclCondition)===null||_c$data$oclCondition===void 0?void 0:_c$data$oclCondition.length)||1);}set_explicitApplicationPriority(val,c){if(c.data.explicitApplicationPriority===val)return true;for(let nid in transientProperties.node){let tn=transientProperties.node[nid];for(let vid in tn.viewScores){let tnv=tn.viewScores[vid];if(!tnv.metaclassScore||!tnv.OCLScore)continue;if(tnv.jsScore===true)tn.needSorting=true;// recompute final score.\n}}SetFieldAction.new(c.data,\"explicitApplicationPriority\",val,'',false);return true;}get_isExclusiveView(c){return c.data.isExclusiveView;}set_isExclusiveView(val,c){if(Defaults.check(c.data.id))return true;// cannot delete or \"demote\" to decorations the main views, to make sure there is always at least 1 appliable view.\nreturn SetFieldAction.new(c.data,\"isExclusiveView\",!!val,'',false);}// Example 1: <code>{'{color:\"red\", background: \"gray\"}'}</code><br/>\n// Example 2: <code>{'function(){\\n    let fib = [1,1]; for (let i = 2; i < 100) { fib[i] = fib[i-2]+fib[i-1]; }\\n    return fib; }'}</code><br/>\n// evalutate tutte le volte che l'elemento viene aggiornato (il model o la view cambia)\n_defaultGetter(c,k){return this.__defaultGetter(c,k);}_defaultSetter(v,c,k){return this.__defaultSetter(v,c,k);}get_jsxString(context){return context.data.jsxString;}set_jsxString(val,context){TRANSACTION(()=>{// const jsx = DSL.parser(val);\nSetFieldAction.new(context.data,'jsxString',val,'',false);SetRootFieldAction.new('VIEWS_RECOMPILE_jsxString',context.data.id,'+=',false);});return true;}get_usageDeclarations(c){return c.data.usageDeclarations||\"(ret)=>{ // scope contains: data, node, view, constants, state\\n\"+\"// ** preparations and default behaviour here ** //\\n\"+\"ret.data = data\\n\"+\"ret.node = node\\n\"+\"ret.view = view\\n\"+\"// data, node, view are dependencies by default. delete them above if you want to remove them.\\n\"+// if you want your node re-rendered every time, add a dependency to ret.state = state; or ret.update = Math.random();\n\"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\"+\"// ** declarations here ** //\\n\"+\"}\";}set_usageDeclarations(val,context){TRANSACTION(()=>{SetFieldAction.new(context.data,'usageDeclarations',val,'',false);SetRootFieldAction.new('VIEWS_RECOMPILE_usageDeclarations',context.data.id,'+=',false);});return true;}// format should be array of (usedPaths: string[]) starting with \"data.\" AUTOMATICALLY inefered from the ocl editor.\nget_oclUpdateCondition(c){return transientProperties.view[c.data.id].oclUpdateCondition_PARSED;}set_oclUpdateCondition(val,c){TRANSACTION(()=>{SetFieldAction.new(c.data,\"oclUpdateCondition\",val||'','',false);// not recalculated right now because the change needs to be sent to collaborative editor users\n// it is pointer, but i don't want to set pointedby's, it is very short lived.\nSetRootFieldAction.new(\"OCL_UPDATE_NEEDS_RECALCULATION\",c.data.id,'+=',false);});return true;}/* moved it as setrootfield action and as array. check it after every reducer. update im same style the color palette too?\r\n    OCL_NEEDS_RECALCULATION!: boolean;\r\n    __info_of__OCL_NEEDS_RECALCULATION: Info = {hidden: true, type: ShortAttribETypes.EBoolean,\r\n        txt: \"if only the oclCondition needs to be reapplied to all model elements\"}\r\n    get_OCL_NEEDS_RECALCULATION(c: Context): this[\"OCL_NEEDS_RECALCULATION\"] { return c.data.OCL_NEEDS_RECALCULATION; }\r\n    set_OCL_NEEDS_RECALCULATION(val: this[\"OCL_NEEDS_RECALCULATION\"], c: Context): boolean { return this.cannotSet('OCL_NEEDS_RECALCULATION'); }\r\n\r\n    OCL_UPDATE_NEEDS_RECALCULATION!: boolean;\r\n    __info_of__OCL_UPDATE_NEEDS_RECALCULATION: Info = {hidden: true, type: ShortAttribETypes.EBoolean,\r\n        txt: \"if both ocl needsto be reapplied and the oclUpdateCondition -> transient.view[v.id].oclUpdateCondition_PARSED needs to be remade\"}\r\n    get_OCL_UPDATE_NEEDS_RECALCULATION(c: Context): this[\"OCL_UPDATE_NEEDS_RECALCULATION\"] { return c.data.OCL_UPDATE_NEEDS_RECALCULATION; }\r\n    set_OCL_UPDATE_NEEDS_RECALCULATION(val: this[\"OCL_UPDATE_NEEDS_RECALCULATION\"], c: Context): boolean { return this.cannotSet('OCL_UPDATE_NEEDS_RECALCULATION'); }*/get_cssIsGlobal(c){return c.data.cssIsGlobal;}set_cssIsGlobal(val,c){TRANSACTION(()=>{SetFieldAction.new(c.data,\"cssIsGlobal\",!!val,'',false);// compile only when accessed, to prevent color inputs to do a mess of compilations\nSetFieldAction.new(c.data,\"css_MUST_RECOMPILE\",true,'',false);});return true;}get_css(c){return c.data.css;}set_css(val,c){TRANSACTION(()=>{SetFieldAction.new(c.data,\"css\",val,'',false);// compile only when accessed, to prevent color inputs to do a mess of compilations\nSetFieldAction.new(c.data,\"css_MUST_RECOMPILE\",true,'',false);});return true;}get_compiled_css(c){if(c.data.isExclusiveView&&c.data.className===DViewPoint.cname&&!Defaults.check(c.data.id)){let project=this.get_project(c);let dproject=project===null||project===void 0?void 0:project.__raw;if(!(dproject&&dproject.activeViewpoint===c.data.id))return'';}if(!c.data.css_MUST_RECOMPILE)return c.data.compiled_css;// return c.proxyObject.r.__raw.compiled_css;\nlet s='';const allowLESS=false;let shortPaletteName;let cc=c;function rgbastring(c){Log.exDev(!c,\"invalid color:\",{id:cc.data.id,c,shortPaletteName,p:cc.data.palette});return\"rgba(\"+c.r+\",\"+c.g+\",\"+c.b+\",\"+c.a+\")\";}//let palettes = U.paletteSplit(c.data.palette);\nfor(let paletteName in c.data.palette){let palette0=c.data.palette[paletteName];if(palette0.type===\"color\"){let palette=palette0;let colors=palette.value;if(!colors.length)continue;if(['-','_'].includes(paletteName[paletteName.length-1]))shortPaletteName=paletteName.substring(0,paletteName.length-1);else shortPaletteName=paletteName;let rgba=rgbastring(colors[0]);// set prefixed name without number\nif(allowLESS)s+=\"\\t@\"+shortPaletteName+\": \"+rgba+';\\n';s+=\"\\t--\"+shortPaletteName+\": \"+rgba+';\\n';// set prefixed-0 name\nif(allowLESS)s+=\"\\t@\"+paletteName+'0: '+rgba+';\\n';s+=\"\\t--\"+paletteName+'0: '+rgba+';\\n';// set prefixed-1 to prefixed-...n names\nfor(let i=0;i<colors.length;i++){rgba=rgbastring(colors[i]);if(allowLESS)s+=\"\\t@\"+paletteName+(i+1)+\": \"+rgba+';\\n';s+=\"\\t--\"+paletteName+(i+1)+\": \"+rgba+';\\n';}}else if(palette0.type==='path'){let palette=palette0;let val=U.replaceAll(palette.value,'view.','');val=U.replaceAll(val,'this.','');val=U.replaceAll(val,'x',palette.x);val=U.replaceAll(val,'y',palette.y);val=U.replaceAll(val,'+',' +');val=U.replaceAll(val,'-',' -');// important: cannot add space post-dash or it's harder to distinguish unary and binary -\nval=U.replaceAll(val,'/',' / ');val=U.replaceAll(val,'*',' * ');let valarr=val.split(/[,\\s]/);// [] not allowed\nvalarr=valarr.map(val=>{if(!isNaN(+val))return val;let patharr=val.split('.');let curr=c.data;for(let pathseg of patharr){curr=curr[pathseg];Log.e(!curr&&(val.length>1||patharr.length>1),\"invalid variable path in css path control\",{token:val,view:c.data.name});if(!curr)break;}if(typeof curr===\"object\"||typeof curr===\"undefined\"&&(val.length>1||patharr.length>1))Log.ee(\"invalid variable path in css path control\",{token:val,view:c.data.name});else val=curr||val;return val;}).filter(p=>!!p);for(let i=0;i<valarr.length;i++){let val=valarr[i];switch(val){// i avoid subtracting L 1 -1 with spaces. it's unary if doesn't have a postfix space.\ndefault:continue;case'*':valarr[i]=+valarr[i-1]*+valarr[i+1];valarr[i-1]=valarr[i+1]='';break;case'/':valarr[i]=+valarr[i-1]/+valarr[i+1];valarr[i-1]=valarr[i+1]='';break;case'+':valarr[i]=+valarr[i-1]+ +valarr[i+1];valarr[i-1]=valarr[i+1]='';break;case'-':valarr[i]=+valarr[i-1]-+valarr[i+1];valarr[i-1]=valarr[i+1]='';break;}}val=valarr.filter(p=>!!p).join(' ');val=\"'\"+val+\"'\";if(allowLESS)s+=\"\\t@\"+paletteName+\": \"+val+';\\n';s+=\"\\t--\"+paletteName+': '+val+';\\n';}else{// number or text\nlet palette=palette0;let val=palette.value+(palette.unit||'');if(!val)val=\"''\";if(allowLESS)s+=\"\\t@\"+paletteName+\": \"+val+';\\n';s+=\"\\t--\"+paletteName+': '+val+';\\n';}}s+='\\n\\t'+U.replaceAll(c.data.css,'\\n','\\n\\t');const localViewSelector=c.data.className==='DViewPoint'?'.GraphContainer':'.'+c.data.id;// '[data-viewid=\"'+c.data.id+'\"]';\ns=(!c.data.cssIsGlobal?localViewSelector:'body')+' {\\n'+s+'\\n}';// not an error, i'm updating directly d-view that is usually wrong, this is to prevent multiple nodes with same view to trigger compile and redux actions\n// count as if it's a derived attribute not really part of the store.\nc.data.css_MUST_RECOMPILE=false;return c.data.compiled_css=s;}set_compiled_css(val,c){Log.exx(\"Do not use setter for this, set it directly in d-object, along with compiled_css.\"+\"\\nOtherwise multiple nodes of the same view will start compiling together.\\n\");return false;}get_palette(c){return c.data.palette;}set_palette(val,c){TRANSACTION(()=>{SetFieldAction.new(c.data,\"palette\",val,'',false);SetFieldAction.new(c.data,\"css_MUST_RECOMPILE\",true,'',false);});return true;}/*\r\n    scalezoomx!: boolean; // whether to resize the element normally using width-height or resize it using zoom-scale css\r\n    __info_of__scalezoomx: Info = {isNode: true, isEdge: false, isEdgePoint: false, txt:<div></div>}\r\n\r\n    scalezoomy!: boolean;\r\n    __info_of__scalezoomy: Info = {isNode: true, isEdge: false, isEdgePoint: false, txt:<div></div>}*/ // not persistent, some not shared. deve essere diverso da utente ad utente perchè dipende dal pan e zoom nel grafo dell'utente attuale.\n// facendo pan su grafo html sposti gli elementi, per simulare uno spostamento del grafo e farlo sembrare illimitato.\n// __transient: DViewTransientProperties;\n// class names: DModel, DPackage, DAttribute...\nget_SubViews(c){delete c.data.subViews.clonedCounter;return Object.keys(c.data.subViews).map(vid=>LPointerTargetable.fromPointer(vid));}set_SubViews(val,c){let subviewsmap;if(Array.isArray(val)){let ptrsArr=Pointers.fromArr(val);subviewsmap=U.objectFromArrayValues(ptrsArr,1.5);}else subviewsmap=val||{};SetFieldAction.new(c.data,\"subViews\",subviewsmap,'',true);return true;}// adds, updates or unsets (if boost = null) a subview with his score.\nget_setSubViewScore(c){return function(subview){let boost=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1.5;let subviews={...c.data.subViews};let ptr=Pointers.from(subview);if(boost!==null){// set mode\nif(subviews[ptr]===boost)return;subviews[ptr]=boost;}else{// set mode\nif(subviews[ptr]===undefined)return;delete subviews[ptr];}SetFieldAction.new(c.data,'subViews',subviews,'',true);};}get_allSubViews(c){delete c.data.subViews.clonedCounter;let arr=Object.keys(c.data.subViews);let nextarr=[];let idmap={};let s=store.getState();let dview;while(arr.length){for(let vid of arr){if(idmap[vid])continue;dview=DPointerTargetable.fromPointer(vid,s);if(!dview)continue;idmap[vid]=dview;U.arrayMergeInPlace(nextarr,Object.keys(dview.subViews));}arr=nextarr;nextarr=[];}return LPointerTargetable.fromD(Object.values(idmap));}set_allSubViews(val,c){return this.wrongAccessMessage(\"cannot call set_allSubViews, it is a derived attribute\");}// ocl selector\nget_oclCondition(context){return context.data.oclCondition;}set_oclCondition(val,context){val=(val||'').trim();if(val===context.data.oclCondition)return true;TRANSACTION(()=>{SetFieldAction.new(context.data,'oclCondition',val,'',false);SetRootFieldAction.new('VIEWS_RECOMPILE_ocl',context.data.id,'+=',false);// it is pointer, but for transient stuff there is no need to set pointedby's\n});return true;}// js selector\nget_jsCondition(context){return context.data.jsCondition;}set_jsCondition(val,context){val=(val||'').trim();if(val===context.data.jsCondition)return true;TRANSACTION(()=>{SetFieldAction.new(context.data,'jsCondition',val,'',false);SetRootFieldAction.new('VIEWS_RECOMPILE_jsCondition',context.data.id,'+=',false);});return true;}// todo: how about allowing a view to be part in multiple vp's? so this reference would be an array or removed, and you navigate only from vp to v.\nget_onDragStart(context){return context.data.onDragStart;}set_onDragStart(val,context){TRANSACTION(()=>{SetFieldAction.new(context.data,'onDragStart',val,'',false);SetRootFieldAction.new('VIEWS_RECOMPILE_onDragStart',context.data.id,'+=',false);});return true;}get_onDragEnd(context){return context.data.onDragEnd;}set_onDragEnd(val,context){TRANSACTION(()=>{SetFieldAction.new(context.data,'onDragEnd',val,'',false);SetRootFieldAction.new('VIEWS_RECOMPILE_onDragEnd',context.data.id,'+=',false);});return true;}get_whileDragging(context){return context.data.whileDragging;}set_whileDragging(val,context){TRANSACTION(()=>{SetFieldAction.new(context.data,'whileDragging',val,'',false);SetRootFieldAction.new('VIEWS_RECOMPILE_whileDragging',context.data.id,'+=',false);});return true;}get_onResizeStart(context){return context.data.onResizeStart;}set_onResizeStart(val,context){TRANSACTION(()=>{SetFieldAction.new(context.data,'onResizeStart',val,'',false);SetRootFieldAction.new('VIEWS_RECOMPILE_onResizeStart',context.data.id,'+=',false);});return true;}get_onResizeEnd(context){return context.data.onResizeEnd;}set_onResizeEnd(val,context){TRANSACTION(()=>{SetFieldAction.new(context.data,'onResizeEnd',val,'',false);SetRootFieldAction.new('VIEWS_RECOMPILE_onResizeEnd',context.data.id,'+=',false);});return true;}get_whileResizing(context){return context.data.whileResizing;}set_whileResizing(val,context){TRANSACTION(()=>{SetFieldAction.new(context.data,'whileResizing',val,'',false);SetRootFieldAction.new('VIEWS_RECOMPILE_whileResizing',context.data.id,'+=',false);});return true;}get_onRotationStart(context){return context.data.onRotationStart;}set_onRotationStart(val,context){TRANSACTION(()=>{SetFieldAction.new(context.data,'onRotationStart',val,'',false);SetRootFieldAction.new('VIEWS_RECOMPILE_onRotationStart',context.data.id,'+=',false);});return true;}get_onRotationEnd(context){return context.data.onRotationEnd;}set_onRotationEnd(val,context){TRANSACTION(()=>{SetFieldAction.new(context.data,'onRotationEnd',val,'',false);SetRootFieldAction.new('VIEWS_RECOMPILE_onRotationEnd',context.data.id,'+=',false);});return true;}get_whileRotating(context){return context.data.whileRotating;}set_whileRotating(val,context){TRANSACTION(()=>{SetFieldAction.new(context.data,'whileRotating',val,'',false);SetRootFieldAction.new('VIEWS_RECOMPILE_whileRotating',context.data.id,'+=',false);});return true;}get_onDataUpdate(context){return context.data.onDataUpdate;}set_onDataUpdate(val,context){TRANSACTION(()=>{SetFieldAction.new(context.data,'onDataUpdate',val,'',false);SetRootFieldAction.new('VIEWS_RECOMPILE_onDataUpdate',context.data.id,'+=',false);});return true;}get_event(c){return this.get_events(c);}get_events(c){Log.exx(\"use node.events instead\",U.getStackTrace());return{};// return transientProperties.view[c.data.id]?.events || {};\n}set_events(val,context){const addUD=true;TRANSACTION(()=>{SetFieldAction.new(context.data,'events',val,'+=',false);SetRootFieldAction.new('VIEWS_RECOMPILE_events',{vid:context.data.id,keys:Object.keys(val)},'+=',false);let udstr=context.data.usageDeclarations;if(!addUD||!udstr)return;let delta=U.objectDelta(context.data.events,val,false);for(let key in delta){let v=val[key];let autogenstr='ret.'+key+' = node.events.'+key+'; // @autogenerated, do not edit\\n';if(!v)udstr=udstr.split(autogenstr).join('');else{if(!context.data.events[key]){// insert\nlet findstr='// ** declarations here ** //\\n';let insertat=udstr.indexOf(findstr);if(insertat===-1)continue;// malformed ud, will skip\ninsertat+=findstr.length;udstr=udstr.substring(0,insertat)+autogenstr+udstr.substring(insertat);}else{// just updated func body, no name changed, no need to update UD.\n}}}if(udstr===context.data.usageDeclarations)return;SetFieldAction.new(context.data,'usageDeclarations',udstr,'',false);SetRootFieldAction.new('VIEWS_RECOMPILE_usageDeclarations',context.data.id,'+=',false);});return true;}/*\r\n    bindVertexSizeToView!: boolean;\r\n    __info_of__bindVertexSizeToView: Info = {isNode:true, type:ShortAttribETypes.EBoolean, label:\"bind sizes to view\",\r\n        txt: <div>Store the vertex size inside the view instead of inside the vertex.\r\n            <br/>This causes the vertex to have different positions according to the view currently appied to it.</div>}*/set_edgePointCoordMode(val,c){TRANSACTION(()=>{setTimeout(()=>{// needs to be done after coordinatemode change is applied\nlet s=store.getState();for(let nid in transientProperties.node){var _tn$mainView;let tn=transientProperties.node[nid];if(!tn||((_tn$mainView=tn.mainView)===null||_tn$mainView===void 0?void 0:_tn$mainView.id)!==c.data.id)continue;let lnode=LPointerTargetable.fromPointer(nid,s);let triggerCoordinateModeChange=lnode;triggerCoordinateModeChange.size=lnode.size;}},100);SetFieldAction.new(c.data,'edgePointCoordMode',val,'',false);});return true;}// use getSize, updateSize;\n// public _parsedConstants!: GObject;\n// public get__parsedConstants(c: Context): this['_parsedConstants'] { return c.data._parsedConstants || {}; }\nget_constants(c){return c.data.constants;}static parseConstants(funcCode){if(!funcCode)return{};let parsedConstants={};let context={__param:parsedConstants};context.__proto__=windoww.defaultContext;try{let parsedFunc=U.parseFunctionWithContextAndScope(funcCode,context,context,['ret']);parsedFunc(context,parsedConstants);// U.evalInContextAndScopeNew( \"(\"+funcCode+\")(this.__param)\", context, true, false, false);\n}catch(e){Log.ee(\"Attempted to save an invalid view.constant setup. Cause:\\n\"+e.message.split(\"\\n\")[0],e);return undefined;}return parsedConstants;}set_constants(value,c){if(value===c.data.constants)return true;TRANSACTION(()=>{SetFieldAction.new(c.data.id,'constants',value,'',false);SetRootFieldAction.new('VIEWS_RECOMPILE_constants',c.data.id,'+=',false);SetFieldAction.new(c.data.id,\"css_MUST_RECOMPILE\",true,'',false);});return true;}get_preRenderFunc(c){return c.data.preRenderFunc;}set_preRenderFunc(value,c){const _value=value?value:'() => {}';return SetFieldAction.new(c.data.id,'preRenderFunc',_value,'',false);}get_edgeHeadSize(c){return new GraphPoint(c.data.edgeHeadSize.x,c.data.edgeHeadSize.y);}get_edgeTailSize(c){return new GraphPoint(c.data.edgeTailSize.x,c.data.edgeTailSize.y);}set_edgeHeadSize(v,c){let s=c.data.edgeHeadSize||new GraphPoint(0,0);if(!(\"x\"in v))v.x=s.x;if(!(\"y\"in v))v.y=s.y;TRANSACTION(()=>{SetFieldAction.new(c.data.id,\"css_MUST_RECOMPILE\",true,'',false);SetFieldAction.new(c.data.id,\"edgeHeadSize\",v,'',false);});return true;}set_edgeTailSize(v,c){let s=c.data.edgeTailSize||new GraphPoint(0,0);if(!(\"x\"in v))v.x=s.x;if(!(\"y\"in v))v.y=s.y;TRANSACTION(()=>{SetFieldAction.new(c.data.id,\"css_MUST_RECOMPILE\",true,'',false);SetFieldAction.new(c.data.id,\"edgeTailSize\",v,'',false);});return true;}get_fatherChain(c){let current=this.get_father(c);if(!current)return[];let ret=[];while(current){ret.push(current);current=current.father;}return ret;}get_father(c){return LViewPoint.fromPointer(c.data.father);}get_viewpoint(c){let p=c.data.father;if(!p)return LPointerTargetable.fromD(c.data);let curr=LPointerTargetable.fromPointer(p);while(curr){let prev=curr.father;if(!prev)return curr;curr=prev;}return undefined;}// public set_subViews(v: Pointer<DViewPoint>[], context: Context): boolean { return this.cannotSet('subViews, call set_viewpoint on the sub-elements instead.'); }\n// WARNING!! if there are mass vp assignments, preserveOrder=true will cause a vp to \"lose\" subviews and keep only the last assigned.\nset_viewpoint(v,context,manualDview){let preserveOrder=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;Log.exDevv('setViewpoint() should not be called, call view.setFather(viewpoint) instead');return true;}set_father(v,context,manualDview){let preserveOrder=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;let ret=false;let pvid=v&&Pointers.from(v);const data=manualDview||context.data;let id=data.id;let oldpvid=data.father;if(pvid===oldpvid)return true;let dfather=v&&typeof v===\"object\"?v.__raw||v:DPointerTargetable.fromPointer(pvid);TRANSACTION(()=>{ret=SetFieldAction.new(id,\"father\",pvid,'',true);if(data.viewpoint!==dfather.viewpoint)SetFieldAction.new(id,\"viewpoint\",dfather.viewpoint,'',true);if(oldpvid){let subViews={...DPointerTargetable.fromPointer(oldpvid).subViews};delete subViews[id];SetFieldAction.new(oldpvid,\"subViews\",subViews,'',true);}if(pvid){let name=data.name;let copyPos=name.indexOf(\"Copy\");let oldSubViews=DPointerTargetable.fromPointer(pvid).subViews;let insertBefore='';let subViews={};if(copyPos){let copiedFromName=copyPos?name.substring(0,copyPos).trim():'';if(copiedFromName in oldSubViews)insertBefore=copiedFromName;else{for(let key in oldSubViews)if(key.indexOf(copiedFromName)===0){insertBefore=key;break;}}}// WARNING!! if there are mass vp assignments, this will cause a vp to \"lose\" subviews and keep only the last assigned.\nif(preserveOrder&&insertBefore){subViews={};for(let key in oldSubViews){subViews[key]=oldSubViews[key];// just to reinsert subviews **in order** so Object.keys() fits the new subview near the cloned one.\nif(key===insertBefore)subViews[id]=subViews[insertBefore];}}else{subViews={...oldSubViews};subViews[id]=1.5;}subViews[id]=insertBefore?subViews[insertBefore]:1.5;SetFieldAction.new(pvid,\"subViews\",subViews,'+=',true);}});return ret;}get_subViews(context){let subViewsPointers=context.data.subViews;let subViews=[];for(let pointer in subViewsPointers){let item=MyProxyHandler.wrap(pointer);if(item!==undefined)subViews.push(item);}return subViews;}// returns the delta of change\nupdateSize(id,size){return this.wrongAccessMessage(\"updateSize\");}get_updateSize(context){return(id,size0)=>{let size=size0;let vp=context.proxyObject.viewpoint;if(!context.data.storeSize){if(vp===null||vp===void 0?void 0:vp.storeSize)return vp.updateSize(id,size);return false;}let vsize=context.data.size[id]||(vp===null||vp===void 0?void 0:vp.__raw.size[id])||{};let newSize=new GraphSize();console.log({vsize,newSize,size,vp,d:context.data});if(size.currentCoordType===(vsize===null||vsize===void 0?void 0:vsize.currentCoordType)){// if samecoord system mix them.\nnewSize.x=(size===null||size===void 0?void 0:size.x)!==undefined?size.x:vsize.x;newSize.y=(size===null||size===void 0?void 0:size.y)!==undefined?size.y:vsize.y;}else if(size.x!==undefined&&size.y!==undefined){// if different coord system pick all of size\nnewSize.x=size.x;newSize.y=size.y;newSize.currentCoordType=size.currentCoordType||CoordinateMode.absolute;}else if(vsize.x!==undefined&&vsize.y!==undefined){// or all of vsize if size was invalid\nnewSize.x=vsize.x;newSize.y=vsize.y;newSize.currentCoordType=vsize.currentCoordType||CoordinateMode.absolute;}let defaultsize=context.data.defaultVSize||(vp===null||vp===void 0?void 0:vp.__raw.defaultVSize);if(newSize.x===undefined||newSize.y===undefined){// only if pos is invalid, i take defaultvsize and force to use coord absolute.\nnewSize=new GraphSize().clone(defaultsize);newSize.currentCoordType=CoordinateMode.absolute;}// w and h are always absolute so they can be mixed to whathever coordinate mode indipendently from the rest.\nnewSize.w=(size===null||size===void 0?void 0:size.w)!==undefined?size.w:vsize.w;newSize.h=(size===null||size===void 0?void 0:size.h)!==undefined?size.h:vsize.h;if(newSize.h===undefined)newSize.h=defaultsize.h||10;if(newSize.w===undefined)newSize.w=defaultsize.w||10;if(!newSize.equals(vsize))SetFieldAction.new(context.data.id,\"size.\"+id,newSize);return true;};}get_defaultVSize(context){return context.data.defaultVSize;}getSize(id){return this.wrongAccessMessage(\"getSize\");}get_getSize(context){function impl_getSize(id){if(typeof id===\"object\")id=id.id;let view=context.data;let ret;if(view.storeSize){ret=view.size[id];if(ret)return ret;}let vp=context.proxyObject.viewpoint;if(vp&&view.id!==vp.id&&vp.storeSize){ret=vp.size[id];if(ret)return ret;}return undefined;}return impl_getSize;}set_generic_entry(context,key,val){console.log('set_generic_entry',{context,key,val});SetFieldAction.new(context.data,key,val);return true;}get_children(context){return this.get_subViews(context);}get_lazySizeUpdate(context){return Debug.lightMode||context.data.lazySizeUpdate;}set_lazySizeUpdate(val,context){return Debug.lightMode||this.set_generic_entry(context,'lazySizeUpdate',val);}get_bendingMode(context){return context.data.bendingMode;}set_bendingMode(val,context){return this.set_generic_entry(context,'bendingMode',val);}set_appliableTo(val,c){// appliableTo >= forcenodetype\nif(!val)val='Any';let forceNodeType=c.data.forceNodeType;if(forceNodeType!==val)switch(val){// case \"Any\": break;\ndefault:forceNodeType=val;}console.log(\"set_appliableTo\",{forceNodeType,val});BEGIN();if(forceNodeType!==c.data.forceNodeType)SetFieldAction.new(c.data,\"forceNodeType\",forceNodeType,'',false);SetFieldAction.new(c.data,\"appliableTo\",val,'',false);END();return true;}set_forceNodeType(val,c){if(!val)val='Any';/*let appliableTo: string = c.data.appliableTo as string;\r\n        if (appliableTo !== val) switch (appliableTo){\r\n            case undefined: case 'Any': break;\r\n            //case 'GraphVertex': if ((appliableTo as any) !== 'Graph' && (appliableTo as any) !== 'Vertex') appliableTo = val; break;\r\n            default: appliableTo = val; break;\r\n        }*/BEGIN();// if (appliableTo !== c.data.appliableTo) SetFieldAction.new(c.data, \"appliableTo\", appliableTo, '', false);\nSetFieldAction.new(c.data,\"forceNodeType\",val,'',false);END();return true;}get_appliableToClasses(context){return context.data.appliableToClasses||[];}set_appliableToClasses(val,context){var _context$data$appliab;if(!val)val=[];else if(!Array.isArray(val))val=[val];val.sort();let hasChanged;if(val.length===((_context$data$appliab=context.data.appliableToClasses)===null||_context$data$appliab===void 0?void 0:_context$data$appliab.length)){hasChanged=false;for(let i=0;i<val.length;i++)if(val[i]!==context.data.appliableToClasses[i]){hasChanged=true;break;}}else hasChanged=true;if(!hasChanged)return true;TRANSACTION(()=>{this.set_generic_entry(context,\"appliableToClasses\",val);SetRootFieldAction.new('VIEWS_RECOMPILE_preconditions',context.data.id,'+=',false);});return true;}set_defaultVSize(val,c){var _val$x,_val$y,_val$w,_val$h;if(!val||typeof val!==\"object\")return true;let x=(_val$x=val.x)!==null&&_val$x!==void 0?_val$x:+val.x;let y=(_val$y=val.y)!==null&&_val$y!==void 0?_val$y:+val.y;let w=(_val$w=val.w)!==null&&_val$w!==void 0?_val$w:+val.w;let h=(_val$h=val.h)!==null&&_val$h!==void 0?_val$h:+val.h;if(isNaN(x))x=c.data.defaultVSize.x;if(isNaN(y))y=c.data.defaultVSize.y;if(isNaN(w))w=c.data.defaultVSize.w;if(isNaN(h))h=c.data.defaultVSize.h;if(x===c.data.defaultVSize.x&&y===c.data.defaultVSize.y&&w===c.data.defaultVSize.w&&h===c.data.defaultVSize.h)return true;SetFieldAction.new(c.data,'defaultVSize',{x,y,w,h},'',false);return true;}duplicate(){let deep=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;let new_vp=arguments.length>1?arguments[1]:undefined;return this.wrongAccessMessage(this.constructor.cname+\"duplicate()\");}get_duplicate(c){var _this=this;return function(){let deep=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;let new_vp0=arguments.length>1?arguments[1]:undefined;console.log(\"DViewelement.duplicate\",{cn:c.data.className,n:c.data.name,deep,new_vp0});let lview=undefined;let state=store.getState();TRANSACTION(()=>{let pvid=c.data.viewpoint;const dclone=c.data.className==='DViewPoint'?DViewPoint.newVP(\"\".concat(c.data.name,\" Copy\")):DViewElement.new2(\"\".concat(c.data.name,\" Copy\"),'',DPointerTargetable.from(c.data.father),undefined,true);// todo: test if this have correct parent, vp and pointedby\nlview=LPointerTargetable.fromD(dclone);const new_vp=new_vp0||{pvid};// || {pvid,  score: (DPointerTargetable.from(pvid, state) as DViewElement).subViews[c.data.id]}\nfor(let key in c.data){switch(key){case'subViews':// duplicate childrens only if deep\nif(!deep)break;// let subviews: Dictionary<Pointer, number> = {}\nfor(const oldvid in c.data.subViews){const oldScore=c.data.subViews[oldvid];LPointerTargetable.fromPointer(oldvid,state).duplicate(deep,{pvid:dclone.id/*, score:oldScore*/});// then everything is set inside case 'viewpoint' of subviews cloning\n}//lview.subViews = subviews as any;\nbreak;case'father':_this.set_father(new_vp.pvid,undefined,dclone,!deep);break;case'viewpoint':// update parent view\n/*\r\n                            let subviews: Dictionary<Pointer, number> = {};\r\n                            subviews[dclone.id] = new_vp.score;\r\n                            SetFieldAction.new(new_vp.pvid, 'subViews', subviews, '+=', true);\r\n                            SetFieldAction.new(dclone.id, 'viewpoint', new_vp.pvid, '+=', true);*/ // insert in-place right after the cloned view, with old score.\n//this.set_viewpoint(new_vp.pvid, undefined as any, dclone, !deep);\n// SetFieldAction.new(dclone.id, 'father', new_vp.vpid, '+=', true);\nbreak;case'':case'id':case'name':case'className':case'pointedBy':case'_storePath':case'_subMaps':case'clonedCounter':break;case'css_MUST_RECOMPILE':break;case'isValidation':console.log(\"duplicate \"+c.data.name+\" set isvalidation\",{data:c.data,iv:c.data.isValidation});lview[key]=c.data[key];break;default:try{let v=c.data[key];if(typeof v==='object')v=Array.isArray(v)?[...v]:{...v};lview[key]=v;}catch(e){//    Log.ee('Error on duplicate view:', e);\n}}}// insert in viewpoint.subview\n//let defaultViews: Dictionary<Pointer, boolean> = Defaults.defaultViewsMap;\nlet vp=c.proxyObject.viewpoint;// let oldViews: Pointer<DViewElement>[] = Object.keys(vp.__raw.subViews);\n// if (Defaults.viewpoints.indexOf(vpid)) oldViews = oldViews.filter( vid => !defaultViews[vid]);\n// let i: number = oldViews.indexOf(c.data.id);\n/*\r\n                if (i === -1) oldViews.push(dclone.id);\r\n                else oldViews.splice(i+1, 0, dclone.id); // insert in-place right after the cloned view\r\n                vp.subViews = oldViews as any;*/ // SetRootFieldAction.new('stackViews', dview.id, '+=', true);\nconst isVP=c.data.className==='DViewPoint';if(isVP)SetRootFieldAction.new(\"viewpoints\",c.data.id,'+=',true);else SetRootFieldAction.new(\"viewelements\",c.data.id,'+=',true);for(let key of DViewElement.RecompileKeys)SetRootFieldAction.new(\"VIEWS_RECOMPILE_\".concat(key),c.data.id,'+=',false);});return lview;};}},_class4.subclasses=[],_class4._extends=[],_class4))||_class3);RuntimeAccessibleClass.set_extend(DPointerTargetable,DViewElement);RuntimeAccessibleClass.set_extend(LPointerTargetable,LViewElement);export let DViewTransientProperties=(_dec3=RuntimeAccessible('DViewTransientProperties'),_dec3(_class5=(_class6=class DViewTransientProperties extends RuntimeAccessibleClass{constructor(){super(...arguments);this._isDViewTransientProperties=void 0;}// isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\n// private: DViewPrivateTransientProperties;\n},_class6.logic=void 0,_class6))||_class5);RuntimeAccessibleClass.set_extend(RuntimeAccessibleClass,DViewTransientProperties);export let LViewTransientProperties=(_dec4=RuntimeAccessible('LViewTransientProperties'),_dec4(_class7=(_class8=class LViewTransientProperties extends LPointerTargetable{constructor(){super(...arguments);this._isLViewTransientProperties=void 0;}// isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\n// private!: LViewPrivateTransientProperties;\n/*\r\n        get_private(context: LogicContext<DViewTransientProperties>): LViewPrivateTransientProperties {\r\n            return LViewTransientProperties.wrap(context.data.private, context.proxy.baseObjInLookup, context.proxy.additionalPath + '.private'); }*/ /*\r\n        get_isSelected(logicContext: LogicContext<TargetableProxyHandler<DViewTransientProperties>, DViewTransientProperties>): Proxyfied<Dictionary> {\r\n            // @ts-ignore for $ at end of getpath\r\n            console.log('GET_ISSELECTED handler func');\r\n            return TargetableProxyHandler.getMap(logicContext.data.isSelected, logicContext, logicContext.proxy.additionalPath + '.' + (getPath as this).isSelected.$);\r\n        }*/},_class8.structure=void 0,_class8.singleton=void 0,_class8))||_class7);RuntimeAccessibleClass.set_extend(DPointerTargetable,DViewTransientProperties);RuntimeAccessibleClass.set_extend(LPointerTargetable,LViewTransientProperties);/*\r\n\r\n@RuntimeAccessible\r\nexport class DViewPrivateTransientProperties extends DPointerTargetable{\r\n    static logic: typeof LViewPrivateTransientProperties;\r\n\r\n    public size: GraphSize\r\n    constructor(size?: GraphSize) {\r\n        super();\r\n        this.size = size || defaultVSize;\r\n    }\r\n}\r\n\r\n@RuntimeAccessible\r\nexport class LViewPrivateTransientProperties extends DViewPrivateTransientProperties{\r\n    static structure: typeof DViewPrivateTransientProperties;\r\n    static singleton: LViewPrivateTransientProperties;\r\n\r\n}*/ // shapeless component, receive jsx from redux\n// can access any of the redux state, but will usually access 1-2 var among many,\n// how can i dynamically mapStateToProps to map only the required ones?","map":{"version":3,"names":["BEGIN","Constructors","CoordinateMode","Debug","Defaults","DPointerTargetable","DViewPoint","EdgeBendingMode","EdgeGapMode","EGraphElements","EModelElements","END","GraphPoint","GraphSize","Log","LPointerTargetable","LUser","LViewPoint","MyProxyHandler","Pointers","RuntimeAccessible","RuntimeAccessibleClass","Selectors","SetFieldAction","SetRootFieldAction","ShortAttribETypes","store","TRANSACTION","U","windoww","DUser","transientProperties","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","CSS_Units0","CSS_Units","pattern","id","children","Object","keys","map","k1","v1","console","log","karr","k1arr","label","k","v","push","value","title","join","DViewElement","_dec","_class","_class2","constructor","arguments","isValidation","name","isExclusiveView","constants","preRenderFunc","jsxString","usageDeclarations","longestLabel","labels","forceNodeType","appliableToClasses","appliableTo","subViews","oclCondition","jsCondition","oclUpdateCondition","OCL_NEEDS_RECALCULATION","OCL_UPDATE_NEEDS_RECALCULATION","explicitApplicationPriority","defaultVSize","adaptHeight","adaptWidth","draggable","resizable","viewpoint","onDataUpdate","onDragStart","onDragEnd","whileDragging","onResizeStart","onResizeEnd","whileResizing","onRotationStart","onRotationEnd","whileRotating","events","bendingMode","edgeGapMode","storeSize","size","lazySizeUpdate","edgeStartOffset","edgeEndOffset","edgeStartOffset_isPercentage","edgeEndOffset_isPercentage","edgeStartStopAtBoundaries","edgeEndStopAtBoundaries","edgePointCoordMode","edgeHeadSize","edgeTailSize","palette","css","cssIsGlobal","compiled_css","css_MUST_RECOMPILE","father","LFromHtml","target","fromPointer","PtrFromHtml","DFromHtml","attributes","viewid","parentElement","undefined","new","new2","father0","callback","persist","length","from","viewpoints","vp","end","newDefault","forData","_user$project","palettes","type","r","g","b","a","query","className","concat","user","current","project","activeViewpoint","names","increaseEndingNumber","newName","indexOf","__raw","d","subclasses","_extends","MeasurableKeys","RecompileKeys","LViewElement","_dec2","_class3","_class4","__info_of__name","isGlobal","EString","txt","isOverlay","__info_of__isOverlay","EBoolean","__info_of__longestLabel","readType","writeType","__info_of__label","__info_of__labels","allPossibleParentViews","__info_of__allPossibleParentViews","__info_of__explicitApplicationPriority","EByte","__info_of__isExclusiveView","__info_of__constants","todo","__info_of__preRenderFunc","obsolete","__info_of__jsxString","href","__info_of__usageDeclarations","__info_of__oclUpdateCondition","__info_of__cssIsGlobal","__info_of__css","__info_of__compiled_css","hidden","__info_of__palette","__info_of__forceNodeType","enum","zoom","__info_of__zoom","isNode","cname","__info_of__appliableToClasses","__info_of__subViews","setSubViewScore","__info_of__setSubViewScore","allSubViews","__info_of__allSubViews","__info_of__defaultVSize","__info_of__adaptWidth","__info_of__adaptHeight","__info_of__draggable","__info_of__resizable","__info_of__oclCondition","__info_of__jsCondition","__info_of__viewpoint","display","__info_of__display","__info_of__onDragStart","__info_of__onDragEnd","__info_of__whileDragging","__info_of__onResizeStart","__info_of__onResizeEnd","__info_of__whileResizing","__info_of__onRotationStart","__info_of__onRotationEnd","__info_of__whileRotating","__info_of__onDataUpdate","event","__info_of__events","__info_of__event","constraints","__info_of__constraints","__info_of__bendingMode","isEdge","__info_of__edgeGapMode","__info_of__storeSize","__info_of__lazySizeUpdate","__info_of__edgeStartOffset","__info_of__edgeEndOffset","__info_of__edgeStartOffset_isPercentage","__info_of__edgeEndOffset_isPercentage","__info_of__edgeStartStopAtBoundaries","__info_of__edgeEndStopAtBoundaries","__info_of__edgePointCoordMode","isEdgePoint","__info_of__edgeHeadSize","__info_of__edgeTailSize","__info_of__size","EInt","__info_of__updateSize","__info_of__getSize","fatherChain","__info_of__fatherChain","get_isOverlay","c","get_isExclusiveView","set_isOverlay","val","set_isExclusiveView","get_label","get_longestLabel","set_label","set_longestLabel","view","data","get_labels","exDevv","set_labels","get_allPossibleParentViews","subviewsarr","get_allSubViews","subviews","objectFromArray","sv","allviewsarr","getAll","allviews","values","get_explicitApplicationPriority","_c$data$jsCondition","_c$data$oclCondition","set_explicitApplicationPriority","nid","node","tn","vid","viewScores","tnv","metaclassScore","OCLScore","jsScore","needSorting","check","_defaultGetter","__defaultGetter","_defaultSetter","__defaultSetter","get_jsxString","context","set_jsxString","get_usageDeclarations","set_usageDeclarations","get_oclUpdateCondition","oclUpdateCondition_PARSED","set_oclUpdateCondition","get_cssIsGlobal","set_cssIsGlobal","get_css","set_css","get_compiled_css","get_project","dproject","s","allowLESS","shortPaletteName","cc","rgbastring","exDev","p","paletteName","palette0","colors","includes","substring","rgba","i","replaceAll","x","y","valarr","split","isNaN","patharr","curr","pathseg","e","token","ee","filter","unit","localViewSelector","set_compiled_css","exx","get_palette","set_palette","get_SubViews","clonedCounter","set_SubViews","subviewsmap","Array","isArray","ptrsArr","fromArr","objectFromArrayValues","get_setSubViewScore","subview","boost","ptr","arr","nextarr","idmap","getState","dview","arrayMergeInPlace","fromD","set_allSubViews","wrongAccessMessage","get_oclCondition","set_oclCondition","trim","get_jsCondition","set_jsCondition","get_onDragStart","set_onDragStart","get_onDragEnd","set_onDragEnd","get_whileDragging","set_whileDragging","get_onResizeStart","set_onResizeStart","get_onResizeEnd","set_onResizeEnd","get_whileResizing","set_whileResizing","get_onRotationStart","set_onRotationStart","get_onRotationEnd","set_onRotationEnd","get_whileRotating","set_whileRotating","get_onDataUpdate","set_onDataUpdate","get_event","get_events","getStackTrace","set_events","addUD","udstr","delta","objectDelta","key","autogenstr","findstr","insertat","set_edgePointCoordMode","setTimeout","_tn$mainView","mainView","lnode","triggerCoordinateModeChange","get_constants","parseConstants","funcCode","parsedConstants","__param","__proto__","defaultContext","parsedFunc","parseFunctionWithContextAndScope","message","set_constants","get_preRenderFunc","set_preRenderFunc","_value","get_edgeHeadSize","get_edgeTailSize","set_edgeHeadSize","set_edgeTailSize","get_fatherChain","get_father","ret","get_viewpoint","prev","set_viewpoint","manualDview","preserveOrder","set_father","pvid","oldpvid","dfather","copyPos","oldSubViews","insertBefore","copiedFromName","get_subViews","subViewsPointers","pointer","item","wrap","updateSize","get_updateSize","size0","proxyObject","vsize","newSize","currentCoordType","absolute","defaultsize","clone","w","h","equals","get_defaultVSize","getSize","get_getSize","impl_getSize","set_generic_entry","get_children","get_lazySizeUpdate","lightMode","set_lazySizeUpdate","get_bendingMode","set_bendingMode","set_appliableTo","set_forceNodeType","get_appliableToClasses","set_appliableToClasses","_context$data$appliab","sort","hasChanged","set_defaultVSize","_val$x","_val$y","_val$w","_val$h","duplicate","deep","new_vp","get_duplicate","_this","new_vp0","cn","n","lview","state","dclone","newVP","oldvid","oldScore","iv","isVP","set_extend","DViewTransientProperties","_dec3","_class5","_class6","_isDViewTransientProperties","logic","LViewTransientProperties","_dec4","_class7","_class8","_isLViewTransientProperties","structure","singleton"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/src/view/viewElement/view.tsx"],"sourcesContent":["import {\r\n    BEGIN,\r\n    Constructors,\r\n    CoordinateMode,\r\n    Debug, DEdgePoint,\r\n    Defaults,\r\n    DGraphElement,\r\n    Dictionary,\r\n    DModelElement,\r\n    DNamedElement,\r\n    DocString,\r\n    DPointerTargetable, DProject,\r\n    DState,\r\n    DViewPoint, DVoidEdge,\r\n    EdgeBendingMode,\r\n    EdgeGapMode, EdgeSegment,\r\n    EGraphElements,\r\n    EModelElements,\r\n    END,\r\n    getWParams,\r\n    GObject,\r\n    GraphPoint,\r\n    GraphSize,\r\n    Info, LEdge, LEdgePoint, LGraphElement, LModelElement,\r\n    Log,\r\n    LogicContext,\r\n    LPointerTargetable, LProject, LUser,\r\n    LViewPoint,\r\n    LVoidEdge,\r\n    MyProxyHandler,\r\n    Pointer,\r\n    Pointers, PrimitiveType,\r\n    RuntimeAccessible,\r\n    RuntimeAccessibleClass,\r\n    Selectors,\r\n    SetFieldAction, SetRootFieldAction,\r\n    ShortAttribETypes,\r\n    store,\r\n    TRANSACTION,\r\n    U, ViewEClassMatch,\r\n    windoww\r\n} from \"../../joiner\";\r\nimport {DUser, EPSize, Pack1, transientProperties } from \"../../joiner/classes\";\r\nimport DSL from \"../../DSL/DSL\";\r\nimport {ReactNode} from \"react\";\r\nimport {labeltype} from \"../../model/dataStructure/GraphDataElements\";\r\n\r\nlet CSS_Units0 = {'Local-font relative':{\r\n        'cap':     'cap - (Cap height) the nominal height of capital letters of the element\\'s font.',\r\n        'ch':      'ch - Average character advance of a narrow glyph in the element\\'s font, as represented by the \"0\" (ZERO, U+0030) glyph.',\r\n        'em':      'em - Font size of the element\\'s font.',\r\n        'ex':      'ex - x-height of the element\\'s font.',\r\n        'ic':      'ic - Average character advance of a full-width glyph in the element\\'s font, as represented by the \"水\" (CJK water ideograph, U+6C34) glyph.',\r\n        'lh':      'lh - Line height of the element.',\r\n    },\r\n\r\n    'Root-font relative':{\r\n        'rcap':    'rcap - Cap height (the nominal height of capital letters) of the root element\\'s font.',\r\n        'rch':     'rch - Average character advance of a narrow glyph in the root element\\'s font, as represented by the \"0\" (ZERO, U+0030) glyph.',\r\n        'rem':     'rem - Font size of the root element\\'s font.',\r\n        'rex':     'rex - x-height of the root element\\'s font.',\r\n        'ric':     'ric - Average character advance of a full-width glyph in the root element\\'s font, as represented by the \"水\" (CJK water ideograph, U+6C34) glyph.',\r\n        'rlh':     'rlh - Line height of the root element.',\r\n    },\r\n\r\n    'Relative':{\r\n        'dvh':      'dvh - 1% of the dynamic viewport\\'s height.',\r\n        'dvw':      'dvw - 1% of the dynamic viewport\\'s width.',\r\n        'lvh':      'lvh - 1% of the large viewport\\'s height.',\r\n        'lvw':      'lvw - 1% of the large viewport\\'s width.',\r\n        'svh':      'svh - 1% of the small viewport\\'s height.',\r\n        'svw':      'svw - 1% of the small viewport\\'s width.',\r\n        'vb':       'vb - 1% of viewport\\'s size in the root element\\'s block axis.',\r\n        'vh':       'vh - 1% of viewport\\'s height.',\r\n        'vi':       'vi - 1% of viewport\\'s size in the root element\\'s inline axis.',\r\n        'vmax':     'vmax - 1% of viewport\\'s larger dimension.',\r\n        'vmin':     'vmin - 1% of viewport\\'s smaller dimension.',\r\n        'vw':       'vw - 1% of viewport\\'s width.',\r\n        'fr':       'fr - (Flex) Represents a flexible length within a grid container',\r\n        '%':        '% - Percentage',\r\n    },\r\n\r\n    'Container @Query relative':{\r\n        'cqb':      'cqb - 1% of a query container\\'s block size',\r\n        'cqh':      'cqh - 1% of a query container\\'s height',\r\n        'cqi':      'cqi - 1% of a query container\\'s inline size',\r\n        'cqmax':    'cqmax - The larger value of cqi or cqb',\r\n        'cqmin':    'cqmin - The smaller value of cqi or cqb',\r\n        'cqw':      'cqw - 1% of a query container\\'s width',\r\n    },\r\n\r\n    'Absolute lengths':{\r\n        'cm':      'cm - (Centimeters) 1cm = 96px/2.54',\r\n        'in':      'in - (Inches) 1in = 2.54cm = 96px',\r\n        'mm':      'mm - (Millimeters) 1mm = 1/10th of 1cm',\r\n        'pc':      'pc - (Picas) 1pc = 1/6th of 1in',\r\n        'pt':      'pt - (Points) 1pt = 1/72th of 1in',\r\n        'px':      'px - (Pixels) 1px = 1/96th of 1in',\r\n        'Q':       'Q - (Quarter-millimeters) 1Q = 1/40th of 1cm',\r\n    },\r\n\r\n    'Angles':{\r\n        'deg':      'deg - (Degrees) There are 360 degrees in a full circle.',\r\n        'grad':     'grad - (Gradians) There are 400 gradians in a full circle.',\r\n        'rad':      'rad - (Radians) There are 2π radians in a full circle.',\r\n        'turn':     'turn - (Turns) There is 1 turn in a full circle.',\r\n    },\r\n\r\n    'Time':{\r\n        'ms':     'ms - Milliseconds',\r\n        's':      's - (Seconds) There are 1,000 milliseconds in a second.',\r\n    },\r\n\r\n    'Frequency':{\r\n        'Hz':      'Hz - (Hertz) Represents the number of occurrences per second.',\r\n        'kHz':     'kHz - (KiloHertz) A kiloHertz is 1000 Hertz.',\r\n    },\r\n\r\n    'Resolution':{\r\n        'dpcm':     'dpcm - Dots per centimeter.',\r\n        'dpi':      'dpi - Dots per inch.',\r\n        'dppx':     'dppx - Dots per px unit.',\r\n    },\r\n};\r\nexport let CSS_Units: typeof CSS_Units0 & { jsx: ReactNode, pattern: string } = CSS_Units0 as any;\r\n\r\nlet pattern: string[] = [];\r\n\r\nCSS_Units.jsx = <datalist id={\"__jodel_CSS_units\"}>{\r\n   (Object.keys(CSS_Units) as (keyof typeof CSS_Units0)[]).map(k1 => {\r\n        let v1: GObject = CSS_Units[k1];\r\n       console.log(\"optgroup css units\", {k1, v1, karr:Object.keys(v1), k1arr:Object.keys(CSS_Units)});\r\n\r\n       return <optgroup label={k1}>\r\n            {Object.keys(v1).map(k => {\r\n                let v = v1[k];\r\n                console.log(\"css units\", {k, v, k1, v1, karr:Object.keys(v1), k1arr:Object.keys(CSS_Units)});\r\n                pattern.push(k);\r\n                return <option value={k} title={v}></option>\r\n            })}\r\n        </optgroup>\r\n    })\r\n}</datalist>;\r\n//throw new Error(\"Stop\");\r\nCSS_Units.pattern = \"^(\" + pattern.join('|') + \")$\";\r\nwindoww.CSS_Units = CSS_Units;\r\n\r\n\r\n/*\r\nexport type CSS_AbsoluteUnit = 'px' | 'cm' | 'mm' | 'pt' | 'pc' | 'in' | '';\r\nexport type CSS_RelativeDomUnit = '%' | 'fr' | 'vw' | 'vh' | 'vmin' | 'vmax';\r\nexport type CSS_RelativeFontUnit =  'em' | 'rem' | 'ex' | 'ch';\r\nexport type CSSUnit = CSS_AbsoluteUnit | CSS_RelativeFontUnit | CSS_RelativeDomUnit;*/\r\n\r\nexport type StringControl = {type:'text', value: string};\r\nexport type NumberControl = {type:'number', value: number, unit: DocString<\"css unit\">};\r\nexport type PaletteControl = {type:'color', value: tinycolor.ColorFormats.RGBA[]}; // array of rgba: red, green, blue, alpha\r\nexport type PathControl = {type:'path', value: string, x: string, y: string, options: {k: string, v:string}[]};\r\nexport type PaletteType = Dictionary<string, PaletteControl | NumberControl | StringControl | PathControl>;\r\n\r\n\r\n@RuntimeAccessible('DViewElement')\r\nexport class DViewElement extends DPointerTargetable {\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    // static singleton: LViewElement;\r\n    // static logic: typeof LViewDViewElementElement;\r\n    // static structure: typeof DViewElement;\r\n    public static MeasurableKeys: string[] = ['onDataUpdate', 'onDragStart', 'onDragEnd', 'whileDragging', 'onResizeStart',\r\n        'onResizeEnd', 'whileResizing', 'onRotationStart', 'onRotationEnd', 'whileRotating'];\r\n    public static RecompileKeys: string[] = ['onDataUpdate', 'onDragStart', 'onDragEnd', 'whileDragging', 'onResizeStart',\r\n        'onResizeEnd', 'whileResizing', 'onRotationStart', 'onRotationEnd', 'whileRotating',\r\n        'constants', 'usageDeclarations', 'jsxString', 'preconditions', 'jsCondition', 'ocl', 'events', 'labels', 'longestLabel'];\r\n\r\n    static LFromHtml(target?: Element | null): LViewElement | undefined { return LPointerTargetable.fromPointer(DViewElement.PtrFromHtml(target) as Pointer); }\r\n    static DFromHtml(target?: Element | null): DViewElement | undefined { return DPointerTargetable.fromPointer(DViewElement.PtrFromHtml(target) as Pointer); }\r\n    static PtrFromHtml(target?: Element | null): Pointer<DViewElement> | undefined {\r\n        while (target) {\r\n            if ((target.attributes as any).viewid) return (target.attributes as any).viewid.value;\r\n            target = target.parentElement;\r\n        }\r\n        return undefined;\r\n    }\r\n    // inherited redefine\r\n    // public __raw!: DViewElement;\r\n    id!: Pointer<DViewElement, 1, 1, LViewElement>;\r\n\r\n\r\n    // own properties\r\n    isValidation!: boolean; // only for root views (ex viewpoints) to group views semantically.\r\n    name!: string;\r\n    isExclusiveView!: boolean;\r\n\r\n    // processate 1 sola volta all'applicazione della vista o all'editing del campo\r\n    constants?: string;\r\n    // _parsedConstants?: GObject; // should be protected but LView is not subclass\r\n\r\n    // evaluate tutte le volte che l'elemento viene aggiornato (il model o la view cambia).\r\n    preRenderFunc!: string;\r\n\r\n    jsxString!: string; // l'html template\r\n    usageDeclarations?: string;\r\n\r\n    longestLabel?: DocString<\"function\">;\r\n    labels?: DocString<\"function\">;\r\n\r\n    forceNodeType?: DocString<'component name (Vertex, Field, GraphVertex, Graph)'>; // used in DefaultNode\r\n    // scalezoomx: boolean = false; // whether to resize the element normally using width-height or resize it using zoom-scale css\r\n    // scalezoomy: boolean = false;\r\n    // not persistent, some not shared. deve essere diverso da utente ad utente perchè dipende dal pan e zoom nel grafo dell'utente attuale.\r\n    // facendo pan su grafo html sposti gli elementi, per simulare uno spostamento del grafo e farlo sembrare illimitato.\r\n    // __transient: DViewTransientProperties;\r\n    appliableToClasses!: string[]; // class names: DModel, DPackage, DAttribute...\r\n    appliableTo!: 'Any'|'Graph'|'GraphVertex'|'Vertex'|'Edge'|'EdgePoint'|'Field';\r\n    subViews!: Dictionary<Pointer<DViewElement>, number/* priority boost */>;\r\n    oclCondition!: string; // ocl selector\r\n    jsCondition!: string; // js selector\r\n    oclUpdateCondition!: DocString<(view: LViewElement)=>boolean>;\r\n    //oclUpdateCondition_PARSED!: undefined | ((view: LViewElement)=>boolean); moved in transient\r\n    OCL_NEEDS_RECALCULATION!: boolean; // if only the oclCondition needs to be reapplied to all model elements\r\n    OCL_UPDATE_NEEDS_RECALCULATION!: boolean; // if both ocl needsto be reapplied and the oclUpdateCondition -> transient.view[v.id].oclUpdateCondition_PARSED needs to be remade\r\n    explicitApplicationPriority!: number; // priority of the view, if a node have multiple applicable views, the view with highest priority is applied.\r\n    defaultVSize!: GraphSize;\r\n    adaptHeight!: boolean;// | 'fit-content' | '-webkit-fill-available';\r\n    adaptWidth!: boolean;\r\n    /*width!: number;\r\n    height!: number;*/\r\n    draggable!: boolean;\r\n    resizable!: boolean;\r\n    viewpoint!: Pointer<DViewPoint>;\r\n    //display!: 'block'|'contents'|'flex'|string;\r\n    //constraints!: GObject<\"obsolete, used in Vertex. they are triggered by events (view.onDragStart....) and can bound the size of the vertex\">[];\r\n    onDataUpdate!: string;\r\n    onDragStart!: string;\r\n    onDragEnd!: string;\r\n    whileDragging!: string;\r\n    onResizeStart!: string;\r\n    onResizeEnd!: string;\r\n    whileResizing!: string;\r\n    onRotationStart!: string;\r\n    onRotationEnd!: string;\r\n    whileRotating!: string;\r\n    events!: Dictionary<DocString<\"functionName\">, DocString<\"functionBody\">>;\r\n    bendingMode!: EdgeBendingMode;\r\n    edgeGapMode!: EdgeGapMode;\r\n    //useSizeFrom!: EuseSizeFrom;\r\n    storeSize!: boolean;\r\n    size!: Dictionary<Pointer<DModelElement> | Pointer<DGraphElement>, GraphSize>;\r\n    lazySizeUpdate!: boolean; // if true updates it once when the vertex is released. if false updates vertex position every X millisecond while dragging.\r\n    edgeStartOffset!: GraphPoint;\r\n    edgeEndOffset!: GraphPoint;\r\n    edgeStartOffset_isPercentage!: boolean;\r\n    edgeEndOffset_isPercentage!: boolean;\r\n    edgeStartStopAtBoundaries!: boolean;\r\n    edgeEndStopAtBoundaries!: boolean;\r\n    edgePointCoordMode!: CoordinateMode;\r\n    edgeHeadSize!: GraphPoint;\r\n    edgeTailSize!: GraphPoint;\r\n    palette!: Readonly<PaletteType>;\r\n    css!: string;\r\n    cssIsGlobal!: boolean;\r\n    /* private */ compiled_css!: string;\r\n    /* private */ css_MUST_RECOMPILE!: boolean;\r\n    father?: Pointer<DViewElement>;\r\n/*\r\n    public static new(name: string, jsxString: string, father?: DViewElement, defaultVSize?: GraphSize, usageDeclarations: string = '', constants: string = '',\r\n                      preRenderFunc: string = '', appliableToClasses: string[] = [], oclCondition: string = '',\r\n                      priority?: number, persist: boolean = true, isDefaultView: boolean = false): DViewElement {\r\n        let id = isDefaultView ? 'Pointer_View' + name : undefined;\r\n        let vp = father.viewpoint;\r\n        return new Constructors(new DViewElement('dwc'), father.id, persist, undefined, id).DPointerTargetable()\r\n            .DViewElement(name, jsxString, vp, defaultVSize, usageDeclarations, constants,\r\n            preRenderFunc, appliableToClasses, oclCondition, priority).end();\r\n    }*/\r\n    public static new(...a:never): any{}\r\n    public static new2(name: string, jsxString: string, father0?: DViewElement, callback?: (d:DViewElement)=>void, persist: boolean = true,\r\n                       id?: string): DViewElement {\r\n        // let id = isDefaultView ? 'Pointer_View' + name : undefined;\r\n        let father: DViewElement = father0 || DPointerTargetable.from(Defaults.viewpoints[0]);\r\n        let vp = father.viewpoint || Defaults.viewpoints[0];\r\n        return new Constructors(new DViewElement('dwc'), father.id, persist, undefined, id)\r\n            .DPointerTargetable().DViewElement(name, jsxString, vp).end(callback);\r\n    }\r\n\r\n    static newDefault(forData?: DNamedElement): DViewElement{\r\n        const jsx = `<div className={'root'}>\r\n    <div className={'header'}>\r\n        <div className={'input-container mx-2'}>\r\n            <b className={'object-name'}>Name:</b>\r\n            <Input data={data} field={'name'} hidden={true} autosize={true} />\r\n        </div>\r\n    </div>\r\n    <div className={'body'}>To add information here,<br/> edit the view<br/><i>\"{view.name}\"</i></div>\r\n    {decorators}\r\n</div>`;\r\n        const palettes: PaletteType = {\r\n            \"border-color-\": {type:\"color\", value: [{r:187, g:187, b:187, a:1}]},\r\n            \"background-\": {type:\"color\", value: [{r:238, g:242, b:243, a:1}]},\r\n            \"color-\": {type:\"color\", value: [{r:3, g:54, b:86, a:1}]},\r\n        }\r\n            const css = `.root {\r\n    border: 1px solid var(--border-color-1);\r\n    border-radius: 4px;\r\n    background-color: var(--background-1);\r\n    \r\n    font-family: Verdana, sans-serif;\r\n    color: var(--color-1);\r\n    font-size: 0.7rem;\r\n}\r\n \r\n.root div.header {\r\n    text-align: center;\r\n    border-bottom: 1px solid var(--border-color-1);\r\n    padding: 0px;\r\n    margin: 0px;\r\n}\r\n \r\n.root div.header {\r\n    font-size: 1rem;\r\n}\r\n \r\n.root div.header input:empty {\r\n    margin-left: 0px;\r\n}\r\n.root div.body {\r\n    text-align: center;\r\n    font-weight: normal;  \r\n    height: auto;\r\n    padding: 5px;\r\n}\r\n `;\r\n        let query = '';\r\n        if (forData) switch(forData.className) {\r\n            case 'DClass':\r\n                query = `context DObject inv: self.instanceof.id = '${forData.id}'`;\r\n                break;\r\n            case 'DAttribute':\r\n            case 'DReference':\r\n                query = `context DValue inv: self.instanceof.id = '${forData.id}'`;\r\n                break;\r\n            default:\r\n                query = `context ${forData.className} inv: self.id = '${forData.id}'`;\r\n                break;\r\n        }\r\n        const user = LUser.fromPointer(DUser.current);\r\n        // const project = user?.project; if(!project) return this;\r\n        let name: string;\r\n        const vp: LViewPoint = user?.project?.activeViewpoint || LPointerTargetable.fromPointer(Defaults.viewpoints[0]);\r\n        if (forData?.name) {\r\n            name = forData.name + 'View';\r\n        } else {\r\n            let names: string[] = vp.subViews.map(v => v && v.name);\r\n            name = U.increaseEndingNumber( 'view_' + 0, false, false, newName => names.indexOf(newName) >= 0);\r\n        }\r\n        return DViewElement.new2(name, jsx, vp.__raw,(d)=>{\r\n            d.css = css;\r\n            d.palette = palettes;\r\n            d.css_MUST_RECOMPILE = true;\r\n            d.oclCondition = query;\r\n        }, true);\r\n    }\r\n}\r\n\r\n@RuntimeAccessible('LViewElement')\r\nexport class LViewElement<Context extends LogicContext<DViewElement, LViewElement> = any, D extends DViewElement = any>\r\n    extends LPointerTargetable { // MixOnlyFuncs(DViewElement, LPointerTargetable)\r\n\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    // static singleton: LViewElement;\r\n    // static logic: typeof LViewElement;\r\n    // static structure: typeof DViewElement;\r\n\r\n    // inherited redefine\r\n    public __raw!: DViewElement;\r\n    id!: Pointer<DViewElement, 1, 1, LViewElement>;\r\n    public r!: this;\r\n\r\n\r\n\r\n    // own properties\r\n    isValidation!: boolean; // only for root views (ex viewpoints) to group views semantically.\r\n    name!: string;\r\n    __info_of__name: Info = {isGlobal: true, type: ShortAttribETypes.EString, txt:<div>Name of the view</div>}\r\n    isOverlay!:boolean;\r\n    __info_of__isOverlay: Info = {isGlobal:true, type: ShortAttribETypes.EBoolean, txt:<div>If not exclusive, the view is meant to add a functional outline of tools to a primary View, or css.\r\n            <br/>A non-exclusive view cannot be applied alone and needs an exclusive view to render the main graphical content.</div>};\r\n    get_isOverlay(c: Context): this[\"isOverlay\"] { return this.get_isExclusiveView(c); }\r\n    set_isOverlay(val: this[\"isOverlay\"], c: Context): boolean { return this.set_isExclusiveView(val, c); }\r\n\r\n    label!: this[\"longestLabel\"];  // should never be read change their documentation in write only. their values is \"read\" in this.segments\r\n    longestLabel!: labeltype; // (e:LVoidEdge, segment: EdgeSegment, allNodes: LEdge[\"allNodes\"], allSegments: EdgeSegment[]) => PrimitiveType;\r\n    labels!: labeltype; // (e:LVoidEdge, segment: EdgeSegment, allNodes: LEdge[\"allNodes\"], allSegments: EdgeSegment[]) => PrimitiveType;\r\n    __info_of__longestLabel: Info = {label:\"Longest label\", type:\"function(edge)=>string\",\r\n        readType: \"(edge:LEdge, segment: EdgeSegment, allNodes: DGraphElement[], allSegments: EdgeSegment[]) => PrimitiveType\",\r\n        writeType: \"string\",\r\n        txt: <span>Label assigned to the longest path segment.</span>}\r\n    __info_of__label: Info = {type: \"\", txt: <span>Alias for longestLabel</span>};\r\n    __info_of__labels: Info = {label:\"Multiple labels\",\r\n        readType: \"type of longestLabel | longestLabel[]\",\r\n        writeType: \"string\",\r\n        txt: <span>Instructions to label to multiple or all path segments in an edge</span>\r\n    };\r\n    get_label(c: Context): this[\"longestLabel\"] { return this.get_longestLabel(c); }\r\n    set_label(val: DVoidEdge[\"longestLabel\"], c: Context): boolean { return this.set_longestLabel(val, c); }\r\n    get_longestLabel(c: Context): this[\"longestLabel\"] { return transientProperties.view[c.data.id].longestLabel; }\r\n    get_labels(c: Context): this[\"labels\"] { return transientProperties.view[c.data.id].labels; }\r\n    set_longestLabel(val: DVoidEdge[\"longestLabel\"], c: Context): boolean {\r\n        Log.exDevv('Edge.labels are disabled, pass it through props instead');\r\n        if (val === c.data.longestLabel) return true;\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(c.data, \"longestLabel\", val);\r\n            SetRootFieldAction.new(\"VIEWS_RECOMPILE_longestLabel+=\", c.data.id);\r\n        });\r\n        return true;\r\n    }\r\n    set_labels(val: DVoidEdge[\"labels\"], c: Context): boolean {\r\n        Log.exDevv('Edge.labels are disabled, pass it through props instead');\r\n        if (val === c.data.labels) return true;\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(c.data, \"labels\", val);\r\n            SetRootFieldAction.new(\"VIEWS_RECOMPILE_labels+=\", c.data.id);\r\n        });\r\n        return true; }\r\n\r\n    allPossibleParentViews!: LViewElement[];\r\n    __info_of__allPossibleParentViews: Info = {isGlobal: true, type: 'LViewElement[]', txt: 'All views except subviews and this view.' }\r\n    get_allPossibleParentViews(c: Context): this['allPossibleParentViews']{\r\n        let subviewsarr = this.get_allSubViews(c);\r\n        let subviews = U.objectFromArray(subviewsarr, (sv)=>sv.id);\r\n        let allviewsarr: LViewElement[] = Selectors.getAll(DViewElement, undefined, undefined, true, true);\r\n        let allviews = U.objectFromArray(allviewsarr, (sv)=>sv.id);\r\n        console.log('allPossibleParentViews', {subviews, subviewsarr, allviews:{...allviews}, allviewsarr});\r\n        for (let k in subviews) {\r\n            delete allviews[k];\r\n        }\r\n        delete allviews[c.data.id];\r\n        console.log('allPossibleParentViews ret', {allviews});\r\n        return Object.values(allviews);\r\n    }\r\n\r\n\r\n\r\n    explicitApplicationPriority!: number; // priority of the view, if a node have multiple applicable views, the view with highest priority is applied.\r\n    __info_of__explicitApplicationPriority: Info = {isGlobal: true, type: ShortAttribETypes.EByte, label:\"explicit priority\",\r\n        txt: 'Application priority of view. If multiple views match an element, the highest priority will render the main jsx.' }\r\n    get_explicitApplicationPriority(c: Context): this[\"explicitApplicationPriority\"] {\r\n        if (c.data.explicitApplicationPriority !== undefined) return c.data.explicitApplicationPriority;\r\n        else return (c.data.jsCondition?.length || 1) + (c.data.oclCondition?.length || 1); }\r\n    set_explicitApplicationPriority(val: this[\"explicitApplicationPriority\"] | undefined, c: Context): boolean {\r\n        if (c.data.explicitApplicationPriority === val) return true;\r\n        for (let nid in transientProperties.node){\r\n            let tn = transientProperties.node[nid];\r\n            for (let vid in tn.viewScores){\r\n                let tnv = tn.viewScores[vid];\r\n                if (!tnv.metaclassScore || !tnv.OCLScore) continue;\r\n                if (tnv.jsScore === true) tn.needSorting = true; // recompute final score.\r\n            }\r\n        }\r\n        SetFieldAction.new(c.data, \"explicitApplicationPriority\", val as number, '', false);\r\n        return true;\r\n    }\r\n\r\n    isExclusiveView!: boolean;\r\n    __info_of__isExclusiveView: Info = {isGlobal:true, type: ShortAttribETypes.EBoolean, txt:<div>If not exclusive, the view is meant to add a functional outline of tools to a primary View, or css.\r\n    <br/>A non-exclusive view cannot be applied alone and needs an exclusive view to render the main graphical content.</div>};\r\n    get_isExclusiveView(c: Context): this[\"isExclusiveView\"] { return c.data.isExclusiveView; }\r\n    set_isExclusiveView(val: this[\"isExclusiveView\"], c: Context): boolean {\r\n        if (Defaults.check(c.data.id)) return true; // cannot delete or \"demote\" to decorations the main views, to make sure there is always at least 1 appliable view.\r\n        return SetFieldAction.new(c.data, \"isExclusiveView\", !!val, '', false);\r\n    }\r\n\r\n    constants?: string;\r\n    __info_of__constants: Info = {todo:true, isGlobal: true, type: \"Function():Object\", label:\"constants declaration\",\r\n        txt:<div>Data used in the visual representation, meant to be static values evaluated only once when the view is first applied.<br/>\r\n        Check default value view for an example.<br/>\r\n    </div>};\r\n    // Example 1: <code>{'{color:\"red\", background: \"gray\"}'}</code><br/>\r\n    // Example 2: <code>{'function(){\\n    let fib = [1,1]; for (let i = 2; i < 100) { fib[i] = fib[i-2]+fib[i-1]; }\\n    return fib; }'}</code><br/>\r\n\r\n    preRenderFunc?: string; // evalutate tutte le volte che l'elemento viene aggiornato (il model o la view cambia)\r\n    __info_of__preRenderFunc: Info = {isGlobal: true, obsolete: true, type: \"Function():Object\", label:\"pre-render function\",\r\n        txt:<div>Data used in the visual representation, meant to be dynamic values evaluated every time the visual representation is updated.<br/>Replaced by usageDeclarations.</div>}\r\n\r\n    protected _defaultGetter(c: Context, k: keyof Context[\"data\"]): any { return this.__defaultGetter(c, k); }\r\n\r\n    protected _defaultSetter(v: any, c: Context, k: keyof Context[\"data\"]): any { return this.__defaultSetter(v, c, k); }\r\n\r\n    jsxString!: string;\r\n    __info_of__jsxString: Info = {isGlobal: true, type: \"text\", label:\"JSX template\",\r\n        txt:<div>The main ingredient, a <a href={\"https://react.dev/learn/writing-markup-with-jsx\"}>JSX template</a> that will be visualized in the graph.</div>}\r\n    protected get_jsxString(context: Context): this['jsxString'] {\r\n        return context.data.jsxString;\r\n    }\r\n    protected set_jsxString(val: this['jsxString'], context: Context): boolean {\r\n        TRANSACTION(() => {\r\n            // const jsx = DSL.parser(val);\r\n            SetFieldAction.new(context.data, 'jsxString', val, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_jsxString', context.data.id, '+=', false);\r\n        });\r\n        return true;\r\n    }\r\n\r\n    usageDeclarations?: string;\r\n    __info_of__usageDeclarations: Info = {todo: false, isGlobal: true, type: \"Function():Object\", label:\"usage declarations\",\r\n        txt: <div>Subset of the global or elements's data state that is graphically used.\r\n            <br/>If specified the element will only update when one of those has changed.\r\n            <br/>Can optimize performance and ensure the node is updated even when navigating remote properties that\r\n            <br/>    don\\'t belong to this element, like visualizing the name of an object pointed by a reference.\r\n            <br/>Context: it has the usual variables present in a JSX template (data, view, node...)\r\n            <br/>    plus a special variable \"ret\" where dependencies are registered.{/*and a \"state\" variable containing the entire application state.*/}\r\n            <br/>Usage Example: see the default view for value.\r\n    </div>}\r\n    protected get_usageDeclarations(c: Context): this[\"usageDeclarations\"]{\r\n        return c.data.usageDeclarations || \"(ret)=>{ // scope contains: data, node, view, constants, state\\n\" +\r\n            \"// ** preparations and default behaviour here ** //\\n\" +\r\n            \"ret.data = data\\n\" +\r\n            \"ret.node = node\\n\" +\r\n            \"ret.view = view\\n\" +\r\n            \"// data, node, view are dependencies by default. delete them above if you want to remove them.\\n\" +\r\n            // if you want your node re-rendered every time, add a dependency to ret.state = state; or ret.update = Math.random();\r\n            \"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\" +\r\n            \"// ** declarations here ** //\\n\" +\r\n            \"}\";\r\n    }\r\n    protected set_usageDeclarations(val: this['usageDeclarations'], context: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(context.data, 'usageDeclarations', val, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_usageDeclarations', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    // format should be array of (usedPaths: string[]) starting with \"data.\" AUTOMATICALLY inefered from the ocl editor.\r\n    oclUpdateCondition!: (oldData: LModelElement, newData:LModelElement) => boolean;\r\n    __info_of__oclUpdateCondition: Info = {readType: '(view: LViewElement)=>boolean', writeType: 'function string',\r\n        txt: \"[Optionally] Declare variables that are used in OCL condition, so that OCL will be re-checked only when those values have changed.\"}\r\n    get_oclUpdateCondition(c: Context): this[\"oclUpdateCondition\"] { return transientProperties.view[c.data.id].oclUpdateCondition_PARSED; }\r\n    set_oclUpdateCondition(val: DocString<\"function\">, c: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(c.data, \"oclUpdateCondition\", val || '', '', false);\r\n            // not recalculated right now because the change needs to be sent to collaborative editor users\r\n            // it is pointer, but i don't want to set pointedby's, it is very short lived.\r\n            SetRootFieldAction.new(\"OCL_UPDATE_NEEDS_RECALCULATION\", c.data.id, '+=', false);\r\n        });\r\n        return true;\r\n    }\r\n/* moved it as setrootfield action and as array. check it after every reducer. update im same style the color palette too?\r\n    OCL_NEEDS_RECALCULATION!: boolean;\r\n    __info_of__OCL_NEEDS_RECALCULATION: Info = {hidden: true, type: ShortAttribETypes.EBoolean,\r\n        txt: \"if only the oclCondition needs to be reapplied to all model elements\"}\r\n    get_OCL_NEEDS_RECALCULATION(c: Context): this[\"OCL_NEEDS_RECALCULATION\"] { return c.data.OCL_NEEDS_RECALCULATION; }\r\n    set_OCL_NEEDS_RECALCULATION(val: this[\"OCL_NEEDS_RECALCULATION\"], c: Context): boolean { return this.cannotSet('OCL_NEEDS_RECALCULATION'); }\r\n\r\n    OCL_UPDATE_NEEDS_RECALCULATION!: boolean;\r\n    __info_of__OCL_UPDATE_NEEDS_RECALCULATION: Info = {hidden: true, type: ShortAttribETypes.EBoolean,\r\n        txt: \"if both ocl needsto be reapplied and the oclUpdateCondition -> transient.view[v.id].oclUpdateCondition_PARSED needs to be remade\"}\r\n    get_OCL_UPDATE_NEEDS_RECALCULATION(c: Context): this[\"OCL_UPDATE_NEEDS_RECALCULATION\"] { return c.data.OCL_UPDATE_NEEDS_RECALCULATION; }\r\n    set_OCL_UPDATE_NEEDS_RECALCULATION(val: this[\"OCL_UPDATE_NEEDS_RECALCULATION\"], c: Context): boolean { return this.cannotSet('OCL_UPDATE_NEEDS_RECALCULATION'); }*/\r\n\r\n    private css_MUST_RECOMPILE!: boolean;\r\n    public cssIsGlobal!: boolean;\r\n    __info_of__cssIsGlobal: Info = {type: ShortAttribETypes.EBoolean, txt: \"Use with caution!\\nIf true, custom css can affect even elements not matched with this view, or outside the graph.\"}\r\n    get_cssIsGlobal(c: Context): this[\"cssIsGlobal\"] {\r\n        return c.data.cssIsGlobal;\r\n    }\r\n    set_cssIsGlobal(val: this[\"cssIsGlobal\"], c: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(c.data, \"cssIsGlobal\", !!val, '', false);\r\n            // compile only when accessed, to prevent color inputs to do a mess of compilations\r\n            SetFieldAction.new(c.data, \"css_MUST_RECOMPILE\", true, '', false);\r\n        });\r\n        return true;\r\n    }\r\n    public css!: string;\r\n    __info_of__css: Info = {type: \"css string\", txt: \"Inject custom css that cannot be inserted inline like :hover or css variables.\\nSupport LESS syntax.\"}\r\n    get_css(c: Context): this[\"css\"] { return c.data.css; }\r\n    set_css(val:this[\"css\"], c: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(c.data, \"css\", val, '', false);\r\n            // compile only when accessed, to prevent color inputs to do a mess of compilations\r\n            SetFieldAction.new(c.data, \"css_MUST_RECOMPILE\", true, '', false);\r\n        });\r\n        return true;\r\n    }\r\n\r\n    compiled_css!: string;\r\n    __info_of__compiled_css: Info = { hidden: true, txt:'css + palettes compiled from less in css'};\r\n    get_compiled_css(c: Context): this[\"compiled_css\"] {\r\n        if (c.data.isExclusiveView && c.data.className === DViewPoint.cname && !Defaults.check(c.data.id) ) {\r\n            let project = this.get_project(c);\r\n            let dproject = project?.__raw as DProject | undefined;\r\n            if (!(dproject && dproject.activeViewpoint === c.data.id)) return '';\r\n        }\r\n        if (!c.data.css_MUST_RECOMPILE) return c.data.compiled_css; // return c.proxyObject.r.__raw.compiled_css;\r\n        let s = '';\r\n        const allowLESS = false;\r\n        let shortPaletteName: string;\r\n        let cc = c;\r\n        function rgbastring(c: tinycolor.ColorFormats.RGBA): string{\r\n            Log.exDev(!c, \"invalid color:\", {id: cc.data.id, c, shortPaletteName, p:cc.data.palette});\r\n            return \"rgba(\"+c.r+\",\"+c.g+\",\"+c.b+\",\"+c.a+\")\";\r\n        }\r\n        //let palettes = U.paletteSplit(c.data.palette);\r\n        for (let paletteName in c.data.palette) {\r\n            let palette0 = c.data.palette[paletteName] as any;\r\n            if (palette0.type === \"color\") {\r\n                let palette = palette0 as PaletteControl;\r\n                let colors = palette.value;\r\n                if (!colors.length) continue;\r\n                if (['-', '_'].includes(paletteName[paletteName.length-1])) shortPaletteName = paletteName.substring(0, paletteName.length - 1);\r\n                else shortPaletteName = paletteName;\r\n                let rgba = rgbastring(colors[0]);\r\n                // set prefixed name without number\r\n                if (allowLESS) s += \"\\t@\" + shortPaletteName + \": \" + rgba + ';\\n';\r\n                s += \"\\t--\" + shortPaletteName + \": \" + rgba + ';\\n';\r\n                // set prefixed-0 name\r\n                if (allowLESS) s += \"\\t@\" + paletteName + '0: ' + rgba + ';\\n';\r\n                s += \"\\t--\" + paletteName + '0: ' + rgba + ';\\n';\r\n                // set prefixed-1 to prefixed-...n names\r\n                for (let i = 0 ; i < colors.length; i++) {\r\n                    rgba = rgbastring(colors[i]);\r\n                    if (allowLESS) s += \"\\t@\" + paletteName + (i+1) + \": \" + rgba + ';\\n';\r\n                    s += \"\\t--\" + paletteName + (i+1) + \": \" + rgba + ';\\n';\r\n                }\r\n            } else if (palette0.type === 'path'){\r\n                let palette: PathControl = palette0;\r\n                let val = U.replaceAll(palette.value, 'view.', '');\r\n                val = U.replaceAll(val, 'this.', '');\r\n                val = U.replaceAll(val, 'x', palette.x);\r\n                val = U.replaceAll(val, 'y', palette.y);\r\n                val = U.replaceAll(val, '+', ' +');\r\n                val = U.replaceAll(val, '-', ' -'); // important: cannot add space post-dash or it's harder to distinguish unary and binary -\r\n                val = U.replaceAll(val, '/', ' / ');\r\n                val = U.replaceAll(val, '*', ' * ');\r\n                let valarr: (string | number)[] = val.split(/[,\\s]/);\r\n                // [] not allowed\r\n                valarr = (valarr as string[]).map(val => {\r\n                    if (!isNaN(+val)) return val;\r\n                    let patharr: string[] = val.split('.');\r\n                    let curr: GObject = c.data;\r\n                    for (let pathseg of patharr) {\r\n                        curr = curr[pathseg];\r\n                        Log.e(!curr && (val.length > 1 || patharr.length > 1), \"invalid variable path in css path control\", {token:val, view:c.data.name});\r\n                        if (!curr) break;\r\n                    }\r\n                    if (typeof curr === \"object\" || (typeof curr === \"undefined\" && (val.length > 1 || patharr.length > 1)))\r\n                        Log.ee( \"invalid variable path in css path control\", {token:val, view:c.data.name});\r\n                    else val = curr || val;\r\n                    return val;\r\n                }).filter(p=>!!p);\r\n\r\n                for (let i = 0 ; i < valarr.length; i++) {\r\n                    let val = valarr[i];\r\n                    switch (val) { // i avoid subtracting L 1 -1 with spaces. it's unary if doesn't have a postfix space.\r\n                        default: continue;\r\n                        case '*': valarr[i] = +valarr[i-1] * +valarr[i+1]; valarr[i-1] = valarr[i+1] = ''; break;\r\n                        case '/': valarr[i] = +valarr[i-1] / +valarr[i+1]; valarr[i-1] = valarr[i+1] = ''; break;\r\n                        case '+': valarr[i] = +valarr[i-1] + +valarr[i+1]; valarr[i-1] = valarr[i+1] = ''; break;\r\n                        case '-': valarr[i] = +valarr[i-1] - +valarr[i+1]; valarr[i-1] = valarr[i+1] = ''; break;\r\n                    }\r\n                }\r\n                val = valarr.filter(p=>!!p).join(' ');\r\n                val = \"'\"+val+\"'\";\r\n                if (allowLESS) s += \"\\t@\" + paletteName + \": \" + val + ';\\n';\r\n                s += \"\\t--\" + paletteName + ': ' + val + ';\\n';\r\n            }\r\n            else {\r\n                // number or text\r\n                let palette: NumberControl | StringControl = palette0;\r\n                let val = palette.value + ((palette as NumberControl).unit || '');\r\n                if (!val) val = \"''\";\r\n                if (allowLESS) s += \"\\t@\" + paletteName + \": \" + val + ';\\n';\r\n                s += \"\\t--\" + paletteName + ': ' + val + ';\\n';\r\n            }\r\n        }\r\n        s += '\\n\\t' + U.replaceAll(c.data.css, '\\n', '\\n\\t');\r\n        const localViewSelector: string = (c.data.className === 'DViewPoint') ? '.GraphContainer' : '.'+c.data.id; // '[data-viewid=\"'+c.data.id+'\"]';\r\n        s = (!c.data.cssIsGlobal ? localViewSelector : 'body') +' {\\n' + s + '\\n}';\r\n        // not an error, i'm updating directly d-view that is usually wrong, this is to prevent multiple nodes with same view to trigger compile and redux actions\r\n        // count as if it's a derived attribute not really part of the store.\r\n        c.data.css_MUST_RECOMPILE = false;\r\n        return c.data.compiled_css = s;\r\n    }\r\n    set_compiled_css(val: this[\"compiled_css\"], c: Context): boolean {\r\n        Log.exx(\"Do not use setter for this, set it directly in d-object, along with compiled_css.\" +\r\n        \"\\nOtherwise multiple nodes of the same view will start compiling together.\\n\" as any);\r\n        return false;\r\n    }\r\n\r\n    public palette!: PaletteType;\r\n    __info_of__palette: Info = {type: \"Dictionary<prefix, colors[]>\", txt:\"Specify a set of colors, numbers or text variables to be used in the graphical syntax through css variables.\"}\r\n    get_palette(c: Context): this[\"palette\"] { return c.data.palette; }\r\n    set_palette(val:this[\"palette\"], c: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(c.data, \"palette\", val, '', false);\r\n            SetFieldAction.new(c.data, \"css_MUST_RECOMPILE\", true, '', false);\r\n        });\r\n    return true; }\r\n\r\n    forceNodeType?: DocString<'component name'>;\r\n    __info_of__forceNodeType: Info = {isGlobal:true, type: \"EGraphElements\", enum: EGraphElements, label:\"force node type\",\r\n        txt:<div>Forces this element to be rendered with your component of choice instead of automatic selection when generated by a &lt;DefaultNode&gt; tag.</div>}\r\n\r\n    zoom!: GraphPoint;\r\n    __info_of__zoom: Info = {todo: true, isNode: true, type: GraphPoint.cname, txt:<div>Zooms in or out the element using css scale.</div>}\r\n    /*\r\n    scalezoomx!: boolean; // whether to resize the element normally using width-height or resize it using zoom-scale css\r\n    __info_of__scalezoomx: Info = {isNode: true, isEdge: false, isEdgePoint: false, txt:<div></div>}\r\n\r\n    scalezoomy!: boolean;\r\n    __info_of__scalezoomy: Info = {isNode: true, isEdge: false, isEdgePoint: false, txt:<div></div>}*/\r\n\r\n    // not persistent, some not shared. deve essere diverso da utente ad utente perchè dipende dal pan e zoom nel grafo dell'utente attuale.\r\n    // facendo pan su grafo html sposti gli elementi, per simulare uno spostamento del grafo e farlo sembrare illimitato.\r\n    // __transient: DViewTransientProperties;\r\n\r\n    appliableToClasses!: string[]; // class names: DModel, DPackage, DAttribute...\r\n    __info_of__appliableToClasses: Info = {isGlobal: true, type: \"EModelElements | EGraphElements\",\r\n        enum: {...EModelElements, ...EGraphElements, cname:\"EModelElements | EGraphElements\"}, label:\"applicable to\",\r\n        txt: <div>Do a low priority match with elements of this type.\r\n            <br/>This is just a shortcut with a lower priority than a OCL match.\r\n            <br/>The same result can be obtained through OCL.</div>}\r\n\r\n    appliableTo!: 'Any'|'Graph'|'GraphVertex'|'Vertex'|'Edge'|'EdgePoint'|'Field';\r\n\r\n    subViews!: LViewElement[];\r\n    __info_of__subViews: Info = {isGlobal: true, hidden: true, type: \"DViewElement[]\", label:\"sub-views\",\r\n        txt:<div>Views that are suggested to render elements contained in the current one with a higher match priority.\r\n            <br/>Like a package view giving priority to a specific Class or Enum view to render his contained Classifiers in a common theme.\r\n            <br/>If you wish to see the subview weight attached to the collection, access view.__raw.subviews instead.</div>}\r\n    get_SubViews(c: Context): this[\"subViews\"] {\r\n        delete c.data.subViews.clonedCounter;\r\n        return Object.keys(c.data.subViews).map( vid => LPointerTargetable.fromPointer(vid) as LViewElement);\r\n    }\r\n    set_SubViews(val: this[\"subViews\"] | GObject, c: Context): boolean {\r\n        let subviewsmap: GObject;\r\n        if (Array.isArray(val)) {\r\n            let ptrsArr = Pointers.fromArr(val);\r\n            subviewsmap = U.objectFromArrayValues(ptrsArr, 1.5);\r\n        } else subviewsmap = val || {};\r\n        SetFieldAction.new(c.data, \"subViews\", subviewsmap, '', true);\r\n        return true; }\r\n\r\n\r\n    setSubViewScore!: (subview: Pack1<LViewElement>, boost?: number | null) => void;\r\n    __info_of__setSubViewScore: Info = {isGlobal: true, hidden: true, type: \"function(ViewElement, numeric_score): void\", txt:<div>Adds, updates or unsets (if boost = null) a subview with his score.</div>}\r\n\r\n    // adds, updates or unsets (if boost = null) a subview with his score.\r\n    get_setSubViewScore(c: Context): ((subview: Pack1<LViewElement>, boost?: number | null) => void) {\r\n        return (subview: Pack1<LViewElement>, boost: number| null = 1.5 ) => {\r\n            let subviews = {...c.data.subViews};\r\n            let ptr = Pointers.from(subview) as Pointer<DViewElement>;\r\n            if (boost !== null) { // set mode\r\n                if (subviews[ptr] === boost) return;\r\n                subviews[ptr] = boost;\r\n            } else {// set mode\r\n                if (subviews[ptr] === undefined) return;\r\n                delete subviews[ptr];\r\n            }\r\n            SetFieldAction.new(c.data, 'subViews',  subviews, '', true);\r\n        };\r\n    }\r\n\r\n\r\n    allSubViews!: LViewElement[];\r\n    __info_of__allSubViews: Info = {type: \"ViewElement[]\", txt: \"recursively get this.subViews.\"}\r\n    get_allSubViews(c: Context): this[\"allSubViews\"] {\r\n        delete c.data.subViews.clonedCounter;\r\n        let arr: Pointer<DViewElement>[] = Object.keys(c.data.subViews);\r\n        let nextarr: Pointer<DViewElement>[] = [];\r\n        let idmap: Dictionary<Pointer, DViewElement> = {};\r\n        let s: DState = store.getState();\r\n        let dview: DViewElement;\r\n        while (arr.length) {\r\n            for (let vid of arr) {\r\n                if (idmap[vid]) continue;\r\n                dview = DPointerTargetable.fromPointer(vid, s);\r\n                if (!dview) continue;\r\n                idmap[vid] = dview;\r\n                U.arrayMergeInPlace(nextarr, Object.keys(dview.subViews));\r\n            }\r\n            arr = nextarr;\r\n            nextarr = [];\r\n        }\r\n        return LPointerTargetable.fromD(Object.values(idmap));\r\n    }\r\n    set_allSubViews(val: this[\"allSubViews\"], c: Context): boolean { return this.wrongAccessMessage(\"cannot call set_allSubViews, it is a derived attribute\"); }\r\n\r\n\r\n    defaultVSize!: GraphSize;\r\n    __info_of__defaultVSize: Info = {isNode:true, type: \"GraphSize\", label:\"default size\", txt: 'starting size of the node'}\r\n\r\n\r\n    adaptWidth!: boolean;\r\n    __info_of__adaptWidth: Info = {isNode:true, type: ShortAttribETypes.EBoolean, label:\"adapt width\",\r\n        txt: 'Whether the element should expand his width to accomodate his own contents.'}\r\n\r\n    adaptHeight!: boolean;\r\n    __info_of__adaptHeight: Info = {isNode:true, type: ShortAttribETypes.EBoolean, label:\"adapt height\",\r\n        txt: 'Whether the element should expand his height to accomodate his own contents.'}\r\n\r\n    draggable!: boolean;\r\n    __info_of__draggable: Info = {isNode: true, type: ShortAttribETypes.EBoolean, txt: 'if the element can be dragged'}\r\n\r\n    resizable!: boolean;\r\n    __info_of__resizable: Info = {isNode: true, type: ShortAttribETypes.EBoolean, txt: 'if the element can be resized'}\r\n\r\n    oclCondition!: string; // ocl selector\r\n    __info_of__oclCondition: Info = {isGlobal: true, hidden:true, label:\"OCL apply condition\", type: \"text\", // TODO: what's the difference with this.query?\r\n        txt: 'OCL Query selector to determine which nodes or model elements should apply this view'}\r\n    protected get_oclCondition(context: Context): this['oclCondition'] {\r\n        return context.data.oclCondition;\r\n    }\r\n    set_oclCondition(val: string, context: Context): boolean {\r\n        val = (val || '').trim();\r\n        if (val === context.data.oclCondition) return true;\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(context.data, 'oclCondition', val, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_ocl', context.data.id, '+=', false); // it is pointer, but for transient stuff there is no need to set pointedby's\r\n        })\r\n        return true;\r\n    }\r\n\r\n    jsCondition!: string; // js selector\r\n    __info_of__jsCondition: Info = {isGlobal: true, hidden:true, label:\"js apply condition\", type: \"text\",\r\n        txt: 'js Query selector to determine which nodes or model elements should apply this view'}\r\n    protected get_jsCondition(context: Context): this['jsCondition'] {\r\n        return context.data.jsCondition;\r\n    }\r\n    set_jsCondition(val: string, context: Context): boolean {\r\n        val = (val || '').trim();\r\n        if (val === context.data.jsCondition) return true;\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(context.data, 'jsCondition', val, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_jsCondition', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    // todo: how about allowing a view to be part in multiple vp's? so this reference would be an array or removed, and you navigate only from vp to v.\r\n    viewpoint!: LViewPoint;\r\n    __info_of__viewpoint: Info = {hidden: true, type: LViewPoint.cname, txt: <div>The collection of views containing this one, useful to activate multiple views at once.</div>}\r\n\r\n    display!: 'block'|'contents';\r\n    __info_of__display: Info = {obsolete: true, isNode: true, type: ShortAttribETypes.EString,\r\n        txt: 'complete css injection instead'}\r\n\r\n    onDragStart!: string;\r\n    __info_of__onDragStart: Info = {isNode: true, type: \"Function():void\",\r\n        txt: 'Custom event activated when a node begins being dragged.'}\r\n    protected get_onDragStart(context: Context): this['onDragStart'] {\r\n        return context.data.onDragStart;\r\n    }\r\n    protected set_onDragStart(val: this['onDragStart'], context: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(context.data, 'onDragStart', val, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_onDragStart', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    onDragEnd!: string;\r\n    __info_of__onDragEnd: Info = {isNode: true, type: \"Function():void\",\r\n        txt: 'Custom event activated when a node finishes being dragged.'}\r\n    protected get_onDragEnd(context: Context): this['onDragEnd'] {\r\n        return context.data.onDragEnd;\r\n    }\r\n    protected set_onDragEnd(val: this['onDragEnd'], context: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(context.data, 'onDragEnd', val, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_onDragEnd', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    whileDragging!: string;\r\n    __info_of__whileDragging: Info = {isNode: true, type: \"Function():void\",\r\n        txt: 'Custom event activated multiple times when mouse is moved while a node is being dragged.'}\r\n    protected get_whileDragging(context: Context): this['whileDragging'] {\r\n        return context.data.whileDragging;\r\n    }\r\n    protected set_whileDragging(val: this['whileDragging'], context: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(context.data, 'whileDragging', val, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_whileDragging', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    onResizeStart!: string;\r\n    __info_of__onResizeStart: Info = {isNode: true, type: \"Function():void\",\r\n    txt: 'Custom event activated when a node begins being resized.'}\r\n    protected get_onResizeStart(context: Context): this['onResizeStart'] {\r\n        return context.data.onResizeStart;\r\n    }\r\n    protected set_onResizeStart(val: this['onResizeStart'], context: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(context.data, 'onResizeStart', val, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_onResizeStart', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    onResizeEnd!: string;\r\n    __info_of__onResizeEnd: Info = {isNode: true, type: \"Function():void\",\r\n        txt: 'Custom event activated when a node finishes being resized.'}\r\n    protected get_onResizeEnd(context: Context): this['onResizeEnd'] {\r\n        return context.data.onResizeEnd;\r\n    }\r\n    protected set_onResizeEnd(val: this['onResizeEnd'], context: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(context.data, 'onResizeEnd', val, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_onResizeEnd', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    whileResizing!: string;\r\n    __info_of__whileResizing: Info = {isNode: true, type: \"Function():void\",\r\n        txt: 'Custom event activated multiple times when mouse is moved while a node is being resized.'}\r\n    protected get_whileResizing(context: Context): this['whileResizing'] {\r\n        return context.data.whileResizing;\r\n    }\r\n    protected set_whileResizing(val: this['whileResizing'], context: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(context.data, 'whileResizing', val, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_whileResizing', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    onRotationStart!: string;\r\n    __info_of__onRotationStart: Info = {isNode: true, type: \"Function():void\",\r\n    txt: 'Custom event activated when a node begins being rotated.'}\r\n    protected get_onRotationStart(context: Context): this['onRotationStart'] {\r\n        return context.data.onRotationStart;\r\n    }\r\n    protected set_onRotationStart(val: this['onRotationStart'], context: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(context.data, 'onRotationStart', val, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_onRotationStart', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    onRotationEnd!: string;\r\n    __info_of__onRotationEnd: Info = {isNode: true, type: \"Function():void\",\r\n        txt: 'Custom event activated when a node finishes being rotated.'}\r\n    protected get_onRotationEnd(context: Context): this['onRotationEnd'] {\r\n        return context.data.onRotationEnd;\r\n    }\r\n    protected set_onRotationEnd(val: this['onRotationEnd'], context: Context): boolean {\r\n        TRANSACTION(()=>{\r\n        SetFieldAction.new(context.data, 'onRotationEnd', val, '', false);\r\n        SetRootFieldAction.new('VIEWS_RECOMPILE_onRotationEnd', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    whileRotating!: string;\r\n    __info_of__whileRotating: Info = {isNode: true, type: \"Function():void\",\r\n        txt: 'Custom event activated multiple times when mouse is moved while a node is being rotated.'}\r\n    protected get_whileRotating(context: Context): this['whileRotating'] {\r\n        return context.data.whileRotating;\r\n    }\r\n    protected set_whileRotating(val: this['whileRotating'], context: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(context.data, 'whileRotating', val, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_whileRotating', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    onDataUpdate!: string;\r\n    __info_of__onDataUpdate: Info = {isNode: true, type: \"Function():void\",\r\n        txt: 'Custom event activated every time a property of his model, node or view is changed while the element is visibly rendered in a graph.\\n<br>Caution! this might cause loops.'}\r\n    protected get_onDataUpdate(context: Context): this['onDataUpdate'] {\r\n        return context.data.onDataUpdate;\r\n    }\r\n    protected set_onDataUpdate(val: this['onDataUpdate'], context: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(context.data, 'onDataUpdate', val, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_onDataUpdate', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    events!: Dictionary<DocString<\"functionName\">, ((...a:any)=>any)>;\r\n    event!:  Dictionary<DocString<\"functionName\">, ((...a:any)=>any)>;\r\n    __info_of__events: Info = {todo: true, isGlobal: true, type: \"Dictionary<name, function>\",\r\n        txt: <div>Custom events callable through JSX user interaction<br/>eg: &lt;div onClick=&#123;()=&gt;view.eventname()&#125; /&gt;</div>}\r\n    __info_of__event: Info = {todo: true, isGlobal: true, type: \"Dictionary<name, function>\", txt: 'Alias for this.events'}\r\n    protected get_event(c: Context): this['events'] { return this.get_events(c); }\r\n    protected get_events(c: Context): this['events'] {\r\n        Log.exx(\"use node.events instead\", U.getStackTrace());\r\n        return {};\r\n        // return transientProperties.view[c.data.id]?.events || {};\r\n    }\r\n    protected set_events(val: DViewElement[\"events\"], context: Context): boolean {\r\n        const addUD = true;\r\n        TRANSACTION(()=> {\r\n            SetFieldAction.new(context.data, 'events', val, '+=', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_events', {\r\n                vid: context.data.id,\r\n                keys: Object.keys(val)\r\n            }, '+=', false);\r\n            let udstr = context.data.usageDeclarations;\r\n            if (!addUD || !udstr) return;\r\n            let delta = U.objectDelta(context.data.events, val, false);\r\n            for (let key in delta) {\r\n                let v = val[key];\r\n                let autogenstr = 'ret.' + key + ' = node.events.'+key+'; // @autogenerated, do not edit\\n';\r\n                if (!v) udstr = udstr.split(autogenstr).join('');\r\n                else {\r\n                    if (!context.data.events[key]) { // insert\r\n                        let findstr = '// ** declarations here ** //\\n';\r\n                        let insertat = udstr.indexOf(findstr);\r\n                        if (insertat === -1) continue; // malformed ud, will skip\r\n                        insertat += findstr.length;\r\n                        udstr = udstr.substring(0, insertat) + autogenstr + udstr.substring(insertat);\r\n                    } else {\r\n                        // just updated func body, no name changed, no need to update UD.\r\n                    }\r\n                }\r\n            }\r\n            if (udstr === context.data.usageDeclarations) return;\r\n            SetFieldAction.new(context.data, 'usageDeclarations', udstr, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_usageDeclarations', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    constraints!: GObject<\"todo, used in Vertex. they are triggered by events (view.onDragStart....) and can bound the size of the vertex\">[];\r\n    __info_of__constraints: Info = {todo: true, isNode: true, type: \"Function():void\",\r\n        txt: 'not supported yet'}\r\n\r\n\r\n    bendingMode!: EdgeBendingMode;\r\n    __info_of__bendingMode: Info = {isEdge: true, enum: EdgeBendingMode, type: '\"L\" | \"Q\" | \"C\" | \"T\" | \"S\" | \"A\" | \"QT\" | \"CS\"',\r\n        label:\"path mode\",\r\n        txt: <><div>How Svg path should use the EdgePoints to bend his shape{/*<a href={\"https://css-tricks.com/svg-path-syntax-illustrated-guide/\"}>to bend his shape</a>*/}</div></>}\r\n\r\n    edgeGapMode!: EdgeGapMode;\r\n    __info_of__edgeGapMode: Info = {isEdge: true, enum: EdgeGapMode, type: '\"gap\" | \"average\" | \"autoFill\" | \"lineFill\" | \"arcFill\"',\r\n        label:\"gap mode\",\r\n        txt: <><div>How the segment should treat the EdgePoint interruptions.<br/>\"gap\" leaves an empty space to not overlap the EdgePoint,\r\n            <br/>\"linefill\" makes the edge stop at the EdgePoint borders, but then connects the gap with a line.</div></>}\r\n\r\n    /*\r\n    bindVertexSizeToView!: boolean;\r\n    __info_of__bindVertexSizeToView: Info = {isNode:true, type:ShortAttribETypes.EBoolean, label:\"bind sizes to view\",\r\n        txt: <div>Store the vertex size inside the view instead of inside the vertex.\r\n            <br/>This causes the vertex to have different positions according to the view currently appied to it.</div>}*/\r\n    storeSize!: boolean;\r\n    __info_of__storeSize: Info = {isNode: true, type: ShortAttribETypes.EBoolean, label:\"bind sizes to view\",\r\n        txt: \"Active: the node position depends from the view currently displayed.Inactive: it depends from the graph.\"}\r\n\r\n    lazySizeUpdate!: boolean;\r\n    __info_of__lazySizeUpdate: Info = {isNode: true, type: ShortAttribETypes.EBoolean, txt: <div>If true updates the node position only when the drag action is finished. (best performance)</div>}\r\n\r\n    edgeStartOffset!: GraphPoint;\r\n    __info_of__edgeStartOffset: Info = {isEdge: true, type: GraphPoint.cname, label:\"start offset\",\r\n        txt: \"Location where outgoing edges should start their path, relative to top-upper corner of the element.\"}\r\n\r\n    edgeEndOffset!: GraphPoint;\r\n    __info_of__edgeEndOffset: Info = {isEdge: true,  type: GraphPoint.cname, label:\"end offset\",\r\n        txt: 'Same as this.edgeStartOffset'}\r\n\r\n\r\n    edgeStartOffset_isPercentage!: boolean;\r\n    __info_of__edgeStartOffset_isPercentage: Info = {isEdge: true, type:ShortAttribETypes.EBoolean, label:\"start offset is a %\",\r\n        txt: <div>Whether edgeStartOffset is an absolute value or a percentage.<br/>(eg: 50% of element width, vs 50 pixels flat).</div>}\r\n\r\n    edgeEndOffset_isPercentage!: boolean;\r\n    __info_of__edgeEndOffset_isPercentage: Info = {isEdge: true, type:ShortAttribETypes.EBoolean, label:\"end offset is a %\",\r\n        txt: <div>Whether edgeStartOffset is an absolute value or a percentage.<br/>(eg: 50% of element width, vs 50 pixels flat).</div>}\r\n\r\n\r\n    edgeStartStopAtBoundaries!: boolean;\r\n    __info_of__edgeStartStopAtBoundaries: Info = {isEdge: true, type:ShortAttribETypes.EBoolean, label:\"start cannot cross boundaries\",\r\n        txt: <div>Whether outgoing edges should cross the node boundaries overlapping the node\\'s html or stop at them.<br/>Edge arrows might enter the node if this is on.</div>}\r\n\r\n    edgeEndStopAtBoundaries!: boolean;\r\n    __info_of__edgeEndStopAtBoundaries: Info = {isEdge: true, type: ShortAttribETypes.EBoolean, label:\"end cannot cross boundaries\",\r\n        txt: <div>Whether incoming edges should cross the node boundaries overlapping the node\\'s html or stop at them.<br/>Edge arrows might enter the node if this is on.</div>}\r\n\r\n\r\n    edgePointCoordMode!: CoordinateMode;\r\n    __info_of__edgePointCoordMode: Info = {isEdgePoint: true, type: \"CoordinateMode\", enum: CoordinateMode, label:\"coordinate mode\",\r\n        txt:<div>Store coordinates as absolute coordinates or relative to start/end nodes.</div>}\r\n    set_edgePointCoordMode(val: CoordinateMode, c: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            setTimeout(()=>{ // needs to be done after coordinatemode change is applied\r\n                let s: DState = store.getState();\r\n                for (let nid in transientProperties.node) {\r\n                    let tn = transientProperties.node[nid];\r\n                    if (!tn || tn.mainView?.id !== c.data.id) continue;\r\n                    let lnode: LEdgePoint = LPointerTargetable.fromPointer(nid, s);\r\n                    let triggerCoordinateModeChange = lnode as any;\r\n                    triggerCoordinateModeChange.size = lnode.size;\r\n                }\r\n            }, 100);\r\n            SetFieldAction.new(c.data, 'edgePointCoordMode', val, '', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    edgeHeadSize!: GraphPoint;\r\n    __info_of__edgeHeadSize: Info = {isEdge: true, type:GraphPoint.cname, label:\"head decorator size\", txt:<div>Size of the edge head decorator if present.</div>}\r\n\r\n    edgeTailSize!: GraphPoint;\r\n    __info_of__edgeTailSize: Info = {isEdge: true, type:GraphPoint.cname, label:\"tail decorator size\", txt:<div>Size of the tail head decorator if present.</div>}\r\n\r\n    protected size!: Dictionary<Pointer<DModelElement> | Pointer<DGraphElement>, GraphSize>; // use getSize, updateSize;\r\n    __info_of__size: Info = {isNode: true, hidden:true, type: ShortAttribETypes.EInt,\r\n        txt:<div>Do not use directly, contains all the sizes stored in this view. use getSize, updateSize instead.</div>}\r\n\r\n\r\n    __info_of__updateSize: Info = {isNode:true, hidden:true, type:\"Function(Pointer<GraphElement | ModelElement>, GraphSize) => GraphSize\",\r\n        txt:<div>Updates the size stored in this view for target element.<br/>@returns: the delta of the change between old value and new value.</div>}\r\n    __info_of__getSize: Info = {isNode:true, hidden:true, type:\"Function(Pointer<GraphElement | ModelElement>) => GraphSize\",\r\n        txt:<div>Gets the size stored in this view for target element.</div>}\r\n\r\n    // public _parsedConstants!: GObject;\r\n    // public get__parsedConstants(c: Context): this['_parsedConstants'] { return c.data._parsedConstants || {}; }\r\n\r\n    public get_constants(c: Context): this['constants'] {\r\n        return c.data.constants;\r\n    }\r\n\r\n\r\n    public static parseConstants(funcCode?: string): GObject | undefined {\r\n        if (!funcCode) return {};\r\n        let parsedConstants: GObject = {};\r\n        let context: GObject = {__param: parsedConstants};\r\n        context.__proto__ = windoww.defaultContext;\r\n        try{\r\n            let parsedFunc = U.parseFunctionWithContextAndScope(funcCode, context, context, ['ret']);\r\n            parsedFunc(context, parsedConstants);\r\n            // U.evalInContextAndScopeNew( \"(\"+funcCode+\")(this.__param)\", context, true, false, false);\r\n        } catch (e: any) {\r\n            Log.ee(\"Attempted to save an invalid view.constant setup. Cause:\\n\" + e.message.split(\"\\n\")[0], e)\r\n            return undefined;\r\n        }\r\n        return parsedConstants;\r\n    }\r\n\r\n    public set_constants(value: this['constants'], c: Context): boolean {\r\n        if (value === c.data.constants) return true;\r\n        TRANSACTION(()=> {\r\n            SetFieldAction.new(c.data.id, 'constants', value, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_constants', c.data.id, '+=', false);\r\n            SetFieldAction.new(c.data.id, \"css_MUST_RECOMPILE\", true, '', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    public get_preRenderFunc(c: Context): this['preRenderFunc'] {\r\n        return c.data.preRenderFunc;\r\n    }\r\n    public set_preRenderFunc(value: this['preRenderFunc'], c: Context): boolean {\r\n        const _value = value ? value : '() => {}';\r\n        return SetFieldAction.new(c.data.id, 'preRenderFunc', _value, '', false);\r\n    }\r\n\r\n    public get_edgeHeadSize(c: Context): this[\"edgeHeadSize\"] { return new GraphPoint(c.data.edgeHeadSize.x, c.data.edgeHeadSize.y); }\r\n    public get_edgeTailSize(c: Context): this[\"edgeTailSize\"] { return new GraphPoint(c.data.edgeTailSize.x, c.data.edgeTailSize.y); }\r\n    public set_edgeHeadSize(v: Partial<this[\"edgeHeadSize\"]>, c: Context): boolean {\r\n        let s = c.data.edgeHeadSize || new GraphPoint(0, 0);\r\n        if (!(\"x\" in v)) v.x = s.x;\r\n        if (!(\"y\" in v)) v.y = s.y;\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(c.data.id, \"css_MUST_RECOMPILE\", true, '', false);\r\n            SetFieldAction.new(c.data.id, \"edgeHeadSize\", v as GraphPoint, '', false);\r\n        });\r\n        return true; }\r\n    public set_edgeTailSize(v: Partial<this[\"edgeTailSize\"]>, c: Context): boolean {\r\n        let s = c.data.edgeTailSize || new GraphPoint(0, 0);\r\n        if (!(\"x\" in v)) v.x = s.x;\r\n        if (!(\"y\" in v)) v.y = s.y;\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(c.data.id, \"css_MUST_RECOMPILE\", true, '', false);\r\n            SetFieldAction.new(c.data.id, \"edgeTailSize\", v as GraphPoint, '', false);\r\n        });\r\n        return true;\r\n    }\r\n\r\n    fatherChain!: LViewElement[];\r\n    __info_of__fatherChain: Info = {type: 'LViewElement[]', txt: 'a list of all father elements sorted from the closest to farthest'};\r\n    public get_fatherChain(c: Context): this[\"fatherChain\"] {\r\n        let current = this.get_father(c);\r\n        if (!current) return [] as any;\r\n        let ret: LViewElement[] = [];\r\n        while (current) {\r\n            ret.push(current);\r\n            current = current.father;\r\n        }\r\n        return ret;\r\n    }\r\n    father?: LViewElement;\r\n    public get_father(c: Context): this[\"father\"] {\r\n        return (LViewPoint.fromPointer(c.data.father as Pointer<DViewPoint>));\r\n    }\r\n    public get_viewpoint(c: Context): this[\"viewpoint\"] {\r\n        let p = c.data.father;\r\n        if (!p) return LPointerTargetable.fromD(c.data);\r\n        let curr: LViewElement = LPointerTargetable.fromPointer(p);\r\n        while (curr) {\r\n            let prev = curr.father;\r\n            if (!prev) return curr;\r\n            curr = prev;\r\n        }\r\n        return undefined as any;\r\n    }\r\n    // public set_subViews(v: Pointer<DViewPoint>[], context: Context): boolean { return this.cannotSet('subViews, call set_viewpoint on the sub-elements instead.'); }\r\n\r\n    // WARNING!! if there are mass vp assignments, preserveOrder=true will cause a vp to \"lose\" subviews and keep only the last assigned.\r\n    public set_viewpoint(v: Pointer<DViewPoint>, context: Context, manualDview?: DViewElement, preserveOrder: boolean = false): boolean {\r\n        Log.exDevv('setViewpoint() should not be called, call view.setFather(viewpoint) instead');\r\n        return true;\r\n    }\r\n    public set_father(v: Pointer<DViewPoint>, context: Context, manualDview?: DViewElement, preserveOrder: boolean = false): boolean {\r\n        let ret = false;\r\n        let pvid: Pointer<DViewPoint> = v && Pointers.from(v);\r\n        const data =  (manualDview || context.data);\r\n        let id = data.id;\r\n        let oldpvid = data.father;\r\n        if (pvid === oldpvid) return true;\r\n        let dfather: DViewElement = (v && typeof v === \"object\") ? ((v as any).__raw || v) as any : DPointerTargetable.fromPointer(pvid);\r\n\r\n        TRANSACTION(()=>{\r\n            ret = SetFieldAction.new(id, \"father\", pvid, '', true);\r\n            if (data.viewpoint !== dfather.viewpoint) SetFieldAction.new(id, \"viewpoint\", dfather.viewpoint, '', true);\r\n            if (oldpvid) {\r\n                let subViews = {...DPointerTargetable.fromPointer(oldpvid).subViews};\r\n                delete subViews[id];\r\n                SetFieldAction.new(oldpvid, \"subViews\", subViews, '', true);\r\n            }\r\n            if (pvid) {\r\n                let name = data.name;\r\n                let copyPos = name.indexOf(\"Copy\");\r\n                let oldSubViews = DPointerTargetable.fromPointer(pvid).subViews;\r\n                let insertBefore: string = '';\r\n                let subViews: GObject = {};\r\n                if (copyPos) {\r\n                    let copiedFromName: string = copyPos ? name.substring(0, copyPos).trim() : '';\r\n                    if (copiedFromName in oldSubViews) insertBefore = copiedFromName;\r\n                    else {\r\n                        for (let key in oldSubViews) if (key.indexOf(copiedFromName) === 0) { insertBefore = key; break; }\r\n                    }\r\n                }\r\n\r\n\r\n                // WARNING!! if there are mass vp assignments, this will cause a vp to \"lose\" subviews and keep only the last assigned.\r\n                if (preserveOrder && insertBefore) {\r\n                    subViews = {};\r\n                    for (let key in oldSubViews) {\r\n                        subViews[key] = oldSubViews[key];\r\n                        // just to reinsert subviews **in order** so Object.keys() fits the new subview near the cloned one.\r\n                        if (key === insertBefore) subViews[id] = subViews[insertBefore];\r\n                    }\r\n                } else { subViews = {...oldSubViews}; subViews[id] = 1.5; }\r\n                subViews[id] = insertBefore ? subViews[insertBefore] : 1.5;\r\n                SetFieldAction.new(pvid, \"subViews\", subViews, '+=', true);\r\n            }\r\n        })\r\n        return ret;\r\n    }\r\n\r\n\r\n    public get_subViews(context: Context): LViewElement[]{\r\n        let subViewsPointers = context.data.subViews;\r\n        let subViews: LViewElement[] = [];\r\n        for (let pointer in subViewsPointers) {\r\n            let item: LViewElement = MyProxyHandler.wrap(pointer);\r\n            if (item !== undefined) subViews.push(item);\r\n        }\r\n        return subViews;\r\n    }\r\n\r\n    // returns the delta of change\r\n    public updateSize(id: Pointer<DModelElement> | Pointer<DGraphElement>, size: Partial<GraphSize>): boolean { return this.wrongAccessMessage(\"updateSize\"); }\r\n    public get_updateSize(context: Context): this[\"updateSize\"] {\r\n        return (id: Pointer<DModelElement> | Pointer<DGraphElement>, size0: Partial<GraphSize>) => {\r\n            let size: EPSize = size0 as any;\r\n            let vp = context.proxyObject.viewpoint;\r\n            if (!context.data.storeSize) {\r\n                if (vp?.storeSize) return vp.updateSize(id, size);\r\n                return false;\r\n            }\r\n            let vsize: EPSize = (context.data.size[id] || vp?.__raw.size[id]) as EPSize || {} as any;\r\n            let newSize: EPSize = new GraphSize() as EPSize;\r\n            console.log({vsize, newSize, size, vp, d:context.data})\r\n            if (size.currentCoordType === vsize?.currentCoordType) { // if samecoord system mix them.\r\n                newSize.x = size?.x !== undefined ? size.x : vsize.x;\r\n                newSize.y = size?.y !== undefined ? size.y : vsize.y;\r\n            } else if (size.x !== undefined && size.y !== undefined) { // if different coord system pick all of size\r\n                newSize.x = size.x;\r\n                newSize.y = size.y;\r\n                newSize.currentCoordType = size.currentCoordType || CoordinateMode.absolute;\r\n            } else if (vsize.x !== undefined && vsize.y !== undefined) { // or all of vsize if size was invalid\r\n                newSize.x = vsize.x;\r\n                newSize.y = vsize.y;\r\n                newSize.currentCoordType = vsize.currentCoordType || CoordinateMode.absolute;\r\n            }\r\n            let defaultsize = context.data.defaultVSize || vp?.__raw.defaultVSize;\r\n            if (newSize.x === undefined || newSize.y === undefined) { // only if pos is invalid, i take defaultvsize and force to use coord absolute.\r\n                newSize = new GraphSize().clone(defaultsize) as EPSize;\r\n                newSize.currentCoordType = CoordinateMode.absolute;\r\n            }\r\n            // w and h are always absolute so they can be mixed to whathever coordinate mode indipendently from the rest.\r\n            newSize.w = size?.w !== undefined ? size.w : vsize.w;\r\n            newSize.h = size?.h !== undefined ? size.h : vsize.h;\r\n            if (newSize.h === undefined) newSize.h = defaultsize.h || 10;\r\n            if (newSize.w === undefined) newSize.w = defaultsize.w || 10;\r\n\r\n            if (!newSize.equals(vsize)) SetFieldAction.new(context.data.id, \"size.\" + id as any, newSize);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    public get_defaultVSize(context: Context): this[\"defaultVSize\"]{ return context.data.defaultVSize; }\r\n    public getSize(id: Pointer<DModelElement> | Pointer<DGraphElement>): GraphSize | undefined{ return this.wrongAccessMessage(\"getSize\"); }\r\n    public get_getSize(context: Context): ((...a:Parameters<this[\"getSize\"]>)=>ReturnType<LViewElement[\"getSize\"]>) {\r\n        function impl_getSize(id: Pointer<DModelElement> | Pointer<DGraphElement>): ReturnType<LViewElement[\"getSize\"]> {\r\n            if (typeof id === \"object\") id = (id as any).id;\r\n            let view = context.data;\r\n            let ret: GraphSize;\r\n            if (view.storeSize){\r\n                ret = view.size[id];\r\n                if (ret) return ret;\r\n            }\r\n            let vp = context.proxyObject.viewpoint;\r\n            if (vp && view.id !== vp.id && vp.storeSize){\r\n                ret = vp.size[id];\r\n                if (ret) return ret; }\r\n            return undefined;\r\n        }\r\n\r\n        return impl_getSize; }\r\n\r\n    set_generic_entry(context: Context, key: keyof DViewElement, val: any): boolean {\r\n        console.log('set_generic_entry', {context, key, val});\r\n        SetFieldAction.new(context.data, key, val);\r\n        return true;\r\n    }\r\n\r\n    children!: LViewElement[];\r\n    get_children(context: Context): this['children'] { return this.get_subViews(context); }\r\n\r\n\r\n    get_lazySizeUpdate(context: Context): D[\"lazySizeUpdate\"] { return Debug.lightMode || context.data.lazySizeUpdate; }\r\n    set_lazySizeUpdate(val: D[\"lazySizeUpdate\"], context: Context): boolean {\r\n        return Debug.lightMode || this.set_generic_entry(context, 'lazySizeUpdate', val);\r\n    }\r\n\r\n    get_bendingMode(context: Context): D[\"bendingMode\"] { return context.data.bendingMode; }\r\n    set_bendingMode(val: D[\"bendingMode\"], context: Context): boolean {\r\n        return this.set_generic_entry(context, 'bendingMode', val);\r\n    }\r\n\r\n    set_appliableTo(val: this[\"appliableTo\"], c: Context): boolean { // appliableTo >= forcenodetype\r\n        if (!val) val = 'Any';\r\n        let forceNodeType: string = c.data.forceNodeType as string;\r\n        if (forceNodeType !== val) switch(val) {\r\n            // case \"Any\": break;\r\n            default: forceNodeType = val;\r\n        }\r\n\r\n        console.log(\"set_appliableTo\", {forceNodeType, val});\r\n        BEGIN()\r\n        if (forceNodeType !== c.data.forceNodeType) SetFieldAction.new(c.data, \"forceNodeType\", forceNodeType, '', false);\r\n        SetFieldAction.new(c.data, \"appliableTo\", val, '', false);\r\n        END();\r\n        return true;\r\n    }\r\n    set_forceNodeType(val: this[\"forceNodeType\"], c: Context): boolean {\r\n        if (!val) val = 'Any';\r\n        /*let appliableTo: string = c.data.appliableTo as string;\r\n        if (appliableTo !== val) switch (appliableTo){\r\n            case undefined: case 'Any': break;\r\n            //case 'GraphVertex': if ((appliableTo as any) !== 'Graph' && (appliableTo as any) !== 'Vertex') appliableTo = val; break;\r\n            default: appliableTo = val; break;\r\n        }*/\r\n        BEGIN()\r\n        // if (appliableTo !== c.data.appliableTo) SetFieldAction.new(c.data, \"appliableTo\", appliableTo, '', false);\r\n        SetFieldAction.new(c.data, \"forceNodeType\", val, '', false);\r\n        END();\r\n        return true;\r\n    }\r\n    get_appliableToClasses(context: Context): this[\"appliableToClasses\"] { return context.data.appliableToClasses || []; }\r\n    set_appliableToClasses(val: this[\"appliableToClasses\"], context: Context): boolean {\r\n        if (!val) val = [];\r\n        else if (!Array.isArray(val)) val = [val];\r\n        val.sort();\r\n        let hasChanged: boolean;\r\n        if (val.length === context.data.appliableToClasses?.length) {\r\n            hasChanged = false;\r\n            for (let i = 0; i < val.length; i++) if (val[i] !== context.data.appliableToClasses[i]) { hasChanged = true; break; }\r\n        } else hasChanged = true;\r\n\r\n        if (!hasChanged) return true;\r\n        TRANSACTION(()=>{\r\n            this.set_generic_entry(context, \"appliableToClasses\", val);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_preconditions', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    set_defaultVSize(val: GraphSize, c: Context): boolean{\r\n        if (!val || typeof val !== \"object\") return true;\r\n        let x = val.x ?? +val.x;\r\n        let y = val.y ?? +val.y;\r\n        let w = val.w ?? +val.w;\r\n        let h = val.h ?? +val.h;\r\n        if (isNaN(x)) x = c.data.defaultVSize.x;\r\n        if (isNaN(y)) y = c.data.defaultVSize.y;\r\n        if (isNaN(w)) w = c.data.defaultVSize.w;\r\n        if (isNaN(h)) h = c.data.defaultVSize.h;\r\n        if (x === c.data.defaultVSize.x && y === c.data.defaultVSize.y && w === c.data.defaultVSize.w && h === c.data.defaultVSize.h) return true;\r\n        SetFieldAction.new(c.data, 'defaultVSize', {x, y, w, h} as any, '', false);\r\n        return true\r\n    }\r\n\r\n\r\n    public duplicate(deep: boolean = true, new_vp?: DuplicateVPChange): this {\r\n        return this.wrongAccessMessage( (this.constructor as typeof RuntimeAccessibleClass).cname + \"duplicate()\"); }\r\n    protected get_duplicate(c: Context): ((deep?: boolean, new_vp?: DuplicateVPChange) => LViewElement) {\r\n        return (deep: boolean = false, new_vp0?: DuplicateVPChange) => {\r\n            console.log(\"DViewelement.duplicate\", {cn: c.data.className, n:c.data.name, deep, new_vp0});\r\n            let lview: LViewElement = undefined as any;\r\n            let state: DState = store.getState();\r\n            TRANSACTION( () => {\r\n                let pvid: Pointer<DViewPoint> = c.data.viewpoint as Pointer<DViewPoint>;\r\n                const dclone: DViewElement = c.data.className === 'DViewPoint' ?\r\n                    DViewPoint.newVP(`${c.data.name} Copy`) :\r\n                    DViewElement.new2(`${c.data.name} Copy`, '', DPointerTargetable.from(c.data.father as any),\r\n                        undefined, true);\r\n                // todo: test if this have correct parent, vp and pointedby\r\n                lview = LPointerTargetable.fromD(dclone);\r\n                const new_vp: DuplicateVPChange = new_vp0 || {pvid};\r\n                // || {pvid,  score: (DPointerTargetable.from(pvid, state) as DViewElement).subViews[c.data.id]}\r\n\r\n                for (let key in c.data) {\r\n                    switch(key) {\r\n                        case 'subViews':\r\n                            // duplicate childrens only if deep\r\n                            if (!deep) break;\r\n                            // let subviews: Dictionary<Pointer, number> = {}\r\n                            for (const oldvid in c.data.subViews) {\r\n                                const oldScore = c.data.subViews[oldvid];\r\n                                (LPointerTargetable.fromPointer(oldvid, state) as LViewElement).duplicate(deep, {pvid:dclone.id/*, score:oldScore*/});\r\n                                // then everything is set inside case 'viewpoint' of subviews cloning\r\n                            }\r\n                            //lview.subViews = subviews as any;\r\n                            break;\r\n                        case 'father':\r\n                            this.set_father(new_vp.pvid, undefined as any, dclone, !deep);\r\n                            break;\r\n                        case 'viewpoint':\r\n                            // update parent view\r\n                            /*\r\n                            let subviews: Dictionary<Pointer, number> = {};\r\n                            subviews[dclone.id] = new_vp.score;\r\n                            SetFieldAction.new(new_vp.pvid, 'subViews', subviews, '+=', true);\r\n                            SetFieldAction.new(dclone.id, 'viewpoint', new_vp.pvid, '+=', true);*/\r\n                            // insert in-place right after the cloned view, with old score.\r\n                            //this.set_viewpoint(new_vp.pvid, undefined as any, dclone, !deep);\r\n                            // SetFieldAction.new(dclone.id, 'father', new_vp.vpid, '+=', true);\r\n                            break;\r\n                        case '':\r\n                        case 'id':\r\n                        case 'name':\r\n                        case 'className':\r\n                        case 'pointedBy':\r\n                        case '_storePath':\r\n                        case '_subMaps':\r\n                        case 'clonedCounter': break;\r\n                        case 'css_MUST_RECOMPILE': break;\r\n\r\n                        case 'isValidation':\r\n                            console.log(\"duplicate \" + c.data.name + \" set isvalidation\", {data:c.data, iv:c.data.isValidation});\r\n                            (lview as any)[key] = (c.data as any)[key];\r\n                            break;\r\n                        default:\r\n                            try {\r\n                                let v: any = (c.data as any)[key];\r\n                                if (typeof v === 'object') v = (Array.isArray(v) ? [...v] : {...v});\r\n                                (lview as any)[key] = v;\r\n                            } catch(e) {\r\n                            //    Log.ee('Error on duplicate view:', e);\r\n                            }\r\n                    }\r\n                }\r\n\r\n                // insert in viewpoint.subview\r\n                //let defaultViews: Dictionary<Pointer, boolean> = Defaults.defaultViewsMap;\r\n                let vp: LViewPoint = c.proxyObject.viewpoint;\r\n                // let oldViews: Pointer<DViewElement>[] = Object.keys(vp.__raw.subViews);\r\n                // if (Defaults.viewpoints.indexOf(vpid)) oldViews = oldViews.filter( vid => !defaultViews[vid]);\r\n                // let i: number = oldViews.indexOf(c.data.id);\r\n                /*\r\n                if (i === -1) oldViews.push(dclone.id);\r\n                else oldViews.splice(i+1, 0, dclone.id); // insert in-place right after the cloned view\r\n                vp.subViews = oldViews as any;*/\r\n                // SetRootFieldAction.new('stackViews', dview.id, '+=', true);\r\n\r\n\r\n                const isVP = c.data.className === 'DViewPoint';\r\n                if (isVP) SetRootFieldAction.new(`viewpoints`, c.data.id, '+=', true);\r\n                else SetRootFieldAction.new(`viewelements`, c.data.id, '+=', true);\r\n                for (let key of DViewElement.RecompileKeys) SetRootFieldAction.new(`VIEWS_RECOMPILE_${key}`, c.data.id, '+=', false);\r\n            })\r\n            return lview;\r\n        }\r\n    }\r\n}\r\nRuntimeAccessibleClass.set_extend(DPointerTargetable, DViewElement);\r\nRuntimeAccessibleClass.set_extend(LPointerTargetable, LViewElement);\r\n\r\ntype DuplicateVPChange = {\r\n    pvid: Pointer<DViewElement>,\r\n    // score: number //unused\r\n}\r\nexport type WViewElement = getWParams<LViewElement, DPointerTargetable>;\r\n\r\n@RuntimeAccessible('DViewTransientProperties')\r\nexport class DViewTransientProperties extends RuntimeAccessibleClass{\r\n    static logic: typeof LPointerTargetable;\r\n    _isDViewTransientProperties!: true;\r\n    // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\r\n    // private: DViewPrivateTransientProperties;\r\n}\r\n\r\nRuntimeAccessibleClass.set_extend(RuntimeAccessibleClass, DViewTransientProperties);\r\n@RuntimeAccessible('LViewTransientProperties')\r\nexport class LViewTransientProperties extends LPointerTargetable{\r\n    static structure: typeof DPointerTargetable;\r\n    static singleton: LViewTransientProperties;\r\n    _isLViewTransientProperties!: true;\r\n\r\n    // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\r\n    // private!: LViewPrivateTransientProperties;\r\n    /*\r\n        get_private(context: LogicContext<DViewTransientProperties>): LViewPrivateTransientProperties {\r\n            return LViewTransientProperties.wrap(context.data.private, context.proxy.baseObjInLookup, context.proxy.additionalPath + '.private'); }*/\r\n    /*\r\n        get_isSelected(logicContext: LogicContext<TargetableProxyHandler<DViewTransientProperties>, DViewTransientProperties>): Proxyfied<Dictionary> {\r\n            // @ts-ignore for $ at end of getpath\r\n            console.log('GET_ISSELECTED handler func');\r\n            return TargetableProxyHandler.getMap(logicContext.data.isSelected, logicContext, logicContext.proxy.additionalPath + '.' + (getPath as this).isSelected.$);\r\n        }*/\r\n}\r\n\r\nRuntimeAccessibleClass.set_extend(DPointerTargetable, DViewTransientProperties);\r\nRuntimeAccessibleClass.set_extend(LPointerTargetable, LViewTransientProperties);\r\nexport type WViewTransientProperties = getWParams<LViewTransientProperties, DViewTransientProperties>;\r\n\r\n/*\r\n\r\n@RuntimeAccessible\r\nexport class DViewPrivateTransientProperties extends DPointerTargetable{\r\n    static logic: typeof LViewPrivateTransientProperties;\r\n\r\n    public size: GraphSize\r\n    constructor(size?: GraphSize) {\r\n        super();\r\n        this.size = size || defaultVSize;\r\n    }\r\n}\r\n\r\n@RuntimeAccessible\r\nexport class LViewPrivateTransientProperties extends DViewPrivateTransientProperties{\r\n    static structure: typeof DViewPrivateTransientProperties;\r\n    static singleton: LViewPrivateTransientProperties;\r\n\r\n}*/\r\n// shapeless component, receive jsx from redux\r\n// can access any of the redux state, but will usually access 1-2 var among many,\r\n// how can i dynamically mapStateToProps to map only the required ones?\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}