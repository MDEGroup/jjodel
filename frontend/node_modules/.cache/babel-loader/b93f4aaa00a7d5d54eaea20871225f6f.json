{"ast":null,"code":"// import {\n//     DState, DUser,\n//     DViewElement,\n//     LUser,\n//     LViewElement,\n//     LViewPoint,\n//     Pointer,\n//     SetFieldAction,\n//     TRANSACTION\n// } from '../../joiner';\n// import {FakeStateProps} from '../../joiner/types';\n// import React, {Component, Dispatch, ReactElement, useState} from 'react';\n// import {connect} from 'react-redux';\n// import './style.scss';\n// import {ViewEvents, ViewInfo, ViewOptions, ViewStyle, ViewSubViews, ViewTemplate} from './viewTabs';\n//\n//\n// function ViewsComponent(props: AllProps) {\n//     const {user, views, viewpoints} = props;\n//     const [clicked, setClicked] = useState({viewID: '', x: 0, y: 0});\n//     const [view, setView] = useState<null|LViewElement>(null);\n//     const [tab, setTab] = useState(0);\n//\n//     const create = () => {\n//         DViewElement.newDefault();\n//     }\n//     const duplicate = (pointer: Pointer<LViewElement>) => {\n//         setClicked({viewID: '', x: 0, y: 0})\n//         const view: LViewElement = LViewElement.fromPointer(pointer);\n//         TRANSACTION(() => {\n//             view.duplicate(false);\n//         });\n//     }\n//     const remove = (pointer: Pointer<LViewElement>) => {\n//         setClicked({viewID: '', x: 0, y: 0})\n//         const view: LViewElement = LViewElement.fromPointer(pointer);\n//         TRANSACTION(() => {\n//             // SetFieldAction.new(view.viewpoint.id, 'subViews', view.id as any, '-=', false);\n//             view.delete();\n//         })\n//     }\n//\n//\n//     if(!view) return(<section className={'p-2'}>\n//         <div className={'v-container'}>\n//             <label className={'text-primary'} onClick={e => create()}>\n//                 Create new...\n//             </label>\n//         </div>\n//         {views.map(v => <div className={'v-container'}>\n//             <label style={{fontWeight: (v.id === clicked.viewID ? 'bold' : 'lighter')}} onClick={e => setClicked({viewID: v.id, x: e.clientX, y: e.clientY})}>\n//                 {v.name}\n//             </label>\n//             {clicked.viewID === v.id && <div className={'v-panel rounded border p-2'} style={{marginTop: '1.3em'}}>\n//                 <label className={'v-link'} onClick={e => setView(LViewElement.fromPointer(clicked.viewID))}>Open</label>\n//                 <label className={'v-link'} onClick={e => duplicate(clicked.viewID)}>Duplicate</label>\n//                 <label className={'v-link'} onClick={e => remove(clicked.viewID)}>Delete</label>\n//                 <label className={'v-link text-danger'} onClick={e => setClicked({viewID: '', x: 0, y: 0})}>Close</label>\n//             </div>}\n//         </div>)}\n//     </section>);\n//     else {\n//         const tabs = [\n//             {name: 'info', component: <ViewInfo view={view} viewpoints={viewpoints}  />},\n//             {name: 'template', component: <ViewTemplate view={view} />},\n//             {name: 'style', component: <ViewStyle view={view} />},\n//             {name: 'events', component: <ViewEvents view={view} />},\n//             {name: 'options', component: <ViewOptions view={view} />},\n//         ];\n//         return(<section className={'p-2'}>\n//             <nav className={'w-100 p-1 bg-white border rounded text-center mb-2'}>\n//                 {tabs.map((t, i) => <label style={{color: (tab === i) ? '#5F0F40' : 'black'}} onClick={e => setTab(i)} key={i} className={'v-item'}>\n//                     {t.name}\n//                 </label>)}\n//             </nav>\n//             {tabs[tab].component}\n//         </section>)\n//     }\n//\n//\n// }\n//\n// interface OwnProps {}\n// interface StateProps {\n//     views: LViewElement[]\n//     viewpoints: LViewPoint[]\n//     user: LUser\n// }\n// interface DispatchProps {}\n//\n// type AllProps = OwnProps & StateProps & DispatchProps;\n//\n// function mapStateToProps(state: DState, ownProps: OwnProps): StateProps {\n//     const ret: StateProps = {} as FakeStateProps;\n//     ret.viewpoints = LViewPoint.fromArr(state.viewpoints);\n//     ret.user = LUser.fromPointer(DUser.current);\n//     const views: LViewElement[] = LViewElement.fromArr(state.viewelements);\n//     ret.views = views.filter(v => v.viewpoint.id === ret.user.project?.activeViewpoint.id)\n//     return ret;\n// }\n//\n// function mapDispatchToProps(dispatch: Dispatch<any>): DispatchProps {\n//     const ret: DispatchProps = {} as any;\n//     return ret;\n// }\n//\n//\n// export const ViewsConnected = connect<StateProps, DispatchProps, OwnProps, DState>(\n//     mapStateToProps,\n//     mapDispatchToProps\n// )(ViewsComponent);\n//\n// export const Views = (props: OwnProps, children: (string | Component)[] = []): ReactElement => {\n//     return <ViewsConnected {...{...props, children}} />;\n// }\n// export default Views;\nexport const deleted = true;","map":{"version":3,"names":["deleted"],"sources":["C:/d/Programming/web/jodel-mde/src/components/editors/Views.tsx"],"sourcesContent":["// import {\r\n//     DState, DUser,\r\n//     DViewElement,\r\n//     LUser,\r\n//     LViewElement,\r\n//     LViewPoint,\r\n//     Pointer,\r\n//     SetFieldAction,\r\n//     TRANSACTION\r\n// } from '../../joiner';\r\n// import {FakeStateProps} from '../../joiner/types';\r\n// import React, {Component, Dispatch, ReactElement, useState} from 'react';\r\n// import {connect} from 'react-redux';\r\n// import './style.scss';\r\n// import {ViewEvents, ViewInfo, ViewOptions, ViewStyle, ViewSubViews, ViewTemplate} from './viewTabs';\r\n//\r\n//\r\n// function ViewsComponent(props: AllProps) {\r\n//     const {user, views, viewpoints} = props;\r\n//     const [clicked, setClicked] = useState({viewID: '', x: 0, y: 0});\r\n//     const [view, setView] = useState<null|LViewElement>(null);\r\n//     const [tab, setTab] = useState(0);\r\n//\r\n//     const create = () => {\r\n//         DViewElement.newDefault();\r\n//     }\r\n//     const duplicate = (pointer: Pointer<LViewElement>) => {\r\n//         setClicked({viewID: '', x: 0, y: 0})\r\n//         const view: LViewElement = LViewElement.fromPointer(pointer);\r\n//         TRANSACTION(() => {\r\n//             view.duplicate(false);\r\n//         });\r\n//     }\r\n//     const remove = (pointer: Pointer<LViewElement>) => {\r\n//         setClicked({viewID: '', x: 0, y: 0})\r\n//         const view: LViewElement = LViewElement.fromPointer(pointer);\r\n//         TRANSACTION(() => {\r\n//             // SetFieldAction.new(view.viewpoint.id, 'subViews', view.id as any, '-=', false);\r\n//             view.delete();\r\n//         })\r\n//     }\r\n//\r\n//\r\n//     if(!view) return(<section className={'p-2'}>\r\n//         <div className={'v-container'}>\r\n//             <label className={'text-primary'} onClick={e => create()}>\r\n//                 Create new...\r\n//             </label>\r\n//         </div>\r\n//         {views.map(v => <div className={'v-container'}>\r\n//             <label style={{fontWeight: (v.id === clicked.viewID ? 'bold' : 'lighter')}} onClick={e => setClicked({viewID: v.id, x: e.clientX, y: e.clientY})}>\r\n//                 {v.name}\r\n//             </label>\r\n//             {clicked.viewID === v.id && <div className={'v-panel rounded border p-2'} style={{marginTop: '1.3em'}}>\r\n//                 <label className={'v-link'} onClick={e => setView(LViewElement.fromPointer(clicked.viewID))}>Open</label>\r\n//                 <label className={'v-link'} onClick={e => duplicate(clicked.viewID)}>Duplicate</label>\r\n//                 <label className={'v-link'} onClick={e => remove(clicked.viewID)}>Delete</label>\r\n//                 <label className={'v-link text-danger'} onClick={e => setClicked({viewID: '', x: 0, y: 0})}>Close</label>\r\n//             </div>}\r\n//         </div>)}\r\n//     </section>);\r\n//     else {\r\n//         const tabs = [\r\n//             {name: 'info', component: <ViewInfo view={view} viewpoints={viewpoints}  />},\r\n//             {name: 'template', component: <ViewTemplate view={view} />},\r\n//             {name: 'style', component: <ViewStyle view={view} />},\r\n//             {name: 'events', component: <ViewEvents view={view} />},\r\n//             {name: 'options', component: <ViewOptions view={view} />},\r\n//         ];\r\n//         return(<section className={'p-2'}>\r\n//             <nav className={'w-100 p-1 bg-white border rounded text-center mb-2'}>\r\n//                 {tabs.map((t, i) => <label style={{color: (tab === i) ? '#5F0F40' : 'black'}} onClick={e => setTab(i)} key={i} className={'v-item'}>\r\n//                     {t.name}\r\n//                 </label>)}\r\n//             </nav>\r\n//             {tabs[tab].component}\r\n//         </section>)\r\n//     }\r\n//\r\n//\r\n// }\r\n//\r\n// interface OwnProps {}\r\n// interface StateProps {\r\n//     views: LViewElement[]\r\n//     viewpoints: LViewPoint[]\r\n//     user: LUser\r\n// }\r\n// interface DispatchProps {}\r\n//\r\n// type AllProps = OwnProps & StateProps & DispatchProps;\r\n//\r\n// function mapStateToProps(state: DState, ownProps: OwnProps): StateProps {\r\n//     const ret: StateProps = {} as FakeStateProps;\r\n//     ret.viewpoints = LViewPoint.fromArr(state.viewpoints);\r\n//     ret.user = LUser.fromPointer(DUser.current);\r\n//     const views: LViewElement[] = LViewElement.fromArr(state.viewelements);\r\n//     ret.views = views.filter(v => v.viewpoint.id === ret.user.project?.activeViewpoint.id)\r\n//     return ret;\r\n// }\r\n//\r\n// function mapDispatchToProps(dispatch: Dispatch<any>): DispatchProps {\r\n//     const ret: DispatchProps = {} as any;\r\n//     return ret;\r\n// }\r\n//\r\n//\r\n// export const ViewsConnected = connect<StateProps, DispatchProps, OwnProps, DState>(\r\n//     mapStateToProps,\r\n//     mapDispatchToProps\r\n// )(ViewsComponent);\r\n//\r\n// export const Views = (props: OwnProps, children: (string | Component)[] = []): ReactElement => {\r\n//     return <ViewsConnected {...{...props, children}} />;\r\n// }\r\n// export default Views;\r\nexport const deleted = true;\r\n"],"mappings},"metadata":{},"sourceType":"module"}