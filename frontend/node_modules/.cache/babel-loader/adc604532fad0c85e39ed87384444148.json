{"ast":null,"code":"var _jsxFileName = \"C:\\\\d\\\\Programming\\\\web\\\\jodel-mde\\\\src\\\\view\\\\viewElement\\\\view.tsx\",\n  _dec,\n  _class,\n  _class2,\n  _dec2,\n  _class3,\n  _class4,\n  _dec3,\n  _class5,\n  _class6,\n  _dec4,\n  _class7,\n  _class8;\nimport { BEGIN, Constructors, CoordinateMode, Debug, Defaults, DPointerTargetable, DViewPoint, EdgeBendingMode, EdgeGapMode, EGraphElements, EModelElements, END, GraphPoint, GraphSize, Log, LPointerTargetable, LUser, LViewPoint, MyProxyHandler, Pointers, RuntimeAccessible, RuntimeAccessibleClass, Selectors, SetFieldAction, SetRootFieldAction, ShortAttribETypes, store, TRANSACTION, U, windoww } from \"../../joiner\";\nimport { DUser, transientProperties } from \"../../joiner/classes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet CSS_Units0 = {\n  'Local-font relative': {\n    'cap': 'cap - (Cap height) the nominal height of capital letters of the element\\'s font.',\n    'ch': 'ch - Average character advance of a narrow glyph in the element\\'s font, as represented by the \"0\" (ZERO, U+0030) glyph.',\n    'em': 'em - Font size of the element\\'s font.',\n    'ex': 'ex - x-height of the element\\'s font.',\n    'ic': 'ic - Average character advance of a full-width glyph in the element\\'s font, as represented by the \"水\" (CJK water ideograph, U+6C34) glyph.',\n    'lh': 'lh - Line height of the element.'\n  },\n  'Root-font relative': {\n    'rcap': 'rcap - Cap height (the nominal height of capital letters) of the root element\\'s font.',\n    'rch': 'rch - Average character advance of a narrow glyph in the root element\\'s font, as represented by the \"0\" (ZERO, U+0030) glyph.',\n    'rem': 'rem - Font size of the root element\\'s font.',\n    'rex': 'rex - x-height of the root element\\'s font.',\n    'ric': 'ric - Average character advance of a full-width glyph in the root element\\'s font, as represented by the \"水\" (CJK water ideograph, U+6C34) glyph.',\n    'rlh': 'rlh - Line height of the root element.'\n  },\n  'Relative': {\n    'dvh': 'dvh - 1% of the dynamic viewport\\'s height.',\n    'dvw': 'dvw - 1% of the dynamic viewport\\'s width.',\n    'lvh': 'lvh - 1% of the large viewport\\'s height.',\n    'lvw': 'lvw - 1% of the large viewport\\'s width.',\n    'svh': 'svh - 1% of the small viewport\\'s height.',\n    'svw': 'svw - 1% of the small viewport\\'s width.',\n    'vb': 'vb - 1% of viewport\\'s size in the root element\\'s block axis.',\n    'vh': 'vh - 1% of viewport\\'s height.',\n    'vi': 'vi - 1% of viewport\\'s size in the root element\\'s inline axis.',\n    'vmax': 'vmax - 1% of viewport\\'s larger dimension.',\n    'vmin': 'vmin - 1% of viewport\\'s smaller dimension.',\n    'vw': 'vw - 1% of viewport\\'s width.',\n    'fr': 'fr - (Flex) Represents a flexible length within a grid container',\n    '%': '% - Percentage'\n  },\n  'Container @Query relative': {\n    'cqb': 'cqb - 1% of a query container\\'s block size',\n    'cqh': 'cqh - 1% of a query container\\'s height',\n    'cqi': 'cqi - 1% of a query container\\'s inline size',\n    'cqmax': 'cqmax - The larger value of cqi or cqb',\n    'cqmin': 'cqmin - The smaller value of cqi or cqb',\n    'cqw': 'cqw - 1% of a query container\\'s width'\n  },\n  'Absolute lengths': {\n    'cm': 'cm - (Centimeters) 1cm = 96px/2.54',\n    'in': 'in - (Inches) 1in = 2.54cm = 96px',\n    'mm': 'mm - (Millimeters) 1mm = 1/10th of 1cm',\n    'pc': 'pc - (Picas) 1pc = 1/6th of 1in',\n    'pt': 'pt - (Points) 1pt = 1/72th of 1in',\n    'px': 'px - (Pixels) 1px = 1/96th of 1in',\n    'Q': 'Q - (Quarter-millimeters) 1Q = 1/40th of 1cm'\n  },\n  'Angles': {\n    'deg': 'deg - (Degrees) There are 360 degrees in a full circle.',\n    'grad': 'grad - (Gradians) There are 400 gradians in a full circle.',\n    'rad': 'rad - (Radians) There are 2π radians in a full circle.',\n    'turn': 'turn - (Turns) There is 1 turn in a full circle.'\n  },\n  'Time': {\n    'ms': 'ms - Milliseconds',\n    's': 's - (Seconds) There are 1,000 milliseconds in a second.'\n  },\n  'Frequency': {\n    'Hz': 'Hz - (Hertz) Represents the number of occurrences per second.',\n    'kHz': 'kHz - (KiloHertz) A kiloHertz is 1000 Hertz.'\n  },\n  'Resolution': {\n    'dpcm': 'dpcm - Dots per centimeter.',\n    'dpi': 'dpi - Dots per inch.',\n    'dppx': 'dppx - Dots per px unit.'\n  }\n};\nexport let CSS_Units = CSS_Units0;\nlet pattern = [];\nCSS_Units.jsx = /*#__PURE__*/_jsxDEV(\"datalist\", {\n  id: \"__jodel_CSS_units\",\n  children: Object.keys(CSS_Units).map(k1 => {\n    let v1 = CSS_Units[k1];\n    console.log(\"optgroup css units\", {\n      k1,\n      v1,\n      karr: Object.keys(v1),\n      k1arr: Object.keys(CSS_Units)\n    });\n    return /*#__PURE__*/_jsxDEV(\"optgroup\", {\n      label: k1,\n      children: Object.keys(v1).map(k => {\n        let v = v1[k];\n        console.log(\"css units\", {\n          k,\n          v,\n          k1,\n          v1,\n          karr: Object.keys(v1),\n          k1arr: Object.keys(CSS_Units)\n        });\n        pattern.push(k);\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: k,\n          title: v\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 24\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 15\n    }, this);\n  })\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 127,\n  columnNumber: 17\n}, this);\n//throw new Error(\"Stop\");\nCSS_Units.pattern = \"^(\" + pattern.join('|') + \")$\";\nwindoww.CSS_Units = CSS_Units;\n\n/*\r\nexport type CSS_AbsoluteUnit = 'px' | 'cm' | 'mm' | 'pt' | 'pc' | 'in' | '';\r\nexport type CSS_RelativeDomUnit = '%' | 'fr' | 'vw' | 'vh' | 'vmin' | 'vmax';\r\nexport type CSS_RelativeFontUnit =  'em' | 'rem' | 'ex' | 'ch';\r\nexport type CSSUnit = CSS_AbsoluteUnit | CSS_RelativeFontUnit | CSS_RelativeDomUnit;*/\n\n// array of rgba: red, green, blue, alpha\n\nexport let DViewElement = (_dec = RuntimeAccessible('DViewElement'), _dec(_class = (_class2 = class DViewElement extends DPointerTargetable {\n  constructor() {\n    super(...arguments);\n    this.id = void 0;\n    this.isValidation = void 0;\n    this.name = void 0;\n    this.isExclusiveView = void 0;\n    this.constants = void 0;\n    this.preRenderFunc = void 0;\n    this.jsxString = void 0;\n    this.usageDeclarations = void 0;\n    this.forceNodeType = void 0;\n    this.appliableToClasses = void 0;\n    this.appliableTo = void 0;\n    this.subViews = void 0;\n    this.oclCondition = void 0;\n    this.jsCondition = void 0;\n    this.oclUpdateCondition = void 0;\n    this.OCL_NEEDS_RECALCULATION = void 0;\n    this.OCL_UPDATE_NEEDS_RECALCULATION = void 0;\n    this.explicitApplicationPriority = void 0;\n    this.defaultVSize = void 0;\n    this.adaptHeight = void 0;\n    this.adaptWidth = void 0;\n    this.draggable = void 0;\n    this.resizable = void 0;\n    this.viewpoint = void 0;\n    this.onDataUpdate = void 0;\n    this.onDragStart = void 0;\n    this.onDragEnd = void 0;\n    this.whileDragging = void 0;\n    this.onResizeStart = void 0;\n    this.onResizeEnd = void 0;\n    this.whileResizing = void 0;\n    this.onRotationStart = void 0;\n    this.onRotationEnd = void 0;\n    this.whileRotating = void 0;\n    this.events = void 0;\n    this.bendingMode = void 0;\n    this.edgeGapMode = void 0;\n    this.storeSize = void 0;\n    this.size = void 0;\n    this.lazySizeUpdate = void 0;\n    this.edgeStartOffset = void 0;\n    this.edgeEndOffset = void 0;\n    this.edgeStartOffset_isPercentage = void 0;\n    this.edgeEndOffset_isPercentage = void 0;\n    this.edgeStartStopAtBoundaries = void 0;\n    this.edgeEndStopAtBoundaries = void 0;\n    this.edgePointCoordMode = void 0;\n    this.edgeHeadSize = void 0;\n    this.edgeTailSize = void 0;\n    this.palette = void 0;\n    this.css = void 0;\n    this.cssIsGlobal = void 0;\n    this.compiled_css = void 0;\n    this.css_MUST_RECOMPILE = void 0;\n    this.father = void 0;\n  } // static singleton: LViewElement;\n  // static logic: typeof LViewDViewElementElement;\n  // static structure: typeof DViewElement;\n  // inherited redefine\n  // public __raw!: DViewElement;\n  // own properties\n  // only for root views (ex viewpoints) to group views semantically.\n  // processate 1 sola volta all'applicazione della vista o all'editing del campo\n  // _parsedConstants?: GObject; // should be protected but LView is not subclass\n  // evaluate tutte le volte che l'elemento viene aggiornato (il model o la view cambia).\n  // l'html template\n  // used in DefaultNode\n  // scalezoomx: boolean = false; // whether to resize the element normally using width-height or resize it using zoom-scale css\n  // scalezoomy: boolean = false;\n  // not persistent, some not shared. deve essere diverso da utente ad utente perchè dipende dal pan e zoom nel grafo dell'utente attuale.\n  // facendo pan su grafo html sposti gli elementi, per simulare uno spostamento del grafo e farlo sembrare illimitato.\n  // __transient: DViewTransientProperties;\n  // class names: DModel, DPackage, DAttribute...\n  // ocl selector\n  // js selector\n  //oclUpdateCondition_PARSED!: undefined | ((view: LViewElement)=>boolean); moved in transient\n  // if only the oclCondition needs to be reapplied to all model elements\n  // if both ocl needsto be reapplied and the oclUpdateCondition -> transient.view[v.id].oclUpdateCondition_PARSED needs to be remade\n  // priority of the view, if a node have multiple applicable views, the view with highest priority is applied.\n  // | 'fit-content' | '-webkit-fill-available';\n  /*width!: number;\r\n  height!: number;*/\n  //display!: 'block'|'contents'|'flex'|string;\n  //constraints!: GObject<\"obsolete, used in Vertex. they are triggered by events (view.onDragStart....) and can bound the size of the vertex\">[];\n  //useSizeFrom!: EuseSizeFrom;\n  // if true updates it once when the vertex is released. if false updates vertex position every X millisecond while dragging.\n  /* private */\n  /* private */\n  static new(name, jsxString, defaultVSize) {\n    let usageDeclarations = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n    let constants = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n    let preRenderFunc = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';\n    let appliableToClasses = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];\n    let oclCondition = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : '';\n    let priority = arguments.length > 8 ? arguments[8] : undefined;\n    let persist = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : true;\n    let isDefaultView = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : false;\n    let vp = arguments.length > 11 ? arguments[11] : undefined;\n    let id = isDefaultView ? 'Pointer_View' + name : undefined;\n    return new Constructors(new DViewElement('dwc'), undefined, persist, undefined, id).DPointerTargetable().DViewElement(name, jsxString, vp, defaultVSize, usageDeclarations, constants, preRenderFunc, appliableToClasses, oclCondition, priority).end();\n  }\n  static new2(name, jsxString, callback) {\n    let persist = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    let vp = arguments.length > 4 ? arguments[4] : undefined;\n    let id = arguments.length > 5 ? arguments[5] : undefined;\n    // let id = isDefaultView ? 'Pointer_View' + name : undefined;\n    return new Constructors(new DViewElement('dwc'), undefined, persist, undefined, id).DPointerTargetable().DViewElement(name, jsxString, vp).end(callback);\n  }\n  static newDefault(forData) {\n    const jsx = `<div className={'root'}>\n    <div className={'header'}>\n        <div className={'input-container mx-2'}>\n            <b className={'object-name'}>Name:</b>\n            <Input data={data} field={'name'} hidden={true} />\n        </div>\n    </div>\n    <div className={'body'}>To add information here,<br/> edit the view<br/><i>\"{view.name}\"</i></div>\n</div>`;\n    const palettes = {\n      \"border-color-\": {\n        type: \"color\",\n        value: [{\n          r: 187,\n          g: 187,\n          b: 187,\n          a: 1\n        }]\n      },\n      \"background-\": {\n        type: \"color\",\n        value: [{\n          r: 238,\n          g: 242,\n          b: 243,\n          a: 1\n        }]\n      },\n      \"color-\": {\n        type: \"color\",\n        value: [{\n          r: 3,\n          g: 54,\n          b: 86,\n          a: 1\n        }]\n      }\n    };\n    const css = `.root {\n    border: 1px solid var(--border-color-1);\n    border-radius: 4px;\n    background-color: var(--background-1);\n    \n    font-family: Verdana, sans-serif;\n    color: var(--color-1);\n    font-size: 0.7rem;\n}\n \n.root div.header {\n    text-align: center;\n    border-bottom: 1px solid var(--border-color-1);\n    padding: 0px;\n    margin: 0px;\n}\n \n.root div.header {\n    font-size: 1rem;\n}\n \n.root div.header input:empty {\n    margin-left: 0px;\n}\n.root div.body {\n    text-align: center;\n    font-weight: normal;  \n    height: auto;\n    padding: 5px;\n}\n `;\n    let query = '';\n    if (forData) switch (forData.className) {\n      case 'DClass':\n        query = `context DObject inv: self.instanceof.id = '${forData.id}'`;\n        break;\n      case 'DAttribute':\n      case 'DReference':\n        query = `context DValue inv: self.instanceof.id = '${forData.id}'`;\n        break;\n      default:\n        query = `context ${forData.className} inv: self.id = '${forData.id}'`;\n        break;\n    }\n    const user = LUser.fromPointer(DUser.current);\n    // const project = user?.project; if(!project) return this;\n    let name;\n    if (forData === null || forData === void 0 ? void 0 : forData.name) {\n      name = forData.name + 'View';\n    } else {\n      var _user$project;\n      const vp = (user === null || user === void 0 ? void 0 : (_user$project = user.project) === null || _user$project === void 0 ? void 0 : _user$project.activeViewpoint) || LPointerTargetable.fromPointer(Defaults.viewpoints[0]);\n      let names = vp.subViews.map(v => v && v.name);\n      name = U.increaseEndingNumber('view_' + 0, false, false, newName => names.indexOf(newName) >= 0);\n    }\n    return DViewElement.new2(name, jsx, d => {\n      d.css = css;\n      d.palette = palettes;\n      d.css_MUST_RECOMPILE = true;\n      d.oclCondition = query;\n    }, true);\n  }\n}, _class2.subclasses = [], _class2._extends = [], _class2.MeasurableKeys = ['onDataUpdate', 'onDragStart', 'onDragEnd', 'whileDragging', 'onResizeStart', 'onResizeEnd', 'whileResizing', 'onRotationStart', 'onRotationEnd', 'whileRotating'], _class2.RecompileKeys = ['onDataUpdate', 'onDragStart', 'onDragEnd', 'whileDragging', 'onResizeStart', 'onResizeEnd', 'whileResizing', 'onRotationStart', 'onRotationEnd', 'whileRotating', 'constants', 'usageDeclarations', 'jsxString', 'preconditions', 'jsCondition', 'ocl', 'events'], _class2)) || _class);\nexport let LViewElement = (_dec2 = RuntimeAccessible('LViewElement'), _dec2(_class3 = (_class4 = class LViewElement extends LPointerTargetable {\n  constructor() {\n    super(...arguments);\n    this.__raw = void 0;\n    this.id = void 0;\n    this.r = void 0;\n    this.isValidation = void 0;\n    this.name = void 0;\n    this.__info_of__name = {\n      isGlobal: true,\n      type: ShortAttribETypes.EString,\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Name of the view\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 83\n      }, this)\n    };\n    this.isOverlay = void 0;\n    this.__info_of__isOverlay = {\n      isGlobal: true,\n      type: ShortAttribETypes.EBoolean,\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"If not exclusive, the view is meant to add a functional outline of tools to a primary View, or css.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 13\n        }, this), \"A non-exclusive view cannot be applied alone and needs an exclusive view to render the main graphical content.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 88\n      }, this)\n    };\n    this.allPossibleParentViews = void 0;\n    this.__info_of__allPossibleParentViews = {\n      isGlobal: true,\n      type: 'LViewElement[]',\n      txt: 'All views except subviews and this view.'\n    };\n    this.explicitApplicationPriority = void 0;\n    this.__info_of__explicitApplicationPriority = {\n      isGlobal: true,\n      type: ShortAttribETypes.EByte,\n      label: \"explicit priority\",\n      txt: 'Application priority of view. If multiple views match an element, the highest priority will render the main jsx.'\n    };\n    this.isExclusiveView = void 0;\n    this.__info_of__isExclusiveView = {\n      isGlobal: true,\n      type: ShortAttribETypes.EBoolean,\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"If not exclusive, the view is meant to add a functional outline of tools to a primary View, or css.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 5\n        }, this), \"A non-exclusive view cannot be applied alone and needs an exclusive view to render the main graphical content.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 94\n      }, this)\n    };\n    this.constants = void 0;\n    this.__info_of__constants = {\n      todo: true,\n      isGlobal: true,\n      type: \"Function():Object\",\n      label: \"constants declaration\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Data used in the visual representation, meant to be static values evaluated only once when the view is first applied.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 135\n        }, this), \"Check default value view for an example.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 49\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 13\n      }, this)\n    };\n    this.preRenderFunc = void 0;\n    this.__info_of__preRenderFunc = {\n      isGlobal: true,\n      obsolete: true,\n      type: \"Function():Object\",\n      label: \"pre-render function\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Data used in the visual representation, meant to be dynamic values evaluated every time the visual representation is updated.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 143\n        }, this), \"Replaced by usageDeclarations.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 13\n      }, this)\n    };\n    this.jsxString = void 0;\n    this.__info_of__jsxString = {\n      isGlobal: true,\n      type: \"text\",\n      label: \"JSX template\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"The main ingredient, a \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://react.dev/learn/writing-markup-with-jsx\",\n          children: \"JSX template\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 41\n        }, this), \" that will be visualized in the graph.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 13\n      }, this)\n    };\n    this.usageDeclarations = void 0;\n    this.__info_of__usageDeclarations = {\n      todo: false,\n      isGlobal: true,\n      type: \"Function():Object\",\n      label: \"usage declarations\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Subset of the global or elements's data state that is graphically used.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 13\n        }, this), \"If specified the element will only update when one of those has changed.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 13\n        }, this), \"Can optimize performance and ensure the node is updated even when navigating remote properties that\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 13\n        }, this), \"    don\\\\'t belong to this element, like visualizing the name of an object pointed by a reference.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 13\n        }, this), \"Context: it has the usual variables present in a JSX template (data, view, node...)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 13\n        }, this), \"    plus a special variable \\\"ret\\\" where dependencies are registered.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 13\n        }, this), \"Usage Example: see the default view for value.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 14\n      }, this)\n    };\n    this.oclUpdateCondition = void 0;\n    this.__info_of__oclUpdateCondition = {\n      readType: '(view: LViewElement)=>boolean',\n      writeType: 'function string',\n      txt: \"[Optionally] Declare variables that are used in OCL condition, so that OCL will be re-checked only when those values have changed.\"\n    };\n    this.css_MUST_RECOMPILE = void 0;\n    this.cssIsGlobal = void 0;\n    this.__info_of__cssIsGlobal = {\n      type: ShortAttribETypes.EBoolean,\n      txt: \"Use with caution!\\nIf true, custom css can affect even elements not matched with this view, or outside the graph.\"\n    };\n    this.css = void 0;\n    this.__info_of__css = {\n      type: \"css string\",\n      txt: \"Inject custom css that cannot be inserted inline like :hover or css variables.\\nSupport LESS syntax.\"\n    };\n    this.compiled_css = void 0;\n    this.__info_of__compiled_css = {\n      hidden: true,\n      txt: 'css + palettes compiled from less in css'\n    };\n    this.palette = void 0;\n    this.__info_of__palette = {\n      type: \"Dictionary<prefix, colors[]>\",\n      txt: \"Specify a set of colors, numbers or text variables to be used in the graphical syntax through css variables.\"\n    };\n    this.forceNodeType = void 0;\n    this.__info_of__forceNodeType = {\n      isGlobal: true,\n      type: \"EGraphElements\",\n      enum: EGraphElements,\n      label: \"force node type\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Forces this element to be rendered with your component of choice instead of automatic selection when generated by a <DefaultNode> tag.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 635,\n        columnNumber: 13\n      }, this)\n    };\n    this.zoom = void 0;\n    this.__info_of__zoom = {\n      todo: true,\n      isNode: true,\n      type: GraphPoint.cname,\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Zooms in or out the element using css scale.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 84\n      }, this)\n    };\n    this.appliableToClasses = void 0;\n    this.__info_of__appliableToClasses = {\n      isGlobal: true,\n      type: \"EModelElements | EGraphElements\",\n      enum: {\n        ...EModelElements,\n        ...EGraphElements,\n        cname: \"EModelElements | EGraphElements\"\n      },\n      label: \"applicable to\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Do a low priority match with elements of this type.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 654,\n          columnNumber: 13\n        }, this), \"This is just a shortcut with a lower priority than a OCL match.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 655,\n          columnNumber: 13\n        }, this), \"The same result can be obtained through OCL.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 653,\n        columnNumber: 14\n      }, this)\n    };\n    this.appliableTo = void 0;\n    this.subViews = void 0;\n    this.__info_of__subViews = {\n      isGlobal: true,\n      hidden: true,\n      type: \"DViewElement[]\",\n      label: \"sub-views\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Views that are suggested to render elements contained in the current one with a higher match priority.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 662,\n          columnNumber: 13\n        }, this), \"Like a package view giving priority to a specific Class or Enum view to render his contained Classifiers in a common theme.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 13\n        }, this), \"If you wish to see the subview weight attached to the collection, access view.__raw.subviews instead.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 13\n      }, this)\n    };\n    this.setSubViewScore = void 0;\n    this.__info_of__setSubViewScore = {\n      isGlobal: true,\n      hidden: true,\n      type: \"function(ViewElement, numeric_score): void\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Adds, updates or unsets (if boost = null) a subview with his score.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 127\n      }, this)\n    };\n    this.allSubViews = void 0;\n    this.__info_of__allSubViews = {\n      type: \"ViewElement[]\",\n      txt: \"recursively get this.subViews.\"\n    };\n    this.defaultVSize = void 0;\n    this.__info_of__defaultVSize = {\n      isNode: true,\n      type: \"GraphSize\",\n      label: \"default size\",\n      txt: 'starting size of the node'\n    };\n    this.adaptWidth = void 0;\n    this.__info_of__adaptWidth = {\n      isNode: true,\n      type: ShortAttribETypes.EBoolean,\n      label: \"adapt width\",\n      txt: 'Whether the element should expand his width to accomodate his own contents.'\n    };\n    this.adaptHeight = void 0;\n    this.__info_of__adaptHeight = {\n      isNode: true,\n      type: ShortAttribETypes.EBoolean,\n      label: \"adapt height\",\n      txt: 'Whether the element should expand his height to accomodate his own contents.'\n    };\n    this.draggable = void 0;\n    this.__info_of__draggable = {\n      isNode: true,\n      type: ShortAttribETypes.EBoolean,\n      txt: 'if the element can be dragged'\n    };\n    this.resizable = void 0;\n    this.__info_of__resizable = {\n      isNode: true,\n      type: ShortAttribETypes.EBoolean,\n      txt: 'if the element can be resized'\n    };\n    this.oclCondition = void 0;\n    this.__info_of__oclCondition = {\n      isGlobal: true,\n      hidden: true,\n      label: \"OCL apply condition\",\n      type: \"text\",\n      // TODO: what's the difference with this.query?\n      txt: 'OCL Query selector to determine which nodes or model elements should apply this view'\n    };\n    this.jsCondition = void 0;\n    this.__info_of__jsCondition = {\n      isGlobal: true,\n      hidden: true,\n      label: \"js apply condition\",\n      type: \"text\",\n      txt: 'js Query selector to determine which nodes or model elements should apply this view'\n    };\n    this.viewpoint = void 0;\n    this.__info_of__viewpoint = {\n      hidden: true,\n      type: LViewPoint.cname,\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"The collection of views containing this one, useful to activate multiple views at once.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 775,\n        columnNumber: 78\n      }, this)\n    };\n    this.display = void 0;\n    this.__info_of__display = {\n      obsolete: true,\n      isNode: true,\n      type: ShortAttribETypes.EString,\n      txt: 'complete css injection instead'\n    };\n    this.onDragStart = void 0;\n    this.__info_of__onDragStart = {\n      isNode: true,\n      type: \"Function():void\",\n      txt: 'Custom event activated when a node begins being dragged.'\n    };\n    this.onDragEnd = void 0;\n    this.__info_of__onDragEnd = {\n      isNode: true,\n      type: \"Function():void\",\n      txt: 'Custom event activated when a node finishes being dragged.'\n    };\n    this.whileDragging = void 0;\n    this.__info_of__whileDragging = {\n      isNode: true,\n      type: \"Function():void\",\n      txt: 'Custom event activated multiple times when mouse is moved while a node is being dragged.'\n    };\n    this.onResizeStart = void 0;\n    this.__info_of__onResizeStart = {\n      isNode: true,\n      type: \"Function():void\",\n      txt: 'Custom event activated when a node begins being resized.'\n    };\n    this.onResizeEnd = void 0;\n    this.__info_of__onResizeEnd = {\n      isNode: true,\n      type: \"Function():void\",\n      txt: 'Custom event activated when a node finishes being resized.'\n    };\n    this.whileResizing = void 0;\n    this.__info_of__whileResizing = {\n      isNode: true,\n      type: \"Function():void\",\n      txt: 'Custom event activated multiple times when mouse is moved while a node is being resized.'\n    };\n    this.onRotationStart = void 0;\n    this.__info_of__onRotationStart = {\n      isNode: true,\n      type: \"Function():void\",\n      txt: 'Custom event activated when a node begins being rotated.'\n    };\n    this.onRotationEnd = void 0;\n    this.__info_of__onRotationEnd = {\n      isNode: true,\n      type: \"Function():void\",\n      txt: 'Custom event activated when a node finishes being rotated.'\n    };\n    this.whileRotating = void 0;\n    this.__info_of__whileRotating = {\n      isNode: true,\n      type: \"Function():void\",\n      txt: 'Custom event activated multiple times when mouse is moved while a node is being rotated.'\n    };\n    this.onDataUpdate = void 0;\n    this.__info_of__onDataUpdate = {\n      isNode: true,\n      type: \"Function():void\",\n      txt: 'Custom event activated every time a property of his model, node or view is changed while the element is visibly rendered in a graph.\\n<br>Caution! this might cause loops.'\n    };\n    this.events = void 0;\n    this.event = void 0;\n    this.__info_of__events = {\n      todo: true,\n      isGlobal: true,\n      type: \"Dictionary<name, function>\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Custom events callable through JSX user interaction\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 924,\n          columnNumber: 70\n        }, this), \"eg: <div onClick={()=>view.eventname()} />\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 924,\n        columnNumber: 14\n      }, this)\n    };\n    this.__info_of__event = {\n      todo: true,\n      isGlobal: true,\n      type: \"Dictionary<name, function>\",\n      txt: 'Alias for this.events'\n    };\n    this.constraints = void 0;\n    this.__info_of__constraints = {\n      todo: true,\n      isNode: true,\n      type: \"Function():void\",\n      txt: 'not supported yet'\n    };\n    this.bendingMode = void 0;\n    this.__info_of__bendingMode = {\n      isEdge: true,\n      enum: EdgeBendingMode,\n      type: '\"L\" | \"Q\" | \"C\" | \"T\" | \"S\" | \"A\" | \"QT\" | \"CS\"',\n      label: \"path mode\",\n      txt: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"How Svg path should use the EdgePoints to bend his shape\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 974,\n          columnNumber: 16\n        }, this)\n      }, void 0, false)\n    };\n    this.edgeGapMode = void 0;\n    this.__info_of__edgeGapMode = {\n      isEdge: true,\n      enum: EdgeGapMode,\n      type: '\"gap\" | \"average\" | \"autoFill\" | \"lineFill\" | \"arcFill\"',\n      label: \"gap mode\",\n      txt: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"How the segment should treat the EdgePoint interruptions.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 979,\n            columnNumber: 78\n          }, this), \"\\\"gap\\\" leaves an empty space to not overlap the EdgePoint,\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 980,\n            columnNumber: 13\n          }, this), \"\\\"linefill\\\" makes the edge stop at the EdgePoint borders, but then connects the gap with a line.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 979,\n          columnNumber: 16\n        }, this)\n      }, void 0, false)\n    };\n    this.storeSize = void 0;\n    this.__info_of__storeSize = {\n      isNode: true,\n      type: ShortAttribETypes.EBoolean,\n      label: \"bind sizes to view\",\n      txt: \"Active: the node position depends from the view currently displayed.Inactive: it depends from the graph.\"\n    };\n    this.lazySizeUpdate = void 0;\n    this.__info_of__lazySizeUpdate = {\n      isNode: true,\n      type: ShortAttribETypes.EBoolean,\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"If true updates the node position only when the drag action is finished. (best performance)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 992,\n        columnNumber: 93\n      }, this)\n    };\n    this.edgeStartOffset = void 0;\n    this.__info_of__edgeStartOffset = {\n      isEdge: true,\n      type: GraphPoint.cname,\n      label: \"start offset\",\n      txt: \"Location where outgoing edges should start their path, relative to top-upper corner of the element.\"\n    };\n    this.edgeEndOffset = void 0;\n    this.__info_of__edgeEndOffset = {\n      isEdge: true,\n      type: GraphPoint.cname,\n      label: \"end offset\",\n      txt: 'Same as this.edgeStartOffset'\n    };\n    this.edgeStartOffset_isPercentage = void 0;\n    this.__info_of__edgeStartOffset_isPercentage = {\n      isEdge: true,\n      type: ShortAttribETypes.EBoolean,\n      label: \"start offset is a %\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Whether edgeStartOffset is an absolute value or a percentage.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1005,\n          columnNumber: 80\n        }, this), \"(eg: 50% of element width, vs 50 pixels flat).\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1005,\n        columnNumber: 14\n      }, this)\n    };\n    this.edgeEndOffset_isPercentage = void 0;\n    this.__info_of__edgeEndOffset_isPercentage = {\n      isEdge: true,\n      type: ShortAttribETypes.EBoolean,\n      label: \"end offset is a %\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Whether edgeStartOffset is an absolute value or a percentage.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1009,\n          columnNumber: 80\n        }, this), \"(eg: 50% of element width, vs 50 pixels flat).\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1009,\n        columnNumber: 14\n      }, this)\n    };\n    this.edgeStartStopAtBoundaries = void 0;\n    this.__info_of__edgeStartStopAtBoundaries = {\n      isEdge: true,\n      type: ShortAttribETypes.EBoolean,\n      label: \"start cannot cross boundaries\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Whether outgoing edges should cross the node boundaries overlapping the node\\\\'s html or stop at them.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1014,\n          columnNumber: 120\n        }, this), \"Edge arrows might enter the node if this is on.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1014,\n        columnNumber: 14\n      }, this)\n    };\n    this.edgeEndStopAtBoundaries = void 0;\n    this.__info_of__edgeEndStopAtBoundaries = {\n      isEdge: true,\n      type: ShortAttribETypes.EBoolean,\n      label: \"end cannot cross boundaries\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Whether incoming edges should cross the node boundaries overlapping the node\\\\'s html or stop at them.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1018,\n          columnNumber: 120\n        }, this), \"Edge arrows might enter the node if this is on.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1018,\n        columnNumber: 14\n      }, this)\n    };\n    this.edgePointCoordMode = void 0;\n    this.__info_of__edgePointCoordMode = {\n      isEdgePoint: true,\n      type: \"CoordinateMode\",\n      enum: CoordinateMode,\n      label: \"coordinate mode\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Store coordinates as absolute coordinates or relative to start/end nodes.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1023,\n        columnNumber: 13\n      }, this)\n    };\n    this.edgeHeadSize = void 0;\n    this.__info_of__edgeHeadSize = {\n      isEdge: true,\n      type: GraphPoint.cname,\n      label: \"head decorator size\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Size of the edge head decorator if present.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1042,\n        columnNumber: 108\n      }, this)\n    };\n    this.edgeTailSize = void 0;\n    this.__info_of__edgeTailSize = {\n      isEdge: true,\n      type: GraphPoint.cname,\n      label: \"tail decorator size\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Size of the tail head decorator if present.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1045,\n        columnNumber: 108\n      }, this)\n    };\n    this.size = void 0;\n    this.__info_of__size = {\n      isNode: true,\n      hidden: true,\n      type: ShortAttribETypes.EInt,\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Do not use directly, contains all the sizes stored in this view. use getSize, updateSize instead.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1049,\n        columnNumber: 13\n      }, this)\n    };\n    this.__info_of__updateSize = {\n      isNode: true,\n      hidden: true,\n      type: \"Function(Pointer<GraphElement | ModelElement>, GraphSize) => GraphSize\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Updates the size stored in this view for target element.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1053,\n          columnNumber: 74\n        }, this), \"@returns: the delta of the change between old value and new value.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1053,\n        columnNumber: 13\n      }, this)\n    };\n    this.__info_of__getSize = {\n      isNode: true,\n      hidden: true,\n      type: \"Function(Pointer<GraphElement | ModelElement>) => GraphSize\",\n      txt: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Gets the size stored in this view for target element.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1055,\n        columnNumber: 13\n      }, this)\n    };\n    this.fatherChain = void 0;\n    this.__info_of__fatherChain = {\n      type: 'LViewElement[]',\n      txt: 'a list of all father elements sorted from the closest to farthest'\n    };\n    this.father = void 0;\n    this.children = void 0;\n  } // MixOnlyFuncs(DViewElement, LPointerTargetable)\n  // static singleton: LViewElement;\n  // static logic: typeof LViewElement;\n  // static structure: typeof DViewElement;\n  // inherited redefine\n  // own properties\n  // only for root views (ex viewpoints) to group views semantically.\n  get_isOverlay(c) {\n    return this.get_isExclusiveView(c);\n  }\n  set_isOverlay(val, c) {\n    return this.set_isExclusiveView(val, c);\n  }\n  get_allPossibleParentViews(c) {\n    let subviewsarr = this.get_allSubViews(c);\n    let subviews = U.objectFromArray(subviewsarr, sv => sv.id);\n    let allviewsarr = Selectors.getAll(DViewElement, undefined, undefined, true, true);\n    let allviews = U.objectFromArray(allviewsarr, sv => sv.id);\n    console.log('allPossibleParentViews', {\n      subviews,\n      subviewsarr,\n      allviews: {\n        ...allviews\n      },\n      allviewsarr\n    });\n    for (let k in subviews) {\n      delete allviews[k];\n    }\n    delete allviews[c.data.id];\n    console.log('allPossibleParentViews ret', {\n      allviews\n    });\n    return Object.values(allviews);\n  }\n\n  // priority of the view, if a node have multiple applicable views, the view with highest priority is applied.\n\n  get_explicitApplicationPriority(c) {\n    var _c$data$jsCondition, _c$data$oclCondition;\n    if (c.data.explicitApplicationPriority !== undefined) return c.data.explicitApplicationPriority;else return (((_c$data$jsCondition = c.data.jsCondition) === null || _c$data$jsCondition === void 0 ? void 0 : _c$data$jsCondition.length) || 1) + (((_c$data$oclCondition = c.data.oclCondition) === null || _c$data$oclCondition === void 0 ? void 0 : _c$data$oclCondition.length) || 1);\n  }\n  set_explicitApplicationPriority(val, c) {\n    SetFieldAction.new(c.data, \"explicitApplicationPriority\", val, '', false);\n    return true;\n  }\n  get_isExclusiveView(c) {\n    return c.data.isExclusiveView;\n  }\n  set_isExclusiveView(val, c) {\n    if (Defaults.check(c.data.id)) return true; // cannot delete or \"demote\" to decorations the main views, to make sure there is always at least 1 appliable view.\n    return SetFieldAction.new(c.data, \"isExclusiveView\", !!val, '', false);\n  }\n\n  // Example 1: <code>{'{color:\"red\", background: \"gray\"}'}</code><br/>\n  // Example 2: <code>{'function(){\\n    let fib = [1,1]; for (let i = 2; i < 100) { fib[i] = fib[i-2]+fib[i-1]; }\\n    return fib; }'}</code><br/>\n  // evalutate tutte le volte che l'elemento viene aggiornato (il model o la view cambia)\n  _defaultGetter(c, k) {\n    return this.__defaultGetter(c, k);\n  }\n  _defaultSetter(v, c, k) {\n    return this.__defaultSetter(v, c, k);\n  }\n  get_jsxString(context) {\n    return context.data.jsxString;\n  }\n  set_jsxString(val, context) {\n    TRANSACTION(() => {\n      // const jsx = DSL.parser(val);\n      SetFieldAction.new(context.data, 'jsxString', val, '', false);\n      SetRootFieldAction.new('VIEWS_RECOMPILE_jsxString', context.data.id, '+=', false);\n    });\n    return true;\n  }\n  get_usageDeclarations(c) {\n    return c.data.usageDeclarations || \"(ret)=>{ // scope contains: data, node, view, constants, state\\n\" + \"// ** preparations and default behaviour here ** //\\n\" + \"ret.data = data\\n\" + \"ret.node = node\\n\" + \"ret.view = view\\n\" + \"// data, node, view are dependencies by default. delete them above if you want to remove them.\\n\" +\n    // if you want your node re-rendered every time, add a dependency to ret.state = state; or ret.update = Math.random();\n    \"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\" + \"// ** declarations here ** //\\n\" + \"}\";\n  }\n  set_usageDeclarations(val, context) {\n    TRANSACTION(() => {\n      SetFieldAction.new(context.data, 'usageDeclarations', val, '', false);\n      SetRootFieldAction.new('VIEWS_RECOMPILE_usageDeclarations', context.data.id, '+=', false);\n    });\n    return true;\n  }\n\n  // format should be array of (usedPaths: string[]) starting with \"data.\" AUTOMATICALLY inefered from the ocl editor.\n\n  get_oclUpdateCondition(c) {\n    return transientProperties.view[c.data.id].oclUpdateCondition_PARSED;\n  }\n  set_oclUpdateCondition(val, c) {\n    TRANSACTION(() => {\n      SetFieldAction.new(c.data, \"oclUpdateCondition\", val || '', '', false);\n      // not recalculated right now because the change needs to be sent to collaborative editor users\n      // it is pointer, but i don't want to set pointedby's, it is very short lived.\n      SetRootFieldAction.new(\"OCL_UPDATE_NEEDS_RECALCULATION\", c.data.id, '+=', false);\n    });\n    return true;\n  }\n  /* moved it as setrootfield action and as array. check it after every reducer. update im same style the color palette too?\r\n      OCL_NEEDS_RECALCULATION!: boolean;\r\n      __info_of__OCL_NEEDS_RECALCULATION: Info = {hidden: true, type: ShortAttribETypes.EBoolean,\r\n          txt: \"if only the oclCondition needs to be reapplied to all model elements\"}\r\n      get_OCL_NEEDS_RECALCULATION(c: Context): this[\"OCL_NEEDS_RECALCULATION\"] { return c.data.OCL_NEEDS_RECALCULATION; }\r\n      set_OCL_NEEDS_RECALCULATION(val: this[\"OCL_NEEDS_RECALCULATION\"], c: Context): boolean { return this.cannotSet('OCL_NEEDS_RECALCULATION'); }\r\n  \r\n      OCL_UPDATE_NEEDS_RECALCULATION!: boolean;\r\n      __info_of__OCL_UPDATE_NEEDS_RECALCULATION: Info = {hidden: true, type: ShortAttribETypes.EBoolean,\r\n          txt: \"if both ocl needsto be reapplied and the oclUpdateCondition -> transient.view[v.id].oclUpdateCondition_PARSED needs to be remade\"}\r\n      get_OCL_UPDATE_NEEDS_RECALCULATION(c: Context): this[\"OCL_UPDATE_NEEDS_RECALCULATION\"] { return c.data.OCL_UPDATE_NEEDS_RECALCULATION; }\r\n      set_OCL_UPDATE_NEEDS_RECALCULATION(val: this[\"OCL_UPDATE_NEEDS_RECALCULATION\"], c: Context): boolean { return this.cannotSet('OCL_UPDATE_NEEDS_RECALCULATION'); }*/\n\n  get_cssIsGlobal(c) {\n    return c.data.cssIsGlobal;\n  }\n  set_cssIsGlobal(val, c) {\n    TRANSACTION(() => {\n      SetFieldAction.new(c.data, \"cssIsGlobal\", !!val, '', false);\n      // compile only when accessed, to prevent color inputs to do a mess of compilations\n      SetFieldAction.new(c.data, \"css_MUST_RECOMPILE\", true, '', false);\n    });\n    return true;\n  }\n  get_css(c) {\n    return c.data.css;\n  }\n  set_css(val, c) {\n    TRANSACTION(() => {\n      SetFieldAction.new(c.data, \"css\", val, '', false);\n      // compile only when accessed, to prevent color inputs to do a mess of compilations\n      SetFieldAction.new(c.data, \"css_MUST_RECOMPILE\", true, '', false);\n    });\n    return true;\n  }\n  get_compiled_css(c) {\n    if (!c.data.css_MUST_RECOMPILE) return c.data.compiled_css; // return c.proxyObject.r.__raw.compiled_css;\n    let s = '';\n    const allowLESS = false;\n    let shortPaletteName;\n    let cc = c;\n    function rgbastring(c) {\n      Log.exDev(!c, \"invalid color:\", {\n        id: cc.data.id,\n        c,\n        shortPaletteName,\n        p: cc.data.palette\n      });\n      return \"rgba(\" + c.r + \",\" + c.g + \",\" + c.b + \",\" + c.a + \")\";\n    }\n    //let palettes = U.paletteSplit(c.data.palette);\n    for (let paletteName in c.data.palette) {\n      let palette0 = c.data.palette[paletteName];\n      if (palette0.type === \"color\") {\n        let palette = palette0;\n        let colors = palette.value;\n        if (!colors.length) continue;\n        if (['-', '_'].includes(paletteName[paletteName.length - 1])) shortPaletteName = paletteName.substring(0, paletteName.length - 1);else shortPaletteName = paletteName;\n        let rgba = rgbastring(colors[0]);\n        // set prefixed name without number\n        if (allowLESS) s += \"\\t@\" + shortPaletteName + \": \" + rgba + ';\\n';\n        s += \"\\t--\" + shortPaletteName + \": \" + rgba + ';\\n';\n        // set prefixed-0 name\n        if (allowLESS) s += \"\\t@\" + paletteName + '0: ' + rgba + ';\\n';\n        s += \"\\t--\" + paletteName + '0: ' + rgba + ';\\n';\n        // set prefixed-1 to prefixed-...n names\n        for (let i = 0; i < colors.length; i++) {\n          rgba = rgbastring(colors[i]);\n          if (allowLESS) s += \"\\t@\" + paletteName + (i + 1) + \": \" + rgba + ';\\n';\n          s += \"\\t--\" + paletteName + (i + 1) + \": \" + rgba + ';\\n';\n        }\n      } else if (palette0.type === 'path') {\n        let palette = palette0;\n        let val = U.replaceAll(palette.value, 'view.', '');\n        val = U.replaceAll(val, 'this.', '');\n        val = U.replaceAll(val, 'x', palette.x);\n        val = U.replaceAll(val, 'y', palette.y);\n        val = U.replaceAll(val, '+', ' +');\n        val = U.replaceAll(val, '-', ' -'); // important: cannot add space post-dash or it's harder to distinguish unary and binary -\n        val = U.replaceAll(val, '/', ' / ');\n        val = U.replaceAll(val, '*', ' * ');\n        let valarr = val.split(/[,\\s]/);\n        // [] not allowed\n        valarr = valarr.map(val => {\n          if (!isNaN(+val)) return val;\n          let patharr = val.split('.');\n          let curr = c.data;\n          for (let pathseg of patharr) {\n            curr = curr[pathseg];\n            Log.e(!curr && (val.length > 1 || patharr.length > 1), \"invalid variable path in css path control\", {\n              token: val,\n              view: c.data.name\n            });\n            if (!curr) break;\n          }\n          if (typeof curr === \"object\" || typeof curr === \"undefined\" && (val.length > 1 || patharr.length > 1)) Log.ee(\"invalid variable path in css path control\", {\n            token: val,\n            view: c.data.name\n          });else val = curr || val;\n          return val;\n        }).filter(p => !!p);\n        for (let i = 0; i < valarr.length; i++) {\n          let val = valarr[i];\n          switch (val) {\n            // i avoid subtracting L 1 -1 with spaces. it's unary if doesn't have a postfix space.\n            default:\n              continue;\n            case '*':\n              valarr[i] = +valarr[i - 1] * +valarr[i + 1];\n              valarr[i - 1] = valarr[i + 1] = '';\n              break;\n            case '/':\n              valarr[i] = +valarr[i - 1] / +valarr[i + 1];\n              valarr[i - 1] = valarr[i + 1] = '';\n              break;\n            case '+':\n              valarr[i] = +valarr[i - 1] + +valarr[i + 1];\n              valarr[i - 1] = valarr[i + 1] = '';\n              break;\n            case '-':\n              valarr[i] = +valarr[i - 1] - +valarr[i + 1];\n              valarr[i - 1] = valarr[i + 1] = '';\n              break;\n          }\n        }\n        val = valarr.filter(p => !!p).join(' ');\n        val = \"'\" + val + \"'\";\n        if (allowLESS) s += \"\\t@\" + paletteName + \": \" + val + ';\\n';\n        s += \"\\t--\" + paletteName + ': ' + val + ';\\n';\n      } else {\n        // number or text\n        let palette = palette0;\n        let val = palette.value + (palette.unit || '');\n        if (!val) val = \"''\";\n        if (allowLESS) s += \"\\t@\" + paletteName + \": \" + val + ';\\n';\n        s += \"\\t--\" + paletteName + ': ' + val + ';\\n';\n      }\n    }\n    s += '\\n\\t' + U.replaceAll(c.data.css, '\\n', '\\n\\t');\n    const localViewSelector = '.' + c.data.id; // '[data-viewid=\"'+c.data.id+'\"]';\n    s = (!c.data.cssIsGlobal ? localViewSelector : 'body') + ' {\\n' + s + '\\n}';\n    // not an error, i'm updating directly d-view that is usually wrong, this is to prevent multiple nodes with same view to trigger compile and redux actions\n    // count as if it's a derived attribute not really part of the store.\n    c.data.css_MUST_RECOMPILE = false;\n    return c.data.compiled_css = s;\n  }\n  set_compiled_css(val, c) {\n    Log.exx(\"Do not use setter for this, set it directly in d-object, along with compiled_css.\" + \"\\nOtherwise multiple nodes of the same view will start compiling together.\\n\");\n    return false;\n  }\n  get_palette(c) {\n    return c.data.palette;\n  }\n  set_palette(val, c) {\n    TRANSACTION(() => {\n      SetFieldAction.new(c.data, \"palette\", val, '', false);\n      SetFieldAction.new(c.data, \"css_MUST_RECOMPILE\", true, '', false);\n    });\n    return true;\n  }\n\n  /*\r\n  scalezoomx!: boolean; // whether to resize the element normally using width-height or resize it using zoom-scale css\r\n  __info_of__scalezoomx: Info = {isNode: true, isEdge: false, isEdgePoint: false, txt:<div></div>}\r\n    scalezoomy!: boolean;\r\n  __info_of__scalezoomy: Info = {isNode: true, isEdge: false, isEdgePoint: false, txt:<div></div>}*/\n\n  // not persistent, some not shared. deve essere diverso da utente ad utente perchè dipende dal pan e zoom nel grafo dell'utente attuale.\n  // facendo pan su grafo html sposti gli elementi, per simulare uno spostamento del grafo e farlo sembrare illimitato.\n  // __transient: DViewTransientProperties;\n  // class names: DModel, DPackage, DAttribute...\n  get_SubViews(c) {\n    delete c.data.subViews.clonedCounter;\n    return Object.keys(c.data.subViews).map(vid => LPointerTargetable.fromPointer(vid));\n  }\n  set_SubViews(val, c) {\n    let subviewsmap;\n    if (Array.isArray(val)) {\n      let ptrsArr = Pointers.fromArr(val);\n      subviewsmap = U.objectFromArrayValues(ptrsArr, 1.5);\n    } else subviewsmap = val || {};\n    SetFieldAction.new(c.data, \"subViews\", subviewsmap, '', true);\n    return true;\n  }\n  // adds, updates or unsets (if boost = null) a subview with his score.\n  get_setSubViewScore(c) {\n    return function (subview) {\n      let boost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1.5;\n      let subviews = {\n        ...c.data.subViews\n      };\n      let ptr = Pointers.from(subview);\n      if (boost !== null) {\n        // set mode\n        if (subviews[ptr] === boost) return;\n        subviews[ptr] = boost;\n      } else {\n        // set mode\n        if (subviews[ptr] === undefined) return;\n        delete subviews[ptr];\n      }\n      SetFieldAction.new(c.data, 'subViews', subviews, '', true);\n    };\n  }\n  get_allSubViews(c) {\n    delete c.data.subViews.clonedCounter;\n    let arr = Object.keys(c.data.subViews);\n    let nextarr = [];\n    let idmap = {};\n    let s = store.getState();\n    let dview;\n    while (arr.length) {\n      for (let vid of arr) {\n        if (idmap[vid]) continue;\n        dview = DPointerTargetable.fromPointer(vid, s);\n        if (!dview) continue;\n        idmap[vid] = dview;\n        U.arrayMergeInPlace(nextarr, Object.keys(dview.subViews));\n      }\n      arr = nextarr;\n      nextarr = [];\n    }\n    return LPointerTargetable.fromD(Object.values(idmap));\n  }\n  set_allSubViews(val, c) {\n    return this.wrongAccessMessage(\"cannot call set_allSubViews, it is a derived attribute\");\n  }\n\n  // ocl selector\n\n  get_oclCondition(context) {\n    return context.data.oclCondition;\n  }\n  set_oclCondition(val, context) {\n    val = (val || '').trim();\n    if (val === context.data.oclCondition) return true;\n    TRANSACTION(() => {\n      SetFieldAction.new(context.data, 'oclCondition', val, '', false);\n      SetRootFieldAction.new('VIEWS_RECOMPILE_ocl', context.data.id, '+=', false); // it is pointer, but for transient stuff there is no need to set pointedby's\n    });\n\n    return true;\n  }\n\n  // js selector\n\n  get_jsCondition(context) {\n    return context.data.jsCondition;\n  }\n  set_jsCondition(val, context) {\n    val = (val || '').trim();\n    if (val === context.data.jsCondition) return true;\n    TRANSACTION(() => {\n      SetFieldAction.new(context.data, 'jsCondition', val, '', false);\n      SetRootFieldAction.new('VIEWS_RECOMPILE_jsCondition', context.data.id, '+=', false);\n    });\n    return true;\n  }\n\n  // todo: how about allowing a view to be part in multiple vp's? so this reference would be an array or removed, and you navigate only from vp to v.\n\n  get_onDragStart(context) {\n    return context.data.onDragStart;\n  }\n  set_onDragStart(val, context) {\n    TRANSACTION(() => {\n      SetFieldAction.new(context.data, 'onDragStart', val, '', false);\n      SetRootFieldAction.new('VIEWS_RECOMPILE_onDragStart', context.data.id, '+=', false);\n    });\n    return true;\n  }\n  get_onDragEnd(context) {\n    return context.data.onDragEnd;\n  }\n  set_onDragEnd(val, context) {\n    TRANSACTION(() => {\n      SetFieldAction.new(context.data, 'onDragEnd', val, '', false);\n      SetRootFieldAction.new('VIEWS_RECOMPILE_onDragEnd', context.data.id, '+=', false);\n    });\n    return true;\n  }\n  get_whileDragging(context) {\n    return context.data.whileDragging;\n  }\n  set_whileDragging(val, context) {\n    TRANSACTION(() => {\n      SetFieldAction.new(context.data, 'whileDragging', val, '', false);\n      SetRootFieldAction.new('VIEWS_RECOMPILE_whileDragging', context.data.id, '+=', false);\n    });\n    return true;\n  }\n  get_onResizeStart(context) {\n    return context.data.onResizeStart;\n  }\n  set_onResizeStart(val, context) {\n    TRANSACTION(() => {\n      SetFieldAction.new(context.data, 'onResizeStart', val, '', false);\n      SetRootFieldAction.new('VIEWS_RECOMPILE_onResizeStart', context.data.id, '+=', false);\n    });\n    return true;\n  }\n  get_onResizeEnd(context) {\n    return context.data.onResizeEnd;\n  }\n  set_onResizeEnd(val, context) {\n    TRANSACTION(() => {\n      SetFieldAction.new(context.data, 'onResizeEnd', val, '', false);\n      SetRootFieldAction.new('VIEWS_RECOMPILE_onResizeEnd', context.data.id, '+=', false);\n    });\n    return true;\n  }\n  get_whileResizing(context) {\n    return context.data.whileResizing;\n  }\n  set_whileResizing(val, context) {\n    TRANSACTION(() => {\n      SetFieldAction.new(context.data, 'whileResizing', val, '', false);\n      SetRootFieldAction.new('VIEWS_RECOMPILE_whileResizing', context.data.id, '+=', false);\n    });\n    return true;\n  }\n  get_onRotationStart(context) {\n    return context.data.onRotationStart;\n  }\n  set_onRotationStart(val, context) {\n    TRANSACTION(() => {\n      SetFieldAction.new(context.data, 'onRotationStart', val, '', false);\n      SetRootFieldAction.new('VIEWS_RECOMPILE_onRotationStart', context.data.id, '+=', false);\n    });\n    return true;\n  }\n  get_onRotationEnd(context) {\n    return context.data.onRotationEnd;\n  }\n  set_onRotationEnd(val, context) {\n    TRANSACTION(() => {\n      SetFieldAction.new(context.data, 'onRotationEnd', val, '', false);\n      SetRootFieldAction.new('VIEWS_RECOMPILE_onRotationEnd', context.data.id, '+=', false);\n    });\n    return true;\n  }\n  get_whileRotating(context) {\n    return context.data.whileRotating;\n  }\n  set_whileRotating(val, context) {\n    TRANSACTION(() => {\n      SetFieldAction.new(context.data, 'whileRotating', val, '', false);\n      SetRootFieldAction.new('VIEWS_RECOMPILE_whileRotating', context.data.id, '+=', false);\n    });\n    return true;\n  }\n  get_onDataUpdate(context) {\n    return context.data.onDataUpdate;\n  }\n  set_onDataUpdate(val, context) {\n    TRANSACTION(() => {\n      SetFieldAction.new(context.data, 'onDataUpdate', val, '', false);\n      SetRootFieldAction.new('VIEWS_RECOMPILE_onDataUpdate', context.data.id, '+=', false);\n    });\n    return true;\n  }\n  get_event(c) {\n    return this.get_events(c);\n  }\n  get_events(c) {\n    Log.exx(\"use node.events instead\", U.getStackTrace());\n    return {};\n    // return transientProperties.view[c.data.id]?.events || {};\n  }\n\n  set_events(val, context) {\n    const addUD = true;\n    TRANSACTION(() => {\n      SetFieldAction.new(context.data, 'events', val, '+=', false);\n      SetRootFieldAction.new('VIEWS_RECOMPILE_events', {\n        vid: context.data.id,\n        keys: Object.keys(val)\n      }, '+=', false);\n      let udstr = context.data.usageDeclarations;\n      if (!addUD || !udstr) return;\n      let delta = U.objectDelta(context.data.events, val, false);\n      for (let key in delta) {\n        let v = val[key];\n        let autogenstr = 'ret.' + key + ' = node.events.' + key + '; // @autogenerated, do not edit\\n';\n        if (!v) udstr = udstr.split(autogenstr).join('');else {\n          if (!context.data.events[key]) {\n            // insert\n            let findstr = '// ** declarations here ** //\\n';\n            let insertat = udstr.indexOf(findstr);\n            if (insertat === -1) continue; // malformed ud, will skip\n            insertat += findstr.length;\n            udstr = udstr.substring(0, insertat) + autogenstr + udstr.substring(insertat);\n          } else {\n            // just updated func body, no name changed, no need to update UD.\n          }\n        }\n      }\n      if (udstr === context.data.usageDeclarations) return;\n      SetFieldAction.new(context.data, 'usageDeclarations', udstr, '', false);\n      SetRootFieldAction.new('VIEWS_RECOMPILE_usageDeclarations', context.data.id, '+=', false);\n    });\n    return true;\n  }\n\n  /*\r\n  bindVertexSizeToView!: boolean;\r\n  __info_of__bindVertexSizeToView: Info = {isNode:true, type:ShortAttribETypes.EBoolean, label:\"bind sizes to view\",\r\n      txt: <div>Store the vertex size inside the view instead of inside the vertex.\r\n          <br/>This causes the vertex to have different positions according to the view currently appied to it.</div>}*/\n\n  set_edgePointCoordMode(val, c) {\n    TRANSACTION(() => {\n      setTimeout(() => {\n        // needs to be done after coordinatemode change is applied\n        let s = store.getState();\n        for (let nid in transientProperties.node) {\n          var _tn$mainView;\n          let tn = transientProperties.node[nid];\n          if (!tn || ((_tn$mainView = tn.mainView) === null || _tn$mainView === void 0 ? void 0 : _tn$mainView.id) !== c.data.id) continue;\n          let lnode = LPointerTargetable.fromPointer(nid, s);\n          let triggerCoordinateModeChange = lnode;\n          triggerCoordinateModeChange.size = lnode.size;\n        }\n      }, 100);\n      SetFieldAction.new(c.data, 'edgePointCoordMode', val, '', false);\n    });\n    return true;\n  }\n\n  // use getSize, updateSize;\n\n  // public _parsedConstants!: GObject;\n  // public get__parsedConstants(c: Context): this['_parsedConstants'] { return c.data._parsedConstants || {}; }\n  get_constants(c) {\n    return c.data.constants;\n  }\n  static parseConstants(funcCode) {\n    if (!funcCode) return {};\n    let parsedConstants = {};\n    let context = {\n      __param: parsedConstants\n    };\n    context.__proto__ = windoww.defaultContext;\n    try {\n      let parsedFunc = U.parseFunctionWithContextAndScope(funcCode, context, context, ['ret']);\n      parsedFunc(context, parsedConstants);\n      // U.evalInContextAndScopeNew( \"(\"+funcCode+\")(this.__param)\", context, true, false, false);\n    } catch (e) {\n      Log.ee(\"Attempted to save an invalid view.constant setup. Cause:\\n\" + e.message.split(\"\\n\")[0], e);\n      return undefined;\n    }\n    return parsedConstants;\n  }\n  set_constants(value, c) {\n    if (value === c.data.constants) return true;\n    TRANSACTION(() => {\n      SetFieldAction.new(c.data.id, 'constants', value, '', false);\n      SetRootFieldAction.new('VIEWS_RECOMPILE_constants', c.data.id, '+=', false);\n      SetFieldAction.new(c.data.id, \"css_MUST_RECOMPILE\", true, '', false);\n    });\n    return true;\n  }\n  get_preRenderFunc(c) {\n    return c.data.preRenderFunc;\n  }\n  set_preRenderFunc(value, c) {\n    const _value = value ? value : '() => {}';\n    return SetFieldAction.new(c.data.id, 'preRenderFunc', _value, '', false);\n  }\n  get_edgeHeadSize(c) {\n    return new GraphPoint(c.data.edgeHeadSize.x, c.data.edgeHeadSize.y);\n  }\n  get_edgeTailSize(c) {\n    return new GraphPoint(c.data.edgeTailSize.x, c.data.edgeTailSize.y);\n  }\n  set_edgeHeadSize(v, c) {\n    let s = c.data.edgeHeadSize || new GraphPoint(0, 0);\n    if (!(\"x\" in v)) v.x = s.x;\n    if (!(\"y\" in v)) v.y = s.y;\n    TRANSACTION(() => {\n      SetFieldAction.new(c.data.id, \"css_MUST_RECOMPILE\", true, '', false);\n      SetFieldAction.new(c.data.id, \"edgeHeadSize\", v, '', false);\n    });\n    return true;\n  }\n  set_edgeTailSize(v, c) {\n    let s = c.data.edgeTailSize || new GraphPoint(0, 0);\n    if (!(\"x\" in v)) v.x = s.x;\n    if (!(\"y\" in v)) v.y = s.y;\n    TRANSACTION(() => {\n      SetFieldAction.new(c.data.id, \"css_MUST_RECOMPILE\", true, '', false);\n      SetFieldAction.new(c.data.id, \"edgeTailSize\", v, '', false);\n    });\n    return true;\n  }\n  get_fatherChain(c) {\n    let current = this.get_father(c);\n    if (!current) return [];\n    let ret = [];\n    while (current) {\n      ret.push(current);\n      current = current.father;\n    }\n    return ret;\n  }\n  get_father(c) {\n    return LViewPoint.fromPointer(c.data.father);\n  }\n  get_viewpoint(c) {\n    let p = c.data.father;\n    if (!p) return LPointerTargetable.fromD(c.data);\n    let curr = LPointerTargetable.fromPointer(p);\n    while (curr) {\n      let prev = curr.father;\n      if (!prev) return curr;\n      curr = prev;\n    }\n    return undefined;\n  }\n  // public set_subViews(v: Pointer<DViewPoint>[], context: Context): boolean { return this.cannotSet('subViews, call set_viewpoint on the sub-elements instead.'); }\n\n  // WARNING!! if there are mass vp assignments, preserveOrder=true will cause a vp to \"lose\" subviews and keep only the last assigned.\n  set_viewpoint(v, context, manualDview) {\n    let preserveOrder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    Log.exDevv('setViewpoint() should not be called, call view.setFather(viewpoint) instead');\n    return true;\n  }\n  set_father(v, context, manualDview) {\n    let preserveOrder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let ret = false;\n    let pvid = v && Pointers.from(v);\n    const data = manualDview || context.data;\n    let id = data.id;\n    let oldpvid = data.father;\n    if (pvid === oldpvid) return true;\n    TRANSACTION(() => {\n      ret = SetFieldAction.new(id, \"father\", pvid, '', true);\n      if (oldpvid) {\n        let subViews = {\n          ...DPointerTargetable.fromPointer(oldpvid).subViews\n        };\n        delete subViews[id];\n        SetFieldAction.new(oldpvid, \"subViews\", subViews, '', true);\n      }\n      if (pvid) {\n        let name = data.name;\n        let copyPos = name.indexOf(\"Copy\");\n        let oldSubViews = DPointerTargetable.fromPointer(pvid).subViews;\n        let insertBefore = '';\n        let subViews = {};\n        if (copyPos) {\n          let copiedFromName = copyPos ? name.substring(0, copyPos).trim() : '';\n          if (copiedFromName in oldSubViews) insertBefore = copiedFromName;else {\n            for (let key in oldSubViews) if (key.indexOf(copiedFromName) === 0) {\n              insertBefore = key;\n              break;\n            }\n          }\n        }\n\n        // WARNING!! if there are mass vp assignments, this will cause a vp to \"lose\" subviews and keep only the last assigned.\n        if (preserveOrder && insertBefore) {\n          subViews = {};\n          for (let key in oldSubViews) {\n            subViews[key] = oldSubViews[key];\n            // just to reinsert subviews **in order** so Object.keys() fits the new subview near the cloned one.\n            if (key === insertBefore) subViews[id] = subViews[insertBefore];\n          }\n        } else {\n          subViews = {\n            ...oldSubViews\n          };\n          subViews[id] = 1.5;\n        }\n        subViews[id] = insertBefore ? subViews[insertBefore] : 1.5;\n        SetFieldAction.new(pvid, \"subViews\", subViews, '+=', true);\n      }\n    });\n    return ret;\n  }\n  get_subViews(context) {\n    let subViewsPointers = context.data.subViews;\n    let subViews = [];\n    for (let pointer in subViewsPointers) {\n      let item = MyProxyHandler.wrap(pointer);\n      if (item !== undefined) subViews.push(item);\n    }\n    return subViews;\n  }\n\n  // returns the delta of change\n  updateSize(id, size) {\n    return this.wrongAccessMessage(\"updateSize\");\n  }\n  get_updateSize(context) {\n    return (id, size0) => {\n      let size = size0;\n      let vp = context.proxyObject.viewpoint;\n      if (!context.data.storeSize) {\n        if (vp === null || vp === void 0 ? void 0 : vp.storeSize) return vp.updateSize(id, size);\n        return false;\n      }\n      let vsize = context.data.size[id] || (vp === null || vp === void 0 ? void 0 : vp.__raw.size[id]);\n      let newSize = new GraphSize();\n      if (size.currentCoordType === vsize.currentCoordType) {\n        // if samecoord system mix them.\n        newSize.x = (size === null || size === void 0 ? void 0 : size.x) !== undefined ? size.x : vsize.x;\n        newSize.y = (size === null || size === void 0 ? void 0 : size.y) !== undefined ? size.y : vsize.y;\n      } else if (size.x !== undefined && size.y !== undefined) {\n        // if different coord system pick all of size\n        newSize.x = size.x;\n        newSize.y = size.y;\n        newSize.currentCoordType = size.currentCoordType || CoordinateMode.absolute;\n      } else if (vsize.x !== undefined && vsize.y !== undefined) {\n        // or all of vsize if size was invalid\n        newSize.x = vsize.x;\n        newSize.y = vsize.y;\n        newSize.currentCoordType = vsize.currentCoordType || CoordinateMode.absolute;\n      }\n      let defaultsize = context.data.defaultVSize || (vp === null || vp === void 0 ? void 0 : vp.__raw.defaultVSize);\n      if (newSize.x === undefined || newSize.y === undefined) {\n        // only if pos is invalid, i take defaultvsize and force to use coord absolute.\n        newSize = new GraphSize().clone(defaultsize);\n        newSize.currentCoordType = CoordinateMode.absolute;\n      }\n      // w and h are always absolute so they can be mixed to whathever coordinate mode indipendently from the rest.\n      newSize.w = (size === null || size === void 0 ? void 0 : size.w) !== undefined ? size.w : vsize.w;\n      newSize.h = (size === null || size === void 0 ? void 0 : size.h) !== undefined ? size.h : vsize.h;\n      if (newSize.h === undefined) newSize.h = defaultsize.h || 10;\n      if (newSize.w === undefined) newSize.w = defaultsize.w || 10;\n      if (!newSize.equals(vsize)) SetFieldAction.new(context.data.id, \"size.\" + id, newSize);\n      return true;\n    };\n  }\n  get_defaultVSize(context) {\n    return context.data.defaultVSize;\n  }\n  getSize(id) {\n    return this.wrongAccessMessage(\"getSize\");\n  }\n  get_getSize(context) {\n    function impl_getSize(id) {\n      if (typeof id === \"object\") id = id.id;\n      let view = context.data;\n      let ret;\n      if (view.storeSize) {\n        ret = view.size[id];\n        if (ret) return ret;\n      }\n      let vp = context.proxyObject.viewpoint;\n      if (vp && view.id !== vp.id && vp.storeSize) {\n        ret = vp.size[id];\n        if (ret) return ret;\n      }\n      return undefined;\n    }\n    return impl_getSize;\n  }\n  set_generic_entry(context, key, val) {\n    console.log('set_generic_entry', {\n      context,\n      key,\n      val\n    });\n    SetFieldAction.new(context.data, key, val);\n    return true;\n  }\n  get_children(context) {\n    return this.get_subViews(context);\n  }\n  get_lazySizeUpdate(context) {\n    return Debug.lightMode || context.data.lazySizeUpdate;\n  }\n  set_lazySizeUpdate(val, context) {\n    return Debug.lightMode || this.set_generic_entry(context, 'lazySizeUpdate', val);\n  }\n  get_bendingMode(context) {\n    return context.data.bendingMode;\n  }\n  set_bendingMode(val, context) {\n    return this.set_generic_entry(context, 'bendingMode', val);\n  }\n  set_appliableTo(val, c) {\n    // appliableTo >= forcenodetype\n    if (!val) val = 'Any';\n    let forceNodeType = c.data.forceNodeType;\n    if (forceNodeType !== val) switch (val) {\n      // case \"Any\": break;\n      default:\n        forceNodeType = val;\n    }\n    console.log(\"set_appliableTo\", {\n      forceNodeType,\n      val\n    });\n    BEGIN();\n    if (forceNodeType !== c.data.forceNodeType) SetFieldAction.new(c.data, \"forceNodeType\", forceNodeType, '', false);\n    SetFieldAction.new(c.data, \"appliableTo\", val, '', false);\n    END();\n    return true;\n  }\n  set_forceNodeType(val, c) {\n    if (!val) val = 'Any';\n    /*let appliableTo: string = c.data.appliableTo as string;\r\n    if (appliableTo !== val) switch (appliableTo){\r\n        case undefined: case 'Any': break;\r\n        //case 'GraphVertex': if ((appliableTo as any) !== 'Graph' && (appliableTo as any) !== 'Vertex') appliableTo = val; break;\r\n        default: appliableTo = val; break;\r\n    }*/\n    BEGIN();\n    // if (appliableTo !== c.data.appliableTo) SetFieldAction.new(c.data, \"appliableTo\", appliableTo, '', false);\n    SetFieldAction.new(c.data, \"forceNodeType\", val, '', false);\n    END();\n    return true;\n  }\n  get_appliableToClasses(context) {\n    return context.data.appliableToClasses || [];\n  }\n  set_appliableToClasses(val, context) {\n    var _context$data$appliab;\n    if (!val) val = [];else if (!Array.isArray(val)) val = [val];\n    val.sort();\n    let hasChanged;\n    if (val.length === ((_context$data$appliab = context.data.appliableToClasses) === null || _context$data$appliab === void 0 ? void 0 : _context$data$appliab.length)) {\n      hasChanged = false;\n      for (let i = 0; i < val.length; i++) if (val[i] !== context.data.appliableToClasses[i]) {\n        hasChanged = true;\n        break;\n      }\n    } else hasChanged = true;\n    if (!hasChanged) return true;\n    TRANSACTION(() => {\n      this.set_generic_entry(context, \"appliableToClasses\", val);\n      SetRootFieldAction.new('VIEWS_RECOMPILE_preconditions', context.data.id, '+=', false);\n    });\n    return true;\n  }\n  set_defaultVSize(val, c) {\n    var _val$x, _val$y, _val$w, _val$h;\n    if (!val || typeof val !== \"object\") return true;\n    let x = (_val$x = val.x) !== null && _val$x !== void 0 ? _val$x : +val.x;\n    let y = (_val$y = val.y) !== null && _val$y !== void 0 ? _val$y : +val.y;\n    let w = (_val$w = val.w) !== null && _val$w !== void 0 ? _val$w : +val.w;\n    let h = (_val$h = val.h) !== null && _val$h !== void 0 ? _val$h : +val.h;\n    if (isNaN(x)) x = c.data.defaultVSize.x;\n    if (isNaN(y)) y = c.data.defaultVSize.y;\n    if (isNaN(w)) w = c.data.defaultVSize.w;\n    if (isNaN(h)) h = c.data.defaultVSize.h;\n    if (x === c.data.defaultVSize.x && y === c.data.defaultVSize.y && w === c.data.defaultVSize.w && h === c.data.defaultVSize.h) return true;\n    SetFieldAction.new(c.data, 'defaultVSize', {\n      x,\n      y,\n      w,\n      h\n    }, '', false);\n    return true;\n  }\n  duplicate() {\n    let deep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let new_vp = arguments.length > 1 ? arguments[1] : undefined;\n    return this.wrongAccessMessage(this.constructor.cname + \"duplicate()\");\n  }\n  get_duplicate(c) {\n    var _this = this;\n    return function () {\n      let deep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      let new_vp0 = arguments.length > 1 ? arguments[1] : undefined;\n      console.log(\"DViewelement.duplicate\", {\n        cn: c.data.className,\n        n: c.data.name,\n        deep,\n        new_vp0\n      });\n      let lview = undefined;\n      let state = store.getState();\n      TRANSACTION(() => {\n        let pvid = c.data.viewpoint;\n        const dclone = c.data.className === 'DViewPoint' ? DViewPoint.new2(`${c.data.name} Copy`, '', undefined, true) : DViewElement.new2(`${c.data.name} Copy`, '', undefined, true, 'skip');\n        lview = LPointerTargetable.fromD(dclone);\n        const new_vp = new_vp0 || {\n          pvid\n        };\n        // || {pvid,  score: (DPointerTargetable.from(pvid, state) as DViewElement).subViews[c.data.id]}\n\n        for (let key in c.data) {\n          switch (key) {\n            case 'subViews':\n              // duplicate childrens only if deep\n              if (!deep) break;\n              // let subviews: Dictionary<Pointer, number> = {}\n              for (const oldvid in c.data.subViews) {\n                const oldScore = c.data.subViews[oldvid];\n                LPointerTargetable.fromPointer(oldvid, state).duplicate(deep, {\n                  pvid: dclone.id /*, score:oldScore*/\n                });\n                // then everything is set inside case 'viewpoint' of subviews cloning\n              }\n              //lview.subViews = subviews as any;\n              break;\n            case 'father':\n              _this.set_father(new_vp.pvid, undefined, dclone, !deep);\n              break;\n            case 'viewpoint':\n              // update parent view\n              /*\r\n              let subviews: Dictionary<Pointer, number> = {};\r\n              subviews[dclone.id] = new_vp.score;\r\n              SetFieldAction.new(new_vp.pvid, 'subViews', subviews, '+=', true);\r\n              SetFieldAction.new(dclone.id, 'viewpoint', new_vp.pvid, '+=', true);*/\n              // insert in-place right after the cloned view, with old score.\n              //this.set_viewpoint(new_vp.pvid, undefined as any, dclone, !deep);\n              // SetFieldAction.new(dclone.id, 'father', new_vp.vpid, '+=', true);\n              break;\n            case '':\n            case 'id':\n            case 'name':\n            case 'className':\n            case 'pointedBy':\n            case '_storePath':\n            case '_subMaps':\n            case 'clonedCounter':\n              break;\n            case 'css_MUST_RECOMPILE':\n              break;\n            case 'isValidation':\n              console.log(\"duplicate \" + c.data.name + \" set isvalidation\", {\n                data: c.data,\n                iv: c.data.isValidation\n              });\n              lview[key] = c.data[key];\n              break;\n            default:\n              try {\n                lview[key] = c.data[key];\n              } catch (e) {\n                //    Log.ee('Error on duplicate view:', e);\n              }\n          }\n        }\n\n        // insert in viewpoint.subview\n        //let defaultViews: Dictionary<Pointer, boolean> = Defaults.defaultViewsMap;\n        let vp = c.proxyObject.viewpoint;\n        // let oldViews: Pointer<DViewElement>[] = Object.keys(vp.__raw.subViews);\n        // if (Defaults.viewpoints.indexOf(vpid)) oldViews = oldViews.filter( vid => !defaultViews[vid]);\n        // let i: number = oldViews.indexOf(c.data.id);\n        /*\r\n        if (i === -1) oldViews.push(dclone.id);\r\n        else oldViews.splice(i+1, 0, dclone.id); // insert in-place right after the cloned view\r\n        vp.subViews = oldViews as any;*/\n        // SetRootFieldAction.new('stackViews', dview.id, '+=', true);\n\n        const isVP = c.data.className === 'DViewPoint';\n        if (isVP) SetRootFieldAction.new(`viewpoints`, c.data.id, '+=', true);else SetRootFieldAction.new(`viewelements`, c.data.id, '+=', true);\n        for (let key of DViewElement.RecompileKeys) SetRootFieldAction.new(`VIEWS_RECOMPILE_${key}`, c.data.id, '+=', false);\n      });\n      return lview;\n    };\n  }\n}, _class4.subclasses = [], _class4._extends = [], _class4)) || _class3);\nRuntimeAccessibleClass.set_extend(DPointerTargetable, DViewElement);\nRuntimeAccessibleClass.set_extend(LPointerTargetable, LViewElement);\nexport let DViewTransientProperties = (_dec3 = RuntimeAccessible('DViewTransientProperties'), _dec3(_class5 = (_class6 = class DViewTransientProperties extends RuntimeAccessibleClass {\n  constructor() {\n    super(...arguments);\n    this._isDViewTransientProperties = void 0;\n  } // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\n  // private: DViewPrivateTransientProperties;\n}, _class6.logic = void 0, _class6)) || _class5);\nRuntimeAccessibleClass.set_extend(RuntimeAccessibleClass, DViewTransientProperties);\nexport let LViewTransientProperties = (_dec4 = RuntimeAccessible('LViewTransientProperties'), _dec4(_class7 = (_class8 = class LViewTransientProperties extends LPointerTargetable {\n  constructor() {\n    super(...arguments);\n    this._isLViewTransientProperties = void 0;\n  } // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\n  // private!: LViewPrivateTransientProperties;\n  /*\r\n      get_private(context: LogicContext<DViewTransientProperties>): LViewPrivateTransientProperties {\r\n          return LViewTransientProperties.wrap(context.data.private, context.proxy.baseObjInLookup, context.proxy.additionalPath + '.private'); }*/\n  /*\r\n      get_isSelected(logicContext: LogicContext<TargetableProxyHandler<DViewTransientProperties>, DViewTransientProperties>): Proxyfied<Dictionary> {\r\n          // @ts-ignore for $ at end of getpath\r\n          console.log('GET_ISSELECTED handler func');\r\n          return TargetableProxyHandler.getMap(logicContext.data.isSelected, logicContext, logicContext.proxy.additionalPath + '.' + (getPath as this).isSelected.$);\r\n      }*/\n}, _class8.structure = void 0, _class8.singleton = void 0, _class8)) || _class7);\nRuntimeAccessibleClass.set_extend(DPointerTargetable, DViewTransientProperties);\nRuntimeAccessibleClass.set_extend(LPointerTargetable, LViewTransientProperties);\n\n/*\r\n\r\n@RuntimeAccessible\r\nexport class DViewPrivateTransientProperties extends DPointerTargetable{\r\n    static logic: typeof LViewPrivateTransientProperties;\r\n\r\n    public size: GraphSize\r\n    constructor(size?: GraphSize) {\r\n        super();\r\n        this.size = size || defaultVSize;\r\n    }\r\n}\r\n\r\n@RuntimeAccessible\r\nexport class LViewPrivateTransientProperties extends DViewPrivateTransientProperties{\r\n    static structure: typeof DViewPrivateTransientProperties;\r\n    static singleton: LViewPrivateTransientProperties;\r\n\r\n}*/\n// shapeless component, receive jsx from redux\n// can access any of the redux state, but will usually access 1-2 var among many,\n// how can i dynamically mapStateToProps to map only the required ones?","map":{"version":3,"names":["BEGIN","Constructors","CoordinateMode","Debug","Defaults","DPointerTargetable","DViewPoint","EdgeBendingMode","EdgeGapMode","EGraphElements","EModelElements","END","GraphPoint","GraphSize","Log","LPointerTargetable","LUser","LViewPoint","MyProxyHandler","Pointers","RuntimeAccessible","RuntimeAccessibleClass","Selectors","SetFieldAction","SetRootFieldAction","ShortAttribETypes","store","TRANSACTION","U","windoww","DUser","transientProperties","jsxDEV","_jsxDEV","Fragment","_Fragment","CSS_Units0","CSS_Units","pattern","jsx","id","children","Object","keys","map","k1","v1","console","log","karr","k1arr","label","k","v","push","value","title","fileName","_jsxFileName","lineNumber","columnNumber","join","DViewElement","_dec","_class","_class2","constructor","arguments","isValidation","name","isExclusiveView","constants","preRenderFunc","jsxString","usageDeclarations","forceNodeType","appliableToClasses","appliableTo","subViews","oclCondition","jsCondition","oclUpdateCondition","OCL_NEEDS_RECALCULATION","OCL_UPDATE_NEEDS_RECALCULATION","explicitApplicationPriority","defaultVSize","adaptHeight","adaptWidth","draggable","resizable","viewpoint","onDataUpdate","onDragStart","onDragEnd","whileDragging","onResizeStart","onResizeEnd","whileResizing","onRotationStart","onRotationEnd","whileRotating","events","bendingMode","edgeGapMode","storeSize","size","lazySizeUpdate","edgeStartOffset","edgeEndOffset","edgeStartOffset_isPercentage","edgeEndOffset_isPercentage","edgeStartStopAtBoundaries","edgeEndStopAtBoundaries","edgePointCoordMode","edgeHeadSize","edgeTailSize","palette","css","cssIsGlobal","compiled_css","css_MUST_RECOMPILE","father","new","length","undefined","priority","persist","isDefaultView","vp","end","new2","callback","newDefault","forData","palettes","type","r","g","b","a","query","className","user","fromPointer","current","_user$project","project","activeViewpoint","viewpoints","names","increaseEndingNumber","newName","indexOf","d","subclasses","_extends","MeasurableKeys","RecompileKeys","LViewElement","_dec2","_class3","_class4","__raw","__info_of__name","isGlobal","EString","txt","isOverlay","__info_of__isOverlay","EBoolean","allPossibleParentViews","__info_of__allPossibleParentViews","__info_of__explicitApplicationPriority","EByte","__info_of__isExclusiveView","__info_of__constants","todo","__info_of__preRenderFunc","obsolete","__info_of__jsxString","href","__info_of__usageDeclarations","__info_of__oclUpdateCondition","readType","writeType","__info_of__cssIsGlobal","__info_of__css","__info_of__compiled_css","hidden","__info_of__palette","__info_of__forceNodeType","enum","zoom","__info_of__zoom","isNode","cname","__info_of__appliableToClasses","__info_of__subViews","setSubViewScore","__info_of__setSubViewScore","allSubViews","__info_of__allSubViews","__info_of__defaultVSize","__info_of__adaptWidth","__info_of__adaptHeight","__info_of__draggable","__info_of__resizable","__info_of__oclCondition","__info_of__jsCondition","__info_of__viewpoint","display","__info_of__display","__info_of__onDragStart","__info_of__onDragEnd","__info_of__whileDragging","__info_of__onResizeStart","__info_of__onResizeEnd","__info_of__whileResizing","__info_of__onRotationStart","__info_of__onRotationEnd","__info_of__whileRotating","__info_of__onDataUpdate","event","__info_of__events","__info_of__event","constraints","__info_of__constraints","__info_of__bendingMode","isEdge","__info_of__edgeGapMode","__info_of__storeSize","__info_of__lazySizeUpdate","__info_of__edgeStartOffset","__info_of__edgeEndOffset","__info_of__edgeStartOffset_isPercentage","__info_of__edgeEndOffset_isPercentage","__info_of__edgeStartStopAtBoundaries","__info_of__edgeEndStopAtBoundaries","__info_of__edgePointCoordMode","isEdgePoint","__info_of__edgeHeadSize","__info_of__edgeTailSize","__info_of__size","EInt","__info_of__updateSize","__info_of__getSize","fatherChain","__info_of__fatherChain","get_isOverlay","c","get_isExclusiveView","set_isOverlay","val","set_isExclusiveView","get_allPossibleParentViews","subviewsarr","get_allSubViews","subviews","objectFromArray","sv","allviewsarr","getAll","allviews","data","values","get_explicitApplicationPriority","_c$data$jsCondition","_c$data$oclCondition","set_explicitApplicationPriority","check","_defaultGetter","__defaultGetter","_defaultSetter","__defaultSetter","get_jsxString","context","set_jsxString","get_usageDeclarations","set_usageDeclarations","get_oclUpdateCondition","view","oclUpdateCondition_PARSED","set_oclUpdateCondition","get_cssIsGlobal","set_cssIsGlobal","get_css","set_css","get_compiled_css","s","allowLESS","shortPaletteName","cc","rgbastring","exDev","p","paletteName","palette0","colors","includes","substring","rgba","i","replaceAll","x","y","valarr","split","isNaN","patharr","curr","pathseg","e","token","ee","filter","unit","localViewSelector","set_compiled_css","exx","get_palette","set_palette","get_SubViews","clonedCounter","vid","set_SubViews","subviewsmap","Array","isArray","ptrsArr","fromArr","objectFromArrayValues","get_setSubViewScore","subview","boost","ptr","from","arr","nextarr","idmap","getState","dview","arrayMergeInPlace","fromD","set_allSubViews","wrongAccessMessage","get_oclCondition","set_oclCondition","trim","get_jsCondition","set_jsCondition","get_onDragStart","set_onDragStart","get_onDragEnd","set_onDragEnd","get_whileDragging","set_whileDragging","get_onResizeStart","set_onResizeStart","get_onResizeEnd","set_onResizeEnd","get_whileResizing","set_whileResizing","get_onRotationStart","set_onRotationStart","get_onRotationEnd","set_onRotationEnd","get_whileRotating","set_whileRotating","get_onDataUpdate","set_onDataUpdate","get_event","get_events","getStackTrace","set_events","addUD","udstr","delta","objectDelta","key","autogenstr","findstr","insertat","set_edgePointCoordMode","setTimeout","nid","node","_tn$mainView","tn","mainView","lnode","triggerCoordinateModeChange","get_constants","parseConstants","funcCode","parsedConstants","__param","__proto__","defaultContext","parsedFunc","parseFunctionWithContextAndScope","message","set_constants","get_preRenderFunc","set_preRenderFunc","_value","get_edgeHeadSize","get_edgeTailSize","set_edgeHeadSize","set_edgeTailSize","get_fatherChain","get_father","ret","get_viewpoint","prev","set_viewpoint","manualDview","preserveOrder","exDevv","set_father","pvid","oldpvid","copyPos","oldSubViews","insertBefore","copiedFromName","get_subViews","subViewsPointers","pointer","item","wrap","updateSize","get_updateSize","size0","proxyObject","vsize","newSize","currentCoordType","absolute","defaultsize","clone","w","h","equals","get_defaultVSize","getSize","get_getSize","impl_getSize","set_generic_entry","get_children","get_lazySizeUpdate","lightMode","set_lazySizeUpdate","get_bendingMode","set_bendingMode","set_appliableTo","set_forceNodeType","get_appliableToClasses","set_appliableToClasses","_context$data$appliab","sort","hasChanged","set_defaultVSize","_val$x","_val$y","_val$w","_val$h","duplicate","deep","new_vp","get_duplicate","_this","new_vp0","cn","n","lview","state","dclone","oldvid","oldScore","iv","isVP","set_extend","DViewTransientProperties","_dec3","_class5","_class6","_isDViewTransientProperties","logic","LViewTransientProperties","_dec4","_class7","_class8","_isLViewTransientProperties","structure","singleton"],"sources":["C:/d/Programming/web/jodel-mde/src/view/viewElement/view.tsx"],"sourcesContent":["import {\r\n    BEGIN,\r\n    Constructors,\r\n    CoordinateMode,\r\n    Debug, DEdgePoint,\r\n    Defaults,\r\n    DGraphElement,\r\n    Dictionary,\r\n    DModelElement,\r\n    DNamedElement,\r\n    DocString,\r\n    DPointerTargetable,\r\n    DState,\r\n    DViewPoint,\r\n    EdgeBendingMode,\r\n    EdgeGapMode,\r\n    EGraphElements,\r\n    EModelElements,\r\n    END,\r\n    getWParams,\r\n    GObject,\r\n    GraphPoint,\r\n    GraphSize,\r\n    Info, LEdgePoint, LModelElement,\r\n    Log,\r\n    LogicContext,\r\n    LPointerTargetable, LUser,\r\n    LViewPoint,\r\n    MyProxyHandler,\r\n    Pointer,\r\n    Pointers,\r\n    RuntimeAccessible,\r\n    RuntimeAccessibleClass,\r\n    Selectors,\r\n    SetFieldAction, SetRootFieldAction,\r\n    ShortAttribETypes,\r\n    store,\r\n    TRANSACTION,\r\n    U, ViewEClassMatch,\r\n    windoww\r\n} from \"../../joiner\";\r\nimport {DUser, EPSize, Pack1, transientProperties } from \"../../joiner/classes\";\r\nimport DSL from \"../../DSL/DSL\";\r\nimport {ReactNode} from \"react\";\r\n\r\nlet CSS_Units0 = {'Local-font relative':{\r\n        'cap':     'cap - (Cap height) the nominal height of capital letters of the element\\'s font.',\r\n        'ch':      'ch - Average character advance of a narrow glyph in the element\\'s font, as represented by the \"0\" (ZERO, U+0030) glyph.',\r\n        'em':      'em - Font size of the element\\'s font.',\r\n        'ex':      'ex - x-height of the element\\'s font.',\r\n        'ic':      'ic - Average character advance of a full-width glyph in the element\\'s font, as represented by the \"水\" (CJK water ideograph, U+6C34) glyph.',\r\n        'lh':      'lh - Line height of the element.',\r\n    },\r\n\r\n    'Root-font relative':{\r\n        'rcap':    'rcap - Cap height (the nominal height of capital letters) of the root element\\'s font.',\r\n        'rch':     'rch - Average character advance of a narrow glyph in the root element\\'s font, as represented by the \"0\" (ZERO, U+0030) glyph.',\r\n        'rem':     'rem - Font size of the root element\\'s font.',\r\n        'rex':     'rex - x-height of the root element\\'s font.',\r\n        'ric':     'ric - Average character advance of a full-width glyph in the root element\\'s font, as represented by the \"水\" (CJK water ideograph, U+6C34) glyph.',\r\n        'rlh':     'rlh - Line height of the root element.',\r\n    },\r\n\r\n    'Relative':{\r\n        'dvh':      'dvh - 1% of the dynamic viewport\\'s height.',\r\n        'dvw':      'dvw - 1% of the dynamic viewport\\'s width.',\r\n        'lvh':      'lvh - 1% of the large viewport\\'s height.',\r\n        'lvw':      'lvw - 1% of the large viewport\\'s width.',\r\n        'svh':      'svh - 1% of the small viewport\\'s height.',\r\n        'svw':      'svw - 1% of the small viewport\\'s width.',\r\n        'vb':       'vb - 1% of viewport\\'s size in the root element\\'s block axis.',\r\n        'vh':       'vh - 1% of viewport\\'s height.',\r\n        'vi':       'vi - 1% of viewport\\'s size in the root element\\'s inline axis.',\r\n        'vmax':     'vmax - 1% of viewport\\'s larger dimension.',\r\n        'vmin':     'vmin - 1% of viewport\\'s smaller dimension.',\r\n        'vw':       'vw - 1% of viewport\\'s width.',\r\n        'fr':       'fr - (Flex) Represents a flexible length within a grid container',\r\n        '%':        '% - Percentage',\r\n    },\r\n\r\n    'Container @Query relative':{\r\n        'cqb':      'cqb - 1% of a query container\\'s block size',\r\n        'cqh':      'cqh - 1% of a query container\\'s height',\r\n        'cqi':      'cqi - 1% of a query container\\'s inline size',\r\n        'cqmax':    'cqmax - The larger value of cqi or cqb',\r\n        'cqmin':    'cqmin - The smaller value of cqi or cqb',\r\n        'cqw':      'cqw - 1% of a query container\\'s width',\r\n    },\r\n\r\n    'Absolute lengths':{\r\n        'cm':      'cm - (Centimeters) 1cm = 96px/2.54',\r\n        'in':      'in - (Inches) 1in = 2.54cm = 96px',\r\n        'mm':      'mm - (Millimeters) 1mm = 1/10th of 1cm',\r\n        'pc':      'pc - (Picas) 1pc = 1/6th of 1in',\r\n        'pt':      'pt - (Points) 1pt = 1/72th of 1in',\r\n        'px':      'px - (Pixels) 1px = 1/96th of 1in',\r\n        'Q':       'Q - (Quarter-millimeters) 1Q = 1/40th of 1cm',\r\n    },\r\n\r\n    'Angles':{\r\n        'deg':      'deg - (Degrees) There are 360 degrees in a full circle.',\r\n        'grad':     'grad - (Gradians) There are 400 gradians in a full circle.',\r\n        'rad':      'rad - (Radians) There are 2π radians in a full circle.',\r\n        'turn':     'turn - (Turns) There is 1 turn in a full circle.',\r\n    },\r\n\r\n    'Time':{\r\n        'ms':     'ms - Milliseconds',\r\n        's':      's - (Seconds) There are 1,000 milliseconds in a second.',\r\n    },\r\n\r\n    'Frequency':{\r\n        'Hz':      'Hz - (Hertz) Represents the number of occurrences per second.',\r\n        'kHz':     'kHz - (KiloHertz) A kiloHertz is 1000 Hertz.',\r\n    },\r\n\r\n    'Resolution':{\r\n        'dpcm':     'dpcm - Dots per centimeter.',\r\n        'dpi':      'dpi - Dots per inch.',\r\n        'dppx':     'dppx - Dots per px unit.',\r\n    },\r\n};\r\nexport let CSS_Units: typeof CSS_Units0 & { jsx: ReactNode, pattern: string } = CSS_Units0 as any;\r\n\r\nlet pattern: string[] = [];\r\n\r\nCSS_Units.jsx = <datalist id={\"__jodel_CSS_units\"}>{\r\n   (Object.keys(CSS_Units) as (keyof typeof CSS_Units0)[]).map(k1 => {\r\n        let v1: GObject = CSS_Units[k1];\r\n       console.log(\"optgroup css units\", {k1, v1, karr:Object.keys(v1), k1arr:Object.keys(CSS_Units)});\r\n\r\n       return <optgroup label={k1}>\r\n            {Object.keys(v1).map(k => {\r\n                let v = v1[k];\r\n                console.log(\"css units\", {k, v, k1, v1, karr:Object.keys(v1), k1arr:Object.keys(CSS_Units)});\r\n                pattern.push(k);\r\n                return <option value={k} title={v}></option>\r\n            })}\r\n        </optgroup>\r\n    })\r\n}</datalist>;\r\n//throw new Error(\"Stop\");\r\nCSS_Units.pattern = \"^(\" + pattern.join('|') + \")$\";\r\nwindoww.CSS_Units = CSS_Units;\r\n\r\n\r\n/*\r\nexport type CSS_AbsoluteUnit = 'px' | 'cm' | 'mm' | 'pt' | 'pc' | 'in' | '';\r\nexport type CSS_RelativeDomUnit = '%' | 'fr' | 'vw' | 'vh' | 'vmin' | 'vmax';\r\nexport type CSS_RelativeFontUnit =  'em' | 'rem' | 'ex' | 'ch';\r\nexport type CSSUnit = CSS_AbsoluteUnit | CSS_RelativeFontUnit | CSS_RelativeDomUnit;*/\r\n\r\nexport type StringControl = {type:'text', value: string};\r\nexport type NumberControl = {type:'number', value: number, unit: DocString<\"css unit\">};\r\nexport type PaletteControl = {type:'color', value: tinycolor.ColorFormats.RGBA[]}; // array of rgba: red, green, blue, alpha\r\nexport type PathControl = {type:'path', value: string, x: string, y: string, options: {k: string, v:string}[]};\r\nexport type PaletteType = Dictionary<string, PaletteControl | NumberControl | StringControl | PathControl>;\r\n\r\n\r\n@RuntimeAccessible('DViewElement')\r\nexport class DViewElement extends DPointerTargetable {\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    // static singleton: LViewElement;\r\n    // static logic: typeof LViewDViewElementElement;\r\n    // static structure: typeof DViewElement;\r\n    public static MeasurableKeys: string[] = ['onDataUpdate', 'onDragStart', 'onDragEnd', 'whileDragging', 'onResizeStart',\r\n        'onResizeEnd', 'whileResizing', 'onRotationStart', 'onRotationEnd', 'whileRotating'];\r\n    public static RecompileKeys: string[] = ['onDataUpdate', 'onDragStart', 'onDragEnd', 'whileDragging', 'onResizeStart',\r\n        'onResizeEnd', 'whileResizing', 'onRotationStart', 'onRotationEnd', 'whileRotating',\r\n        'constants', 'usageDeclarations', 'jsxString', 'preconditions', 'jsCondition', 'ocl', 'events'];\r\n\r\n    // inherited redefine\r\n    // public __raw!: DViewElement;\r\n    id!: Pointer<DViewElement, 1, 1, LViewElement>;\r\n\r\n\r\n    // own properties\r\n    isValidation!: boolean; // only for root views (ex viewpoints) to group views semantically.\r\n    name!: string;\r\n    isExclusiveView!: boolean;\r\n\r\n    // processate 1 sola volta all'applicazione della vista o all'editing del campo\r\n    constants?: string;\r\n    // _parsedConstants?: GObject; // should be protected but LView is not subclass\r\n\r\n    // evaluate tutte le volte che l'elemento viene aggiornato (il model o la view cambia).\r\n    preRenderFunc!: string;\r\n\r\n    jsxString!: string; // l'html template\r\n    usageDeclarations?: string;\r\n\r\n    forceNodeType?: DocString<'component name (Vertex, Field, GraphVertex, Graph)'>; // used in DefaultNode\r\n    // scalezoomx: boolean = false; // whether to resize the element normally using width-height or resize it using zoom-scale css\r\n    // scalezoomy: boolean = false;\r\n    // not persistent, some not shared. deve essere diverso da utente ad utente perchè dipende dal pan e zoom nel grafo dell'utente attuale.\r\n    // facendo pan su grafo html sposti gli elementi, per simulare uno spostamento del grafo e farlo sembrare illimitato.\r\n    // __transient: DViewTransientProperties;\r\n    appliableToClasses!: string[]; // class names: DModel, DPackage, DAttribute...\r\n    appliableTo!: 'Any'|'Graph'|'GraphVertex'|'Vertex'|'Edge'|'EdgePoint'|'Field';\r\n    subViews!: Dictionary<Pointer<DViewElement>, number/* priority boost */>;\r\n    oclCondition!: string; // ocl selector\r\n    jsCondition!: string; // js selector\r\n    oclUpdateCondition!: DocString<(view: LViewElement)=>boolean>;\r\n    //oclUpdateCondition_PARSED!: undefined | ((view: LViewElement)=>boolean); moved in transient\r\n    OCL_NEEDS_RECALCULATION!: boolean; // if only the oclCondition needs to be reapplied to all model elements\r\n    OCL_UPDATE_NEEDS_RECALCULATION!: boolean; // if both ocl needsto be reapplied and the oclUpdateCondition -> transient.view[v.id].oclUpdateCondition_PARSED needs to be remade\r\n    explicitApplicationPriority!: number; // priority of the view, if a node have multiple applicable views, the view with highest priority is applied.\r\n    defaultVSize!: GraphSize;\r\n    adaptHeight!: boolean;// | 'fit-content' | '-webkit-fill-available';\r\n    adaptWidth!: boolean;\r\n    /*width!: number;\r\n    height!: number;*/\r\n    draggable!: boolean;\r\n    resizable!: boolean;\r\n    viewpoint!: Pointer<DViewPoint>;\r\n    //display!: 'block'|'contents'|'flex'|string;\r\n    //constraints!: GObject<\"obsolete, used in Vertex. they are triggered by events (view.onDragStart....) and can bound the size of the vertex\">[];\r\n    onDataUpdate!: string;\r\n    onDragStart!: string;\r\n    onDragEnd!: string;\r\n    whileDragging!: string;\r\n    onResizeStart!: string;\r\n    onResizeEnd!: string;\r\n    whileResizing!: string;\r\n    onRotationStart!: string;\r\n    onRotationEnd!: string;\r\n    whileRotating!: string;\r\n    events!: Dictionary<DocString<\"functionName\">, DocString<\"functionBody\">>;\r\n    bendingMode!: EdgeBendingMode;\r\n    edgeGapMode!: EdgeGapMode;\r\n    //useSizeFrom!: EuseSizeFrom;\r\n    storeSize!: boolean;\r\n    size!: Dictionary<Pointer<DModelElement> | Pointer<DGraphElement>, GraphSize>;\r\n    lazySizeUpdate!: boolean; // if true updates it once when the vertex is released. if false updates vertex position every X millisecond while dragging.\r\n    edgeStartOffset!: GraphPoint;\r\n    edgeEndOffset!: GraphPoint;\r\n    edgeStartOffset_isPercentage!: boolean;\r\n    edgeEndOffset_isPercentage!: boolean;\r\n    edgeStartStopAtBoundaries!: boolean;\r\n    edgeEndStopAtBoundaries!: boolean;\r\n    edgePointCoordMode!: CoordinateMode;\r\n    edgeHeadSize!: GraphPoint;\r\n    edgeTailSize!: GraphPoint;\r\n    palette!: Readonly<PaletteType>;\r\n    css!: string;\r\n    cssIsGlobal!: boolean;\r\n    /* private */ compiled_css!: string;\r\n    /* private */ css_MUST_RECOMPILE!: boolean;\r\n    father?: Pointer<DViewElement>;\r\n\r\n    public static new(name: string, jsxString: string, defaultVSize?: GraphSize, usageDeclarations: string = '', constants: string = '',\r\n                      preRenderFunc: string = '', appliableToClasses: string[] = [], oclCondition: string = '',\r\n                      priority?: number, persist: boolean = true, isDefaultView: boolean = false, vp?: Pointer<DViewPoint> | 'skip'): DViewElement {\r\n        let id = isDefaultView ? 'Pointer_View' + name : undefined;\r\n        return new Constructors(new DViewElement('dwc'), undefined, persist, undefined, id).DPointerTargetable()\r\n            .DViewElement(name, jsxString, vp, defaultVSize, usageDeclarations, constants,\r\n            preRenderFunc, appliableToClasses, oclCondition, priority).end();\r\n\r\n    }\r\n    public static new2(name: string, jsxString: string, callback?: (d:DViewElement)=>void, persist: boolean = true,\r\n                       vp?: Pointer<DViewElement> | 'skip', id?: string): DViewElement {\r\n        // let id = isDefaultView ? 'Pointer_View' + name : undefined;\r\n        return new Constructors(new DViewElement('dwc'), undefined, persist, undefined, id)\r\n            .DPointerTargetable().DViewElement(name, jsxString, vp).end(callback);\r\n    }\r\n\r\n    static newDefault(forData?: DNamedElement): DViewElement{\r\n        const jsx = `<div className={'root'}>\r\n    <div className={'header'}>\r\n        <div className={'input-container mx-2'}>\r\n            <b className={'object-name'}>Name:</b>\r\n            <Input data={data} field={'name'} hidden={true} />\r\n        </div>\r\n    </div>\r\n    <div className={'body'}>To add information here,<br/> edit the view<br/><i>\"{view.name}\"</i></div>\r\n</div>`;\r\n        const palettes: PaletteType = {\r\n            \"border-color-\": {type:\"color\", value: [{r:187, g:187, b:187, a:1}]},\r\n            \"background-\": {type:\"color\", value: [{r:238, g:242, b:243, a:1}]},\r\n            \"color-\": {type:\"color\", value: [{r:3, g:54, b:86, a:1}]},\r\n        }\r\n            const css = `.root {\r\n    border: 1px solid var(--border-color-1);\r\n    border-radius: 4px;\r\n    background-color: var(--background-1);\r\n    \r\n    font-family: Verdana, sans-serif;\r\n    color: var(--color-1);\r\n    font-size: 0.7rem;\r\n}\r\n \r\n.root div.header {\r\n    text-align: center;\r\n    border-bottom: 1px solid var(--border-color-1);\r\n    padding: 0px;\r\n    margin: 0px;\r\n}\r\n \r\n.root div.header {\r\n    font-size: 1rem;\r\n}\r\n \r\n.root div.header input:empty {\r\n    margin-left: 0px;\r\n}\r\n.root div.body {\r\n    text-align: center;\r\n    font-weight: normal;  \r\n    height: auto;\r\n    padding: 5px;\r\n}\r\n `;\r\n        let query = '';\r\n        if (forData) switch(forData.className) {\r\n            case 'DClass':\r\n                query = `context DObject inv: self.instanceof.id = '${forData.id}'`;\r\n                break;\r\n            case 'DAttribute':\r\n            case 'DReference':\r\n                query = `context DValue inv: self.instanceof.id = '${forData.id}'`;\r\n                break;\r\n            default:\r\n                query = `context ${forData.className} inv: self.id = '${forData.id}'`;\r\n                break;\r\n        }\r\n        const user = LUser.fromPointer(DUser.current);\r\n        // const project = user?.project; if(!project) return this;\r\n        let name: string;\r\n        if (forData?.name) {\r\n            name = forData.name + 'View';\r\n        } else {\r\n            const vp: LViewPoint = user?.project?.activeViewpoint || LPointerTargetable.fromPointer(Defaults.viewpoints[0]);\r\n            let names: string[] = vp.subViews.map(v => v && v.name);\r\n            name = U.increaseEndingNumber( 'view_' + 0, false, false, newName => names.indexOf(newName) >= 0);\r\n        }\r\n        return DViewElement.new2(name, jsx, (d)=>{\r\n            d.css = css;\r\n            d.palette = palettes;\r\n            d.css_MUST_RECOMPILE = true;\r\n            d.oclCondition = query;\r\n        }, true);\r\n    }\r\n}\r\n\r\n@RuntimeAccessible('LViewElement')\r\nexport class LViewElement<Context extends LogicContext<DViewElement, LViewElement> = any, D extends DViewElement = any>\r\n    extends LPointerTargetable { // MixOnlyFuncs(DViewElement, LPointerTargetable)\r\n\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    // static singleton: LViewElement;\r\n    // static logic: typeof LViewElement;\r\n    // static structure: typeof DViewElement;\r\n\r\n    // inherited redefine\r\n    public __raw!: DViewElement;\r\n    id!: Pointer<DViewElement, 1, 1, LViewElement>;\r\n    public r!: this;\r\n\r\n\r\n\r\n    // own properties\r\n    isValidation!: boolean; // only for root views (ex viewpoints) to group views semantically.\r\n    name!: string;\r\n    __info_of__name: Info = {isGlobal: true, type: ShortAttribETypes.EString, txt:<div>Name of the view</div>}\r\n    isOverlay!:boolean;\r\n    __info_of__isOverlay: Info = {isGlobal:true, type: ShortAttribETypes.EBoolean, txt:<div>If not exclusive, the view is meant to add a functional outline of tools to a primary View, or css.\r\n            <br/>A non-exclusive view cannot be applied alone and needs an exclusive view to render the main graphical content.</div>};\r\n    get_isOverlay(c: Context): this[\"isOverlay\"] { return this.get_isExclusiveView(c); }\r\n    set_isOverlay(val: this[\"isOverlay\"], c: Context): boolean { return this.set_isExclusiveView(val, c); }\r\n\r\n\r\n    allPossibleParentViews!: LViewElement[];\r\n    __info_of__allPossibleParentViews: Info = {isGlobal: true, type: 'LViewElement[]', txt: 'All views except subviews and this view.' }\r\n    get_allPossibleParentViews(c: Context): this['allPossibleParentViews']{\r\n        let subviewsarr = this.get_allSubViews(c);\r\n        let subviews = U.objectFromArray(subviewsarr, (sv)=>sv.id);\r\n        let allviewsarr: LViewElement[] = Selectors.getAll(DViewElement, undefined, undefined, true, true);\r\n        let allviews = U.objectFromArray(allviewsarr, (sv)=>sv.id);\r\n        console.log('allPossibleParentViews', {subviews, subviewsarr, allviews:{...allviews}, allviewsarr});\r\n        for (let k in subviews) {\r\n            delete allviews[k];\r\n        }\r\n        delete allviews[c.data.id];\r\n        console.log('allPossibleParentViews ret', {allviews});\r\n        return Object.values(allviews);\r\n    }\r\n\r\n\r\n\r\n    explicitApplicationPriority!: number; // priority of the view, if a node have multiple applicable views, the view with highest priority is applied.\r\n    __info_of__explicitApplicationPriority: Info = {isGlobal: true, type: ShortAttribETypes.EByte, label:\"explicit priority\",\r\n        txt: 'Application priority of view. If multiple views match an element, the highest priority will render the main jsx.' }\r\n    get_explicitApplicationPriority(c: Context): this[\"explicitApplicationPriority\"] {\r\n        if (c.data.explicitApplicationPriority !== undefined) return c.data.explicitApplicationPriority;\r\n        else return (c.data.jsCondition?.length || 1) + (c.data.oclCondition?.length || 1); }\r\n    set_explicitApplicationPriority(val: this[\"explicitApplicationPriority\"] | undefined, c: Context): boolean {\r\n        SetFieldAction.new(c.data, \"explicitApplicationPriority\", val as number, '', false);\r\n        return true;\r\n    }\r\n\r\n    isExclusiveView!: boolean;\r\n    __info_of__isExclusiveView: Info = {isGlobal:true, type: ShortAttribETypes.EBoolean, txt:<div>If not exclusive, the view is meant to add a functional outline of tools to a primary View, or css.\r\n    <br/>A non-exclusive view cannot be applied alone and needs an exclusive view to render the main graphical content.</div>};\r\n    get_isExclusiveView(c: Context): this[\"isExclusiveView\"] { return c.data.isExclusiveView; }\r\n    set_isExclusiveView(val: this[\"isExclusiveView\"], c: Context): boolean {\r\n        if (Defaults.check(c.data.id)) return true; // cannot delete or \"demote\" to decorations the main views, to make sure there is always at least 1 appliable view.\r\n        return SetFieldAction.new(c.data, \"isExclusiveView\", !!val, '', false);\r\n    }\r\n\r\n    constants?: string;\r\n    __info_of__constants: Info = {todo:true, isGlobal: true, type: \"Function():Object\", label:\"constants declaration\",\r\n        txt:<div>Data used in the visual representation, meant to be static values evaluated only once when the view is first applied.<br/>\r\n        Check default value view for an example.<br/>\r\n    </div>};\r\n    // Example 1: <code>{'{color:\"red\", background: \"gray\"}'}</code><br/>\r\n    // Example 2: <code>{'function(){\\n    let fib = [1,1]; for (let i = 2; i < 100) { fib[i] = fib[i-2]+fib[i-1]; }\\n    return fib; }'}</code><br/>\r\n\r\n    preRenderFunc?: string; // evalutate tutte le volte che l'elemento viene aggiornato (il model o la view cambia)\r\n    __info_of__preRenderFunc: Info = {isGlobal: true, obsolete: true, type: \"Function():Object\", label:\"pre-render function\",\r\n        txt:<div>Data used in the visual representation, meant to be dynamic values evaluated every time the visual representation is updated.<br/>Replaced by usageDeclarations.</div>}\r\n\r\n    protected _defaultGetter(c: Context, k: keyof Context[\"data\"]): any { return this.__defaultGetter(c, k); }\r\n\r\n    protected _defaultSetter(v: any, c: Context, k: keyof Context[\"data\"]): any { return this.__defaultSetter(v, c, k); }\r\n\r\n    jsxString!: string;\r\n    __info_of__jsxString: Info = {isGlobal: true, type: \"text\", label:\"JSX template\",\r\n        txt:<div>The main ingredient, a <a href={\"https://react.dev/learn/writing-markup-with-jsx\"}>JSX template</a> that will be visualized in the graph.</div>}\r\n    protected get_jsxString(context: Context): this['jsxString'] {\r\n        return context.data.jsxString;\r\n    }\r\n    protected set_jsxString(val: this['jsxString'], context: Context): boolean {\r\n        TRANSACTION(() => {\r\n            // const jsx = DSL.parser(val);\r\n            SetFieldAction.new(context.data, 'jsxString', val, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_jsxString', context.data.id, '+=', false);\r\n        });\r\n        return true;\r\n    }\r\n\r\n    usageDeclarations?: string;\r\n    __info_of__usageDeclarations: Info = {todo: false, isGlobal: true, type: \"Function():Object\", label:\"usage declarations\",\r\n        txt: <div>Subset of the global or elements's data state that is graphically used.\r\n            <br/>If specified the element will only update when one of those has changed.\r\n            <br/>Can optimize performance and ensure the node is updated even when navigating remote properties that\r\n            <br/>    don\\'t belong to this element, like visualizing the name of an object pointed by a reference.\r\n            <br/>Context: it has the usual variables present in a JSX template (data, view, node...)\r\n            <br/>    plus a special variable \"ret\" where dependencies are registered.{/*and a \"state\" variable containing the entire application state.*/}\r\n            <br/>Usage Example: see the default view for value.\r\n    </div>}\r\n    protected get_usageDeclarations(c: Context): this[\"usageDeclarations\"]{\r\n        return c.data.usageDeclarations || \"(ret)=>{ // scope contains: data, node, view, constants, state\\n\" +\r\n            \"// ** preparations and default behaviour here ** //\\n\" +\r\n            \"ret.data = data\\n\" +\r\n            \"ret.node = node\\n\" +\r\n            \"ret.view = view\\n\" +\r\n            \"// data, node, view are dependencies by default. delete them above if you want to remove them.\\n\" +\r\n            // if you want your node re-rendered every time, add a dependency to ret.state = state; or ret.update = Math.random();\r\n            \"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\" +\r\n            \"// ** declarations here ** //\\n\" +\r\n            \"}\";\r\n    }\r\n    protected set_usageDeclarations(val: this['usageDeclarations'], context: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(context.data, 'usageDeclarations', val, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_usageDeclarations', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    // format should be array of (usedPaths: string[]) starting with \"data.\" AUTOMATICALLY inefered from the ocl editor.\r\n    oclUpdateCondition!: (oldData: LModelElement, newData:LModelElement) => boolean;\r\n    __info_of__oclUpdateCondition: Info = {readType: '(view: LViewElement)=>boolean', writeType: 'function string',\r\n        txt: \"[Optionally] Declare variables that are used in OCL condition, so that OCL will be re-checked only when those values have changed.\"}\r\n    get_oclUpdateCondition(c: Context): this[\"oclUpdateCondition\"] { return transientProperties.view[c.data.id].oclUpdateCondition_PARSED; }\r\n    set_oclUpdateCondition(val: DocString<\"function\">, c: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(c.data, \"oclUpdateCondition\", val || '', '', false);\r\n            // not recalculated right now because the change needs to be sent to collaborative editor users\r\n            // it is pointer, but i don't want to set pointedby's, it is very short lived.\r\n            SetRootFieldAction.new(\"OCL_UPDATE_NEEDS_RECALCULATION\", c.data.id, '+=', false);\r\n        });\r\n        return true;\r\n    }\r\n/* moved it as setrootfield action and as array. check it after every reducer. update im same style the color palette too?\r\n    OCL_NEEDS_RECALCULATION!: boolean;\r\n    __info_of__OCL_NEEDS_RECALCULATION: Info = {hidden: true, type: ShortAttribETypes.EBoolean,\r\n        txt: \"if only the oclCondition needs to be reapplied to all model elements\"}\r\n    get_OCL_NEEDS_RECALCULATION(c: Context): this[\"OCL_NEEDS_RECALCULATION\"] { return c.data.OCL_NEEDS_RECALCULATION; }\r\n    set_OCL_NEEDS_RECALCULATION(val: this[\"OCL_NEEDS_RECALCULATION\"], c: Context): boolean { return this.cannotSet('OCL_NEEDS_RECALCULATION'); }\r\n\r\n    OCL_UPDATE_NEEDS_RECALCULATION!: boolean;\r\n    __info_of__OCL_UPDATE_NEEDS_RECALCULATION: Info = {hidden: true, type: ShortAttribETypes.EBoolean,\r\n        txt: \"if both ocl needsto be reapplied and the oclUpdateCondition -> transient.view[v.id].oclUpdateCondition_PARSED needs to be remade\"}\r\n    get_OCL_UPDATE_NEEDS_RECALCULATION(c: Context): this[\"OCL_UPDATE_NEEDS_RECALCULATION\"] { return c.data.OCL_UPDATE_NEEDS_RECALCULATION; }\r\n    set_OCL_UPDATE_NEEDS_RECALCULATION(val: this[\"OCL_UPDATE_NEEDS_RECALCULATION\"], c: Context): boolean { return this.cannotSet('OCL_UPDATE_NEEDS_RECALCULATION'); }*/\r\n\r\n    private css_MUST_RECOMPILE!: boolean;\r\n    public cssIsGlobal!: boolean;\r\n    __info_of__cssIsGlobal: Info = {type: ShortAttribETypes.EBoolean, txt: \"Use with caution!\\nIf true, custom css can affect even elements not matched with this view, or outside the graph.\"}\r\n    get_cssIsGlobal(c: Context): this[\"cssIsGlobal\"] { return c.data.cssIsGlobal; }\r\n    set_cssIsGlobal(val: this[\"cssIsGlobal\"], c: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(c.data, \"cssIsGlobal\", !!val, '', false);\r\n            // compile only when accessed, to prevent color inputs to do a mess of compilations\r\n            SetFieldAction.new(c.data, \"css_MUST_RECOMPILE\", true, '', false);\r\n        });\r\n        return true;\r\n    }\r\n    public css!: string;\r\n    __info_of__css: Info = {type: \"css string\", txt: \"Inject custom css that cannot be inserted inline like :hover or css variables.\\nSupport LESS syntax.\"}\r\n    get_css(c: Context): this[\"css\"] { return c.data.css; }\r\n    set_css(val:this[\"css\"], c: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(c.data, \"css\", val, '', false);\r\n            // compile only when accessed, to prevent color inputs to do a mess of compilations\r\n            SetFieldAction.new(c.data, \"css_MUST_RECOMPILE\", true, '', false);\r\n        });\r\n        return true;\r\n    }\r\n\r\n    compiled_css!: string;\r\n    __info_of__compiled_css: Info = { hidden: true, txt:'css + palettes compiled from less in css'};\r\n    get_compiled_css(c: Context): this[\"compiled_css\"] {\r\n        if (!c.data.css_MUST_RECOMPILE) return c.data.compiled_css; // return c.proxyObject.r.__raw.compiled_css;\r\n        let s = '';\r\n        const allowLESS = false;\r\n        let shortPaletteName: string;\r\n        let cc = c;\r\n        function rgbastring(c: tinycolor.ColorFormats.RGBA): string{\r\n            Log.exDev(!c, \"invalid color:\", {id: cc.data.id, c, shortPaletteName, p:cc.data.palette});\r\n            return \"rgba(\"+c.r+\",\"+c.g+\",\"+c.b+\",\"+c.a+\")\";\r\n        }\r\n        //let palettes = U.paletteSplit(c.data.palette);\r\n        for (let paletteName in c.data.palette) {\r\n            let palette0 = c.data.palette[paletteName] as any;\r\n            if (palette0.type === \"color\") {\r\n                let palette = palette0 as PaletteControl;\r\n                let colors = palette.value;\r\n                if (!colors.length) continue;\r\n                if (['-', '_'].includes(paletteName[paletteName.length-1])) shortPaletteName = paletteName.substring(0, paletteName.length - 1);\r\n                else shortPaletteName = paletteName;\r\n                let rgba = rgbastring(colors[0]);\r\n                // set prefixed name without number\r\n                if (allowLESS) s += \"\\t@\" + shortPaletteName + \": \" + rgba + ';\\n';\r\n                s += \"\\t--\" + shortPaletteName + \": \" + rgba + ';\\n';\r\n                // set prefixed-0 name\r\n                if (allowLESS) s += \"\\t@\" + paletteName + '0: ' + rgba + ';\\n';\r\n                s += \"\\t--\" + paletteName + '0: ' + rgba + ';\\n';\r\n                // set prefixed-1 to prefixed-...n names\r\n                for (let i = 0 ; i < colors.length; i++) {\r\n                    rgba = rgbastring(colors[i]);\r\n                    if (allowLESS) s += \"\\t@\" + paletteName + (i+1) + \": \" + rgba + ';\\n';\r\n                    s += \"\\t--\" + paletteName + (i+1) + \": \" + rgba + ';\\n';\r\n                }\r\n            } else if (palette0.type === 'path'){\r\n                let palette: PathControl = palette0;\r\n                let val = U.replaceAll(palette.value, 'view.', '');\r\n                val = U.replaceAll(val, 'this.', '');\r\n                val = U.replaceAll(val, 'x', palette.x);\r\n                val = U.replaceAll(val, 'y', palette.y);\r\n                val = U.replaceAll(val, '+', ' +');\r\n                val = U.replaceAll(val, '-', ' -'); // important: cannot add space post-dash or it's harder to distinguish unary and binary -\r\n                val = U.replaceAll(val, '/', ' / ');\r\n                val = U.replaceAll(val, '*', ' * ');\r\n                let valarr: (string | number)[] = val.split(/[,\\s]/);\r\n                // [] not allowed\r\n                valarr = (valarr as string[]).map(val => {\r\n                    if (!isNaN(+val)) return val;\r\n                    let patharr: string[] = val.split('.');\r\n                    let curr: GObject = c.data;\r\n                    for (let pathseg of patharr) {\r\n                        curr = curr[pathseg];\r\n                        Log.e(!curr && (val.length > 1 || patharr.length > 1), \"invalid variable path in css path control\", {token:val, view:c.data.name});\r\n                        if (!curr) break;\r\n                    }\r\n                    if (typeof curr === \"object\" || (typeof curr === \"undefined\" && (val.length > 1 || patharr.length > 1)))\r\n                        Log.ee( \"invalid variable path in css path control\", {token:val, view:c.data.name});\r\n                    else val = curr || val;\r\n                    return val;\r\n                }).filter(p=>!!p);\r\n\r\n                for (let i = 0 ; i < valarr.length; i++) {\r\n                    let val = valarr[i];\r\n                    switch (val) { // i avoid subtracting L 1 -1 with spaces. it's unary if doesn't have a postfix space.\r\n                        default: continue;\r\n                        case '*': valarr[i] = +valarr[i-1] * +valarr[i+1]; valarr[i-1] = valarr[i+1] = ''; break;\r\n                        case '/': valarr[i] = +valarr[i-1] / +valarr[i+1]; valarr[i-1] = valarr[i+1] = ''; break;\r\n                        case '+': valarr[i] = +valarr[i-1] + +valarr[i+1]; valarr[i-1] = valarr[i+1] = ''; break;\r\n                        case '-': valarr[i] = +valarr[i-1] - +valarr[i+1]; valarr[i-1] = valarr[i+1] = ''; break;\r\n                    }\r\n                }\r\n                val = valarr.filter(p=>!!p).join(' ');\r\n                val = \"'\"+val+\"'\";\r\n                if (allowLESS) s += \"\\t@\" + paletteName + \": \" + val + ';\\n';\r\n                s += \"\\t--\" + paletteName + ': ' + val + ';\\n';\r\n            }\r\n            else {\r\n                // number or text\r\n                let palette: NumberControl | StringControl = palette0;\r\n                let val = palette.value + ((palette as NumberControl).unit || '');\r\n                if (!val) val = \"''\";\r\n                if (allowLESS) s += \"\\t@\" + paletteName + \": \" + val + ';\\n';\r\n                s += \"\\t--\" + paletteName + ': ' + val + ';\\n';\r\n            }\r\n        }\r\n        s += '\\n\\t' + U.replaceAll(c.data.css, '\\n', '\\n\\t');\r\n        const localViewSelector = '.'+c.data.id; // '[data-viewid=\"'+c.data.id+'\"]';\r\n        s = (!c.data.cssIsGlobal ? localViewSelector : 'body') +' {\\n' + s + '\\n}';\r\n        // not an error, i'm updating directly d-view that is usually wrong, this is to prevent multiple nodes with same view to trigger compile and redux actions\r\n        // count as if it's a derived attribute not really part of the store.\r\n        c.data.css_MUST_RECOMPILE = false;\r\n        return c.data.compiled_css = s;\r\n    }\r\n    set_compiled_css(val: this[\"compiled_css\"], c: Context): boolean {\r\n        Log.exx(\"Do not use setter for this, set it directly in d-object, along with compiled_css.\" +\r\n        \"\\nOtherwise multiple nodes of the same view will start compiling together.\\n\" as any);\r\n        return false;\r\n    }\r\n\r\n    public palette!: PaletteType;\r\n    __info_of__palette: Info = {type: \"Dictionary<prefix, colors[]>\", txt:\"Specify a set of colors, numbers or text variables to be used in the graphical syntax through css variables.\"}\r\n    get_palette(c: Context): this[\"palette\"] { return c.data.palette; }\r\n    set_palette(val:this[\"palette\"], c: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(c.data, \"palette\", val, '', false);\r\n            SetFieldAction.new(c.data, \"css_MUST_RECOMPILE\", true, '', false);\r\n        });\r\n    return true; }\r\n\r\n    forceNodeType?: DocString<'component name'>;\r\n    __info_of__forceNodeType: Info = {isGlobal:true, type: \"EGraphElements\", enum: EGraphElements, label:\"force node type\",\r\n        txt:<div>Forces this element to be rendered with your component of choice instead of automatic selection when generated by a &lt;DefaultNode&gt; tag.</div>}\r\n\r\n    zoom!: GraphPoint;\r\n    __info_of__zoom: Info = {todo: true, isNode: true, type: GraphPoint.cname, txt:<div>Zooms in or out the element using css scale.</div>}\r\n    /*\r\n    scalezoomx!: boolean; // whether to resize the element normally using width-height or resize it using zoom-scale css\r\n    __info_of__scalezoomx: Info = {isNode: true, isEdge: false, isEdgePoint: false, txt:<div></div>}\r\n\r\n    scalezoomy!: boolean;\r\n    __info_of__scalezoomy: Info = {isNode: true, isEdge: false, isEdgePoint: false, txt:<div></div>}*/\r\n\r\n    // not persistent, some not shared. deve essere diverso da utente ad utente perchè dipende dal pan e zoom nel grafo dell'utente attuale.\r\n    // facendo pan su grafo html sposti gli elementi, per simulare uno spostamento del grafo e farlo sembrare illimitato.\r\n    // __transient: DViewTransientProperties;\r\n\r\n    appliableToClasses!: string[]; // class names: DModel, DPackage, DAttribute...\r\n    __info_of__appliableToClasses: Info = {isGlobal: true, type: \"EModelElements | EGraphElements\",\r\n        enum: {...EModelElements, ...EGraphElements, cname:\"EModelElements | EGraphElements\"}, label:\"applicable to\",\r\n        txt: <div>Do a low priority match with elements of this type.\r\n            <br/>This is just a shortcut with a lower priority than a OCL match.\r\n            <br/>The same result can be obtained through OCL.</div>}\r\n\r\n    appliableTo!: 'Any'|'Graph'|'GraphVertex'|'Vertex'|'Edge'|'EdgePoint'|'Field';\r\n\r\n    subViews!: LViewElement[];\r\n    __info_of__subViews: Info = {isGlobal: true, hidden: true, type: \"DViewElement[]\", label:\"sub-views\",\r\n        txt:<div>Views that are suggested to render elements contained in the current one with a higher match priority.\r\n            <br/>Like a package view giving priority to a specific Class or Enum view to render his contained Classifiers in a common theme.\r\n            <br/>If you wish to see the subview weight attached to the collection, access view.__raw.subviews instead.</div>}\r\n    get_SubViews(c: Context): this[\"subViews\"] {\r\n        delete c.data.subViews.clonedCounter;\r\n        return Object.keys(c.data.subViews).map( vid => LPointerTargetable.fromPointer(vid) as LViewElement);\r\n    }\r\n    set_SubViews(val: this[\"subViews\"] | GObject, c: Context): boolean {\r\n        let subviewsmap: GObject;\r\n        if (Array.isArray(val)) {\r\n            let ptrsArr = Pointers.fromArr(val);\r\n            subviewsmap = U.objectFromArrayValues(ptrsArr, 1.5);\r\n        } else subviewsmap = val || {};\r\n        SetFieldAction.new(c.data, \"subViews\", subviewsmap, '', true);\r\n        return true; }\r\n\r\n\r\n    setSubViewScore!: (subview: Pack1<LViewElement>, boost?: number | null) => void;\r\n    __info_of__setSubViewScore: Info = {isGlobal: true, hidden: true, type: \"function(ViewElement, numeric_score): void\", txt:<div>Adds, updates or unsets (if boost = null) a subview with his score.</div>}\r\n\r\n    // adds, updates or unsets (if boost = null) a subview with his score.\r\n    get_setSubViewScore(c: Context): ((subview: Pack1<LViewElement>, boost?: number | null) => void) {\r\n        return (subview: Pack1<LViewElement>, boost: number| null = 1.5 ) => {\r\n            let subviews = {...c.data.subViews};\r\n            let ptr = Pointers.from(subview) as Pointer<DViewElement>;\r\n            if (boost !== null) { // set mode\r\n                if (subviews[ptr] === boost) return;\r\n                subviews[ptr] = boost;\r\n            } else {// set mode\r\n                if (subviews[ptr] === undefined) return;\r\n                delete subviews[ptr];\r\n            }\r\n            SetFieldAction.new(c.data, 'subViews',  subviews, '', true);\r\n        };\r\n    }\r\n\r\n\r\n    allSubViews!: LViewElement[];\r\n    __info_of__allSubViews: Info = {type: \"ViewElement[]\", txt: \"recursively get this.subViews.\"}\r\n    get_allSubViews(c: Context): this[\"allSubViews\"] {\r\n        delete c.data.subViews.clonedCounter;\r\n        let arr: Pointer<DViewElement>[] = Object.keys(c.data.subViews);\r\n        let nextarr: Pointer<DViewElement>[] = [];\r\n        let idmap: Dictionary<Pointer, DViewElement> = {};\r\n        let s: DState = store.getState();\r\n        let dview: DViewElement;\r\n        while (arr.length) {\r\n            for (let vid of arr) {\r\n                if (idmap[vid]) continue;\r\n                dview = DPointerTargetable.fromPointer(vid, s);\r\n                if (!dview) continue;\r\n                idmap[vid] = dview;\r\n                U.arrayMergeInPlace(nextarr, Object.keys(dview.subViews));\r\n            }\r\n            arr = nextarr;\r\n            nextarr = [];\r\n        }\r\n        return LPointerTargetable.fromD(Object.values(idmap));\r\n    }\r\n    set_allSubViews(val: this[\"allSubViews\"], c: Context): boolean { return this.wrongAccessMessage(\"cannot call set_allSubViews, it is a derived attribute\"); }\r\n\r\n\r\n    defaultVSize!: GraphSize;\r\n    __info_of__defaultVSize: Info = {isNode:true, type: \"GraphSize\", label:\"default size\", txt: 'starting size of the node'}\r\n\r\n\r\n    adaptWidth!: boolean;\r\n    __info_of__adaptWidth: Info = {isNode:true, type: ShortAttribETypes.EBoolean, label:\"adapt width\",\r\n        txt: 'Whether the element should expand his width to accomodate his own contents.'}\r\n\r\n    adaptHeight!: boolean;\r\n    __info_of__adaptHeight: Info = {isNode:true, type: ShortAttribETypes.EBoolean, label:\"adapt height\",\r\n        txt: 'Whether the element should expand his height to accomodate his own contents.'}\r\n\r\n    draggable!: boolean;\r\n    __info_of__draggable: Info = {isNode: true, type: ShortAttribETypes.EBoolean, txt: 'if the element can be dragged'}\r\n\r\n    resizable!: boolean;\r\n    __info_of__resizable: Info = {isNode: true, type: ShortAttribETypes.EBoolean, txt: 'if the element can be resized'}\r\n\r\n    oclCondition!: string; // ocl selector\r\n    __info_of__oclCondition: Info = {isGlobal: true, hidden:true, label:\"OCL apply condition\", type: \"text\", // TODO: what's the difference with this.query?\r\n        txt: 'OCL Query selector to determine which nodes or model elements should apply this view'}\r\n    protected get_oclCondition(context: Context): this['oclCondition'] {\r\n        return context.data.oclCondition;\r\n    }\r\n    set_oclCondition(val: string, context: Context): boolean {\r\n        val = (val || '').trim();\r\n        if (val === context.data.oclCondition) return true;\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(context.data, 'oclCondition', val, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_ocl', context.data.id, '+=', false); // it is pointer, but for transient stuff there is no need to set pointedby's\r\n        })\r\n        return true;\r\n    }\r\n\r\n    jsCondition!: string; // js selector\r\n    __info_of__jsCondition: Info = {isGlobal: true, hidden:true, label:\"js apply condition\", type: \"text\",\r\n        txt: 'js Query selector to determine which nodes or model elements should apply this view'}\r\n    protected get_jsCondition(context: Context): this['jsCondition'] {\r\n        return context.data.jsCondition;\r\n    }\r\n    set_jsCondition(val: string, context: Context): boolean {\r\n        val = (val || '').trim();\r\n        if (val === context.data.jsCondition) return true;\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(context.data, 'jsCondition', val, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_jsCondition', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    // todo: how about allowing a view to be part in multiple vp's? so this reference would be an array or removed, and you navigate only from vp to v.\r\n    viewpoint!: LViewPoint;\r\n    __info_of__viewpoint: Info = {hidden: true, type: LViewPoint.cname, txt: <div>The collection of views containing this one, useful to activate multiple views at once.</div>}\r\n\r\n    display!: 'block'|'contents';\r\n    __info_of__display: Info = {obsolete: true, isNode: true, type: ShortAttribETypes.EString,\r\n        txt: 'complete css injection instead'}\r\n\r\n    onDragStart!: string;\r\n    __info_of__onDragStart: Info = {isNode: true, type: \"Function():void\",\r\n        txt: 'Custom event activated when a node begins being dragged.'}\r\n    protected get_onDragStart(context: Context): this['onDragStart'] {\r\n        return context.data.onDragStart;\r\n    }\r\n    protected set_onDragStart(val: this['onDragStart'], context: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(context.data, 'onDragStart', val, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_onDragStart', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    onDragEnd!: string;\r\n    __info_of__onDragEnd: Info = {isNode: true, type: \"Function():void\",\r\n        txt: 'Custom event activated when a node finishes being dragged.'}\r\n    protected get_onDragEnd(context: Context): this['onDragEnd'] {\r\n        return context.data.onDragEnd;\r\n    }\r\n    protected set_onDragEnd(val: this['onDragEnd'], context: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(context.data, 'onDragEnd', val, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_onDragEnd', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    whileDragging!: string;\r\n    __info_of__whileDragging: Info = {isNode: true, type: \"Function():void\",\r\n        txt: 'Custom event activated multiple times when mouse is moved while a node is being dragged.'}\r\n    protected get_whileDragging(context: Context): this['whileDragging'] {\r\n        return context.data.whileDragging;\r\n    }\r\n    protected set_whileDragging(val: this['whileDragging'], context: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(context.data, 'whileDragging', val, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_whileDragging', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    onResizeStart!: string;\r\n    __info_of__onResizeStart: Info = {isNode: true, type: \"Function():void\",\r\n    txt: 'Custom event activated when a node begins being resized.'}\r\n    protected get_onResizeStart(context: Context): this['onResizeStart'] {\r\n        return context.data.onResizeStart;\r\n    }\r\n    protected set_onResizeStart(val: this['onResizeStart'], context: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(context.data, 'onResizeStart', val, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_onResizeStart', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    onResizeEnd!: string;\r\n    __info_of__onResizeEnd: Info = {isNode: true, type: \"Function():void\",\r\n        txt: 'Custom event activated when a node finishes being resized.'}\r\n    protected get_onResizeEnd(context: Context): this['onResizeEnd'] {\r\n        return context.data.onResizeEnd;\r\n    }\r\n    protected set_onResizeEnd(val: this['onResizeEnd'], context: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(context.data, 'onResizeEnd', val, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_onResizeEnd', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    whileResizing!: string;\r\n    __info_of__whileResizing: Info = {isNode: true, type: \"Function():void\",\r\n        txt: 'Custom event activated multiple times when mouse is moved while a node is being resized.'}\r\n    protected get_whileResizing(context: Context): this['whileResizing'] {\r\n        return context.data.whileResizing;\r\n    }\r\n    protected set_whileResizing(val: this['whileResizing'], context: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(context.data, 'whileResizing', val, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_whileResizing', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    onRotationStart!: string;\r\n    __info_of__onRotationStart: Info = {isNode: true, type: \"Function():void\",\r\n    txt: 'Custom event activated when a node begins being rotated.'}\r\n    protected get_onRotationStart(context: Context): this['onRotationStart'] {\r\n        return context.data.onRotationStart;\r\n    }\r\n    protected set_onRotationStart(val: this['onRotationStart'], context: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(context.data, 'onRotationStart', val, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_onRotationStart', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    onRotationEnd!: string;\r\n    __info_of__onRotationEnd: Info = {isNode: true, type: \"Function():void\",\r\n        txt: 'Custom event activated when a node finishes being rotated.'}\r\n    protected get_onRotationEnd(context: Context): this['onRotationEnd'] {\r\n        return context.data.onRotationEnd;\r\n    }\r\n    protected set_onRotationEnd(val: this['onRotationEnd'], context: Context): boolean {\r\n        TRANSACTION(()=>{\r\n        SetFieldAction.new(context.data, 'onRotationEnd', val, '', false);\r\n        SetRootFieldAction.new('VIEWS_RECOMPILE_onRotationEnd', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    whileRotating!: string;\r\n    __info_of__whileRotating: Info = {isNode: true, type: \"Function():void\",\r\n        txt: 'Custom event activated multiple times when mouse is moved while a node is being rotated.'}\r\n    protected get_whileRotating(context: Context): this['whileRotating'] {\r\n        return context.data.whileRotating;\r\n    }\r\n    protected set_whileRotating(val: this['whileRotating'], context: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(context.data, 'whileRotating', val, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_whileRotating', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    onDataUpdate!: string;\r\n    __info_of__onDataUpdate: Info = {isNode: true, type: \"Function():void\",\r\n        txt: 'Custom event activated every time a property of his model, node or view is changed while the element is visibly rendered in a graph.\\n<br>Caution! this might cause loops.'}\r\n    protected get_onDataUpdate(context: Context): this['onDataUpdate'] {\r\n        return context.data.onDataUpdate;\r\n    }\r\n    protected set_onDataUpdate(val: this['onDataUpdate'], context: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(context.data, 'onDataUpdate', val, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_onDataUpdate', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    events!: Dictionary<DocString<\"functionName\">, ((...a:any)=>any)>;\r\n    event!:  Dictionary<DocString<\"functionName\">, ((...a:any)=>any)>;\r\n    __info_of__events: Info = {todo: true, isGlobal: true, type: \"Dictionary<name, function>\",\r\n        txt: <div>Custom events callable through JSX user interaction<br/>eg: &lt;div onClick=&#123;()=&gt;view.eventname()&#125; /&gt;</div>}\r\n    __info_of__event: Info = {todo: true, isGlobal: true, type: \"Dictionary<name, function>\", txt: 'Alias for this.events'}\r\n    protected get_event(c: Context): this['events'] { return this.get_events(c); }\r\n    protected get_events(c: Context): this['events'] {\r\n        Log.exx(\"use node.events instead\", U.getStackTrace());\r\n        return {};\r\n        // return transientProperties.view[c.data.id]?.events || {};\r\n    }\r\n    protected set_events(val: DViewElement[\"events\"], context: Context): boolean {\r\n        const addUD = true;\r\n        TRANSACTION(()=> {\r\n            SetFieldAction.new(context.data, 'events', val, '+=', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_events', {\r\n                vid: context.data.id,\r\n                keys: Object.keys(val)\r\n            }, '+=', false);\r\n            let udstr = context.data.usageDeclarations;\r\n            if (!addUD || !udstr) return;\r\n            let delta = U.objectDelta(context.data.events, val, false);\r\n            for (let key in delta) {\r\n                let v = val[key];\r\n                let autogenstr = 'ret.' + key + ' = node.events.'+key+'; // @autogenerated, do not edit\\n';\r\n                if (!v) udstr = udstr.split(autogenstr).join('');\r\n                else {\r\n                    if (!context.data.events[key]) { // insert\r\n                        let findstr = '// ** declarations here ** //\\n';\r\n                        let insertat = udstr.indexOf(findstr);\r\n                        if (insertat === -1) continue; // malformed ud, will skip\r\n                        insertat += findstr.length;\r\n                        udstr = udstr.substring(0, insertat) + autogenstr + udstr.substring(insertat);\r\n                    } else {\r\n                        // just updated func body, no name changed, no need to update UD.\r\n                    }\r\n                }\r\n            }\r\n            if (udstr === context.data.usageDeclarations) return;\r\n            SetFieldAction.new(context.data, 'usageDeclarations', udstr, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_usageDeclarations', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    constraints!: GObject<\"todo, used in Vertex. they are triggered by events (view.onDragStart....) and can bound the size of the vertex\">[];\r\n    __info_of__constraints: Info = {todo: true, isNode: true, type: \"Function():void\",\r\n        txt: 'not supported yet'}\r\n\r\n\r\n    bendingMode!: EdgeBendingMode;\r\n    __info_of__bendingMode: Info = {isEdge: true, enum: EdgeBendingMode, type: '\"L\" | \"Q\" | \"C\" | \"T\" | \"S\" | \"A\" | \"QT\" | \"CS\"',\r\n        label:\"path mode\",\r\n        txt: <><div>How Svg path should use the EdgePoints to bend his shape{/*<a href={\"https://css-tricks.com/svg-path-syntax-illustrated-guide/\"}>to bend his shape</a>*/}</div></>}\r\n\r\n    edgeGapMode!: EdgeGapMode;\r\n    __info_of__edgeGapMode: Info = {isEdge: true, enum: EdgeGapMode, type: '\"gap\" | \"average\" | \"autoFill\" | \"lineFill\" | \"arcFill\"',\r\n        label:\"gap mode\",\r\n        txt: <><div>How the segment should treat the EdgePoint interruptions.<br/>\"gap\" leaves an empty space to not overlap the EdgePoint,\r\n            <br/>\"linefill\" makes the edge stop at the EdgePoint borders, but then connects the gap with a line.</div></>}\r\n\r\n    /*\r\n    bindVertexSizeToView!: boolean;\r\n    __info_of__bindVertexSizeToView: Info = {isNode:true, type:ShortAttribETypes.EBoolean, label:\"bind sizes to view\",\r\n        txt: <div>Store the vertex size inside the view instead of inside the vertex.\r\n            <br/>This causes the vertex to have different positions according to the view currently appied to it.</div>}*/\r\n    storeSize!: boolean;\r\n    __info_of__storeSize: Info = {isNode: true, type: ShortAttribETypes.EBoolean, label:\"bind sizes to view\",\r\n        txt: \"Active: the node position depends from the view currently displayed.Inactive: it depends from the graph.\"}\r\n\r\n    lazySizeUpdate!: boolean;\r\n    __info_of__lazySizeUpdate: Info = {isNode: true, type: ShortAttribETypes.EBoolean, txt: <div>If true updates the node position only when the drag action is finished. (best performance)</div>}\r\n\r\n    edgeStartOffset!: GraphPoint;\r\n    __info_of__edgeStartOffset: Info = {isEdge: true, type: GraphPoint.cname, label:\"start offset\",\r\n        txt: \"Location where outgoing edges should start their path, relative to top-upper corner of the element.\"}\r\n\r\n    edgeEndOffset!: GraphPoint;\r\n    __info_of__edgeEndOffset: Info = {isEdge: true,  type: GraphPoint.cname, label:\"end offset\",\r\n        txt: 'Same as this.edgeStartOffset'}\r\n\r\n\r\n    edgeStartOffset_isPercentage!: boolean;\r\n    __info_of__edgeStartOffset_isPercentage: Info = {isEdge: true, type:ShortAttribETypes.EBoolean, label:\"start offset is a %\",\r\n        txt: <div>Whether edgeStartOffset is an absolute value or a percentage.<br/>(eg: 50% of element width, vs 50 pixels flat).</div>}\r\n\r\n    edgeEndOffset_isPercentage!: boolean;\r\n    __info_of__edgeEndOffset_isPercentage: Info = {isEdge: true, type:ShortAttribETypes.EBoolean, label:\"end offset is a %\",\r\n        txt: <div>Whether edgeStartOffset is an absolute value or a percentage.<br/>(eg: 50% of element width, vs 50 pixels flat).</div>}\r\n\r\n\r\n    edgeStartStopAtBoundaries!: boolean;\r\n    __info_of__edgeStartStopAtBoundaries: Info = {isEdge: true, type:ShortAttribETypes.EBoolean, label:\"start cannot cross boundaries\",\r\n        txt: <div>Whether outgoing edges should cross the node boundaries overlapping the node\\'s html or stop at them.<br/>Edge arrows might enter the node if this is on.</div>}\r\n\r\n    edgeEndStopAtBoundaries!: boolean;\r\n    __info_of__edgeEndStopAtBoundaries: Info = {isEdge: true, type: ShortAttribETypes.EBoolean, label:\"end cannot cross boundaries\",\r\n        txt: <div>Whether incoming edges should cross the node boundaries overlapping the node\\'s html or stop at them.<br/>Edge arrows might enter the node if this is on.</div>}\r\n\r\n\r\n    edgePointCoordMode!: CoordinateMode;\r\n    __info_of__edgePointCoordMode: Info = {isEdgePoint: true, type: \"CoordinateMode\", enum: CoordinateMode, label:\"coordinate mode\",\r\n        txt:<div>Store coordinates as absolute coordinates or relative to start/end nodes.</div>}\r\n    set_edgePointCoordMode(val: CoordinateMode, c: Context): boolean {\r\n        TRANSACTION(()=>{\r\n            setTimeout(()=>{ // needs to be done after coordinatemode change is applied\r\n                let s: DState = store.getState();\r\n                for (let nid in transientProperties.node) {\r\n                    let tn = transientProperties.node[nid];\r\n                    if (!tn || tn.mainView?.id !== c.data.id) continue;\r\n                    let lnode: LEdgePoint = LPointerTargetable.fromPointer(nid, s);\r\n                    let triggerCoordinateModeChange = lnode as any;\r\n                    triggerCoordinateModeChange.size = lnode.size;\r\n                }\r\n            }, 100);\r\n            SetFieldAction.new(c.data, 'edgePointCoordMode', val, '', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    edgeHeadSize!: GraphPoint;\r\n    __info_of__edgeHeadSize: Info = {isEdge: true, type:GraphPoint.cname, label:\"head decorator size\", txt:<div>Size of the edge head decorator if present.</div>}\r\n\r\n    edgeTailSize!: GraphPoint;\r\n    __info_of__edgeTailSize: Info = {isEdge: true, type:GraphPoint.cname, label:\"tail decorator size\", txt:<div>Size of the tail head decorator if present.</div>}\r\n\r\n    protected size!: Dictionary<Pointer<DModelElement> | Pointer<DGraphElement>, GraphSize>; // use getSize, updateSize;\r\n    __info_of__size: Info = {isNode: true, hidden:true, type: ShortAttribETypes.EInt,\r\n        txt:<div>Do not use directly, contains all the sizes stored in this view. use getSize, updateSize instead.</div>}\r\n\r\n\r\n    __info_of__updateSize: Info = {isNode:true, hidden:true, type:\"Function(Pointer<GraphElement | ModelElement>, GraphSize) => GraphSize\",\r\n        txt:<div>Updates the size stored in this view for target element.<br/>@returns: the delta of the change between old value and new value.</div>}\r\n    __info_of__getSize: Info = {isNode:true, hidden:true, type:\"Function(Pointer<GraphElement | ModelElement>) => GraphSize\",\r\n        txt:<div>Gets the size stored in this view for target element.</div>}\r\n\r\n    // public _parsedConstants!: GObject;\r\n    // public get__parsedConstants(c: Context): this['_parsedConstants'] { return c.data._parsedConstants || {}; }\r\n\r\n    public get_constants(c: Context): this['constants'] {\r\n        return c.data.constants;\r\n    }\r\n\r\n\r\n    public static parseConstants(funcCode?: string): GObject | undefined {\r\n        if (!funcCode) return {};\r\n        let parsedConstants: GObject = {};\r\n        let context: GObject = {__param: parsedConstants};\r\n        context.__proto__ = windoww.defaultContext;\r\n        try{\r\n            let parsedFunc = U.parseFunctionWithContextAndScope(funcCode, context, context, ['ret']);\r\n            parsedFunc(context, parsedConstants);\r\n            // U.evalInContextAndScopeNew( \"(\"+funcCode+\")(this.__param)\", context, true, false, false);\r\n        } catch (e: any) {\r\n            Log.ee(\"Attempted to save an invalid view.constant setup. Cause:\\n\" + e.message.split(\"\\n\")[0], e)\r\n            return undefined;\r\n        }\r\n        return parsedConstants;\r\n    }\r\n\r\n    public set_constants(value: this['constants'], c: Context): boolean {\r\n        if (value === c.data.constants) return true;\r\n        TRANSACTION(()=> {\r\n            SetFieldAction.new(c.data.id, 'constants', value, '', false);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_constants', c.data.id, '+=', false);\r\n            SetFieldAction.new(c.data.id, \"css_MUST_RECOMPILE\", true, '', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    public get_preRenderFunc(c: Context): this['preRenderFunc'] {\r\n        return c.data.preRenderFunc;\r\n    }\r\n    public set_preRenderFunc(value: this['preRenderFunc'], c: Context): boolean {\r\n        const _value = value ? value : '() => {}';\r\n        return SetFieldAction.new(c.data.id, 'preRenderFunc', _value, '', false);\r\n    }\r\n\r\n    public get_edgeHeadSize(c: Context): this[\"edgeHeadSize\"] { return new GraphPoint(c.data.edgeHeadSize.x, c.data.edgeHeadSize.y); }\r\n    public get_edgeTailSize(c: Context): this[\"edgeTailSize\"] { return new GraphPoint(c.data.edgeTailSize.x, c.data.edgeTailSize.y); }\r\n    public set_edgeHeadSize(v: Partial<this[\"edgeHeadSize\"]>, c: Context): boolean {\r\n        let s = c.data.edgeHeadSize || new GraphPoint(0, 0);\r\n        if (!(\"x\" in v)) v.x = s.x;\r\n        if (!(\"y\" in v)) v.y = s.y;\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(c.data.id, \"css_MUST_RECOMPILE\", true, '', false);\r\n            SetFieldAction.new(c.data.id, \"edgeHeadSize\", v as GraphPoint, '', false);\r\n        });\r\n        return true; }\r\n    public set_edgeTailSize(v: Partial<this[\"edgeTailSize\"]>, c: Context): boolean {\r\n        let s = c.data.edgeTailSize || new GraphPoint(0, 0);\r\n        if (!(\"x\" in v)) v.x = s.x;\r\n        if (!(\"y\" in v)) v.y = s.y;\r\n        TRANSACTION(()=>{\r\n            SetFieldAction.new(c.data.id, \"css_MUST_RECOMPILE\", true, '', false);\r\n            SetFieldAction.new(c.data.id, \"edgeTailSize\", v as GraphPoint, '', false);\r\n        });\r\n        return true;\r\n    }\r\n\r\n    fatherChain!: LViewElement[];\r\n    __info_of__fatherChain: Info = {type: 'LViewElement[]', txt: 'a list of all father elements sorted from the closest to farthest'};\r\n    public get_fatherChain(c: Context): this[\"fatherChain\"] {\r\n        let current = this.get_father(c);\r\n        if (!current) return [] as any;\r\n        let ret: LViewElement[] = [];\r\n        while (current) {\r\n            ret.push(current);\r\n            current = current.father;\r\n        }\r\n        return ret;\r\n    }\r\n    father?: LViewElement;\r\n    public get_father(c: Context): this[\"father\"] {\r\n        return (LViewPoint.fromPointer(c.data.father as Pointer<DViewPoint>));\r\n    }\r\n    public get_viewpoint(c: Context): this[\"viewpoint\"] {\r\n        let p = c.data.father;\r\n        if (!p) return LPointerTargetable.fromD(c.data);\r\n        let curr: LViewElement = LPointerTargetable.fromPointer(p);\r\n        while (curr) {\r\n            let prev = curr.father;\r\n            if (!prev) return curr;\r\n            curr = prev;\r\n        }\r\n        return undefined as any;\r\n    }\r\n    // public set_subViews(v: Pointer<DViewPoint>[], context: Context): boolean { return this.cannotSet('subViews, call set_viewpoint on the sub-elements instead.'); }\r\n\r\n    // WARNING!! if there are mass vp assignments, preserveOrder=true will cause a vp to \"lose\" subviews and keep only the last assigned.\r\n    public set_viewpoint(v: Pointer<DViewPoint>, context: Context, manualDview?: DViewElement, preserveOrder: boolean = false): boolean {\r\n        Log.exDevv('setViewpoint() should not be called, call view.setFather(viewpoint) instead');\r\n        return true;\r\n    }\r\n    public set_father(v: Pointer<DViewPoint>, context: Context, manualDview?: DViewElement, preserveOrder: boolean = false): boolean {\r\n        let ret = false;\r\n        let pvid: Pointer<DViewPoint> = v && Pointers.from(v);\r\n        const data =  (manualDview || context.data);\r\n        let id = data.id;\r\n        let oldpvid: Pointer<DViewElement> = data.father;\r\n        if (pvid === oldpvid) return true;\r\n\r\n        TRANSACTION(()=>{\r\n            ret = SetFieldAction.new(id, \"father\", pvid, '', true);\r\n            if (oldpvid) {\r\n                let subViews = {...DPointerTargetable.fromPointer(oldpvid).subViews};\r\n                delete subViews[id];\r\n                SetFieldAction.new(oldpvid, \"subViews\", subViews, '', true);\r\n            }\r\n            if (pvid) {\r\n                let name = data.name;\r\n                let copyPos = name.indexOf(\"Copy\");\r\n                let oldSubViews = DPointerTargetable.fromPointer(pvid).subViews;\r\n                let insertBefore: string = '';\r\n                let subViews: GObject = {};\r\n                if (copyPos) {\r\n                    let copiedFromName: string = copyPos ? name.substring(0, copyPos).trim() : '';\r\n                    if (copiedFromName in oldSubViews) insertBefore = copiedFromName;\r\n                    else {\r\n                        for (let key in oldSubViews) if (key.indexOf(copiedFromName) === 0) { insertBefore = key; break; }\r\n                    }\r\n                }\r\n\r\n\r\n                // WARNING!! if there are mass vp assignments, this will cause a vp to \"lose\" subviews and keep only the last assigned.\r\n                if (preserveOrder && insertBefore) {\r\n                    subViews = {};\r\n                    for (let key in oldSubViews) {\r\n                        subViews[key] = oldSubViews[key];\r\n                        // just to reinsert subviews **in order** so Object.keys() fits the new subview near the cloned one.\r\n                        if (key === insertBefore) subViews[id] = subViews[insertBefore];\r\n                    }\r\n                } else { subViews = {...oldSubViews}; subViews[id] = 1.5; }\r\n                subViews[id] = insertBefore ? subViews[insertBefore] : 1.5;\r\n                SetFieldAction.new(pvid, \"subViews\", subViews, '+=', true);\r\n            }\r\n        })\r\n        return ret;\r\n    }\r\n\r\n\r\n    public get_subViews(context: Context): LViewElement[]{\r\n        let subViewsPointers = context.data.subViews;\r\n        let subViews: LViewElement[] = [];\r\n        for (let pointer in subViewsPointers) {\r\n            let item: LViewElement = MyProxyHandler.wrap(pointer);\r\n            if (item !== undefined) subViews.push(item);\r\n        }\r\n        return subViews;\r\n    }\r\n\r\n    // returns the delta of change\r\n    public updateSize(id: Pointer<DModelElement> | Pointer<DGraphElement>, size: Partial<GraphSize>): boolean { return this.wrongAccessMessage(\"updateSize\"); }\r\n    public get_updateSize(context: Context): this[\"updateSize\"] {\r\n        return (id: Pointer<DModelElement> | Pointer<DGraphElement>, size0: Partial<GraphSize>) => {\r\n            let size: EPSize = size0 as any;\r\n            let vp = context.proxyObject.viewpoint;\r\n            if (!context.data.storeSize) {\r\n                if (vp?.storeSize) return vp.updateSize(id, size);\r\n                return false;\r\n            }\r\n            let vsize: EPSize = (context.data.size[id] || vp?.__raw.size[id]) as EPSize;\r\n            let newSize: EPSize = new GraphSize() as EPSize;\r\n            if (size.currentCoordType === vsize.currentCoordType) { // if samecoord system mix them.\r\n                newSize.x = size?.x !== undefined ? size.x : vsize.x;\r\n                newSize.y = size?.y !== undefined ? size.y : vsize.y;\r\n            } else if (size.x !== undefined && size.y !== undefined) { // if different coord system pick all of size\r\n                newSize.x = size.x;\r\n                newSize.y = size.y;\r\n                newSize.currentCoordType = size.currentCoordType || CoordinateMode.absolute;\r\n            } else if (vsize.x !== undefined && vsize.y !== undefined) { // or all of vsize if size was invalid\r\n                newSize.x = vsize.x;\r\n                newSize.y = vsize.y;\r\n                newSize.currentCoordType = vsize.currentCoordType || CoordinateMode.absolute;\r\n            }\r\n            let defaultsize = context.data.defaultVSize || vp?.__raw.defaultVSize;\r\n            if (newSize.x === undefined || newSize.y === undefined) { // only if pos is invalid, i take defaultvsize and force to use coord absolute.\r\n                newSize = new GraphSize().clone(defaultsize) as EPSize;\r\n                newSize.currentCoordType = CoordinateMode.absolute;\r\n            }\r\n            // w and h are always absolute so they can be mixed to whathever coordinate mode indipendently from the rest.\r\n            newSize.w = size?.w !== undefined ? size.w : vsize.w;\r\n            newSize.h = size?.h !== undefined ? size.h : vsize.h;\r\n            if (newSize.h === undefined) newSize.h = defaultsize.h || 10;\r\n            if (newSize.w === undefined) newSize.w = defaultsize.w || 10;\r\n\r\n            if (!newSize.equals(vsize)) SetFieldAction.new(context.data.id, \"size.\" + id as any, newSize);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    public get_defaultVSize(context: Context): this[\"defaultVSize\"]{ return context.data.defaultVSize; }\r\n    public getSize(id: Pointer<DModelElement> | Pointer<DGraphElement>): GraphSize | undefined{ return this.wrongAccessMessage(\"getSize\"); }\r\n    public get_getSize(context: Context): ((...a:Parameters<this[\"getSize\"]>)=>ReturnType<LViewElement[\"getSize\"]>) {\r\n        function impl_getSize(id: Pointer<DModelElement> | Pointer<DGraphElement>): ReturnType<LViewElement[\"getSize\"]> {\r\n            if (typeof id === \"object\") id = (id as any).id;\r\n            let view = context.data;\r\n            let ret: GraphSize;\r\n            if (view.storeSize){\r\n                ret = view.size[id];\r\n                if(ret) return ret; }\r\n            let vp = context.proxyObject.viewpoint;\r\n            if (vp && view.id !== vp.id && vp.storeSize){\r\n                ret = vp.size[id];\r\n                if (ret) return ret; }\r\n            return undefined;\r\n        }\r\n\r\n        return impl_getSize; }\r\n\r\n    set_generic_entry(context: Context, key: keyof DViewElement, val: any): boolean {\r\n        console.log('set_generic_entry', {context, key, val});\r\n        SetFieldAction.new(context.data, key, val);\r\n        return true;\r\n    }\r\n\r\n    children!: LViewElement[];\r\n    get_children(context: Context): this['children'] { return this.get_subViews(context); }\r\n\r\n\r\n    get_lazySizeUpdate(context: Context): D[\"lazySizeUpdate\"] { return Debug.lightMode || context.data.lazySizeUpdate; }\r\n    set_lazySizeUpdate(val: D[\"lazySizeUpdate\"], context: Context): boolean {\r\n        return Debug.lightMode || this.set_generic_entry(context, 'lazySizeUpdate', val);\r\n    }\r\n\r\n    get_bendingMode(context: Context): D[\"bendingMode\"] { return context.data.bendingMode; }\r\n    set_bendingMode(val: D[\"bendingMode\"], context: Context): boolean {\r\n        return this.set_generic_entry(context, 'bendingMode', val);\r\n    }\r\n\r\n    set_appliableTo(val: this[\"appliableTo\"], c: Context): boolean { // appliableTo >= forcenodetype\r\n        if (!val) val = 'Any';\r\n        let forceNodeType: string = c.data.forceNodeType as string;\r\n        if (forceNodeType !== val) switch(val) {\r\n            // case \"Any\": break;\r\n            default: forceNodeType = val;\r\n        }\r\n\r\n        console.log(\"set_appliableTo\", {forceNodeType, val});\r\n        BEGIN()\r\n        if (forceNodeType !== c.data.forceNodeType) SetFieldAction.new(c.data, \"forceNodeType\", forceNodeType, '', false);\r\n        SetFieldAction.new(c.data, \"appliableTo\", val, '', false);\r\n        END();\r\n        return true;\r\n    }\r\n    set_forceNodeType(val: this[\"forceNodeType\"], c: Context): boolean {\r\n        if (!val) val = 'Any';\r\n        /*let appliableTo: string = c.data.appliableTo as string;\r\n        if (appliableTo !== val) switch (appliableTo){\r\n            case undefined: case 'Any': break;\r\n            //case 'GraphVertex': if ((appliableTo as any) !== 'Graph' && (appliableTo as any) !== 'Vertex') appliableTo = val; break;\r\n            default: appliableTo = val; break;\r\n        }*/\r\n        BEGIN()\r\n        // if (appliableTo !== c.data.appliableTo) SetFieldAction.new(c.data, \"appliableTo\", appliableTo, '', false);\r\n        SetFieldAction.new(c.data, \"forceNodeType\", val, '', false);\r\n        END();\r\n        return true;\r\n    }\r\n    get_appliableToClasses(context: Context): this[\"appliableToClasses\"] { return context.data.appliableToClasses || []; }\r\n    set_appliableToClasses(val: this[\"appliableToClasses\"], context: Context): boolean {\r\n        if (!val) val = [];\r\n        else if (!Array.isArray(val)) val = [val];\r\n        val.sort();\r\n        let hasChanged: boolean;\r\n        if (val.length === context.data.appliableToClasses?.length) {\r\n            hasChanged = false;\r\n            for (let i = 0; i < val.length; i++) if (val[i] !== context.data.appliableToClasses[i]) { hasChanged = true; break; }\r\n        } else hasChanged = true;\r\n\r\n        if (!hasChanged) return true;\r\n        TRANSACTION(()=>{\r\n            this.set_generic_entry(context, \"appliableToClasses\", val);\r\n            SetRootFieldAction.new('VIEWS_RECOMPILE_preconditions', context.data.id, '+=', false);\r\n        })\r\n        return true;\r\n    }\r\n\r\n    set_defaultVSize(val: GraphSize, c: Context): boolean{\r\n        if (!val || typeof val !== \"object\") return true;\r\n        let x = val.x ?? +val.x;\r\n        let y = val.y ?? +val.y;\r\n        let w = val.w ?? +val.w;\r\n        let h = val.h ?? +val.h;\r\n        if (isNaN(x)) x = c.data.defaultVSize.x;\r\n        if (isNaN(y)) y = c.data.defaultVSize.y;\r\n        if (isNaN(w)) w = c.data.defaultVSize.w;\r\n        if (isNaN(h)) h = c.data.defaultVSize.h;\r\n        if (x === c.data.defaultVSize.x && y === c.data.defaultVSize.y && w === c.data.defaultVSize.w && h === c.data.defaultVSize.h) return true;\r\n        SetFieldAction.new(c.data, 'defaultVSize', {x, y, w, h} as any, '', false);\r\n        return true\r\n    }\r\n\r\n\r\n    public duplicate(deep: boolean = true, new_vp?: DuplicateVPChange): this {\r\n        return this.wrongAccessMessage( (this.constructor as typeof RuntimeAccessibleClass).cname + \"duplicate()\"); }\r\n    protected get_duplicate(c: Context): ((deep?: boolean, new_vp?: DuplicateVPChange) => LViewElement) {\r\n        return (deep: boolean = false, new_vp0?: DuplicateVPChange) => {\r\n            console.log(\"DViewelement.duplicate\", {cn: c.data.className, n:c.data.name, deep, new_vp0});\r\n            let lview: LViewElement = undefined as any;\r\n            let state: DState = store.getState();\r\n            TRANSACTION( () => {\r\n                let pvid: Pointer<DViewPoint> = c.data.viewpoint as Pointer<DViewPoint>;\r\n                const dclone: DViewElement = c.data.className === 'DViewPoint' ?\r\n                    DViewPoint.new2(`${c.data.name} Copy`, '', undefined, true) :\r\n                    DViewElement.new2(`${c.data.name} Copy`, '', undefined, true, 'skip');\r\n                lview = LPointerTargetable.fromD(dclone);\r\n                const new_vp: DuplicateVPChange = new_vp0 || {pvid};\r\n                // || {pvid,  score: (DPointerTargetable.from(pvid, state) as DViewElement).subViews[c.data.id]}\r\n\r\n                for (let key in c.data) {\r\n                    switch(key) {\r\n                        case 'subViews':\r\n                            // duplicate childrens only if deep\r\n                            if (!deep) break;\r\n                            // let subviews: Dictionary<Pointer, number> = {}\r\n                            for (const oldvid in c.data.subViews) {\r\n                                const oldScore = c.data.subViews[oldvid];\r\n                                (LPointerTargetable.fromPointer(oldvid, state) as LViewElement).duplicate(deep, {pvid:dclone.id/*, score:oldScore*/});\r\n                                // then everything is set inside case 'viewpoint' of subviews cloning\r\n                            }\r\n                            //lview.subViews = subviews as any;\r\n                            break;\r\n                        case 'father':\r\n                            this.set_father(new_vp.pvid, undefined as any, dclone, !deep);\r\n                            break;\r\n                        case 'viewpoint':\r\n                            // update parent view\r\n                            /*\r\n                            let subviews: Dictionary<Pointer, number> = {};\r\n                            subviews[dclone.id] = new_vp.score;\r\n                            SetFieldAction.new(new_vp.pvid, 'subViews', subviews, '+=', true);\r\n                            SetFieldAction.new(dclone.id, 'viewpoint', new_vp.pvid, '+=', true);*/\r\n                            // insert in-place right after the cloned view, with old score.\r\n                            //this.set_viewpoint(new_vp.pvid, undefined as any, dclone, !deep);\r\n                            // SetFieldAction.new(dclone.id, 'father', new_vp.vpid, '+=', true);\r\n                            break;\r\n                        case '':\r\n                        case 'id':\r\n                        case 'name':\r\n                        case 'className':\r\n                        case 'pointedBy':\r\n                        case '_storePath':\r\n                        case '_subMaps':\r\n                        case 'clonedCounter': break;\r\n                        case 'css_MUST_RECOMPILE': break;\r\n\r\n                        case 'isValidation':\r\n                            console.log(\"duplicate \" + c.data.name + \" set isvalidation\", {data:c.data, iv:c.data.isValidation});\r\n                            (lview as any)[key] = (c.data as any)[key];\r\n                            break;\r\n                        default:\r\n                            try {\r\n                                (lview as any)[key] = (c.data as any)[key];\r\n                            } catch(e) {\r\n                            //    Log.ee('Error on duplicate view:', e);\r\n                            }\r\n                    }\r\n                }\r\n\r\n                // insert in viewpoint.subview\r\n                //let defaultViews: Dictionary<Pointer, boolean> = Defaults.defaultViewsMap;\r\n                let vp: LViewPoint = c.proxyObject.viewpoint;\r\n                // let oldViews: Pointer<DViewElement>[] = Object.keys(vp.__raw.subViews);\r\n                // if (Defaults.viewpoints.indexOf(vpid)) oldViews = oldViews.filter( vid => !defaultViews[vid]);\r\n                // let i: number = oldViews.indexOf(c.data.id);\r\n                /*\r\n                if (i === -1) oldViews.push(dclone.id);\r\n                else oldViews.splice(i+1, 0, dclone.id); // insert in-place right after the cloned view\r\n                vp.subViews = oldViews as any;*/\r\n                // SetRootFieldAction.new('stackViews', dview.id, '+=', true);\r\n\r\n\r\n                const isVP = c.data.className === 'DViewPoint';\r\n                if (isVP) SetRootFieldAction.new(`viewpoints`, c.data.id, '+=', true);\r\n                else SetRootFieldAction.new(`viewelements`, c.data.id, '+=', true);\r\n                for (let key of DViewElement.RecompileKeys) SetRootFieldAction.new(`VIEWS_RECOMPILE_${key}`, c.data.id, '+=', false);\r\n            })\r\n            return lview;\r\n        }\r\n    }\r\n}\r\nRuntimeAccessibleClass.set_extend(DPointerTargetable, DViewElement);\r\nRuntimeAccessibleClass.set_extend(LPointerTargetable, LViewElement);\r\n\r\ntype DuplicateVPChange = {\r\n    pvid: Pointer<DViewElement>,\r\n    // score: number //unused\r\n}\r\nexport type WViewElement = getWParams<LViewElement, DPointerTargetable>;\r\n\r\n@RuntimeAccessible('DViewTransientProperties')\r\nexport class DViewTransientProperties extends RuntimeAccessibleClass{\r\n    static logic: typeof LPointerTargetable;\r\n    _isDViewTransientProperties!: true;\r\n    // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\r\n    // private: DViewPrivateTransientProperties;\r\n}\r\n\r\nRuntimeAccessibleClass.set_extend(RuntimeAccessibleClass, DViewTransientProperties);\r\n@RuntimeAccessible('LViewTransientProperties')\r\nexport class LViewTransientProperties extends LPointerTargetable{\r\n    static structure: typeof DPointerTargetable;\r\n    static singleton: LViewTransientProperties;\r\n    _isLViewTransientProperties!: true;\r\n\r\n    // isSelected: Dictionary<DocString<Pointer<DUser>>, boolean> = {};\r\n    // private!: LViewPrivateTransientProperties;\r\n    /*\r\n        get_private(context: LogicContext<DViewTransientProperties>): LViewPrivateTransientProperties {\r\n            return LViewTransientProperties.wrap(context.data.private, context.proxy.baseObjInLookup, context.proxy.additionalPath + '.private'); }*/\r\n    /*\r\n        get_isSelected(logicContext: LogicContext<TargetableProxyHandler<DViewTransientProperties>, DViewTransientProperties>): Proxyfied<Dictionary> {\r\n            // @ts-ignore for $ at end of getpath\r\n            console.log('GET_ISSELECTED handler func');\r\n            return TargetableProxyHandler.getMap(logicContext.data.isSelected, logicContext, logicContext.proxy.additionalPath + '.' + (getPath as this).isSelected.$);\r\n        }*/\r\n}\r\n\r\nRuntimeAccessibleClass.set_extend(DPointerTargetable, DViewTransientProperties);\r\nRuntimeAccessibleClass.set_extend(LPointerTargetable, LViewTransientProperties);\r\nexport type WViewTransientProperties = getWParams<LViewTransientProperties, DViewTransientProperties>;\r\n\r\n/*\r\n\r\n@RuntimeAccessible\r\nexport class DViewPrivateTransientProperties extends DPointerTargetable{\r\n    static logic: typeof LViewPrivateTransientProperties;\r\n\r\n    public size: GraphSize\r\n    constructor(size?: GraphSize) {\r\n        super();\r\n        this.size = size || defaultVSize;\r\n    }\r\n}\r\n\r\n@RuntimeAccessible\r\nexport class LViewPrivateTransientProperties extends DViewPrivateTransientProperties{\r\n    static structure: typeof DViewPrivateTransientProperties;\r\n    static singleton: LViewPrivateTransientProperties;\r\n\r\n}*/\r\n// shapeless component, receive jsx from redux\r\n// can access any of the redux state, but will usually access 1-2 var among many,\r\n// how can i dynamically mapStateToProps to map only the required ones?\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}