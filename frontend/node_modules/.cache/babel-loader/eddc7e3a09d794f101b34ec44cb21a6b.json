{"ast":null,"code":"import _createClass from \"C:/d/Programming/web/jodel-mde/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/d/Programming/web/jodel-mde/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/d/Programming/web/jodel-mde/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createForOfIteratorHelper from \"C:/d/Programming/web/jodel-mde/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:/d/Programming/web/jodel-mde/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport React from 'react';\nimport { DragDropDiv } from \"./dragdrop/DragDropDiv\";\nvar BoxDataCache = function BoxDataCache(data) {\n  _classCallCheck(this, BoxDataCache);\n  this.beforeSize = 0;\n  this.beforeMinSize = 0;\n  this.afterSize = 0;\n  this.afterMinSize = 0;\n  this.element = data.element;\n  this.beforeDivider = data.beforeDivider;\n  this.afterDivider = data.afterDivider;\n  var _iterator = _createForOfIteratorHelper(this.beforeDivider),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var child = _step.value;\n      this.beforeSize += child.size;\n      if (child.minSize > 0) {\n        this.beforeMinSize += child.minSize;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var _iterator2 = _createForOfIteratorHelper(this.afterDivider),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _child = _step2.value;\n      this.afterSize += _child.size;\n      if (_child.minSize > 0) {\n        this.afterMinSize += _child.minSize;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n}; // split size among children\nfunction spiltSize(newSize, oldSize, children) {\n  var reservedSize = -1;\n  var sizes = [];\n  var requiredMinSize = 0;\n  while (requiredMinSize !== reservedSize) {\n    reservedSize = requiredMinSize;\n    requiredMinSize = 0;\n    var ratio = (newSize - reservedSize) / (oldSize - reservedSize);\n    if (!(ratio >= 0)) {\n      // invalid input\n      break;\n    }\n    for (var i = 0; i < children.length; ++i) {\n      var size = children[i].size * ratio;\n      if (size < children[i].minSize) {\n        size = children[i].minSize;\n        requiredMinSize += size;\n      }\n      sizes[i] = size;\n    }\n  }\n  return sizes;\n}\nexport var Divider = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(Divider, _React$PureComponent);\n  var _super = _createSuper(Divider);\n  function Divider() {\n    var _this;\n    _classCallCheck(this, Divider);\n    _this = _super.apply(this, arguments);\n    _this.startDrag = function (e) {\n      _this.boxData = new BoxDataCache(_this.props.getDividerData(_this.props.idx));\n      e.startDrag(_this.boxData.element, null);\n    };\n    _this.dragMove = function (e) {\n      if (e.event.shiftKey || e.event.ctrlKey || e.event.altKey) {\n        _this.dragMoveAll(e, e.dx, e.dy);\n      } else {\n        _this.dragMove2(e, e.dx, e.dy);\n      }\n    };\n    _this.dragEnd = function (e) {\n      var onDragEnd = _this.props.onDragEnd;\n      _this.boxData = null;\n      if (onDragEnd) {\n        onDragEnd();\n      }\n    };\n    return _this;\n  }\n  _createClass(Divider, [{\n    key: \"dragMove2\",\n    value: function dragMove2(e, dx, dy) {\n      var _this$props = this.props,\n        isVertical = _this$props.isVertical,\n        changeSizes = _this$props.changeSizes;\n      var _this$boxData = this.boxData,\n        beforeDivider = _this$boxData.beforeDivider,\n        afterDivider = _this$boxData.afterDivider;\n      if (!(beforeDivider.length && afterDivider.length)) {\n        // invalid input\n        return;\n      }\n      var d = isVertical ? dy : dx;\n      var leftChild = beforeDivider[beforeDivider.length - 1];\n      var rightCild = afterDivider[0];\n      var leftSize = leftChild.size + d;\n      var rightSize = rightCild.size - d;\n      // check min size\n      if (d > 0) {\n        if (rightSize < rightCild.minSize) {\n          rightSize = rightCild.minSize;\n          leftSize = leftChild.size + rightCild.size - rightSize;\n        }\n      } else if (leftSize < leftChild.minSize) {\n        leftSize = leftChild.minSize;\n        rightSize = leftChild.size + rightCild.size - leftSize;\n      }\n      var sizes = beforeDivider.concat(afterDivider).map(function (child) {\n        return child.size;\n      });\n      sizes[beforeDivider.length - 1] = leftSize;\n      sizes[beforeDivider.length] = rightSize;\n      changeSizes(sizes);\n    }\n  }, {\n    key: \"dragMoveAll\",\n    value: function dragMoveAll(e, dx, dy) {\n      var _this$props2 = this.props,\n        isVertical = _this$props2.isVertical,\n        changeSizes = _this$props2.changeSizes;\n      var _this$boxData2 = this.boxData,\n        beforeSize = _this$boxData2.beforeSize,\n        beforeMinSize = _this$boxData2.beforeMinSize,\n        afterSize = _this$boxData2.afterSize,\n        afterMinSize = _this$boxData2.afterMinSize,\n        beforeDivider = _this$boxData2.beforeDivider,\n        afterDivider = _this$boxData2.afterDivider;\n      var d = isVertical ? dy : dx;\n      var newBeforeSize = beforeSize + d;\n      var newAfterSize = afterSize - d;\n      // check total min size\n      if (d > 0) {\n        if (newAfterSize < afterMinSize) {\n          newAfterSize = afterMinSize;\n          newBeforeSize = beforeSize + afterSize - afterMinSize;\n        }\n      } else if (newBeforeSize < beforeMinSize) {\n        newBeforeSize = beforeMinSize;\n        newAfterSize = beforeSize + afterSize - beforeMinSize;\n      }\n      changeSizes(spiltSize(newBeforeSize, beforeSize, beforeDivider).concat(spiltSize(newAfterSize, afterSize, afterDivider)));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var className = this.props.className;\n      if (!className) {\n        className = 'dock-divider';\n      }\n      return React.createElement(DragDropDiv, {\n        className: className,\n        onDragStartT: this.startDrag,\n        onDragMoveT: this.dragMove,\n        onDragEndT: this.dragEnd\n      });\n    }\n  }]);\n  return Divider;\n}(React.PureComponent);","map":{"version":3,"names":["React","DragDropDiv","BoxDataCache","data","_classCallCheck","beforeSize","beforeMinSize","afterSize","afterMinSize","element","beforeDivider","afterDivider","_iterator","_createForOfIteratorHelper","_step","s","n","done","child","value","size","minSize","err","e","f","_iterator2","_step2","spiltSize","newSize","oldSize","children","reservedSize","sizes","requiredMinSize","ratio","i","length","Divider","_React$PureComponent","_inherits","_super","_createSuper","_this","apply","arguments","startDrag","boxData","props","getDividerData","idx","dragMove","event","shiftKey","ctrlKey","altKey","dragMoveAll","dx","dy","dragMove2","dragEnd","onDragEnd","_createClass","key","_this$props","isVertical","changeSizes","_this$boxData","d","leftChild","rightCild","leftSize","rightSize","concat","map","_this$props2","_this$boxData2","newBeforeSize","newAfterSize","render","className","createElement","onDragStartT","onDragMoveT","onDragEndT","PureComponent"],"sources":["C:/d/Programming/web/jodel-mde/node_modules/rc-dock/es/Divider.js"],"sourcesContent":["import React from 'react';\nimport { DragDropDiv } from \"./dragdrop/DragDropDiv\";\nclass BoxDataCache {\n    constructor(data) {\n        this.beforeSize = 0;\n        this.beforeMinSize = 0;\n        this.afterSize = 0;\n        this.afterMinSize = 0;\n        this.element = data.element;\n        this.beforeDivider = data.beforeDivider;\n        this.afterDivider = data.afterDivider;\n        for (let child of this.beforeDivider) {\n            this.beforeSize += child.size;\n            if (child.minSize > 0) {\n                this.beforeMinSize += child.minSize;\n            }\n        }\n        for (let child of this.afterDivider) {\n            this.afterSize += child.size;\n            if (child.minSize > 0) {\n                this.afterMinSize += child.minSize;\n            }\n        }\n    }\n}\n// split size among children\nfunction spiltSize(newSize, oldSize, children) {\n    let reservedSize = -1;\n    let sizes = [];\n    let requiredMinSize = 0;\n    while (requiredMinSize !== reservedSize) {\n        reservedSize = requiredMinSize;\n        requiredMinSize = 0;\n        let ratio = (newSize - reservedSize) / (oldSize - reservedSize);\n        if (!(ratio >= 0)) {\n            // invalid input\n            break;\n        }\n        for (let i = 0; i < children.length; ++i) {\n            let size = children[i].size * ratio;\n            if (size < children[i].minSize) {\n                size = children[i].minSize;\n                requiredMinSize += size;\n            }\n            sizes[i] = size;\n        }\n    }\n    return sizes;\n}\nexport class Divider extends React.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.startDrag = (e) => {\n            this.boxData = new BoxDataCache(this.props.getDividerData(this.props.idx));\n            e.startDrag(this.boxData.element, null);\n        };\n        this.dragMove = (e) => {\n            if (e.event.shiftKey || e.event.ctrlKey || e.event.altKey) {\n                this.dragMoveAll(e, e.dx, e.dy);\n            }\n            else {\n                this.dragMove2(e, e.dx, e.dy);\n            }\n        };\n        this.dragEnd = (e) => {\n            let { onDragEnd } = this.props;\n            this.boxData = null;\n            if (onDragEnd) {\n                onDragEnd();\n            }\n        };\n    }\n    dragMove2(e, dx, dy) {\n        let { isVertical, changeSizes } = this.props;\n        let { beforeDivider, afterDivider } = this.boxData;\n        if (!(beforeDivider.length && afterDivider.length)) {\n            // invalid input\n            return;\n        }\n        let d = isVertical ? dy : dx;\n        let leftChild = beforeDivider[beforeDivider.length - 1];\n        let rightCild = afterDivider[0];\n        let leftSize = leftChild.size + d;\n        let rightSize = rightCild.size - d;\n        // check min size\n        if (d > 0) {\n            if (rightSize < rightCild.minSize) {\n                rightSize = rightCild.minSize;\n                leftSize = leftChild.size + rightCild.size - rightSize;\n            }\n        }\n        else if (leftSize < leftChild.minSize) {\n            leftSize = leftChild.minSize;\n            rightSize = leftChild.size + rightCild.size - leftSize;\n        }\n        let sizes = beforeDivider.concat(afterDivider).map((child) => child.size);\n        sizes[beforeDivider.length - 1] = leftSize;\n        sizes[beforeDivider.length] = rightSize;\n        changeSizes(sizes);\n    }\n    dragMoveAll(e, dx, dy) {\n        let { isVertical, changeSizes } = this.props;\n        let { beforeSize, beforeMinSize, afterSize, afterMinSize, beforeDivider, afterDivider } = this.boxData;\n        let d = isVertical ? dy : dx;\n        let newBeforeSize = beforeSize + d;\n        let newAfterSize = afterSize - d;\n        // check total min size\n        if (d > 0) {\n            if (newAfterSize < afterMinSize) {\n                newAfterSize = afterMinSize;\n                newBeforeSize = beforeSize + afterSize - afterMinSize;\n            }\n        }\n        else if (newBeforeSize < beforeMinSize) {\n            newBeforeSize = beforeMinSize;\n            newAfterSize = beforeSize + afterSize - beforeMinSize;\n        }\n        changeSizes(spiltSize(newBeforeSize, beforeSize, beforeDivider).concat(spiltSize(newAfterSize, afterSize, afterDivider)));\n    }\n    render() {\n        let { className } = this.props;\n        if (!className) {\n            className = 'dock-divider';\n        }\n        return (React.createElement(DragDropDiv, { className: className, onDragStartT: this.startDrag, onDragMoveT: this.dragMove, onDragEndT: this.dragEnd }));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}