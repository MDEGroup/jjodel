{"ast":null,"code":"import{DV,DModel,DViewElement,DPackage,DClass,DEnumerator,DAttribute,DReference,DOperation,DEnumLiteral,DObject,DValue,DParameter,GraphSize,CoordinateMode,U}from'../../joiner';import DSL from\"../../DSL/DSL\";var nosize={x:0,y:0,w:0,h:0,nosize:true};var defaultEdgePointSize={x:0,y:0,w:5,h:5};var defaultVertexSize={x:0,y:0,w:140.6818084716797,h:32.52840805053711};var defaultPackageSize=new GraphSize(0,0,400,500);const udLevel='ret.level = node.graph.state.level ?? 3\\n';const udGrid='ret.grid = node.graph.state.grid ?? false\\n';const udLevelG='ret.level = node.state.level ?? 3\\n';const udGridG='ret.grid = node.state.grid ?? false\\n';const udLevelPkg=udLevelG+'ret.upperLevel = node.graph.state.level ?? 3\\n';class DefaultViews{static model(vp){const view=DViewElement.new2('Model',DSL.parser(DV.modelView()),vp,d=>{d.appliableTo='Graph';d.appliableToClasses=[DModel.cname];d.oclCondition='context DModel inv: true';d.draggable=false;d.resizable=false;d.palette={'background-':U.hexToPalette('#fff'),'color-':U.hexToPalette('#123cd0','#4b0082','#ff0000','#3191bb','#3191bb')};},false,'Pointer_ViewModel');view.css=\"\\n&, .Graph{\\n  background-color: var(--background-1);\\n  height: 100%;\\n  width: -webkit-fill-available;\\n}\\n.edges {z-index: 101; position: absolute; top: 0; left: 0; height: 0; width: 0; overflow: visible; }\\n.detail-level {\\n    position: absolute;\\n    right: -50px;\\n    top: 50px;\\n    display: flex;\\n    transform: rotate(270deg);\\n    &>div{\\n        transform: rotate(90deg) translate(0, 100%);\\n    }\\n}\\n\\n/* stuff for subelements */\\n[data-nodetype=\\\"GraphVertex\\\"] {\\n  width: 50%;\\n  height: 50%;\\n}\\n&,[data-nodetype]{\\n  select, input{\\n    background: inherit;\\n    color: inherit;\\n    &:empty{\\n      font-style: italic;\\n    }\\n  }\\n}\\n[data-nodetype=\\\"Field\\\"] {\\n  white-space: nowrap;\\n}\\n[data-nodetype=\\\"VoidVertex\\\"],\\n[data-nodetype=\\\"Vertex\\\"],\\n[data-nodetype=\\\"GraphVertex\\\"] {\\n  &>*{ border: 0.1em solid #a3a3a3; }\\n  &>.ui-resizable-handle{ border: none; }\\n}\\n&,[data-nodetype], [data-nodetype]>*{\\n  /* for some reason focus does not work?? so this is a fallback but needs to be properly fixed */\\n  overflow: hidden;\\n  &.selected-by-me, &:has(.selected-by-me, .Edge), &:hover, &:active, &:focus-within, &:focus{\\n    overflow: visible;\\n    z-index: 100 !important;\\n  }\\n}\\n.Edge{\\n    overflow: visible;\\n}\\n\\n/* level-specific rules */\\n\\n.model-0 {\\n  height: 100%!important;\\n  width: 100%!important;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n\\n.metamodel {\\n  position: absolute;\\n  width: max-content;\\n  height: max-content;\\n  padding: 10px;\\n  border: 1px solid var(--secondary)!important;\\n  border-radius: var(--radius);\\n}\\n\\n.model-1 {}\\n.model-2 {}\\n.model-3 {}\\n\\n.grid {\\n    background-image: radial-gradient(silver 1px, transparent 0);\\n    background-size: 15px 15px;\\n    background-position: 10px 10px;\\n}\\n\\n\";view.usageDeclarations='(ret) => {\\n'+'// ** preparations and default behaviour here ** //\\n'+'ret.node = node\\n'+'ret.view = view\\n'+'// custom preparations:\\n'+'let packages = data && data.isMetamodel ? data.packages : [];\\n'+'let suggestedEdges = data?.suggestedEdges || {};\\n'+'// data, node, view are dependencies by default. delete them above if you want to remove them.\\n'+'// add preparation code here (like for loops to count something), then list the dependencies below.\\n'+// ยก The element will update only if one of the listed dependencies has changed !\n'// ** declarations here ** //\\n'+'ret.firstPackage = packages[0]\\n'+'ret.otherPackages = packages.slice(1)\\n'+'ret.m1Objects = data && !data.isMetamodel ? data.allSubObjects : []\\n'+'ret.refEdges = (suggestedEdges.reference || []).filter(e => !e.vertexOverlaps && e.sameGraph)\\n'+'ret.extendEdges = (suggestedEdges.extend || []).filter(e => !e.vertexOverlaps && e.sameGraph)\\n'+udLevelG+udGridG+'}';return view;}static package(vp){const view=DViewElement.new2('Package',DV.packageView(),vp,view=>{view.appliableToClasses=[DPackage.cname];view.oclCondition='context DPackage inv: true';view.appliableTo='GraphVertex';view.palette={'color-':U.hexToPalette('#028012'),'background-':U.hexToPalette('#fff')};view.css=\"\\n.package { background-color: var(--background-0); border-radius: 0.2em; border-left: 0.25em solid var(--color-1); }\\n.package-children { height: -webkit-fill-available; width: -webkit-fill-available; }\\n.summary { padding: 0.25rem; text-align: center; }\\n.detail-level {\\n    position: absolute;\\n    right: -50px;\\n    top: 50px;\\n    display: flex;\\n    transform: rotate(270deg);\\n    &>div {\\n        transform: rotate(90deg) translate(0, 100%);\\n    }\\n}\";view.defaultVSize=defaultPackageSize;view.usageDeclarations='(ret) => {\\n'+'// ** preparations and default behaviour here ** //\\n'+'ret.data = data\\n'+'ret.node = node\\n'+'ret.view = view\\n'+'// custom preparations:\\n'+'// data, node, view are dependencies by default. delete them above if you want to remove them.\\n'+'// add preparation code here (like for loops to count something), then list the dependencies below.\\n'+// ยก The element will update only if one of the listed dependencies has changed !\n'// ** declarations here ** //\\n'+udLevelPkg+'}';},false,'Pointer_ViewPackage');view.onDataUpdate=\"if (grid) {\\n   node.x = node.x - (node.x % 15);\\n   node.y = node.y - (node.y % 15);\\n}\";return view;}static class(vp){const view=DViewElement.new2('Class',DV.classView(),vp,view=>{view.appliableToClasses=[DClass.cname];view.adaptWidth=true;view.adaptHeight=true;view.appliableTo='Vertex';view.oclCondition='context DClass inv: true';view.palette={'color-':U.hexToPalette('#f00','#000','#fff'),'background-':U.hexToPalette('#fff','#eee','#f00')};view.css=\"\\n\\n\\n/* class */\\n\\n.class {\\n    border-radius: var(--model-radius);\\n    background: var(--model-background);\\n    color:var(--model-color);\\n\\n    &>.header{\\n        padding: 3px 6px;\\n        white-space: pre;\\n    }\\n    .class-name{ \\n        font-weight: bold; \\n        color: var(--model-accent); \\n    }\\n    .bi {\\n        color: var(--model-accent); \\n        padding-right: 3px;\\n    }\\n    .class-children {\\n        background-color: var(--model-background);\\n        height: fit-content;\\n        width: -webkit-fill-available;\\n        &>*:last-child { padding-bottom: 0.125em; }\\n    }\\n    .abstract { font-style: italic; }\\n    .summary { padding: 0.25rem; text-align: center; }\\n}\\n.abstract {\\nborder-style: dotted!important;\\nborder-color: silver!important;\\n    }\\n\\n.class:hover {\\n    box-shadow: var(--model-shadow);\\n}\\n            \\n\";view.defaultVSize=defaultVertexSize;view.usageDeclarations=\"(ret) => {\\n    // ** preparations and default behaviour here ** //\\n    // ret.data = data; intentionally excluded: i'm picking the used values individually reducing the re-renders.\\n    ret.node = node\\n    ret.view = view\\n    // custom preparations:\\n    // data, node, view are dependencies by default. delete them above if you want to remove them.\\n    // add preparation code here (like for loops to count something), then list the dependencies below.\\n    // \\xA1 The element will update only if one of the listed dependencies has changed !\\n    // ** declarations here ** //\\n    ret.attributes = data.attributes\\n    ret.references = data.references\\n    ret.operations = data.operations\\n    ret.abstract = data.abstract\\n    ret.interface = data.interface\\n    \".concat(udLevel,\"\\n    \").concat(udGrid,\"\\n}\");// view.events = {e1:\"(num) => {\\n\\tdata.name = num;\\n}\"}\n},false,'Pointer_ViewClass');view.onDataUpdate=\"if (grid) {\\n   node.x = node.x - (node.x % 15);\\n   node.y = node.y - (node.y % 15);\\n}\";return view;}/* ENUM */static enum(vp){const view=DViewElement.new2('Enum',DV.enumeratorView(),vp,view=>{view.appliableToClasses=[DEnumerator.cname];view.adaptWidth=true;view.adaptHeight=true;view.appliableTo='Vertex';view.oclCondition='context DEnumerator inv: true';view.palette={'color-':U.hexToPalette('#ffa500','#000','#fff'),'background-':U.hexToPalette('#fff','#eee','#f00')};//             view.css =  `\n// .enumerator {\n//     border-radius: 0.2em;\n//     border-left: 0.25em solid var(--color-1);\n//     background: var(--background-1);\n//     color:var(--color-2);\n//     &>.header{\n//         padding: 3px 6px;\n//         white-space: pre;\n//     }\n//     .enumerator-name { font-weight: bold; color: var(--color-1); }\n//     .enumerator-children {\n//         background-color: var(--background-2);\n//         height: fit-content;\n//         width: -webkit-fill-available;\n//         &>*:last-child { padding-bottom: 0.125em; }\n//     }\n//     .summary { padding: 0.25rem; text-align: center; }\n// }\n// `\nview.css=\"\\n.enumerator {\\n    border-radius: var(--radius);\\n    background: white;\\n    color:var(--model-color);\\n    &>.header{\\n        padding: 3px 6px;\\n        white-space: pre;\\n    }\\n    .enumerator-name { font-weight: bold; color: var(--accent-secondary); }\\n    .bi {\\n        color: var(--accent-secondary);\\n    }\\n    .enumerator-children {\\n        background-color: white; \\n        height: fit-content;\\n        width: -webkit-fill-available;\\n        &>*:last-child { padding-bottom: 0.125em; }\\n    }\\n    .summary { padding: 0.25rem; text-align: center; }\\n}\\n\\n.enumerator:hover {\\n    box-shadow: 0 0 5px silver;\\n}\\n\";view.defaultVSize=defaultVertexSize;view.usageDeclarations=\"(ret) => {\\n    // ** preparations and default behaviour here ** //\\n    // ret.data = data; intentionally excluded: i'm picking the used values individually reducing the re-renders.\\n    ret.node = node\\n    ret.view = view\\n    // custom preparations:\\n    // data, node, view are dependencies by default. delete them above if you want to remove them.\\n    // add preparation code here (like for loops to count something), then list the dependencies below.\\n    // \\xA1 The element will update only if one of the listed dependencies has changed !\\n    // ** declarations here ** //\\n    ret.literals = data.literals\\n    \".concat(udLevel,\"\\n}\");},false,'Pointer_ViewEnum');view.onDataUpdate=\"if (grid) {\\n   node.x = node.x - (node.x % 15);\\n   node.y = node.y - (node.y % 15);\\n}\";return view;}/* ATTRIBUTE */static attribute(vp){const view=DViewElement.new2('Attribute',DV.attributeView(),vp,view=>{view.appliableToClasses=[DAttribute.cname];view.oclCondition='context DAttribute inv: true';view.appliableTo='Field';view.css=\"\\n.feature{\\n    display: flex;\\n    padding: 2px 5px;\\n    select {\\n        margin-left: auto;\\n        width: max(33%, 75px);\\n    }\\n}\";},false,'Pointer_ViewAttribute');return view;}/* REFERENCE */static reference(vp){const view=DViewElement.new2('Reference',DV.referenceView(),vp,view=>{view.appliableToClasses=[DReference.cname];view.oclCondition='context DReference inv: true';view.appliableTo='Field';view.css=\"\\n.feature{\\n    display: flex;\\n    padding: 2px 5px;\\n    select {\\n        margin-left: auto;\\n        width: max(33%, 75px);\\n    }\\n}\";},false,'Pointer_ViewReference');return view;}/* OPERATION */static operation(vp){const view=DViewElement.new2('Operation',DV.operationView(),vp,view=>{view.appliableToClasses=[DOperation.cname];view.oclCondition='context DOperation inv: true';view.appliableTo='Field';view.usageDeclarations=\"(ret) => {\\n    // ** preparations and default behaviour here ** //\\n    ret.data = data\\n    ret.node = node\\n    ret.view = view\\n    // custom preparations:\\n    // data, node, view are dependencies by default. delete them above if you want to remove them.\\n    // add preparation code here (like for loops to count something), then list the dependencies below.\\n    // \\xA1 The element will update only if one of the listed dependencies has changed !\\n    // ** declarations here ** //\\n    \".concat(udLevel,\"\\n}\");view.css=\"\\n.operation{\\n    display: flex;\\n    padding: 2px 5px;\\n    select {\\n        margin-left: auto;\\n        width: max(33%, 75px);\\n    }\\n    .parameters{\\n        background-color: var(--background-2);\\n        left: 0;\\n        top: 100%;\\n        width: 100%;\\n    }\\n}\";},false,'Pointer_ViewOperation');return view;}/* PARAMETER */static parameter(vp){const view=DViewElement.new2('Parameter',DV.parameterView(),vp,view=>{view.appliableToClasses=[DParameter.cname];view.appliableTo='Field';},false,'Pointer_ViewParameter');view.css=\"\\n.parameter{\\n    display: flex;\\n    padding-left: 1em;\\n    width: calc(100% - 1em);\\n    .modifier{\\n        width: 1ic;\\n        text-align: center;\\n    }\\n}\";return view;}/* LITERAL */static literal(vp){const view=DViewElement.new2('Literal',DV.literalView(),vp,view=>{view.appliableToClasses=[DEnumLiteral.cname];view.oclCondition='context DEnumLiteral inv: true';view.appliableTo='Field';view.palette={};view.css=\"display: block;\";},false,'Pointer_ViewLiteral');return view;}/* OBJECT */static object(vp){const view=DViewElement.new2('Object',DV.objectView(),vp,view=>{view.appliableToClasses=[DObject.cname];view.adaptWidth=true;view.adaptHeight=true;view.oclCondition='context DObject inv: true';view.palette={'color-':U.hexToPalette('#f00','#000','#fff'),'background-':U.hexToPalette('#fff','#eee','#f00')};// view.css = '.object {border-radius: 0.2em; border-left: 0.25em solid var(--color-1); background: var(--background-1); color: var(--color-2);}\\n';\n// view.css += '.object-name {font-weight: bold; color: var(--color-1);}\\n';\n// view.css += '.object-children {background-color: var(--background-2); height: fit-content; width: -webkit-fill-available;}';\nview.css='.object {border-radius: var(--radius); background: white; color: var(--accent);}\\n';view.css+='.object-name {padding: 10px; font-weight: 600; color: var(--accent);}\\n';view.css+='.object-children {padding: 10px;background-color: white; height: fit-content; width: -webkit-fill-available;}';view.defaultVSize=defaultVertexSize;view.appliableTo='Vertex';view.usageDeclarations='(ret) => {\\n'+'// ** preparations and default behaviour here ** //\\n'+'ret.data = data\\n'+'ret.node = node\\n'+'ret.view = view\\n'+'// data, node, view are dependencies by default. delete them above if you want to remove them.\\n'+'// add preparation code here (like for loops to count something), then list the dependencies below.\\n'+// ยก The element will update only if one of the listed dependencies has changed !\n'// ** declarations here ** //\\n'+'ret.metaclassName = data.instanceof?.name || \\'Object\\'\\n'+udLevel+'}';},false,'Pointer_ViewObject');view.onDataUpdate=\"if (grid) {\\n   node.x = node.x - (node.x % 15);\\n   node.y = node.y - (node.y % 15);\\n}\";return view;}/* SINGLETON OBJECT */static singleton(vp){const view=DViewElement.new2('Singleton',DV.singletonView(),vp,view=>{view.appliableToClasses=[DObject.cname];view.adaptWidth=false;view.adaptHeight=false;view.jsCondition='return data.instanceof.isSingleton';//view.oclCondition = 'context DObject inv: true';\n//view.palette = {'color-':  U.hexToPalette('#f00', '#000', '#fff'), 'background-': U.hexToPalette('#fff', '#eee', '#f00')};\nview.css='.singleton {text-align: center; border: none; background-color: var(--accent); color: white; padding: 4px 30px; width: fit-content; border-radius: var(--radius);}\\n';view.css+='.singleton::before {position: absolute; left: 10px; font-family: bootstrap-icons; content: \"\\\\F799\";}\\n';view.defaultVSize=defaultVertexSize;view.appliableTo='Vertex';view.usageDeclarations='(ret) => {\\n'+'// ** preparations and default behaviour here ** //\\n'+'ret.data = data\\n'+'ret.node = node\\n'+'ret.view = view\\n'+'// data, node, view are dependencies by default. delete them above if you want to remove them.\\n'+'// add preparation code here (like for loops to count something), then list the dependencies below.\\n'+// ยก The element will update only if one of the listed dependencies has changed !\n'// ** declarations here ** //\\n'+'ret.metaclassName = data.instanceof?.name || \\'Object\\'\\n'+'ret.isSingleton = data.instanceof?.isSingleton || false\\n'+udLevel+'}';},false,'Pointer_ViewSingleton');view.onDataUpdate=\"if (grid) {\\n   node.x = node.x - (node.x % 15);\\n   node.y = node.y - (node.y % 15);\\n}\";return view;}/* VALUE */static value(vp){const view=DViewElement.new2('Value',DV.valueView(),vp,view=>{view.appliableToClasses=[DValue.cname];view.oclCondition='context DValue inv: true';view.palette={};view.css=\".value{\\n    padding-right: 6px;\\n    max-width: 300px;\\n    min-width: 100%;\\n    overflow:hidden;\\n    &:hover, &:focus-within{ overflow: visible; }\\n    /*.values_str{\\n        maxWidth: 100px;\\n    }*/\\n}\";view.appliableTo='Field';view.usageDeclarations='(ret) =>  {\\n'+'// ** preparations and default behaviour here ** //\\n'+'ret.node = node\\n'+'ret.view = view\\n'+'// data, node, view are dependencies by default. delete them above if you want to remove them.\\n'+'// add preparation code here (like for loops to count something), then list the dependencies below.\\n'+// ยก The element will update only if one of the listed dependencies has changed !\n'// ** declarations here ** //\\n'+'ret.instanceofname = data.instanceof?.name\\n'+'ret.valuesString = data.valuesString()\\n'+'ret.typeString = data.typeString\\n'+'}';},false,'Pointer_ViewValue');return view;}static edgepoint(vp){let css=\".edgePoint{\\n    border: 2px solid var(--border-1);\\n    background: var(--background-1);\\n    color: var(--color-1);\\n    width: 100%;\\n    height: 100%;\\n    min-height: 15px;\\n    min-width: 5px;\\n    &:hover, &:focus-within, &:focus{\\n        transform-origin: center;\\n        transform: scale(1.3);\\n    }\\n}\\n[hoverscale]:hover, [hoverscale]:focus-within, [hoverscale]:focus{\\n    transform-origin: center;\\n    transform: scale(var(--hover-scale));\\n    &>[hoverscale]:hover, &>[hoverscale]:focus-within, &>[hoverscale]:focus{ transform: scale(1); }\\n}\\n\\n\";let usageDeclarations=\"(ret)=>{ // scope contains: data, node, view, constants, state\\n\"+\"// ** preparations and default behaviour here ** //\\n\"+\"ret.data = data\\n\"+\"ret.node = node\\n\"+\"ret.view = view\\n\"+\"// data, node, view are dependencies by default. delete them above if you want to remove them.\\n\"+\"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\\n\"+// ยก The element will update only if one of the listed dependencies has changed !\n\"// ** declarations here ** //\\n\"+\"ret.edgestart = node.edge.start?.size+''\\n\"+\"ret.edgeend = node.edge.end?.size+''\\n\"+\"}\";// edgePointView.edgePointCoordMode = CoordinateMode.relativePercent;\nlet view=DViewElement.new2('EdgePoint',DV.edgePointView(),vp,d=>{d.appliableTo='EdgePoint';d.resizable=false;d.palette={'color-':U.hexToPalette('#000'),'background-':U.hexToPalette('#fff'),'border-':U.hexToPalette('#000'),'hover-scale':{type:'number',unit:'',value:1.3}};d.css=css;d.usageDeclarations=usageDeclarations;d.edgePointCoordMode=CoordinateMode.absolute;d.defaultVSize=defaultEdgePointSize;// d.defaultVSize = new GraphSize(0, 0, 25, 25);\n},false,'Pointer_ViewEdgePoint');return view;}static anchor(vp){let ret=DViewElement.new2('Anchors',DV.anchorJSX(),vp,v=>{v.isExclusiveView=false;v.palette={'anchor-':U.hexToPalette('#77f','#f77','#007'),'anchor-hover-':U.hexToPalette('#7f7','#a44','#070')};v.usageDeclarations=\"(ret)=>{ // scope: data, node, view, state, \\n\"+\"// ** preparations and default behaviour here ** //\\n\"+\"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\"+\"// ** declarations here ** //\\n\"+\"ret.anchors = (node && node.anchors || {});\\n\"+\"ret.dragAnchor = node.events.dragAnchor; // @autogenerated, do not edit\\n\"+\"ret.assignAnchor = node.events.assignAnchor; // @autogenerated, do not edit\\n\"+\"}\";v.events={dragAnchor:'(coords /*Point*/, anchorName /*string*/)=>{\\n'+'\\tconst updateAnchor = {};\\n'+'\\tupdateAnchor[anchorName] = coords;\\n'+'\\tnode.anchors=updateAnchor;\\n'+'}',assignAnchor:'(anchorName /*string*/)=>{\\n'+'\\tnode.assignEdgeAnchor(anchorName);\\n'+'}'};v.css=\"\\n.anchor.valid-anchor{\\n    display:block;\\n}\\n\\n.anchor{\\n    display:none;\\n    position: absolute;\\n    background-color: var(--anchor-1);\\n    outline: 2px solid var(--anchor-3);\\n    transform: translate(-50%, -50%);\\n    pointer-events: all;\\n    cursor: crosshair;\\n    \\n    &:hover{\\n        background-color: var(--anchor-hover-1);\\n        outline: 2px solid var(--anchor-hover-3);\\n    }\\n    &.active-anchor{\\n        background-color: var(--anchor-2);\\n        &:hover{\\n            background-color: var(--anchor-hover-2);\\n        }\\n    }\\n}\\n\";},false,'Pointer_ViewAnchors');return ret;}}export default DefaultViews;","map":{"version":3,"names":["DV","DModel","DViewElement","DPackage","DClass","DEnumerator","DAttribute","DReference","DOperation","DEnumLiteral","DObject","DValue","DParameter","GraphSize","CoordinateMode","U","DSL","nosize","x","y","w","h","defaultEdgePointSize","defaultVertexSize","defaultPackageSize","udLevel","udGrid","udLevelG","udGridG","udLevelPkg","DefaultViews","model","vp","view","new2","parser","modelView","d","appliableTo","appliableToClasses","cname","oclCondition","draggable","resizable","palette","hexToPalette","css","usageDeclarations","package","packageView","defaultVSize","onDataUpdate","class","classView","adaptWidth","adaptHeight","concat","enum","enumeratorView","attribute","attributeView","reference","referenceView","operation","operationView","parameter","parameterView","literal","literalView","object","objectView","singleton","singletonView","jsCondition","value","valueView","edgepoint","edgePointView","type","unit","edgePointCoordMode","absolute","anchor","ret","anchorJSX","v","isExclusiveView","events","dragAnchor","assignAnchor"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/frontend/src/redux/defaults/views.ts"],"sourcesContent":["import {\r\n    DV,\r\n    DModel,\r\n    DViewElement,\r\n    DViewPoint,\r\n    Pointer,\r\n    DPackage,\r\n    DClass,\r\n    DEnumerator,\r\n    DAttribute,\r\n    DReference,\r\n    DOperation,\r\n    DEnumLiteral,\r\n    DObject,\r\n    DValue,\r\n    DParameter,\r\n    GraphSize,\r\n    CoordinateMode,\r\n    U\r\n} from '../../joiner';\r\nimport DSL from \"../../DSL/DSL\";\r\n\r\nvar nosize: GraphSize = {x:0, y:0, w:0, h:0, nosize:true} as any;\r\nvar defaultEdgePointSize: GraphSize = {x:0, y:0, w:5, h:5} as any;\r\nvar defaultVertexSize: GraphSize = {x:0, y:0, w:140.6818084716797, h:32.52840805053711} as any;\r\nvar defaultPackageSize = new GraphSize(0, 0, 400, 500);\r\n\r\nconst udLevel = 'ret.level = node.graph.state.level ?? 3\\n';\r\nconst udGrid = 'ret.grid = node.graph.state.grid ?? false\\n'\r\n\r\nconst udLevelG = 'ret.level = node.state.level ?? 3\\n';\r\nconst udGridG = 'ret.grid = node.state.grid ?? false\\n';\r\n\r\nconst udLevelPkg = udLevelG + 'ret.upperLevel = node.graph.state.level ?? 3\\n';\r\n\r\nclass DefaultViews {\r\n\r\n    static model(vp: DViewElement): DViewElement {\r\n        const view = DViewElement.new2(\r\n            'Model', DSL.parser(DV.modelView()), vp,(d)=> {\r\n                d.appliableTo = 'Graph';\r\n                d.appliableToClasses = [DModel.cname];\r\n                d.oclCondition = 'context DModel inv: true';\r\n                d.draggable = false; d.resizable = false;\r\n                d.palette = {\r\n                    'background-': U.hexToPalette('#fff'),\r\n                    'color-': U.hexToPalette('#123cd0', '#4b0082', '#ff0000', '#3191bb', '#3191bb')\r\n                };\r\n            }, false, 'Pointer_ViewModel');\r\n\r\n        view.css = `\r\n&, .Graph{\r\n  background-color: var(--background-1);\r\n  height: 100%;\r\n  width: -webkit-fill-available;\r\n}\r\n.edges {z-index: 101; position: absolute; top: 0; left: 0; height: 0; width: 0; overflow: visible; }\r\n.detail-level {\r\n    position: absolute;\r\n    right: -50px;\r\n    top: 50px;\r\n    display: flex;\r\n    transform: rotate(270deg);\r\n    &>div{\r\n        transform: rotate(90deg) translate(0, 100%);\r\n    }\r\n}\r\n\r\n/* stuff for subelements */\r\n[data-nodetype=\"GraphVertex\"] {\r\n  width: 50%;\r\n  height: 50%;\r\n}\r\n&,[data-nodetype]{\r\n  select, input{\r\n    background: inherit;\r\n    color: inherit;\r\n    &:empty{\r\n      font-style: italic;\r\n    }\r\n  }\r\n}\r\n[data-nodetype=\"Field\"] {\r\n  white-space: nowrap;\r\n}\r\n[data-nodetype=\"VoidVertex\"],\r\n[data-nodetype=\"Vertex\"],\r\n[data-nodetype=\"GraphVertex\"] {\r\n  &>*{ border: 0.1em solid #a3a3a3; }\r\n  &>.ui-resizable-handle{ border: none; }\r\n}\r\n&,[data-nodetype], [data-nodetype]>*{\r\n  /* for some reason focus does not work?? so this is a fallback but needs to be properly fixed */\r\n  overflow: hidden;\r\n  &.selected-by-me, &:has(.selected-by-me, .Edge), &:hover, &:active, &:focus-within, &:focus{\r\n    overflow: visible;\r\n    z-index: 100 !important;\r\n  }\r\n}\r\n.Edge{\r\n    overflow: visible;\r\n}\r\n\r\n/* level-specific rules */\r\n\r\n.model-0 {\r\n  height: 100%!important;\r\n  width: 100%!important;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.metamodel {\r\n  position: absolute;\r\n  width: max-content;\r\n  height: max-content;\r\n  padding: 10px;\r\n  border: 1px solid var(--secondary)!important;\r\n  border-radius: var(--radius);\r\n}\r\n\r\n.model-1 {}\r\n.model-2 {}\r\n.model-3 {}\r\n\r\n.grid {\r\n    background-image: radial-gradient(silver 1px, transparent 0);\r\n    background-size: 15px 15px;\r\n    background-position: 10px 10px;\r\n}\r\n\r\n`;\r\n\r\n        view.usageDeclarations = '(ret) => {\\n' +\r\n            '// ** preparations and default behaviour here ** //\\n' +\r\n            'ret.node = node\\n' +\r\n            'ret.view = view\\n' +\r\n            '// custom preparations:\\n' +\r\n            'let packages = data && data.isMetamodel ? data.packages : [];\\n' +\r\n            'let suggestedEdges = data?.suggestedEdges || {};\\n' +\r\n            '// data, node, view are dependencies by default. delete them above if you want to remove them.\\n' +\r\n            '// add preparation code here (like for loops to count something), then list the dependencies below.\\n' +\r\n            // ยก The element will update only if one of the listed dependencies has changed !\r\n            '// ** declarations here ** //\\n' +\r\n            'ret.firstPackage = packages[0]\\n'+\r\n            'ret.otherPackages = packages.slice(1)\\n'+\r\n            'ret.m1Objects = data && !data.isMetamodel ? data.allSubObjects : []\\n'+\r\n            'ret.refEdges = (suggestedEdges.reference || []).filter(e => !e.vertexOverlaps && e.sameGraph)\\n'+\r\n            'ret.extendEdges = (suggestedEdges.extend || []).filter(e => !e.vertexOverlaps && e.sameGraph)\\n'+\r\n            udLevelG + udGridG +\r\n            '}';\r\n        return view;\r\n    }\r\n\r\n    static package(vp: DViewElement): DViewElement {\r\n        const view = DViewElement.new2('Package', DV.packageView(), vp, (view)=>{\r\n            view.appliableToClasses = [DPackage.cname];\r\n            view.oclCondition = 'context DPackage inv: true';\r\n            view.appliableTo = 'GraphVertex';\r\n            view.palette = {'color-':  U.hexToPalette('#028012'), 'background-':  U.hexToPalette('#fff')};\r\n            view.css = `\r\n.package { background-color: var(--background-0); border-radius: 0.2em; border-left: 0.25em solid var(--color-1); }\r\n.package-children { height: -webkit-fill-available; width: -webkit-fill-available; }\r\n.summary { padding: 0.25rem; text-align: center; }\r\n.detail-level {\r\n    position: absolute;\r\n    right: -50px;\r\n    top: 50px;\r\n    display: flex;\r\n    transform: rotate(270deg);\r\n    &>div {\r\n        transform: rotate(90deg) translate(0, 100%);\r\n    }\r\n}`\r\n            view.defaultVSize = defaultPackageSize;\r\n            view.usageDeclarations = '(ret) => {\\n' +\r\n                '// ** preparations and default behaviour here ** //\\n' +\r\n                'ret.data = data\\n' +\r\n                'ret.node = node\\n' +\r\n                'ret.view = view\\n' +\r\n                '// custom preparations:\\n' +\r\n                '// data, node, view are dependencies by default. delete them above if you want to remove them.\\n' +\r\n                '// add preparation code here (like for loops to count something), then list the dependencies below.\\n' +\r\n                // ยก The element will update only if one of the listed dependencies has changed !\r\n                '// ** declarations here ** //\\n' +\r\n                udLevelPkg +\r\n                '}';\r\n        }, false, 'Pointer_ViewPackage');\r\n        view.onDataUpdate = \"if (grid) {\\n   node.x = node.x - (node.x % 15);\\n   node.y = node.y - (node.y % 15);\\n}\";\r\n        return view\r\n    }\r\n\r\n    static class(vp: DViewElement): DViewElement {\r\n        const view = DViewElement.new2('Class', DV.classView(), vp, (view)=>{\r\n            view.appliableToClasses = [DClass.cname];\r\n            view.adaptWidth = true; view.adaptHeight = true;\r\n            view.appliableTo = 'Vertex';\r\n            view.oclCondition = 'context DClass inv: true';\r\n            view.palette = {'color-': U.hexToPalette('#f00', '#000', '#fff'), 'background-':  U.hexToPalette('#fff', '#eee', '#f00')};\r\n            view.css = `\r\n\r\n\r\n/* class */\r\n\r\n.class {\r\n    border-radius: var(--model-radius);\r\n    background: var(--model-background);\r\n    color:var(--model-color);\r\n\r\n    &>.header{\r\n        padding: 3px 6px;\r\n        white-space: pre;\r\n    }\r\n    .class-name{ \r\n        font-weight: bold; \r\n        color: var(--model-accent); \r\n    }\r\n    .bi {\r\n        color: var(--model-accent); \r\n        padding-right: 3px;\r\n    }\r\n    .class-children {\r\n        background-color: var(--model-background);\r\n        height: fit-content;\r\n        width: -webkit-fill-available;\r\n        &>*:last-child { padding-bottom: 0.125em; }\r\n    }\r\n    .abstract { font-style: italic; }\r\n    .summary { padding: 0.25rem; text-align: center; }\r\n}\r\n.abstract {\r\nborder-style: dotted!important;\r\nborder-color: silver!important;\r\n    }\r\n\r\n.class:hover {\r\n    box-shadow: var(--model-shadow);\r\n}\r\n            \r\n`;\r\n            view.defaultVSize = defaultVertexSize;\r\n            view.usageDeclarations = `(ret) => {\r\n    // ** preparations and default behaviour here ** //\r\n    // ret.data = data; intentionally excluded: i'm picking the used values individually reducing the re-renders.\r\n    ret.node = node\r\n    ret.view = view\r\n    // custom preparations:\r\n    // data, node, view are dependencies by default. delete them above if you want to remove them.\r\n    // add preparation code here (like for loops to count something), then list the dependencies below.\r\n    // ยก The element will update only if one of the listed dependencies has changed !\r\n    // ** declarations here ** //\r\n    ret.attributes = data.attributes\r\n    ret.references = data.references\r\n    ret.operations = data.operations\r\n    ret.abstract = data.abstract\r\n    ret.interface = data.interface\r\n    ${udLevel}\r\n    ${udGrid}\r\n}`;\r\n            // view.events = {e1:\"(num) => {\\n\\tdata.name = num;\\n}\"}\r\n        }, false, 'Pointer_ViewClass');\r\n        view.onDataUpdate = \"if (grid) {\\n   node.x = node.x - (node.x % 15);\\n   node.y = node.y - (node.y % 15);\\n}\";\r\n\r\n        return view;\r\n    }\r\n\r\n    /* ENUM */\r\n\r\n    static enum(vp: DViewElement): DViewElement {\r\n        const view = DViewElement.new2('Enum', DV.enumeratorView(), vp, (view)=>{\r\n            view.appliableToClasses = [DEnumerator.cname];\r\n            view.adaptWidth = true; view.adaptHeight = true;\r\n            view.appliableTo = 'Vertex';\r\n            view.oclCondition = 'context DEnumerator inv: true';\r\n            view.palette = {'color-':  U.hexToPalette('#ffa500', '#000', '#fff'), 'background-':  U.hexToPalette('#fff', '#eee', '#f00')};\r\n//             view.css =  `\r\n// .enumerator {\r\n//     border-radius: 0.2em;\r\n//     border-left: 0.25em solid var(--color-1);\r\n//     background: var(--background-1);\r\n//     color:var(--color-2);\r\n//     &>.header{\r\n//         padding: 3px 6px;\r\n//         white-space: pre;\r\n//     }\r\n//     .enumerator-name { font-weight: bold; color: var(--color-1); }\r\n//     .enumerator-children {\r\n//         background-color: var(--background-2);\r\n//         height: fit-content;\r\n//         width: -webkit-fill-available;\r\n//         &>*:last-child { padding-bottom: 0.125em; }\r\n//     }\r\n//     .summary { padding: 0.25rem; text-align: center; }\r\n// }\r\n// `\r\n\r\n            view.css = `\r\n.enumerator {\r\n    border-radius: var(--radius);\r\n    background: white;\r\n    color:var(--model-color);\r\n    &>.header{\r\n        padding: 3px 6px;\r\n        white-space: pre;\r\n    }\r\n    .enumerator-name { font-weight: bold; color: var(--accent-secondary); }\r\n    .bi {\r\n        color: var(--accent-secondary);\r\n    }\r\n    .enumerator-children {\r\n        background-color: white; \r\n        height: fit-content;\r\n        width: -webkit-fill-available;\r\n        &>*:last-child { padding-bottom: 0.125em; }\r\n    }\r\n    .summary { padding: 0.25rem; text-align: center; }\r\n}\r\n\r\n.enumerator:hover {\r\n    box-shadow: 0 0 5px silver;\r\n}\r\n`\r\n            view.defaultVSize = defaultVertexSize;\r\n            view.usageDeclarations = `(ret) => {\r\n    // ** preparations and default behaviour here ** //\r\n    // ret.data = data; intentionally excluded: i'm picking the used values individually reducing the re-renders.\r\n    ret.node = node\r\n    ret.view = view\r\n    // custom preparations:\r\n    // data, node, view are dependencies by default. delete them above if you want to remove them.\r\n    // add preparation code here (like for loops to count something), then list the dependencies below.\r\n    // ยก The element will update only if one of the listed dependencies has changed !\r\n    // ** declarations here ** //\r\n    ret.literals = data.literals\r\n    ${udLevel}\r\n}`;\r\n        }, false, 'Pointer_ViewEnum');\r\n        view.onDataUpdate = \"if (grid) {\\n   node.x = node.x - (node.x % 15);\\n   node.y = node.y - (node.y % 15);\\n}\";\r\n\r\n        return view;\r\n    }\r\n\r\n    /* ATTRIBUTE */\r\n\r\n    static attribute(vp: DViewElement): DViewElement {\r\n        const view = DViewElement.new2('Attribute', DV.attributeView(), vp, (view)=>{\r\n            view.appliableToClasses = [DAttribute.cname];\r\n            view.oclCondition = 'context DAttribute inv: true';\r\n            view.appliableTo = 'Field';\r\n            view.css = `\r\n.feature{\r\n    display: flex;\r\n    padding: 2px 5px;\r\n    select {\r\n        margin-left: auto;\r\n        width: max(33%, 75px);\r\n    }\r\n}`;\r\n        }, false, 'Pointer_ViewAttribute');\r\n        return view;\r\n    }\r\n\r\n    /* REFERENCE */\r\n\r\n    static reference(vp: DViewElement): DViewElement {\r\n        const view = DViewElement.new2('Reference', DV.referenceView(), vp, (view)=>{\r\n            view.appliableToClasses = [DReference.cname];\r\n            view.oclCondition = 'context DReference inv: true';\r\n            view.appliableTo = 'Field';\r\n            view.css = `\r\n.feature{\r\n    display: flex;\r\n    padding: 2px 5px;\r\n    select {\r\n        margin-left: auto;\r\n        width: max(33%, 75px);\r\n    }\r\n}`;\r\n        }, false, 'Pointer_ViewReference');\r\n        return view;\r\n    }\r\n\r\n    /* OPERATION */\r\n\r\n    static operation(vp: DViewElement): DViewElement {\r\n        const view = DViewElement.new2('Operation', DV.operationView(), vp, (view)=>{\r\n            view.appliableToClasses = [DOperation.cname];\r\n            view.oclCondition = 'context DOperation inv: true';\r\n            view.appliableTo = 'Field';\r\n            view.usageDeclarations = `(ret) => {\r\n    // ** preparations and default behaviour here ** //\r\n    ret.data = data\r\n    ret.node = node\r\n    ret.view = view\r\n    // custom preparations:\r\n    // data, node, view are dependencies by default. delete them above if you want to remove them.\r\n    // add preparation code here (like for loops to count something), then list the dependencies below.\r\n    // ยก The element will update only if one of the listed dependencies has changed !\r\n    // ** declarations here ** //\r\n    ${udLevel}\r\n}`;\r\n            view.css = `\r\n.operation{\r\n    display: flex;\r\n    padding: 2px 5px;\r\n    select {\r\n        margin-left: auto;\r\n        width: max(33%, 75px);\r\n    }\r\n    .parameters{\r\n        background-color: var(--background-2);\r\n        left: 0;\r\n        top: 100%;\r\n        width: 100%;\r\n    }\r\n}`;\r\n        }, false, 'Pointer_ViewOperation');\r\n        return view;\r\n    }\r\n\r\n    /* PARAMETER */\r\n\r\n    static parameter(vp: DViewElement): DViewElement {\r\n        const view = DViewElement.new2('Parameter', DV.parameterView(), vp, (view)=>{\r\n            view.appliableToClasses = [DParameter.cname];\r\n            view.appliableTo = 'Field';\r\n        }, false, 'Pointer_ViewParameter');\r\n        view.css = `\r\n.parameter{\r\n    display: flex;\r\n    padding-left: 1em;\r\n    width: calc(100% - 1em);\r\n    .modifier{\r\n        width: 1ic;\r\n        text-align: center;\r\n    }\r\n}`\r\n        return view;\r\n    }\r\n\r\n    /* LITERAL */\r\n\r\n    static literal(vp: DViewElement): DViewElement {\r\n        const view: DViewElement = DViewElement.new2('Literal', DV.literalView(), vp, (view)=>{\r\n            view.appliableToClasses = [DEnumLiteral.cname];\r\n            view.oclCondition = 'context DEnumLiteral inv: true';\r\n            view.appliableTo = 'Field';\r\n            view.palette = {};\r\n            view.css = \"display: block;\";\r\n        }, false, 'Pointer_ViewLiteral');\r\n        return view;\r\n    }\r\n\r\n    /* OBJECT */\r\n\r\n    static object(vp: DViewElement): DViewElement {\r\n        const view = DViewElement.new2('Object', DV.objectView(), vp, (view)=>{\r\n            view.appliableToClasses = [DObject.cname];\r\n            view.adaptWidth = true; view.adaptHeight = true;\r\n            view.oclCondition = 'context DObject inv: true';\r\n            view.palette = {'color-':  U.hexToPalette('#f00', '#000', '#fff'), 'background-': U.hexToPalette('#fff', '#eee', '#f00')};\r\n\r\n            // view.css = '.object {border-radius: 0.2em; border-left: 0.25em solid var(--color-1); background: var(--background-1); color: var(--color-2);}\\n';\r\n            // view.css += '.object-name {font-weight: bold; color: var(--color-1);}\\n';\r\n            // view.css += '.object-children {background-color: var(--background-2); height: fit-content; width: -webkit-fill-available;}';\r\n\r\n            view.css = '.object {border-radius: var(--radius); background: white; color: var(--accent);}\\n';\r\n            view.css +='.object-name {padding: 10px; font-weight: 600; color: var(--accent);}\\n';\r\n            view.css += '.object-children {padding: 10px;background-color: white; height: fit-content; width: -webkit-fill-available;}';\r\n\r\n\r\n            view.defaultVSize = defaultVertexSize;\r\n            view.appliableTo = 'Vertex';\r\n            view.usageDeclarations = '(ret) => {\\n' +\r\n                '// ** preparations and default behaviour here ** //\\n' +\r\n                'ret.data = data\\n' +\r\n                'ret.node = node\\n' +\r\n                'ret.view = view\\n' +\r\n                '// data, node, view are dependencies by default. delete them above if you want to remove them.\\n' +\r\n                '// add preparation code here (like for loops to count something), then list the dependencies below.\\n' +\r\n                // ยก The element will update only if one of the listed dependencies has changed !\r\n                '// ** declarations here ** //\\n' +\r\n                'ret.metaclassName = data.instanceof?.name || \\'Object\\'\\n' +\r\n                udLevel +\r\n                '}';\r\n        }, false, 'Pointer_ViewObject');\r\n        view.onDataUpdate = \"if (grid) {\\n   node.x = node.x - (node.x % 15);\\n   node.y = node.y - (node.y % 15);\\n}\";\r\n\r\n        return view;\r\n    }\r\n\r\n    /* SINGLETON OBJECT */\r\n\r\n    static singleton(vp: DViewElement): DViewElement {\r\n        const view = DViewElement.new2('Singleton', DV.singletonView(), vp, (view)=>{\r\n            view.appliableToClasses = [DObject.cname];\r\n            view.adaptWidth = false; view.adaptHeight = false;\r\n            view.jsCondition = 'return data.instanceof.isSingleton';\r\n            //view.oclCondition = 'context DObject inv: true';\r\n\r\n            //view.palette = {'color-':  U.hexToPalette('#f00', '#000', '#fff'), 'background-': U.hexToPalette('#fff', '#eee', '#f00')};\r\n\r\n            view.css = '.singleton {text-align: center; border: none; background-color: var(--accent); color: white; padding: 4px 30px; width: fit-content; border-radius: var(--radius);}\\n';\r\n            view.css += '.singleton::before {position: absolute; left: 10px; font-family: bootstrap-icons; content: \"\\\\F799\";}\\n';\r\n\r\n            view.defaultVSize = defaultVertexSize;\r\n            view.appliableTo = 'Vertex';\r\n            view.usageDeclarations = '(ret) => {\\n' +\r\n                '// ** preparations and default behaviour here ** //\\n' +\r\n                'ret.data = data\\n' +\r\n                'ret.node = node\\n' +\r\n                'ret.view = view\\n' +\r\n                '// data, node, view are dependencies by default. delete them above if you want to remove them.\\n' +\r\n                '// add preparation code here (like for loops to count something), then list the dependencies below.\\n' +\r\n                // ยก The element will update only if one of the listed dependencies has changed !\r\n                '// ** declarations here ** //\\n' +\r\n                'ret.metaclassName = data.instanceof?.name || \\'Object\\'\\n' +\r\n                'ret.isSingleton = data.instanceof?.isSingleton || false\\n' +\r\n                udLevel +\r\n                '}';\r\n        }, false, 'Pointer_ViewSingleton');\r\n        view.onDataUpdate = \"if (grid) {\\n   node.x = node.x - (node.x % 15);\\n   node.y = node.y - (node.y % 15);\\n}\";\r\n\r\n        return view;\r\n    }\r\n\r\n    /* VALUE */\r\n\r\n    static value(vp: DViewElement): DViewElement {\r\n        const view = DViewElement.new2('Value', DV.valueView(), vp, (view)=>{\r\n            view.appliableToClasses = [DValue.cname];\r\n            view.oclCondition = 'context DValue inv: true';\r\n            view.palette = {};\r\n            view.css = `.value{\r\n    padding-right: 6px;\r\n    max-width: 300px;\r\n    min-width: 100%;\r\n    overflow:hidden;\r\n    &:hover, &:focus-within{ overflow: visible; }\r\n    /*.values_str{\r\n        maxWidth: 100px;\r\n    }*/\r\n}`;\r\n            view.appliableTo = 'Field';\r\n            view.usageDeclarations = '(ret) =>  {\\n' +\r\n                '// ** preparations and default behaviour here ** //\\n' +\r\n                'ret.node = node\\n' +\r\n                'ret.view = view\\n' +\r\n                '// data, node, view are dependencies by default. delete them above if you want to remove them.\\n' +\r\n                '// add preparation code here (like for loops to count something), then list the dependencies below.\\n' +\r\n                // ยก The element will update only if one of the listed dependencies has changed !\r\n                '// ** declarations here ** //\\n' +\r\n                'ret.instanceofname = data.instanceof?.name\\n' +\r\n                'ret.valuesString = data.valuesString()\\n' +\r\n                'ret.typeString = data.typeString\\n' +\r\n                '}';\r\n        }, false, 'Pointer_ViewValue');\r\n        return view;\r\n    }\r\n    static edgepoint(vp: DViewElement): DViewElement{\r\n        let css = `.edgePoint{\r\n    border: 2px solid var(--border-1);\r\n    background: var(--background-1);\r\n    color: var(--color-1);\r\n    width: 100%;\r\n    height: 100%;\r\n    min-height: 15px;\r\n    min-width: 5px;\r\n    &:hover, &:focus-within, &:focus{\r\n        transform-origin: center;\r\n        transform: scale(1.3);\r\n    }\r\n}\r\n[hoverscale]:hover, [hoverscale]:focus-within, [hoverscale]:focus{\r\n    transform-origin: center;\r\n    transform: scale(var(--hover-scale));\r\n    &>[hoverscale]:hover, &>[hoverscale]:focus-within, &>[hoverscale]:focus{ transform: scale(1); }\r\n}\r\n\r\n`;\r\n        let usageDeclarations = \"(ret)=>{ // scope contains: data, node, view, constants, state\\n\" +\r\n            \"// ** preparations and default behaviour here ** //\\n\" +\r\n            \"ret.data = data\\n\" +\r\n            \"ret.node = node\\n\" +\r\n            \"ret.view = view\\n\" +\r\n            \"// data, node, view are dependencies by default. delete them above if you want to remove them.\\n\" +\r\n            \"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\\n\" +\r\n            // ยก The element will update only if one of the listed dependencies has changed !\r\n            \"// ** declarations here ** //\\n\" +\r\n            \"ret.edgestart = node.edge.start?.size+''\\n\" +\r\n            \"ret.edgeend = node.edge.end?.size+''\\n\" +\r\n            \"}\"\r\n        // edgePointView.edgePointCoordMode = CoordinateMode.relativePercent;\r\n        let view: DViewElement = DViewElement.new2('EdgePoint', DV.edgePointView(), vp, (d)=>{\r\n            d.appliableTo = 'EdgePoint';\r\n            d.resizable = false;\r\n            d.palette = {'color-':  U.hexToPalette('#000'), 'background-': U.hexToPalette('#fff'), 'border-':  U.hexToPalette('#000'), 'hover-scale':{type:'number', unit:'', value:1.3}};\r\n            d.css = css;\r\n            d.usageDeclarations = usageDeclarations;\r\n            d.edgePointCoordMode = CoordinateMode.absolute;\r\n            d.defaultVSize = defaultEdgePointSize;\r\n            // d.defaultVSize = new GraphSize(0, 0, 25, 25);\r\n        }, false, 'Pointer_ViewEdgePoint');\r\n        return view;\r\n    }\r\n\r\n    static anchor(vp: DViewElement): DViewElement {\r\n        let ret = DViewElement.new2('Anchors', DV.anchorJSX(), vp, (v) => {\r\n            v.isExclusiveView = false;\r\n            v.palette={'anchor-': U.hexToPalette('#77f', '#f77', '#007'),\r\n                'anchor-hover-': U.hexToPalette('#7f7', '#a44', '#070')};\r\n            v.usageDeclarations = \"(ret)=>{ // scope: data, node, view, state, \\n\" +\r\n                \"// ** preparations and default behaviour here ** //\\n\" +\r\n                \"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\" +\r\n                \"// ** declarations here ** //\\n\" +\r\n                \"ret.anchors = (node && node.anchors || {});\\n\"+\r\n                \"ret.dragAnchor = node.events.dragAnchor; // @autogenerated, do not edit\\n\"+\r\n                \"ret.assignAnchor = node.events.assignAnchor; // @autogenerated, do not edit\\n\"+\r\n                \"}\";\r\n            v.events = {\r\n                dragAnchor: '(coords /*Point*/, anchorName /*string*/)=>{\\n' +\r\n                    '\\tconst updateAnchor = {};\\n'+\r\n                    '\\tupdateAnchor[anchorName] = coords;\\n'+\r\n                    '\\tnode.anchors=updateAnchor;\\n'+\r\n                    '}',\r\n                assignAnchor: '(anchorName /*string*/)=>{\\n' +\r\n                    '\\tnode.assignEdgeAnchor(anchorName);\\n'+\r\n                    '}'}\r\n            v.css = `\r\n.anchor.valid-anchor{\r\n    display:block;\r\n}\r\n\r\n.anchor{\r\n    display:none;\r\n    position: absolute;\r\n    background-color: var(--anchor-1);\r\n    outline: 2px solid var(--anchor-3);\r\n    transform: translate(-50%, -50%);\r\n    pointer-events: all;\r\n    cursor: crosshair;\r\n    \r\n    &:hover{\r\n        background-color: var(--anchor-hover-1);\r\n        outline: 2px solid var(--anchor-hover-3);\r\n    }\r\n    &.active-anchor{\r\n        background-color: var(--anchor-2);\r\n        &:hover{\r\n            background-color: var(--anchor-hover-2);\r\n        }\r\n    }\r\n}\r\n`\r\n        }, false, 'Pointer_ViewAnchors' );\r\n        return ret;\r\n    }\r\n}\r\n\r\nexport default DefaultViews;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}