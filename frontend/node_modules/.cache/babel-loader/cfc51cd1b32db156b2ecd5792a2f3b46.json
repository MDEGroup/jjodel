{"ast":null,"code":"var _dec, _class, _class2, _dec2, _class3, _dec3, _class5, _dec4, _class7, _class8, _dec5, _class9, _class10, _dec6, _class11, _dec7, _class13, _class14, _dec8, _class15, _class16;\nimport { U } from \"../joiner\";\nimport { DPointerTargetable, RuntimeAccessible, windoww, Log, RuntimeAccessibleClass } from \"../joiner\";\nexport let IPoint = (_dec = RuntimeAccessible('IPoint'), _dec(_class = (_class2 = class IPoint extends RuntimeAccessibleClass {\n  // @ts-ignore static getM is not null but must be declared nullable to achieve subclass mixing\n  // public static getM? = function(firstPt: IPoint, secondPt: IPoint): number { return (firstPt.y - secondPt.y) / (firstPt.x - secondPt.x); }\n  static getM(firstPt, secondPt) {\n    return (firstPt.y - secondPt.y) / (firstPt.x - secondPt.x);\n  }\n  static getQ(firstPt, secondPt, m) {\n    if (m === undefined) m = IPoint.getM(firstPt, secondPt);\n    return firstPt.y - m * firstPt.x;\n  }\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    super(); // super('dwc');\n    this.x = void 0;\n    this.y = void 0;\n    IPoint.init_constructor(this, x, y);\n  }\n  static init_constructor(thiss) {\n    let x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    thiss.id = \"POINT_\" + DPointerTargetable.maxID++ + \"_\" + new Date().getTime();\n    thiss.className = thiss.constructor.name;\n    if (x === null || x === undefined) thiss.x = undefined;else if (isNaN(+x)) {\n      thiss.x = 0;\n    } else thiss.x = +x;\n    if (y === null || y === undefined) thiss.y = undefined;else if (isNaN(+y)) {\n      thiss.y = 0;\n    } else thiss.y = +y;\n    thiss.className = this.cname;\n  }\n  raw() {\n    return {\n      x: this.x,\n      y: this.y\n    };\n  }\n  toString() {\n    let letters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \" \";\n    if (letters) return JSON.stringify({\n      x: this.x,\n      y: this.y\n    });else return this.x + separator + this.y + separator;\n  }\n  clone(other) {\n    this.x = other.x;\n    this.y = other.y;\n    return this;\n  }\n  duplicate() {\n    const ret = this.new();\n    ret.clone(this);\n    return ret;\n  }\n  distanceFromPoint(tentativeEnd) {\n    let skipSqrt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let d_pow2 = (this.x - tentativeEnd.x) ** 2 + (this.y - tentativeEnd.y) ** 2;\n    return skipSqrt ? d_pow2 : Math.sqrt(d_pow2);\n    // return this.subtract(tentativeEnd, true).absolute();\n  }\n  subtract(p2, newInstance) {\n    Log.e(!p2, 'subtract argument must be a valid point: ', p2);\n    let p1;\n    if (!newInstance) {\n      p1 = this;\n    } else {\n      p1 = this.duplicate();\n    }\n    if (p2.x !== undefined) p1.x -= p2.x;\n    if (p2.y !== undefined) p1.y -= p2.y;\n    return p1;\n  }\n  add(p2, newInstance) {\n    Log.e(!p2, 'add argument must be a valid point: ', p2);\n    let p1;\n    if (!newInstance) {\n      p1 = this;\n    } else {\n      p1 = this.duplicate();\n    }\n    if (p2.x !== undefined) p1.x += p2.x;\n    if (p2.y !== undefined) p1.y += p2.y;\n    return p1;\n  }\n  addAll(p, newInstance) {\n    let i;\n    let p0;\n    if (!newInstance) {\n      p0 = this;\n    } else {\n      p0 = this.duplicate();\n    }\n    for (i = 0; i < p.length; i++) {\n      p0.add(p[i], true);\n    }\n    return p0;\n  }\n  subtractAll(p, newInstance) {\n    let i;\n    let p0;\n    if (!newInstance) {\n      p0 = this;\n    } else {\n      p0 = this.duplicate();\n    }\n    for (i = 0; i < p.length; i++) {\n      p0.subtract(p[i], true);\n    }\n    return p0;\n  }\n  multiply(pt) {\n    let newInstance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let ret = newInstance ? this.duplicate() : this;\n    if (typeof pt === \"number\") {\n      ret.x *= pt;\n      ret.y *= pt;\n    } else {\n      if (pt.x !== undefined) ret.x *= pt.x;\n      if (pt.y !== undefined) ret.y *= pt.y;\n    }\n    return ret;\n  }\n  divide(pt) {\n    let newInstance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let ret = newInstance ? this.duplicate() : this;\n    if (typeof pt === \"number\") {\n      ret.x /= pt;\n      ret.y /= pt;\n    } else {\n      ret.x /= pt.x;\n      ret.y /= pt.y;\n    }\n    return ret;\n  }\n  multiplyScalar(scalar, newInstance) {\n    Log.e(isNaN(+scalar), 'IPoint.multiply()', 'scalar argument must be a valid number: ', scalar);\n    let p1;\n    if (!newInstance) {\n      p1 = this;\n    } else {\n      p1 = this.duplicate();\n    }\n    p1.x *= scalar;\n    p1.y *= scalar;\n    return p1;\n  }\n  divideScalar(scalar, newInstance) {\n    Log.e(isNaN(+scalar), 'IPoint.divide()', 'scalar argument must be a valid number: ', scalar);\n    let p1;\n    if (!newInstance) {\n      p1 = this;\n    } else {\n      p1 = this.duplicate();\n    }\n    p1.x /= scalar;\n    p1.y /= scalar;\n    return p1;\n  }\n  isInTheMiddleOf(firstPt, secondPt, tolleranza) {\n    const rectangle = Size.fromPoints(firstPt, secondPt);\n    const tolleranzaX = tolleranza; // actually should be cos * arctan(m);\n    const tolleranzaY = tolleranza; // actually should be sin * arctan(m);\n    if (this.x < rectangle.x - tolleranzaX || this.x > rectangle.x + rectangle.w + tolleranzaX) {\n      return false;\n    }\n    if (this.y < rectangle.y - tolleranzaX || this.y > rectangle.y + rectangle.h + tolleranzaY) {\n      return false;\n    }\n    // const m = IPoint.getM(firstPt, secondPt);\n    // const q = IPoint.getQ(firstPt, secondPt);\n    const lineDistance = this.distanceFromLine(firstPt, secondPt);\n    // console.log('distance:', lineDistance, ', this:', this, ', p1:', firstPt, ', p2:', secondPt);\n    return lineDistance <= tolleranza;\n  }\n  distanceFromLine(p1, p2) {\n    const top = +(p2.y - p1.y) * this.x - (p2.x - p1.x) * this.y + p2.x * p1.y - p1.x * p2.y;\n    const bot = (p2.y - p1.y) * (p2.y - p1.y) + (p2.x - p1.x) * (p2.x - p1.x);\n    return Math.abs(top) / Math.sqrt(bot);\n  }\n  equals(pt) {\n    let tolleranzaX = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let tolleranzaY = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    if (pt === null) {\n      return false;\n    }\n    return Math.abs(this.x - pt.x) <= tolleranzaX && Math.abs(this.y - pt.y) <= tolleranzaY;\n  }\n  moveOnNearestBorder(startVertexSize, clone, graph) {\n    let debug = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const pt = clone ? this.duplicate() : this;\n    const tl = startVertexSize.tl();\n    const tr = startVertexSize.tr();\n    const bl = startVertexSize.bl();\n    const br = startVertexSize.br();\n    const L = pt.distanceFromLine(tl, bl);\n    const R = pt.distanceFromLine(tr, br);\n    const T = pt.distanceFromLine(tl, tr);\n    const B = pt.distanceFromLine(bl, br);\n    const min = Math.min(L, R, T, B);\n    if (min === L) {\n      pt.x = tl.x;\n    }\n    if (min === R) {\n      pt.x = tr.x;\n    }\n    if (min === T) {\n      pt.y = tr.y;\n    }\n    if (min === B) {\n      pt.y = br.y;\n    }\n    if (debug && graph && pt instanceof GraphPoint) {\n      graph.markg(pt, false, 'purple');\n    }\n    return pt;\n  }\n  getM(pt2) {\n    var _IPoint$getM;\n    return (_IPoint$getM = IPoint.getM) === null || _IPoint$getM === void 0 ? void 0 : _IPoint$getM.call(IPoint, this, pt2);\n  }\n  degreeWith(pt2, toRadians) {\n    const directionVector = this.subtract(pt2, true);\n    const ret = Math.atan2(directionVector.y, directionVector.x);\n    return toRadians ? ret : windoww.U.RadToDegree(ret);\n  }\n  absolute() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n  set(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  // move the point by a vector with direction and distance (module)\n  move(rad, distance) {\n    let clone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let pt = clone ? this.duplicate() : this;\n    pt.x += distance * Math.cos(rad);\n    pt.y += distance * Math.sin(rad);\n    return pt;\n  }\n  static stringify(ptlike) {\n    if (!ptlike) return ptlike;\n    let str;\n    return '(' + U.cropNum(ptlike.x || 0) + ', ' + U.cropNum(ptlike.y || 0) + ')';\n  }\n}, _class2.subclasses = [], _class2._extends = [], _class2)) || _class);\nexport let GraphPoint = (_dec2 = RuntimeAccessible('GraphPoint'), _dec2(_class3 = class GraphPoint extends IPoint {\n  constructor() {\n    super(...arguments);\n    this.dontmixwithPoint = void 0;\n  }\n  static fromEvent(e) {\n    if (!e) {\n      return null;\n    }\n    const p = new Point(e.pageX, e.pageY);\n    const g = null;\n    throw new Error(\"todo: const g: IGraph = Status.status.getActiveModel().graph;\");\n    return g.toGraphCoord(p);\n  }\n  new() {\n    return new GraphPoint();\n  }\n  toSize(w, h) {\n    return new GraphSize(this.x, this.y, w, h === undefined ? w : h);\n  }\n}) || _class3);\nexport let Point = (_dec3 = RuntimeAccessible('Point'), _dec3(_class5 = class Point extends IPoint {\n  constructor() {\n    super(...arguments);\n    this.dontmixwithGPoint = void 0;\n  }\n  /// https://stackoverflow.com/questions/6073505/what-is-the-difference-between-screenx-y-clientx-y-and-pagex-y\n  static fromEvent(e) {\n    const p = new Point(e.pageX, e.pageY);\n    return p;\n  }\n  new() {\n    return new Point();\n  }\n  toSize(w, h) {\n    return new Size(this.x, this.y, w, h === undefined ? w : h);\n  }\n}) || _class5);\nRuntimeAccessibleClass.set_extend(RuntimeAccessibleClass, IPoint);\nRuntimeAccessibleClass.set_extend(IPoint, GraphPoint);\nRuntimeAccessibleClass.set_extend(IPoint, Point);\nexport let ISize = (_dec4 = RuntimeAccessible('ISize'), _dec4(_class7 = (_class8 = class ISize extends RuntimeAccessibleClass {\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let w = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let h = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    super(); // super('dwc');\n    // do not override any fields from the DPointerTargetable, otherwise the ! in the override will reinizialize the attribute\n    // erasing the value set in super or in the functions called by the constructor as side effect (static_init called from constructor will be overridden too)\n    // if need to override types, build the \"new\" static function like in DModelElement\n    this.x = void 0;\n    this.y = void 0;\n    this.w = void 0;\n    this.h = void 0;\n    ISize.init_constructor(this, x, y, w, h);\n  }\n  static stringify(ptlike) {\n    if (!ptlike) return ptlike;\n    let str = [];\n    if (ptlike.x && !isNaN(ptlike.x) || ptlike.x === 0) str.push('x:' + U.cropNum(ptlike.x));\n    if (ptlike.y && !isNaN(ptlike.y) || ptlike.y === 0) str.push('y:' + U.cropNum(ptlike.y));\n    if (ptlike.w && !isNaN(ptlike.w) || ptlike.w === 0) str.push('w:' + U.cropNum(ptlike.w));\n    if (ptlike.h && !isNaN(ptlike.h) || ptlike.h === 0) str.push('h:' + U.cropNum(ptlike.h));\n    if (ptlike.width && !isNaN(ptlike.width) || ptlike.width === 0) str.push('W:' + U.cropNum(ptlike.width));\n    if (ptlike.height && !isNaN(ptlike.height) || ptlike.height === 0) str.push('H:' + U.cropNum(ptlike.height));\n    // if (str.length === 0) return '{}';\n    return '{' + str.join(', ') + '}';\n  }\n  static init_constructor(thiss) {\n    let x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    let h = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    thiss.id = \"SIZE_\" + DPointerTargetable.maxID++ + \"_\" + new Date().getTime();\n    thiss.className = thiss.constructor.cname;\n    if (x === null || x === undefined) thiss.x = undefined;else if (isNaN(+x)) {\n      thiss.x = 0;\n    } else thiss.x = +x;\n    if (y === null || y === undefined) thiss.y = undefined;else if (isNaN(+y)) {\n      thiss.y = 0;\n    } else thiss.y = +y;\n    if (w === null || w === undefined) thiss.w = undefined;else if (isNaN(+w)) {\n      thiss.w = 0;\n    } else thiss.w = +w;\n    if (h === null || h === undefined) thiss.h = undefined;else if (isNaN(+h)) {\n      thiss.h = 0;\n    } else thiss.h = +h;\n    thiss.className = this.cname;\n  }\n  toString() {\n    let letters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \" \";\n    if (letters) return JSON.stringify({\n      x: this.x,\n      y: this.y,\n      w: this.w,\n      h: this.h\n    });else return this.x + separator + this.y + separator + this.w + separator + this.h;\n  }\n  set(x, y, w, h) {\n    if (x !== undefined) this.x = +x;\n    if (y !== undefined) this.y = +y;\n    if (w !== undefined) this.w = +w;\n    if (h !== undefined) this.h = +h;\n  }\n  clone(json) {\n    this.x = json.x;\n    this.y = json.y;\n    this.w = json.w;\n    this.h = json.h;\n    return this;\n  }\n  duplicate() {\n    return this.new().clone(this);\n  }\n  add(pt2, newInstance) {\n    let thiss = newInstance ? this.duplicate() : this;\n    if (typeof pt2 === \"number\") {\n      thiss.x += pt2;\n      thiss.y += pt2;\n      thiss.w += pt2;\n      thiss.h += pt2;\n      return thiss;\n    }\n    if (pt2.x !== undefined) thiss.x += pt2.x;\n    if (pt2.y !== undefined) thiss.y += pt2.y;\n    if (pt2.w !== undefined) thiss.w += pt2.w;\n    if (pt2.h !== undefined) thiss.h += pt2.h;\n    return thiss;\n  }\n  subtract(pt2, newInstance) {\n    let thiss = newInstance ? this.duplicate() : this;\n    if (typeof pt2 === \"number\") {\n      thiss.x -= pt2;\n      thiss.y -= pt2;\n      thiss.w -= pt2;\n      thiss.h -= pt2;\n      return thiss;\n    }\n    if (pt2.x !== undefined) thiss.x -= pt2.x;\n    if (pt2.y !== undefined) thiss.y -= pt2.y;\n    if (pt2.w !== undefined) thiss.w -= pt2.w;\n    if (pt2.h !== undefined) thiss.h -= pt2.h;\n    return thiss;\n  }\n  multiply(pt2, newInstance) {\n    let thiss = newInstance ? this.duplicate() : this;\n    if (typeof pt2 === \"number\") {\n      thiss.x *= pt2;\n      thiss.y *= pt2;\n      thiss.w *= pt2;\n      thiss.h *= pt2;\n      return thiss;\n    }\n    if (pt2.x !== undefined) thiss.x *= pt2.x;\n    if (pt2.y !== undefined) thiss.y *= pt2.y;\n    if (pt2.w !== undefined) thiss.w *= pt2.w;\n    if (pt2.h !== undefined) thiss.h *= pt2.h;\n    return thiss;\n  }\n  divide(pt2, newInstance) {\n    let thiss = newInstance ? this.duplicate() : this;\n    if (typeof pt2 === \"number\") {\n      thiss.x /= pt2;\n      thiss.y /= pt2;\n      thiss.w /= pt2;\n      thiss.h /= pt2;\n      return thiss;\n    }\n    if (pt2.x !== undefined) thiss.x /= pt2.x;\n    if (pt2.y !== undefined) thiss.y /= pt2.y;\n    if (pt2.w !== undefined) thiss.w /= pt2.w;\n    if (pt2.h !== undefined) thiss.h /= pt2.h;\n    return thiss;\n  }\n  tl() {\n    return this.makePoint(this.x, this.y);\n  }\n  tr() {\n    return this.makePoint(this.x + this.w, this.y);\n  }\n  bl() {\n    return this.makePoint(this.x, this.y + this.h);\n  }\n  br() {\n    return this.makePoint(this.x + this.w, this.y + this.h);\n  }\n  center() {\n    return this.makePoint(this.x + this.w / 2, this.y + this.h / 2);\n  }\n  relativePoint(xPercent, yPercent) {\n    return this.makePoint(this.x + this.w * xPercent, this.y + this.h * yPercent);\n  }\n  equals(size) {\n    return this.x === size.x && this.y === size.y && this.w === size.w && this.h === size.h;\n  }\n\n  /// field-wise Math.min()\n  min(minSize, clone) {\n    const ret = clone ? this.new() : this;\n    if (!isNaN(minSize.x) && ret.x < minSize.x) {\n      ret.x = minSize.x;\n    }\n    if (!isNaN(minSize.y) && ret.y < minSize.y) {\n      ret.y = minSize.y;\n    }\n    if (!isNaN(minSize.w) && ret.w < minSize.w) {\n      ret.w = minSize.w;\n    }\n    if (!isNaN(minSize.h) && ret.h < minSize.h) {\n      ret.h = minSize.h;\n    }\n    return ret;\n  }\n  max(maxSize, clone) {\n    const ret = clone ? this.new() : this;\n    if (!isNaN(maxSize.x) && ret.x > maxSize.x) {\n      ret.x = maxSize.x;\n    }\n    if (!isNaN(maxSize.y) && ret.y > maxSize.y) {\n      ret.y = maxSize.y;\n    }\n    if (!isNaN(maxSize.w) && ret.w > maxSize.w) {\n      ret.w = maxSize.w;\n    }\n    if (!isNaN(maxSize.h) && ret.h > maxSize.h) {\n      ret.h = maxSize.h;\n    }\n    return ret;\n  }\n  intersection(size) {\n    if (!size) return null;\n    // anche \"isinside\"\n    let startx, starty, endx, endy;\n    startx = Math.max(this.x, size.x);\n    starty = Math.max(this.y, size.y);\n    endx = Math.min(this.x + this.w, size.x + size.w);\n    endy = Math.min(this.y + this.h, size.y + size.h);\n    const intersection = this.new();\n    // intersection.set(0, 0, 0, 0);\n    intersection.x = startx;\n    intersection.y = starty;\n    intersection.w = endx - startx;\n    intersection.h = endy - starty;\n    const doesintersect = intersection.w > 0 && intersection.h > 0;\n    return doesintersect ? intersection : null;\n  }\n  contains(pt) {\n    return pt.x >= this.x && pt.x <= this.x + this.w && pt.y >= this.y && pt.y <= this.y + this.h;\n  }\n  isOverlapping(size2) {\n    return !!this.intersection(size2);\n  }\n  isOverlappingAnyOf(sizes) {\n    if (!sizes) return false;\n    for (let size of sizes) {\n      if (this.isOverlapping(size)) return true;\n    }\n    return false;\n  }\n  multiplyPoint(other, newInstance) {\n    const ret = newInstance ? this.new() : this;\n    ret.x *= other.x;\n    ret.w *= other.x;\n    ret.y *= other.y;\n    ret.h *= other.y;\n    return ret;\n  }\n  dividePoint(other, newInstance) {\n    const ret = newInstance ? this.new() : this;\n    ret.x /= other.x;\n    ret.w /= other.x;\n    ret.y /= other.y;\n    ret.h /= other.y;\n    return ret;\n  }\n  boundary(size2) {\n    /*let minx, maxx, miny, maxy;\r\n    if (size2.y < this.y) { miny = size2.y; /*maxy = this.y;* / } else { miny = this.y; /*maxy = size2.y;* / }\r\n    if (size2.x < this.x) { minx = size2.y; /*maxx = this.x;* / } else { minx = this.x; /*maxy = size2.x;* / }\r\n    if (size2.y + size2.h < this.y + this.h) maxy = this.y + this.h; else maxy = size2.y + size2.h;\r\n    if (size2.x + size2.w < this.x + this.w) maxx = this.x + this.w; else maxx = size2.x + size2.w;\r\n    */\n    this.h = size2.y + size2.h > this.y + this.h ? size2.y + size2.h : this.y + this.h; // -miny\n    this.w = size2.x + size2.w > this.x + this.w ? size2.x + size2.w : this.x + this.w; // -minx\n    if (this.y < size2.y) this.y = size2.y;\n    if (this.x < size2.x) this.x = size2.x;\n    this.h -= this.y;\n    this.w -= this.x;\n  }\n}, _class8.subclasses = [], _class8._extends = [], _class8)) || _class7);\nexport let Size = (_dec5 = RuntimeAccessible('Size'), _dec5(_class9 = (_class10 = class Size extends ISize {\n  constructor() {\n    super(...arguments);\n    this.dontMixWithGraphSize = void 0;\n  }\n  /**\r\n   * measure a node size\r\n   * @param {Element} element0 - the emelemnt to measure;\r\n   * @param {boolean} sizePostTransform - includes css transform instructions for computing his size. like transform: scale(1.5)\r\n   * */\n  static of(element0) {\n    var _element$ownerDocumen;\n    let sizePostTransform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let element = element0;\n    if (element === document) {\n      Log.ww('trying to measure document, rerouted to measuring body.');\n      element = document.body;\n    }\n    const $element = $(element);\n    Log.ex(!element || element.tagName === 'foreignObject', 'sizeof()', 'SvgForeignElementObject have a bug with size, measure a child instead.', element);\n    let tmp;\n    let size;\n    if (!Size.sizeofvar) {\n      Size.sizeofvar = document.createElement('div');\n      document.body.append(Size.sizeofvar);\n    }\n    const isOrphan = element.parentNode === null;\n    // var visible = element.style.display !== 'none';\n    // var visible = $element.is(\":visible\"); crea bug quando un elemento è teoricamente visibile ma orfano\n    const ancestors = windoww.U.ancestorArray(element);\n    const displayStyles = ancestors.map(e => {\n      var _e$style;\n      return e === null || e === void 0 ? void 0 : (_e$style = e.style) === null || _e$style === void 0 ? void 0 : _e$style.display;\n    });\n    if (isOrphan) {\n      Size.sizeofvar.append(element);\n    }\n    // show all and saveToDB visibility to restore it later\n    for (let i = 0; i < ancestors.length; i++) {\n      var _ancestors$i, _ancestors$i$style;\n      // document has undefined style\n      displayStyles[i] = (_ancestors$i = ancestors[i]) === null || _ancestors$i === void 0 ? void 0 : (_ancestors$i$style = _ancestors$i.style) === null || _ancestors$i$style === void 0 ? void 0 : _ancestors$i$style.display;\n      if (displayStyles[i] === 'none' || displayStyles[i] === '' && getComputedStyle(ancestors[i]).display === 'none') {\n        ancestors[i].style.display = 'block';\n      }\n    }\n    // size = new Size(tmp.left, tmp.top, 0, 0);\n    let rect = element.getBoundingClientRect();\n    size = new Size(0, 0, 0, 0);\n    let win = ((_element$ownerDocumen = element.ownerDocument) === null || _element$ownerDocumen === void 0 ? void 0 : _element$ownerDocumen.defaultView) || window;\n    size.x = rect.left + win.scrollX;\n    size.y = rect.top + win.scrollY;\n    if (sizePostTransform) {\n      size.w = rect.width;\n      size.h = rect.height;\n    } else {\n      size.w = element.offsetWidth; // element.scrollWidth;\n      size.h = element.offsetHeight;\n    }\n    // restore visibility\n    for (let i = 0; i < ancestors.length; i++) {\n      var _ancestors$i$style2;\n      if (displayStyles[i] === ((_ancestors$i$style2 = ancestors[i].style) === null || _ancestors$i$style2 === void 0 ? void 0 : _ancestors$i$style2.display)) continue;\n      if (displayStyles[i]) ancestors[i].style.display = displayStyles[i];else ancestors[i].style.removeProperty('display');\n    }\n    if (isOrphan) {\n      windoww.U.clear(Size.sizeofvar);\n    }\n    // Status.status.getActiveModel().graph.markS(size, false);\n    return size;\n  }\n  static fromPoints(firstPt, secondPt) {\n    const minX = Math.min(firstPt.x, secondPt.x);\n    const maxX = Math.max(firstPt.x, secondPt.x);\n    const minY = Math.min(firstPt.y, secondPt.y);\n    const maxY = Math.max(firstPt.y, secondPt.y);\n    return new Size(minX, minY, maxX - minX, maxY - minY);\n  }\n  makePoint(x, y) {\n    return new Point(x, y);\n  }\n  new() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new Size(...args);\n  }\n}, _class10.subclasses = [], _class10.sizeofvar = void 0, _class10.$sizeofvar = void 0, _class10)) || _class9);\nexport let GraphSize = (_dec6 = RuntimeAccessible('GraphSize'), _dec6(_class11 = class GraphSize extends ISize {\n  constructor() {\n    super(...arguments);\n    this.dontMixWithSize = void 0;\n  }\n  static fromPoints(firstPt, secondPt) {\n    const minX = Math.min(firstPt.x, secondPt.x);\n    const maxX = Math.max(firstPt.x, secondPt.x);\n    const minY = Math.min(firstPt.y, secondPt.y);\n    const maxY = Math.max(firstPt.y, secondPt.y);\n    return new GraphSize(minX, minY, maxX - minX, maxY - minY);\n  }\n\n  // both pt and targetPt are readonly-safe parameters\n  static closestIntersection(size, pt, targetPt, gridAlign, m0, q0) {\n    // let pt: GraphPoint = pt0.duplicate();\n    const m = m0 || GraphPoint.getM(targetPt, pt);\n    const q = q0 || GraphPoint.getQ(targetPt, pt);\n    // console.log(\"closestIntersection()\", {size, pt0, targetPt, m, q});\n    // if perfectly vertical line\n    if (m === Number.POSITIVE_INFINITY /* && q === Number.NEGATIVE_INFINITY*/) {\n      // top center\n      if (Math.abs(targetPt.y - size.y) <= Math.abs(targetPt.y - size.y - size.h)) return pt;\n      // bottom center\n      else return new GraphPoint(pt.x, size.y + size.h);\n    }\n    let tl = size.tl(),\n      tr = size.tr(),\n      bl = size.bl(),\n      br = size.br();\n    let allowT, allowB, allowL, allowR;\n    /*let distanceT: number = Number.POSITIVE_INFINITY, distanceB: number = Number.POSITIVE_INFINITY,\r\n        distanceL: number = Number.POSITIVE_INFINITY, distanceR: number = Number.POSITIVE_INFINITY;*/\n    let intersectionT, intersectionB, intersectionL, intersectionR;\n    allowT = Geom.isNumberBetween(tl.y, bl.y, targetPt.y);\n    allowB = Geom.isNumberBetween(bl.y, tl.y, targetPt.y);\n    allowL = Geom.isNumberBetween(tl.x, tr.x, targetPt.x);\n    allowR = Geom.isNumberBetween(tr.x, tl.x, targetPt.x);\n    // console.log(\"closestIntersection pt0\", {size, targetPt, pt0:pt0.raw(), gridAlign,\n    //     corners:{tl:tl.raw(), tr:tr.raw(), bl:bl.raw(), br:br.raw()}, allows:{allowT, allowB, allowL, allowR}});\n    if (!(allowT || allowB || allowL || allowR)) return undefined; // point is internal to size\n    if (allowT) intersectionT = Geom.lineToSegmentIntersection(tl, tr, q, m);else if (allowB) intersectionB = Geom.lineToSegmentIntersection(bl, br, q, m); // NOT else, (T|B) AND (L|R) can happen, or just 1 or 0 of those.\n    if (allowL) intersectionL = Geom.lineToSegmentIntersection(tl, bl, q, m);else if (allowR) intersectionR = Geom.lineToSegmentIntersection(tr, br, q, m);\n\n    // console.log(\"closestIntersection pt2\", {intersectionT, intersectionB, intersectionL, intersectionR});\n    // only 1 intersection can happen\n    return intersectionT || intersectionB || intersectionL || intersectionR;\n  }\n  static closestIntersection_old(size, prevPt, pt0, gridAlign) {\n    let ret = GraphSize.closestIntersection0(size, prevPt, pt0, gridAlign);\n    // Log.exDev(!Geom.isOnEdge(ret, size), 'ClosestIntersection failed. not on Vertex edge.', {ret, size, prevPt, pt0, gridAlign});\n    return ret;\n  }\n  static closestIntersection0(vertexGSize, prevPt, pt0, gridAlign) {\n    let pt = pt0.duplicate();\n    const m = GraphPoint.getM(prevPt, pt);\n    const q = GraphPoint.getQ(prevPt, pt);\n    // U.pe( Math.abs((pt.y - m * pt.x) - (prevPt.y - m * prevPt.x)) > .001, 'wrong math in Q:', (pt.y - m * pt.x), ' vs ', (prevPt.y - m * prevPt.x));\n    /*const isL = prevPt.x < pt.x;\r\n    const isT = prevPt.y < pt.y;\r\n    const isR = !isL;\r\n    const isB = !isT; */\n    if (m === Number.POSITIVE_INFINITY && q === Number.NEGATIVE_INFINITY) {\n      // bottom middle\n      return new GraphPoint(vertexGSize.x + vertexGSize.w / 2, vertexGSize.y + vertexGSize.h);\n    }\n    // console.log('pt:', pt, 'm:', m, 'q:', q);\n    let L = new GraphPoint(0, 0);\n    let T = new GraphPoint(0, 0);\n    let R = new GraphPoint(0, 0);\n    let B = new GraphPoint(0, 0);\n    L.x = vertexGSize.x;\n    L.y = m * L.x + q;\n    R.x = vertexGSize.x + vertexGSize.w;\n    R.y = m * R.x + q;\n    T.y = vertexGSize.y;\n    T.x = (T.y - q) / m;\n    B.y = vertexGSize.y + vertexGSize.h;\n    B.x = (B.y - q) / m;\n    // prendo solo il compreso pt ~ prevPt (escludo così il \"pierce\" sulla faccia opposta), prendo il più vicino al centro.\n    // console.log('4 possibili punti di intersezione (LTBR):', L, T, B, R);\n    /* this.owner.mark(this.owner.toHtmlCoord(T), true, 'blue');\r\n    this.owner.mark(this.owner.toHtmlCoord(B), false, 'violet');\r\n    this.owner.mark(this.owner.toHtmlCoord(L), false, 'red');\r\n    this.owner.mark(this.owner.toHtmlCoord(R), false, 'orange');*/\n    console.log(\"intersect pt1:\", {\n      T,\n      B,\n      L,\n      R\n    });\n    if (B.x >= pt.x && B.x <= prevPt.x || B.x >= prevPt.x && B.x <= pt.x) {} else {\n      B = null;\n    }\n    if (T.x >= pt.x && T.x <= prevPt.x || T.x >= prevPt.x && T.x <= pt.x) {} else {\n      T = null;\n    }\n    if (L.y >= pt.y && L.y <= prevPt.y || L.y >= prevPt.y && L.y <= pt.y) {} else {\n      L = null;\n    }\n    if (R.y >= pt.y && R.y <= prevPt.y || R.y >= prevPt.y && R.y <= pt.y) {} else {\n      R = null;\n    }\n    console.log(\"intersect pt2:\", {\n      T,\n      B,\n      L,\n      R\n    });\n    function closestmix(pt, closest, segStart, segEnd, mode) {\n      // changes pt\n      pt.x = closest.x;\n      pt.y = closest.y;\n      return;\n      let main, sub;\n      if (mode === \"TB\") {\n        main = \"y\";\n        sub = \"x\";\n      } else {\n        main = \"x\";\n        sub = \"y\";\n      }\n      pt[main] = closest[main];\n      // if T[sub] is inside the top segment, take T[sub], otherwise closest between size.tl[sub] and size.tr[sub]\n      // pt[sub] = Math.max(segStart[sub], Math.min(segStart[sub], closest[sub]));\n      if (closest[sub] <= segEnd[sub] && closest[sub] >= segStart[sub]) pt[sub] = closest[sub];else if (Math.abs(closest[sub] - segEnd[sub]) < Math.abs(closest[sub] - segStart[sub])) pt[sub] = segEnd[sub];else pt[sub] = segStart[sub];\n    }\n    function closestmix2(pt, closest, segStart, segEnd, mode) {\n      // changes closest\n      let main, sub;\n      if (mode === \"TB\") {\n        main = \"y\";\n        sub = \"x\";\n      } else {\n        main = \"x\";\n        sub = \"y\";\n      }\n      // closest[main] = pt[main];\n      // if T[sub] is inside the top segment, take T[sub], otherwise closest between size.tl[sub] and size.tr[sub]\n      // pt[sub] = Math.max(segStart[sub], Math.min(segStart[sub], closest[sub]));\n      if (closest[sub] <= segEnd[sub] && closest[sub] >= segStart[sub]) {/*no-op*/} else if (Math.abs(closest[sub] - segEnd[sub]) < Math.abs(closest[sub] - segStart[sub])) closest[sub] = segEnd[sub];else closest[sub] = segStart[sub];\n    }\n    console.log(\"intersect pt2.5:\");\n    try {\n      if (T) closestmix2(pt, T, vertexGSize.tl(), vertexGSize.tr(), \"TB\");\n      if (B) closestmix2(pt, B, vertexGSize.bl(), vertexGSize.br(), \"TB\");\n      if (R) closestmix2(pt, R, vertexGSize.tr(), vertexGSize.br(), \"LR\");\n      if (L) closestmix2(pt, L, vertexGSize.tl(), vertexGSize.bl(), \"LR\");\n    } catch (e) {\n      console.error(\"intersect error\", e);\n    }\n    // console.log('superstiti step1: (LTBR):', L, T, B, R);\n    console.log(\"intersect pt2.9:\");\n    const vicinanzaT = !T ? Number.POSITIVE_INFINITY : (T.x - pt.x) * (T.x - pt.x) + (T.y - pt.y) * (T.y - pt.y);\n    const vicinanzaB = !B ? Number.POSITIVE_INFINITY : (B.x - pt.x) * (B.x - pt.x) + (B.y - pt.y) * (B.y - pt.y);\n    const vicinanzaL = !L ? Number.POSITIVE_INFINITY : (L.x - pt.x) * (L.x - pt.x) + (L.y - pt.y) * (L.y - pt.y);\n    const vicinanzaR = !R ? Number.POSITIVE_INFINITY : (R.x - pt.x) * (R.x - pt.x) + (R.y - pt.y) * (R.y - pt.y);\n    const closest = Math.min(vicinanzaT, vicinanzaB, vicinanzaL, vicinanzaR);\n    console.log(\"intersect pt3:\", {\n      vicinanzaT,\n      vicinanzaB,\n      vicinanzaL,\n      vicinanzaR,\n      closest\n    });\n\n    // console.log( 'closest:', closest);\n    // succede quando pt e prevPt sono entrambi all'interno del rettangolo del vertice.\n    // L'edge non è visibile e il valore ritornato è irrilevante.\n\n    if (closest === Number.POSITIVE_INFINITY) {\n      /* top center */\n      pt = vertexGSize.tl();\n      pt.x += vertexGSize.w / 2;\n    } else if (closest === Number.POSITIVE_INFINITY) {\n      /* bottom center */\n      pt = vertexGSize.br();\n      pt.x -= vertexGSize.w / 2;\n    } else if (closest === vicinanzaT && T) {\n      closestmix(pt, T, vertexGSize.tl(), vertexGSize.tr(), \"TB\");\n      /*pt.y = T.y;\r\n      // if T.x is inside the top segment, take T.x, otherwise closest between size.tl.x and size.tr.x\r\n      if ((T.x <= tr.x && T.x >= tl.x)) pt.x = T.x;\r\n      else if (Math.abs(T.x-tr.x) < Math.abs(T.x-tl.x)) pt.x = tr.x;\r\n      else pt.x = tl.x;*/\n    }\n    if (closest === vicinanzaB) {\n      closestmix(pt, B, vertexGSize.bl(), vertexGSize.br(), \"TB\");\n    } else if (closest === vicinanzaR) {\n      closestmix(pt, R, vertexGSize.tr(), vertexGSize.br(), \"LR\");\n    } else if (closest === vicinanzaL) {\n      closestmix(pt, L, vertexGSize.tl(), vertexGSize.bl(), \"LR\");\n    }\n    if (!gridAlign) {\n      return pt;\n    }\n    if (!pt) return null;\n    if (gridAlign.x && (pt === T || pt === B || isNaN(closest))) {\n      const floorX = Math.floor(pt.x / gridAlign.x) * gridAlign.x;\n      const ceilX = Math.ceil(pt.x / gridAlign.x) * gridAlign.x;\n      let closestX;\n      let farthestX;\n      if (Math.abs(floorX - pt.x) < Math.abs(ceilX - pt.x)) {\n        closestX = floorX;\n        farthestX = ceilX;\n      } else {\n        closestX = ceilX;\n        farthestX = floorX;\n      }\n\n      // todo: possibile causa del bug che non allinea punti fake a punti reali. nel calcolo realPT questo non viene fatto.\n      // if closest grid intersection is inside the vertex.\n      if (closestX >= vertexGSize.x && closestX <= vertexGSize.x + vertexGSize.w) {\n        pt.x = closestX;\n      } else\n        // if 2° closer grid intersection is inside the vertex.\n        if (closestX >= vertexGSize.x && closestX <= vertexGSize.x + vertexGSize.w) {\n          pt.x = farthestX;\n          // if no intersection are inside the vertex (ignore grid)\n        } else {/* do nothing */}\n    } else if (gridAlign.y && (pt === L || pt === R)) {\n      const floorY = Math.floor(pt.y / gridAlign.y) * gridAlign.y;\n      const ceilY = Math.ceil(pt.y / gridAlign.y) * gridAlign.y;\n      let closestY;\n      let farthestY;\n      if (Math.abs(floorY - pt.y) < Math.abs(ceilY - pt.y)) {\n        closestY = floorY;\n        farthestY = ceilY;\n      } else {\n        closestY = ceilY;\n        farthestY = floorY;\n      }\n\n      // if closest grid intersection is inside the vertex.\n      if (closestY >= vertexGSize.y && closestY <= vertexGSize.y + vertexGSize.h) {\n        pt.y = closestY;\n      } else\n        // if 2° closer grid intersection is inside the vertex.\n        if (closestY >= vertexGSize.y && closestY <= vertexGSize.y + vertexGSize.h) {\n          pt.y = farthestY;\n          // if no intersection are inside the vertex (ignore grid)\n        } else {/* do nothing */}\n    }\n    return pt;\n  }\n  new() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return new GraphSize(...args);\n  }\n  makePoint(x, y) {\n    return new GraphPoint(x, y);\n  }\n  closestPoint(pt) {\n    return Geom.closestPoint(this, pt);\n  }\n}) || _class11);\nRuntimeAccessibleClass.set_extend(RuntimeAccessibleClass, ISize);\nRuntimeAccessibleClass.set_extend(ISize, Size);\nRuntimeAccessibleClass.set_extend(ISize, GraphSize);\nexport let PositionStr = (_dec7 = RuntimeAccessible('PositionStr'), _dec7(_class13 = (_class14 = class PositionStr {\n  // left, centered, right\n\n  constructor(x, y) {\n    this.x = void 0;\n    this.y = void 0;\n    this.x = x !== null && x !== void 0 ? x : 0;\n    this.y = y !== null && y !== void 0 ? y : -1;\n  }\n  toString() {\n    return PositionStr.toPosString(this);\n  }\n  invert() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (x) this.x = -this.x;\n    if (y) this.y = -this.y;\n    return this;\n  }\n  static toPosString(o) {\n    let s;\n    if (o.y === -1) s = 't';else if (o.y === 1) s = 'b';else s = '';\n    if (o.x === -1) s += 'l';else if (o.x === 1) s += 'r';\n    // else s = +'';\n    // if (!s) return \"c\";\n    return s;\n  }\n  static fromPosString(position) {\n    let ret = new PositionStr(0, 0);\n    let posarr = (position !== null && position !== void 0 ? position : 't').split(' '); // .map(s=>s[0]);\n    for (let p of posarr) switch (p) {\n      default:\n      case \"t\":\n      case \"top\":\n        ret.y = -1;\n        break;\n      case \"b\":\n      case \"bottom\":\n        ret.y = 1;\n        break;\n      case \"l\":\n      case \"left\":\n        ret.x = -1;\n        break;\n      case \"r\":\n      case \"right\":\n        ret.x = 1;\n        break;\n      case \"tl\":\n      case \"lt\":\n      case \"top left\":\n        ret.y = -1;\n        ret.x = -1;\n        break;\n      case \"tr\":\n      case \"rt\":\n      case \"top right\":\n        ret.y = -1;\n        ret.x = 1;\n        break;\n      case '':\n      case 'c':\n        ret.x = 0;\n        ret.y = 0;\n        break;\n      case \"bl\":\n      case \"lb\":\n      case \"bottom left\":\n        ret.y = 1;\n        ret.x = -1;\n        break;\n      case \"br\":\n      case \"rb\":\n      case \"bottom right\":\n        ret.y = 1;\n        ret.x = 1;\n        break;\n    }\n    return ret;\n  }\n  static invertPosStr(pos) {\n    return PositionStr.fromPosString(pos).invert().toString();\n  }\n  static toFullLabelSingle(position) {\n    switch (position === null || position === void 0 ? void 0 : position.trim()[0]) {\n      case 'c':\n      case '':\n        return 'center';\n      case 't':\n        return 'top';\n      default:\n        if (position.trim() === '') return 'center';\n        return 'bottom';\n      case 'b':\n        return 'bottom';\n      case 'l':\n        return 'left';\n      case 'r':\n        return 'right';\n    }\n  }\n  // tl -> top left\n  static toSeparateFullLabels(position) {\n    let pos = (position !== null && position !== void 0 ? position : 'b').trim();\n    if (pos.length === 2) {\n      return PositionStr.toFullLabelSingle(pos[0]) + ' ' + PositionStr.toFullLabelSingle(pos[1]);\n    } else if (pos.indexOf(' ')) {\n      return pos.split(' ').map(s => PositionStr.toFullLabelSingle(s)).join(' ');\n    } else return PositionStr.toFullLabelSingle(pos[0]);\n    return \"\";\n  }\n}, _class14.cname = 'PositionStr', _class14)) || _class13);\nexport let Geom = (_dec8 = RuntimeAccessible('Geom'), _dec8(_class15 = (_class16 = class Geom extends RuntimeAccessibleClass {\n  static unmark(key) {\n    if (!Geom.markings[key]) return false;\n    let e = Geom.markings[key];\n    U.removeFromDom(e);\n    delete Geom.markings[key];\n    return true;\n  }\n  static markPt(key, pt, color, label) {\n    return Geom.mark(key, pt.x, pt.y, 1, 1, color, label);\n  }\n  static markSize(key, pt, color, label) {\n    var _pt$w, _pt$h;\n    return Geom.mark(key, pt.x, pt.y, (_pt$w = pt.w) !== null && _pt$w !== void 0 ? _pt$w : 1, (_pt$h = pt.h) !== null && _pt$h !== void 0 ? _pt$h : 1, color, label);\n  }\n  static mark(key, x, y) {\n    let w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    let h = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n    let color = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'red';\n    let label = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : '';\n    if (Geom.markings[key]) Geom.unmark(key);\n    let e;\n    let pre = '<div class=\"debug-mark\" data-key=\"' + key + '\" data-label=\"' + label + '\" style=\"position: absolute; z-index:99999; left:' + x + 'px; top:' + y + 'px; width: ' + w + 'px; height: ' + h + 'px;';\n    let post = '\"/>';\n    if (w + h > 2) {\n      e = U.toHtml(pre + 'border-radius:0; background: transparent;' + post);\n    } else {\n      e = U.toHtml(pre + 'border-radius:100%; background: ' + color + '; outline: 1px solid ' + color + '; outline-offset: 5px;' + post);\n    }\n    document.body.append(e);\n    Geom.markings[key] = e;\n    return e;\n  }\n  // warning: nodes from other iframes will say are not instance from Element of the current frame, in that case need duck typing.\n  static isHtmlNode(element) {\n    return element instanceof Element || element instanceof HTMLDocument || element instanceof SVGElement;\n  }\n  static isPositiveZero(m) {\n    if (!!Object.is) {\n      return Object.is(m, +0);\n    }\n    return 1 / m === Number.POSITIVE_INFINITY;\n  }\n  static isNegativeZero(m) {\n    if (!!Object.is) {\n      return Object.is(m, -0);\n    }\n    return 1 / m === Number.NEGATIVE_INFINITY;\n  }\n  static TanToRadian(n) {\n    return Geom.DegreeToRad(Geom.TanToDegree(n));\n  }\n  static TanToDegree(n) {\n    if (Geom.isPositiveZero(n)) {\n      return 0;\n    }\n    if (n === Number.POSITIVE_INFINITY) {\n      return 90;\n    }\n    if (Geom.isNegativeZero(n)) {\n      return 180;\n    }\n    if (n === Number.POSITIVE_INFINITY) {\n      return 270;\n    }\n    return Geom.RadToDegree(window.Math.atan(n));\n  }\n  static RadToDegree(radians) {\n    return Geom.radToDeg(radians);\n  }\n  static DegreeToRad(degree) {\n    return Geom.degToRad(degree);\n  }\n  static radToDeg(radians) {\n    return radians * (180 / Math.PI);\n  }\n  static degToRad(degree) {\n    return degree * (Math.PI / 180);\n  }\n  // 0.001;\n  static isOnEdge(pt, shape) {\n    let tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Geom.GeomTolerance;\n    return Geom.isOnHorizontalEdges(pt, shape, tolerance) || Geom.isOnVerticalEdges(pt, shape, tolerance);\n  }\n  static isOnVerticalEdges(pt, shape) {\n    let tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Geom.GeomTolerance;\n    return Geom.isOnLeftEdge(pt, shape, tolerance) || Geom.isOnRightEdge(pt, shape, tolerance);\n  }\n  static isOnHorizontalEdges(pt, shape) {\n    let tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Geom.GeomTolerance;\n    return Geom.isOnTopEdge(pt, shape, tolerance) || Geom.isOnBottomEdge(pt, shape, tolerance);\n  }\n  static isOnRightEdge(pt, shape) {\n    let tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Geom.GeomTolerance;\n    if (!pt || !shape) {\n      return false;\n    }\n    if (tolerance) return Math.abs(pt.x - (shape.x + shape.w)) < tolerance && pt.y - shape.y > tolerance && pt.y - (shape.y + shape.h) < tolerance;\n    return pt.x === shape.x + shape.w && pt.y >= shape.y && pt.y <= shape.y + shape.h;\n  }\n  static isOnLeftEdge(pt, shape) {\n    let tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Geom.GeomTolerance;\n    if (!pt || !shape) {\n      return false;\n    }\n    if (tolerance) return Math.abs(pt.x - shape.x) < tolerance && pt.y - shape.y > tolerance && pt.y - (shape.y + shape.h) < tolerance;\n    return pt.x === shape.x && pt.y >= shape.y && pt.y <= shape.y + shape.h;\n  }\n  static isOnTopEdge(pt, shape) {\n    let tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Geom.GeomTolerance;\n    if (!pt || !shape) {\n      return false;\n    }\n    if (tolerance) return Math.abs(pt.y - shape.y) < tolerance && pt.x - shape.x > tolerance && pt.x - (shape.x + shape.w) < tolerance;\n    return pt.y === shape.y && pt.x >= shape.x && pt.x <= shape.x + shape.w;\n  }\n  static isOnBottomEdge(pt, shape, tolerance) {\n    if (!pt || !shape) {\n      return false;\n    }\n    if (tolerance) return Math.abs(pt.y - shape.y + shape.h) < tolerance && pt.x - shape.x > tolerance && pt.x - (shape.x + shape.w) < tolerance;\n    return pt.y === shape.y + shape.h && pt.x >= shape.x && pt.x <= shape.x + shape.w;\n  }\n  static closestPoint(size, pt) {\n    let top_closest = Geom.closestPointToSegment(size.tl(), size.tr(), pt);\n    let bot_closest = Geom.closestPointToSegment(size.bl(), size.br(), pt);\n    let left_closest = Geom.closestPointToSegment(size.tl(), size.bl(), pt);\n    let right_closest = Geom.closestPointToSegment(size.tr(), size.br(), pt);\n    let top_distance = top_closest.distanceFromPoint(pt, false);\n    let bot_distance = bot_closest.distanceFromPoint(pt, false);\n    let left_distance = left_closest.distanceFromPoint(pt, false);\n    let right_distance = right_closest.distanceFromPoint(pt, false);\n    let min_distance = Math.min(top_distance, bot_distance, left_distance, right_distance);\n    if (min_distance === top_distance) return top_closest;\n    if (min_distance === bot_distance) return bot_closest;\n    if (min_distance === left_distance) return left_closest;\n    return right_closest;\n  }\n  static isMinusZero(number) {\n    return 1 / number == -Infinity;\n  }\n  static closestPointToSegment(segStart, segEnd, pt) {\n    // 1) find equation of line passing for start, end.\n    // 2) then find all perpendicular lines, then the perpendicular line that pass through pt\n    // 3) find intersection between Line(s,e) and line of point 2.\n    // 4A) IF intersection is part of segment(s,e) that is closest.\n    // 4B) ELSE, one of the 2 extremes of the segment is closest.\n\n    let x_intersect, y_intersect;\n    let s = segStart;\n    let e = segEnd;\n    let mse = (e.y - s.y) / (e.x - s.x);\n    if (mse === Number.POSITIVE_INFINITY || mse === Number.NEGATIVE_INFINITY) {\n      // s and e are both on the same y vertical line (same x)      // new GraphPoint(segStart.x, pt.y);\n      x_intersect = segStart.x;\n      y_intersect = pt.y;\n      // 1), 2), 3) all done shortcut\n    } else if (mse === 0 || Geom.isNegativeZero(mse)) {\n      // s and e are both on the same x horizontal line (same y)    // new GraphPoint(pt.x, segStart.y);\n      x_intersect = pt.x;\n      y_intersect = segStart.y;\n      // 1), 2), 3) all done shortcut\n    } else {\n      let q = s.y - mse * s.x; // y = mx + q           q = y-mx\n      // 1) done\n      let pmse = -1 / mse; // perpendicular to mse\n      let pq = pt.y - pmse * pt.x;\n      // 2) done\n      //  m1 * x + q1 = y    -->   m1 * x + q1 = m2 * x + q2    -->    (m1-m2)x = q2-q1      -->     x=(q2-q1)/(m1-m2)\n      x_intersect = (pq - q) / (mse - pmse);\n      y_intersect = mse * x_intersect + q; //  y = mx +q\n      // 3) done\n    }\n    let maxX, minX;\n    let maxY, minY;\n    if (s.x > e.x) {\n      maxX = s.x;\n      minX = e.x;\n    } else {\n      maxX = e.x;\n      minX = s.x;\n    }\n    if (s.y > e.y) {\n      maxY = s.y;\n      minY = e.y;\n    } else {\n      maxY = e.y;\n      minY = s.y;\n    }\n    if (x_intersect >= minX && x_intersect <= maxX && y_intersect >= minY && y_intersect <= maxY) return new GraphPoint(x_intersect, y_intersect);\n    // 4A) IF done\n\n    let sdist = (s.x - x_intersect) ** 2 + (s.y - y_intersect) ** 2; // actual distance is sqrt() of this, but i just need to find closest, not correct distance.\n    let edist = (e.x - x_intersect) ** 2 + (e.y - y_intersect) ** 2;\n    return sdist < edist ? new GraphPoint(s.x, s.y) : new GraphPoint(e.x, e.y);\n    // 4B) ELSE done\n  }\n  static lineToSegmentIntersection(segStart, segEnd, q, m) {\n    if (segStart.x === segEnd.x) {\n      let y = m * segStart.x + q;\n      if (Geom.isNumberBetween(y, segStart.y, segEnd.y)) return new GraphPoint(segStart.x, y);else return undefined;\n    } else if (segStart.y === segEnd.y) {\n      let x = (segStart.y - q) / m;\n      if (Geom.isNumberBetween(x, segStart.x, segEnd.x)) return new GraphPoint(x, segStart.y);else return undefined;\n      //\n    }\n    let m2 = segStart.getM(segEnd);\n    let q2 = IPoint.getQ(segStart, segEnd);\n    if (m === m2) {\n      if (q2 === q) return segStart; // line and segment coincident\n      return undefined; // parallel\n    }\n    let intersect = Geom.lineToLineIntersection(m, q, m2, q2);\n    if (intersect && Geom.isNumberBetween(intersect.x, segStart.x, segEnd.x) && Geom.isNumberBetween(intersect.y, segStart.y, segEnd.y)) return intersect;else return undefined;\n  }\n  static isNumberBetween(target, s, e) {\n    let max = Math.max(s, e);\n    let min = Math.min(s, e);\n    return target >= min && target <= max;\n  }\n  static lineToLineIntersection(m, q, m2, q2) {\n    let retIfParallel = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;\n    let retIfCoincident = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;\n    if (m === m2) {\n      if (q === q2) return retIfCoincident;\n      return retIfParallel;\n    }\n    if (m === Number.POSITIVE_INFINITY || m === Number.NEGATIVE_INFINITY || m2 === Number.POSITIVE_INFINITY || m2 === Number.NEGATIVE_INFINITY) {\n      // m or m2 are a vertical line, Q must be invalid too and i don't have a single point of the line.\n      // it's actually infinite possible vertical parallel lines.\n      return undefined;\n    }\n    /*\r\n        y = mx + q\r\n        y = nx + w\r\n        -->\r\n        mx + q = nx + w\r\n        -->\r\n        mx - nx = w - q\r\n        -->\r\n        x (m - n) = w - q\r\n        -->\r\n        x = (w - q)/(m - n)\r\n    */\n    let x = (q2 - q) / (m - m2);\n    return new GraphPoint(x, m * x + q);\n  }\n  // @param start, end: are for determining direction. every m is a line that can be seen in 2 direction\n  static mToRad(m, start, end) {\n    let rad;\n    if (start.x === end.x) {\n      rad = start.y < end.y ? Math.PI * 3 / 2 : Math.PI / 2;\n    } else {\n      // console.log(\"rad diagonal\", {base:  Math.atan(m), add: start.x > end.x, sx: start.x, ex: end.x});\n      rad = Math.atan(m) + (start.x > end.x ? 0 : Math.PI);\n    }\n    return rad;\n  }\n\n  // intersect a rectangle with a line or segment (if end parameter is specified)\n  // @return: [0, 2] intersections\n  static lineToSizeIntersection_TODO(size, m, startLine, endIfSegment) {\n    // todo: use GraphSize.closestIntersection which is close. it is size-segment returning only the closest intersection\n    return [];\n  }\n}, _class16.markings = {}, _class16.GeomTolerance = 0, _class16)) || _class15);\nRuntimeAccessibleClass.set_extend(RuntimeAccessibleClass, Geom);","map":{"version":3,"names":["U","DPointerTargetable","RuntimeAccessible","windoww","Log","RuntimeAccessibleClass","IPoint","_dec","_class","_class2","getM","firstPt","secondPt","y","x","getQ","m","undefined","constructor","arguments","length","init_constructor","thiss","id","maxID","Date","getTime","className","name","isNaN","cname","raw","toString","letters","separator","JSON","stringify","clone","other","duplicate","ret","new","distanceFromPoint","tentativeEnd","skipSqrt","d_pow2","Math","sqrt","subtract","p2","newInstance","e","p1","add","addAll","p","i","p0","subtractAll","multiply","pt","divide","multiplyScalar","scalar","divideScalar","isInTheMiddleOf","tolleranza","rectangle","Size","fromPoints","tolleranzaX","tolleranzaY","w","h","lineDistance","distanceFromLine","top","bot","abs","equals","moveOnNearestBorder","startVertexSize","graph","debug","tl","tr","bl","br","L","R","T","B","min","GraphPoint","markg","pt2","_IPoint$getM","call","degreeWith","toRadians","directionVector","atan2","RadToDegree","absolute","set","move","rad","distance","cos","sin","ptlike","str","cropNum","subclasses","_extends","_dec2","_class3","dontmixwithPoint","fromEvent","Point","pageX","pageY","g","Error","toGraphCoord","toSize","GraphSize","_dec3","_class5","dontmixwithGPoint","set_extend","ISize","_dec4","_class7","_class8","push","width","height","join","json","makePoint","center","relativePoint","xPercent","yPercent","size","minSize","max","maxSize","intersection","startx","starty","endx","endy","doesintersect","contains","isOverlapping","size2","isOverlappingAnyOf","sizes","multiplyPoint","dividePoint","boundary","_dec5","_class9","_class10","dontMixWithGraphSize","of","element0","_element$ownerDocumen","sizePostTransform","element","document","ww","body","$element","$","ex","tagName","tmp","sizeofvar","createElement","append","isOrphan","parentNode","ancestors","ancestorArray","displayStyles","map","_e$style","style","display","_ancestors$i","_ancestors$i$style","getComputedStyle","rect","getBoundingClientRect","win","ownerDocument","defaultView","window","left","scrollX","scrollY","offsetWidth","offsetHeight","_ancestors$i$style2","removeProperty","clear","minX","maxX","minY","maxY","_len","args","Array","_key","$sizeofvar","_dec6","_class11","dontMixWithSize","closestIntersection","targetPt","gridAlign","m0","q0","q","Number","POSITIVE_INFINITY","allowT","allowB","allowL","allowR","intersectionT","intersectionB","intersectionL","intersectionR","Geom","isNumberBetween","lineToSegmentIntersection","closestIntersection_old","prevPt","pt0","closestIntersection0","vertexGSize","NEGATIVE_INFINITY","console","log","closestmix","closest","segStart","segEnd","mode","main","sub","closestmix2","error","vicinanzaT","vicinanzaB","vicinanzaL","vicinanzaR","floorX","floor","ceilX","ceil","closestX","farthestX","floorY","ceilY","closestY","farthestY","_len2","_key2","closestPoint","PositionStr","_dec7","_class13","_class14","toPosString","invert","o","s","fromPosString","position","posarr","split","invertPosStr","pos","toFullLabelSingle","trim","toSeparateFullLabels","indexOf","_dec8","_class15","_class16","unmark","key","markings","removeFromDom","markPt","color","label","mark","markSize","_pt$w","_pt$h","pre","post","toHtml","isHtmlNode","Element","HTMLDocument","SVGElement","isPositiveZero","Object","is","isNegativeZero","TanToRadian","n","DegreeToRad","TanToDegree","atan","radians","radToDeg","degree","degToRad","PI","isOnEdge","shape","tolerance","GeomTolerance","isOnHorizontalEdges","isOnVerticalEdges","isOnLeftEdge","isOnRightEdge","isOnTopEdge","isOnBottomEdge","top_closest","closestPointToSegment","bot_closest","left_closest","right_closest","top_distance","bot_distance","left_distance","right_distance","min_distance","isMinusZero","number","Infinity","x_intersect","y_intersect","mse","pmse","pq","sdist","edist","m2","q2","intersect","lineToLineIntersection","target","retIfParallel","retIfCoincident","mToRad","start","end","lineToSizeIntersection_TODO","startLine","endIfSegment"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/frontend/src/common/Geom.ts"],"sourcesContent":["import {GObject, Temporary, TODO, U} from \"../joiner\";\r\nimport {DPointerTargetable, RuntimeAccessible, windoww, Log, RuntimeAccessibleClass, Dictionary} from \"../joiner\";\r\nimport React from \"react\";\r\nimport {radian} from \"../joiner/types\";\r\n\r\n@RuntimeAccessible('IPoint')\r\nexport abstract class IPoint extends RuntimeAccessibleClass {\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    public x!: number;\r\n    public y!: number;\r\n\r\n    // @ts-ignore static getM is not null but must be declared nullable to achieve subclass mixing\r\n    // public static getM? = function(firstPt: IPoint, secondPt: IPoint): number { return (firstPt.y - secondPt.y) / (firstPt.x - secondPt.x); }\r\n    public static getM(firstPt: IPoint, secondPt: IPoint): number { return (firstPt.y - secondPt.y) / (firstPt.x - secondPt.x); }\r\n    public static getQ(firstPt: IPoint, secondPt: IPoint, m?: number): number {\r\n        if (m === undefined) m = IPoint.getM(firstPt, secondPt);\r\n        return firstPt.y - (m * firstPt.x);\r\n    }\r\n\r\n    public constructor(x: number = 0, y: number = 0) {\r\n        super(); // super('dwc');\r\n        IPoint.init_constructor(this, x, y);\r\n    }\r\n\r\n    static init_constructor(thiss: GObject, x: any = 0, y: any = 0, ...a: any): void {\r\n        thiss.id = \"POINT_\" + (DPointerTargetable.maxID++) + \"_\" + new Date().getTime();\r\n        thiss.className = thiss.constructor.name;\r\n        if (x === null || x === undefined) thiss.x = undefined as Temporary;\r\n        else if (isNaN(+x)) { thiss.x = 0; }\r\n        else thiss.x = +x;\r\n        if (y === null || y === undefined) thiss.y = undefined as Temporary;\r\n        else if (isNaN(+y)) { thiss.y = 0; }\r\n        else thiss.y = +y;\r\n        thiss.className = this.cname;\r\n    }\r\n\r\n    public raw(): {x: number, y: number} { return {x: this.x, y: this.y}; }\r\n\r\n    public toString(letters: boolean=true, separator: string = \" \"): string {\r\n        if (letters) return  JSON.stringify({x:this.x, y: this.y});\r\n        else return this.x + separator + this.y + separator;\r\n    }\r\n    public clone(other: { x: number, y: number }): this { this.x = other.x; this.y = other.y; return this; }\r\n\r\n    protected abstract new(): this;\r\n    abstract toSize(w: number, h?: number): ISize;\r\n    public duplicate(): this { const ret = this.new(); ret.clone(this); return ret; }\r\n\r\n    public distanceFromPoint(tentativeEnd: IPoint, skipSqrt: boolean = false): number {\r\n        let d_pow2 = (this.x - tentativeEnd.x)**2 + (this.y - tentativeEnd.y)**2;\r\n        return skipSqrt ? d_pow2 : Math.sqrt(d_pow2);\r\n        // return this.subtract(tentativeEnd, true).absolute();\r\n    }\r\n\r\n    public subtract(p2: { x?: number, y?: number }, newInstance: boolean): this {\r\n        Log.e(!p2, 'subtract argument must be a valid point: ', p2);\r\n        let p1: this;\r\n        if (!newInstance) { p1 = this; } else { p1 = this.duplicate(); }\r\n        if (p2.x !== undefined) p1.x -= p2.x;\r\n        if (p2.y !== undefined) p1.y -= p2.y;\r\n        return p1; }\r\n\r\n    public add(p2: { x?: number, y?: number }, newInstance: boolean): this {\r\n        Log.e(!p2, 'add argument must be a valid point: ', p2);\r\n        let p1: this;\r\n        if (!newInstance) { p1 = this; } else { p1 = this.duplicate(); }\r\n        if (p2.x !== undefined) p1.x += p2.x;\r\n        if (p2.y !== undefined) p1.y += p2.y;\r\n        return p1; }\r\n\r\n    public addAll(p: IPoint[], newInstance: boolean): this {\r\n        let i;\r\n        let p0: this;\r\n        if (!newInstance) { p0 = this; } else { p0 = this.duplicate(); }\r\n        for (i = 0; i < p.length; i++) { p0.add(p[i], true); }\r\n        return p0; }\r\n\r\n    public subtractAll(p: this[], newInstance: boolean): this {\r\n        let i;\r\n        let p0: this;\r\n        if (!newInstance) { p0 = this; } else { p0 = this.duplicate(); }\r\n        for (i = 0; i < p.length; i++) { p0.subtract(p[i], true); }\r\n        return p0; }\r\n\r\n    public multiply(pt: {x?: number, y?: number} | number, newInstance: boolean = false): this {\r\n        let ret: this = (newInstance ? this.duplicate() : this);\r\n        if (typeof pt === \"number\") {\r\n            ret.x *= pt;\r\n            ret.y *= pt;\r\n        }\r\n        else {\r\n            if (pt.x !== undefined) ret.x *= pt.x;\r\n            if (pt.y !== undefined) ret.y *= pt.y;\r\n        }\r\n        return ret; }\r\n\r\n    public divide(pt: Partial<this> | number, newInstance: boolean = false): this {\r\n        let ret = (newInstance ? this.duplicate() : this);\r\n        if (typeof pt === \"number\") {\r\n            ret.x /= pt;\r\n            ret.y /= pt;\r\n        }\r\n        else {\r\n            ret.x /= pt.x as number;\r\n            ret.y /= pt.y as number;\r\n        }\r\n        return ret; }\r\n\r\n    public multiplyScalar(scalar: number, newInstance: boolean): this {\r\n        Log.e(isNaN(+scalar), 'IPoint.multiply()', 'scalar argument must be a valid number: ', scalar);\r\n        let p1: this;\r\n        if (!newInstance) { p1 = this; } else { p1 = this.duplicate(); }\r\n        p1.x *= scalar;\r\n        p1.y *= scalar;\r\n        return p1; }\r\n\r\n    public divideScalar(scalar: number, newInstance: boolean): this {\r\n        Log.e(isNaN(+scalar), 'IPoint.divide()', 'scalar argument must be a valid number: ', scalar);\r\n        let p1: this;\r\n        if (!newInstance) { p1 = this; } else { p1 = this.duplicate(); }\r\n        p1.x /= scalar;\r\n        p1.y /= scalar;\r\n        return p1; }\r\n\r\n    public isInTheMiddleOf(firstPt: this, secondPt: this, tolleranza: number): boolean {\r\n        const rectangle: Size = Size.fromPoints(firstPt, secondPt);\r\n        const tolleranzaX = tolleranza; // actually should be cos * arctan(m);\r\n        const tolleranzaY = tolleranza; // actually should be sin * arctan(m);\r\n        if (this.x < rectangle.x - tolleranzaX || this.x > rectangle.x + rectangle.w + tolleranzaX) { return false; }\r\n        if (this.y < rectangle.y - tolleranzaX || this.y > rectangle.y + rectangle.h + tolleranzaY) { return false; }\r\n        // const m = IPoint.getM(firstPt, secondPt);\r\n        // const q = IPoint.getQ(firstPt, secondPt);\r\n        const lineDistance = this.distanceFromLine(firstPt, secondPt);\r\n        // console.log('distance:', lineDistance, ', this:', this, ', p1:', firstPt, ', p2:', secondPt);\r\n        return lineDistance <= tolleranza; }\r\n\r\n    public distanceFromLine(p1: IPoint, p2: IPoint): number {\r\n        const top: number =\r\n            + (p2.y - p1.y) * this.x\r\n            - (p2.x - p1.x) * this.y\r\n            + p2.x * p1.y\r\n            - p1.x * p2.y;\r\n        const bot =\r\n            (p2.y - p1.y) * (p2.y - p1.y) +\r\n            (p2.x - p1.x) * (p2.x - p1.x);\r\n        return Math.abs(top) / Math.sqrt(bot);  }\r\n\r\n    public equals(pt: {x:number, y:number}, tolleranzaX: number = 0, tolleranzaY: number = 0): boolean {\r\n        if (pt === null) { return false; }\r\n        return Math.abs(this.x - pt.x) <= tolleranzaX && Math.abs(this.y - pt.y) <= tolleranzaY; }\r\n\r\n    public moveOnNearestBorder(startVertexSize: ISize, clone: boolean, graph: TODO/*IGraph*/, debug: boolean = true): IPoint {\r\n        const pt: IPoint = clone ? this.duplicate() : this;\r\n        const tl: IPoint = startVertexSize.tl();\r\n        const tr: IPoint = startVertexSize.tr();\r\n        const bl: IPoint = startVertexSize.bl();\r\n        const br: IPoint = startVertexSize.br();\r\n        const L: number = pt.distanceFromLine(tl, bl);\r\n        const R: number = pt.distanceFromLine(tr, br);\r\n        const T: number = pt.distanceFromLine(tl, tr);\r\n        const B: number = pt.distanceFromLine(bl, br);\r\n        const min: number = Math.min(L, R, T, B);\r\n        if (min === L) { pt.x = tl.x; }\r\n        if (min === R) { pt.x = tr.x; }\r\n        if (min === T) { pt.y = tr.y; }\r\n        if (min === B) { pt.y = br.y; }\r\n        if (debug && graph && pt instanceof GraphPoint) { graph.markg(pt, false, 'purple'); }\r\n        return pt; }\r\n\r\n    public getM(pt2: IPoint): number { return IPoint.getM?.(this, pt2) as unknown as number; }\r\n\r\n    public degreeWith(pt2: IPoint, toRadians: boolean): number {\r\n        const directionVector: IPoint = this.subtract(pt2, true);\r\n        const ret: number = Math.atan2(directionVector.y, directionVector.x);\r\n        return toRadians ? ret : windoww.U.RadToDegree(ret); }\r\n\r\n    public absolute(): number { return Math.sqrt(this.x * this.x + this.y * this.y); }\r\n    public set(x: number, y: number) { this.x = x; this.y = y; }\r\n\r\n    // move the point by a vector with direction and distance (module)\r\n    move(rad: radian /*in radians!*/, distance: number, clone:boolean = true): this{\r\n        let pt = clone ? this.duplicate() : this;\r\n        pt.x += distance * Math.cos(rad);\r\n        pt.y += distance * Math.sin(rad);\r\n        return pt;\r\n    }\r\n\r\n    static stringify(ptlike: {x?:number, y?:number}): string {\r\n        if (!ptlike) return ptlike;\r\n        let str: string[];\r\n        return '('+U.cropNum(ptlike.x||0)+', '+U.cropNum(ptlike.y||0)+')';\r\n    }\r\n}\r\n\r\n@RuntimeAccessible('GraphPoint')\r\nexport class GraphPoint extends IPoint{\r\n    private dontmixwithPoint: any;\r\n    public static fromEvent(e: JQuery.ClickEvent | JQuery.MouseMoveEvent | JQuery.MouseUpEvent | JQuery.MouseDownEvent | JQuery.MouseEnterEvent | JQuery.MouseLeaveEvent | JQuery.MouseEventBase)\r\n        : GraphPoint | null {\r\n        if (!e) { return null; }\r\n        const p: Point = new Point(e.pageX, e.pageY);\r\n        const g: any = null;\r\n        throw new Error(\"todo: const g: IGraph = Status.status.getActiveModel().graph;\");\r\n        return g.toGraphCoord(p); }\r\n\r\n    protected new(): this { return new GraphPoint() as this;}\r\n    public toSize(w: number, h?: number): GraphSize {\r\n        return new GraphSize(this.x, this.y, w, (h === undefined) ? w : h);\r\n    }\r\n\r\n}\r\n\r\n\r\n@RuntimeAccessible('Point')\r\nexport class Point extends IPoint{\r\n    private dontmixwithGPoint: any;\r\n    /// https://stackoverflow.com/questions/6073505/what-is-the-difference-between-screenx-y-clientx-y-and-pagex-y\r\n    public static fromEvent(e: JQuery.ClickEvent | JQuery.MouseMoveEvent | JQuery.MouseUpEvent | JQuery.MouseDownEvent\r\n        | JQuery.MouseEnterEvent | JQuery.MouseLeaveEvent | JQuery.MouseEventBase | React.MouseEvent)\r\n        : Point {\r\n        const p: Point = new Point(e.pageX, e.pageY);\r\n        return p; }\r\n\r\n    protected new(): this { return new Point() as this;}\r\n    public toSize(w: number, h?: number): Size {\r\n        return new Size(this.x, this.y, w, (h === undefined) ? w : h);\r\n    }\r\n}\r\n\r\nRuntimeAccessibleClass.set_extend(RuntimeAccessibleClass, IPoint);\r\nRuntimeAccessibleClass.set_extend(IPoint, GraphPoint);\r\nRuntimeAccessibleClass.set_extend(IPoint, Point);\r\n\r\n@RuntimeAccessible('ISize')\r\nexport abstract class ISize<PT extends IPoint = IPoint> extends RuntimeAccessibleClass {\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    public x!: number;\r\n    public y!: number;\r\n    public w!: number;\r\n    public h!: number;\r\n    public constructor(x: number = 0, y: number = 0, w: number = 0, h: number = 0) {\r\n        super(); // super('dwc');\r\n        // do not override any fields from the DPointerTargetable, otherwise the ! in the override will reinizialize the attribute\r\n        // erasing the value set in super or in the functions called by the constructor as side effect (static_init called from constructor will be overridden too)\r\n        // if need to override types, build the \"new\" static function like in DModelElement\r\n        ISize.init_constructor(this, x, y, w, h);\r\n    }\r\n\r\n\r\n    static stringify(ptlike: {x?:number, y?:number, w?:number, h?:number, width?:number, height?:number}): string {\r\n        if (!ptlike) return ptlike as any;\r\n        let str: string[] = [];\r\n        if (ptlike.x && !isNaN(ptlike.x)|| ptlike.x === 0) str.push('x:'+U.cropNum(ptlike.x));\r\n        if (ptlike.y && !isNaN(ptlike.y)|| ptlike.y === 0) str.push('y:'+U.cropNum(ptlike.y));\r\n        if (ptlike.w && !isNaN(ptlike.w)|| ptlike.w === 0) str.push('w:'+U.cropNum(ptlike.w));\r\n        if (ptlike.h && !isNaN(ptlike.h)|| ptlike.h === 0) str.push('h:'+U.cropNum(ptlike.h));\r\n        if (ptlike.width && !isNaN(ptlike.width)|| ptlike.width === 0) str.push('W:'+U.cropNum(ptlike.width));\r\n        if (ptlike.height && !isNaN(ptlike.height)|| ptlike.height === 0) str.push('H:'+U.cropNum(ptlike.height));\r\n        // if (str.length === 0) return '{}';\r\n        return '{'+str.join(', ')+'}'\r\n    }\r\n\r\n    static init_constructor(thiss: GObject, x: any = 0, y: any = 0, w: any = 0, h: any = 0, ...a: any): void {\r\n        thiss.id = \"SIZE_\" + (DPointerTargetable.maxID++) + \"_\" + new Date().getTime();\r\n        thiss.className = (thiss.constructor as typeof RuntimeAccessibleClass).cname;\r\n        if (x === null || x === undefined) thiss.x = undefined as Temporary;\r\n        else if (isNaN(+x)) { thiss.x = 0; }\r\n        else thiss.x = +x;\r\n        if (y === null || y === undefined) thiss.y = undefined as Temporary;\r\n        else if (isNaN(+y)) { thiss.y = 0; }\r\n        else thiss.y = +y;\r\n        if (w === null || w === undefined) thiss.w = undefined as Temporary;\r\n        else if (isNaN(+w)) { thiss.w = 0; }\r\n        else thiss.w = +w;\r\n        if (h === null || h === undefined) thiss.h = undefined as Temporary;\r\n        else if (isNaN(+h)) { thiss.h = 0; }\r\n        else thiss.h = +h;\r\n        thiss.className = this.cname; }\r\n\r\n    public toString(letters: boolean=true, separator: string = \" \"): string {\r\n        if (letters) return JSON.stringify({x: this.x, y: this.y, w: this.w, h: this.h});\r\n        else return this.x + separator + this.y + separator + this.w + separator + this.h;\r\n    }\r\n\r\n    public set(x?: number, y?: number, w?: number, h?: number): void {\r\n        if (x !== undefined) (this.x = +x);\r\n        if (y !== undefined) (this.y = +y);\r\n        if (w !== undefined) (this.w = +w);\r\n        if (h !== undefined) (this.h = +h);\r\n    }\r\n\r\n    protected abstract makePoint(x: number, y: number): PT;\r\n    protected abstract new(...args:any): this;\r\n    public clone(json: this): this { this.x = json.x; this.y = json.y; this.w = json.w; this.h = json.h; return this; }\r\n    public duplicate(): this { return this.new().clone(this); }\r\n\r\n    public add(pt2: number | {x?:number, y?:number, w?:number, h?:number}, newInstance?: boolean): this {\r\n        let thiss = newInstance ? this.duplicate() : this;\r\n        if (typeof pt2 === \"number\") { thiss.x += pt2; thiss.y += pt2; thiss.w += pt2; thiss.h += pt2; return thiss; }\r\n        if (pt2.x !== undefined) thiss.x += pt2.x;\r\n        if (pt2.y !== undefined) thiss.y += pt2.y;\r\n        if (pt2.w !== undefined) thiss.w += pt2.w;\r\n        if (pt2.h !== undefined) thiss.h += pt2.h;\r\n        return thiss; }\r\n\r\n    public subtract(pt2: number | {x?:number, y?:number, w?:number, h?:number}, newInstance?: boolean): this {\r\n        let thiss = newInstance ? this.duplicate() : this;\r\n        if (typeof pt2 === \"number\") { thiss.x -= pt2; thiss.y -= pt2; thiss.w -= pt2; thiss.h -= pt2; return thiss; }\r\n        if (pt2.x !== undefined) thiss.x -= pt2.x;\r\n        if (pt2.y !== undefined) thiss.y -= pt2.y;\r\n        if (pt2.w !== undefined) thiss.w -= pt2.w;\r\n        if (pt2.h !== undefined) thiss.h -= pt2.h;\r\n        return thiss; }\r\n\r\n    public multiply(pt2: number | {x?:number, y?:number, w?:number, h?:number}, newInstance?: boolean): this {\r\n        let thiss = newInstance ? this.duplicate() : this;\r\n        if (typeof pt2 === \"number\") { thiss.x *= pt2; thiss.y *= pt2; thiss.w *= pt2; thiss.h *= pt2; return thiss; }\r\n        if (pt2.x !== undefined) thiss.x *= pt2.x;\r\n        if (pt2.y !== undefined) thiss.y *= pt2.y;\r\n        if (pt2.w !== undefined) thiss.w *= pt2.w;\r\n        if (pt2.h !== undefined) thiss.h *= pt2.h;\r\n        return thiss; }\r\n\r\n    public divide(pt2: number | {x?:number, y?:number, w?:number, h?:number}, newInstance?: boolean): this {\r\n        let thiss = newInstance ? this.duplicate() : this;\r\n        if (typeof pt2 === \"number\") { thiss.x /= pt2; thiss.y /= pt2; thiss.w /= pt2; thiss.h /= pt2; return thiss; }\r\n        if (pt2.x !== undefined) thiss.x /= pt2.x;\r\n        if (pt2.y !== undefined) thiss.y /= pt2.y;\r\n        if (pt2.w !== undefined) thiss.w /= pt2.w;\r\n        if (pt2.h !== undefined) thiss.h /= pt2.h;\r\n        return thiss; }\r\n\r\n\r\n    public tl(): PT {     return this.makePoint(   this.x,                 this.y             ); }\r\n    public tr(): PT {     return this.makePoint(this.x + this.w,        this.y             ); }\r\n    public bl(): PT {     return this.makePoint(   this.x,              this.y + this.h    ); }\r\n    public br(): PT {     return this.makePoint(this.x + this.w,     this.y + this.h    ); }\r\n    public center(): PT { return this.makePoint(this.x + this.w / 2, this.y + this.h / 2); }\r\n    public relativePoint(xPercent: number, yPercent: number): PT { return this.makePoint(this.x + this.w * xPercent, this.y + this.h * yPercent); }\r\n    public equals(size: this): boolean { return this.x === size.x && this.y === size.y && this.w === size.w && this.h === size.h; }\r\n\r\n    /// field-wise Math.min()\r\n    public min(minSize: this, clone: boolean): this {\r\n        const ret: this = clone ? this.new() : this;\r\n        if (!isNaN(minSize.x) && ret.x < minSize.x) { ret.x = minSize.x; }\r\n        if (!isNaN(minSize.y) && ret.y < minSize.y) { ret.y = minSize.y; }\r\n        if (!isNaN(minSize.w) && ret.w < minSize.w) { ret.w = minSize.w; }\r\n        if (!isNaN(minSize.h) && ret.h < minSize.h) { ret.h = minSize.h; }\r\n        return ret; }\r\n    public max(maxSize: this, clone: boolean): this {\r\n        const ret: this = clone ? this.new() : this;\r\n        if (!isNaN(maxSize.x) && ret.x > maxSize.x) { ret.x = maxSize.x; }\r\n        if (!isNaN(maxSize.y) && ret.y > maxSize.y) { ret.y = maxSize.y; }\r\n        if (!isNaN(maxSize.w) && ret.w > maxSize.w) { ret.w = maxSize.w; }\r\n        if (!isNaN(maxSize.h) && ret.h > maxSize.h) { ret.h = maxSize.h; }\r\n        return ret; }\r\n\r\n    public intersection(size: this): this | null {\r\n        if (!size) return null;\r\n        // anche \"isinside\"\r\n        let startx, starty, endx, endy;\r\n        startx = Math.max(this.x, size.x);\r\n        starty = Math.max(this.y, size.y);\r\n        endx = Math.min(this.x + this.w, size.x + size.w);\r\n        endy = Math.min(this.y + this.h, size.y + size.h);\r\n        const intersection: this = this.new();\r\n        // intersection.set(0, 0, 0, 0);\r\n        intersection.x = startx;\r\n        intersection.y = starty;\r\n        intersection.w = endx - startx;\r\n        intersection.h = endy - starty;\r\n        const doesintersect: boolean = intersection.w > 0 && intersection.h > 0;\r\n        return (doesintersect) ? intersection: null; }\r\n\r\n    public contains(pt: PT): boolean {\r\n        return  pt.x >= this.x && pt.x <= this.x + this.w && pt.y >= this.y && pt.y <= this.y + this.h; }\r\n\r\n    public isOverlapping(size2: this): boolean { return !!this.intersection(size2); }\r\n    public isOverlappingAnyOf(sizes: this[]): boolean {\r\n        if (!sizes) return false;\r\n        for (let size of sizes) { if (this.isOverlapping(size)) return true; }\r\n        return false;\r\n    }\r\n\r\n    public multiplyPoint(other: PT, newInstance: boolean): this {\r\n        const ret: this = newInstance ? this.new() : this;\r\n        ret.x *= other.x;\r\n        ret.w *= other.x;\r\n        ret.y *= other.y;\r\n        ret.h *= other.y;\r\n        return ret; }\r\n\r\n    public dividePoint(other: PT, newInstance: boolean): this {\r\n        const ret: this = newInstance ? this.new() : this;\r\n        ret.x /= other.x;\r\n        ret.w /= other.x;\r\n        ret.y /= other.y;\r\n        ret.h /= other.y;\r\n        return ret; }\r\n\r\n    public boundary(size2: this): void {\r\n        /*let minx, maxx, miny, maxy;\r\n        if (size2.y < this.y) { miny = size2.y; /*maxy = this.y;* / } else { miny = this.y; /*maxy = size2.y;* / }\r\n        if (size2.x < this.x) { minx = size2.y; /*maxx = this.x;* / } else { minx = this.x; /*maxy = size2.x;* / }\r\n        if (size2.y + size2.h < this.y + this.h) maxy = this.y + this.h; else maxy = size2.y + size2.h;\r\n        if (size2.x + size2.w < this.x + this.w) maxx = this.x + this.w; else maxx = size2.x + size2.w;\r\n        */\r\n        this.h = (size2.y + size2.h > this.y + this.h ? size2.y + size2.h : this.y + this.h); // -miny\r\n        this.w = (size2.x + size2.w > this.x + this.w ? size2.x + size2.w : this.x + this.w); // -minx\r\n        if (this.y < size2.y) this.y = size2.y;\r\n        if (this.x < size2.x) this.x = size2.x;\r\n        this.h -= this.y;\r\n        this.w -= this.x;\r\n    }\r\n}\r\n\r\n@RuntimeAccessible('Size')\r\nexport class Size extends ISize<Point> {\r\n    static subclasses: any[] = [];\r\n    private static sizeofvar: HTMLElement;\r\n    private static $sizeofvar: JQuery<HTMLElement>;\r\n    private dontMixWithGraphSize: any;\r\n\r\n    /**\r\n     * measure a node size\r\n     * @param {Element} element0 - the emelemnt to measure;\r\n     * @param {boolean} sizePostTransform - includes css transform instructions for computing his size. like transform: scale(1.5)\r\n     * */\r\n    public static of(element0: Element, sizePostTransform: boolean = true): Size {\r\n        let element: HTMLElement = element0 as HTMLElement;\r\n        if (element as unknown === document) {\r\n            Log.ww('trying to measure document, rerouted to measuring body.');\r\n            element = document.body as any;\r\n        }\r\n        const $element = $(element);\r\n        Log.ex(!element || element.tagName === 'foreignObject', 'sizeof()', 'SvgForeignElementObject have a bug with size, measure a child instead.', element);\r\n        let tmp;\r\n        let size: Size;\r\n        if (!Size.sizeofvar) {\r\n            Size.sizeofvar = document.createElement('div');\r\n            document.body.append(Size.sizeofvar); }\r\n\r\n        const isOrphan = element.parentNode === null;\r\n        // var visible = element.style.display !== 'none';\r\n        // var visible = $element.is(\":visible\"); crea bug quando un elemento è teoricamente visibile ma orfano\r\n        const ancestors =  windoww.U.ancestorArray(element);\r\n        const displayStyles: string[] = ancestors.map( (e: HTMLElement) => e?.style?.display);\r\n        if (isOrphan) { Size.sizeofvar.append(element); }\r\n        // show all and saveToDB visibility to restore it later\r\n        for (let i = 0; i < ancestors.length; i++) { // document has undefined style\r\n            displayStyles[i] = ancestors[i]?.style?.display;\r\n            if (displayStyles[i] === 'none' || (displayStyles[i] === '' && getComputedStyle(ancestors[i]).display === 'none')) { ancestors[i].style.display = 'block' }\r\n        }\r\n        // size = new Size(tmp.left, tmp.top, 0, 0);\r\n        let rect = element.getBoundingClientRect();\r\n        size = new Size(0, 0, 0, 0);\r\n\r\n        let win = (element.ownerDocument?.defaultView || window);\r\n        size.x = rect.left + win.scrollX;\r\n        size.y = rect.top + win.scrollY;\r\n        if (sizePostTransform) {\r\n            size.w = rect.width;\r\n            size.h = rect.height;\r\n        }\r\n        else {\r\n            size.w = element.offsetWidth; // element.scrollWidth;\r\n            size.h = element.offsetHeight;\r\n        }\r\n        // restore visibility\r\n        for (let i = 0; i < ancestors.length; i++) {\r\n            if (displayStyles[i] === ancestors[i].style?.display) continue;\r\n            if (displayStyles[i]) ancestors[i].style.display = displayStyles[i];\r\n            else ancestors[i].style.removeProperty('display');\r\n        }\r\n        if (isOrphan) {  windoww.U.clear(Size.sizeofvar); }\r\n        // Status.status.getActiveModel().graph.markS(size, false);\r\n        return size;\r\n    }\r\n\r\n    public static fromPoints(firstPt: IPoint, secondPt: IPoint): Size {\r\n        const minX = Math.min(firstPt.x, secondPt.x);\r\n        const maxX = Math.max(firstPt.x, secondPt.x);\r\n        const minY = Math.min(firstPt.y, secondPt.y);\r\n        const maxY = Math.max(firstPt.y, secondPt.y);\r\n        return new Size(minX, minY, maxX - minX, maxY - minY); }\r\n\r\n    protected makePoint(x: number, y: number): Point { return new Point(x, y); }\r\n    protected new(...args:any): this { return new Size(...args) as this; }\r\n}\r\n@RuntimeAccessible('GraphSize')\r\nexport class GraphSize extends ISize<GraphPoint> {\r\n    private dontMixWithSize: any;\r\n\r\n    public static fromPoints(firstPt: GraphPoint, secondPt: GraphPoint): GraphSize {\r\n        const minX = Math.min(firstPt.x, secondPt.x);\r\n        const maxX = Math.max(firstPt.x, secondPt.x);\r\n        const minY = Math.min(firstPt.y, secondPt.y);\r\n        const maxY = Math.max(firstPt.y, secondPt.y);\r\n        return new GraphSize(minX, minY, maxX - minX, maxY - minY); }\r\n\r\n    // both pt and targetPt are readonly-safe parameters\r\n    public static closestIntersection(size: GraphSize, pt: GraphPoint, targetPt: GraphPoint, gridAlign?: GraphPoint, m0?:number, q0?:number): GraphPoint | undefined {\r\n        // let pt: GraphPoint = pt0.duplicate();\r\n        const m = m0 || GraphPoint.getM(targetPt, pt);\r\n        const q = q0 || GraphPoint.getQ(targetPt, pt);\r\n        // console.log(\"closestIntersection()\", {size, pt0, targetPt, m, q});\r\n        // if perfectly vertical line\r\n        if (m === Number.POSITIVE_INFINITY/* && q === Number.NEGATIVE_INFINITY*/) {\r\n            // top center\r\n            if (Math.abs(targetPt.y - size.y) <= Math.abs(targetPt.y - size.y - size.h)) return pt;\r\n            // bottom center\r\n            else return new GraphPoint(pt.x, size.y + size.h);\r\n        }\r\n        let tl = size.tl(), tr = size.tr(),\r\n            bl = size.bl(), br = size.br();\r\n        let allowT: boolean, allowB: boolean,\r\n            allowL: boolean, allowR: boolean;\r\n        /*let distanceT: number = Number.POSITIVE_INFINITY, distanceB: number = Number.POSITIVE_INFINITY,\r\n            distanceL: number = Number.POSITIVE_INFINITY, distanceR: number = Number.POSITIVE_INFINITY;*/\r\n        let intersectionT: GraphPoint | undefined, intersectionB: GraphPoint | undefined,\r\n            intersectionL: GraphPoint | undefined, intersectionR: GraphPoint | undefined;\r\n\r\n\r\n        allowT = Geom.isNumberBetween(tl.y, bl.y, targetPt.y);\r\n        allowB = Geom.isNumberBetween(bl.y, tl.y, targetPt.y);\r\n        allowL = Geom.isNumberBetween(tl.x, tr.x, targetPt.x);\r\n        allowR = Geom.isNumberBetween(tr.x, tl.x, targetPt.x);\r\n        // console.log(\"closestIntersection pt0\", {size, targetPt, pt0:pt0.raw(), gridAlign,\r\n        //     corners:{tl:tl.raw(), tr:tr.raw(), bl:bl.raw(), br:br.raw()}, allows:{allowT, allowB, allowL, allowR}});\r\n        if (!(allowT || allowB || allowL || allowR)) return undefined; // point is internal to size\r\n        if (allowT) intersectionT = Geom.lineToSegmentIntersection(tl, tr, q, m); else\r\n        if (allowB) intersectionB = Geom.lineToSegmentIntersection(bl, br, q, m); // NOT else, (T|B) AND (L|R) can happen, or just 1 or 0 of those.\r\n        if (allowL) intersectionL = Geom.lineToSegmentIntersection(tl, bl, q, m); else\r\n        if (allowR) intersectionR = Geom.lineToSegmentIntersection(tr, br, q, m);\r\n\r\n        // console.log(\"closestIntersection pt2\", {intersectionT, intersectionB, intersectionL, intersectionR});\r\n        // only 1 intersection can happen\r\n        return intersectionT || intersectionB || intersectionL || intersectionR;\r\n    }\r\n    public static closestIntersection_old(size: GraphSize, prevPt: GraphPoint, pt0: GraphPoint, gridAlign?: GraphPoint): GraphPoint | null {\r\n        let ret = GraphSize.closestIntersection0(size, prevPt, pt0, gridAlign) as any;\r\n        // Log.exDev(!Geom.isOnEdge(ret, size), 'ClosestIntersection failed. not on Vertex edge.', {ret, size, prevPt, pt0, gridAlign});\r\n        return ret;\r\n    }\r\n    private static closestIntersection0(vertexGSize: GraphSize, prevPt: GraphPoint, pt0: GraphPoint, gridAlign?: GraphPoint): GraphPoint | null {\r\n        let pt: GraphPoint | null = pt0.duplicate();\r\n        const m = GraphPoint.getM(prevPt, pt) as number;\r\n        const q = GraphPoint.getQ(prevPt, pt) as number;\r\n        // U.pe( Math.abs((pt.y - m * pt.x) - (prevPt.y - m * prevPt.x)) > .001, 'wrong math in Q:', (pt.y - m * pt.x), ' vs ', (prevPt.y - m * prevPt.x));\r\n        /*const isL = prevPt.x < pt.x;\r\n    const isT = prevPt.y < pt.y;\r\n    const isR = !isL;\r\n    const isB = !isT; */\r\n        if (m === Number.POSITIVE_INFINITY && q === Number.NEGATIVE_INFINITY) { // bottom middle\r\n            return new GraphPoint(vertexGSize.x + vertexGSize.w / 2, vertexGSize.y + vertexGSize.h); }\r\n        // console.log('pt:', pt, 'm:', m, 'q:', q);\r\n        let L: GraphPoint | null = new GraphPoint(0, 0);\r\n        let T: GraphPoint | null = new GraphPoint(0, 0);\r\n        let R: GraphPoint | null = new GraphPoint(0, 0);\r\n        let B: GraphPoint | null = new GraphPoint(0, 0);\r\n        L.x = vertexGSize.x;\r\n        L.y = m * L.x + q;\r\n        R.x = vertexGSize.x + vertexGSize.w;\r\n        R.y = m * R.x + q;\r\n        T.y = vertexGSize.y;\r\n        T.x = (T.y - q) / m;\r\n        B.y = vertexGSize.y + vertexGSize.h;\r\n        B.x = (B.y - q) / m;\r\n        // prendo solo il compreso pt ~ prevPt (escludo così il \"pierce\" sulla faccia opposta), prendo il più vicino al centro.\r\n        // console.log('4 possibili punti di intersezione (LTBR):', L, T, B, R);\r\n        /* this.owner.mark(this.owner.toHtmlCoord(T), true, 'blue');\r\n    this.owner.mark(this.owner.toHtmlCoord(B), false, 'violet');\r\n    this.owner.mark(this.owner.toHtmlCoord(L), false, 'red');\r\n    this.owner.mark(this.owner.toHtmlCoord(R), false, 'orange');*/\r\n        console.log(\"intersect pt1:\", {T, B, L, R});\r\n        if ( (B.x >= pt.x && B.x <= prevPt.x) || (B.x >= prevPt.x && B.x <= pt.x) ) { } else { B = null; }\r\n        if ( (T.x >= pt.x && T.x <= prevPt.x) || (T.x >= prevPt.x && T.x <= pt.x) ) { } else { T = null; }\r\n        if ( (L.y >= pt.y && L.y <= prevPt.y) || (L.y >= prevPt.y && L.y <= pt.y) ) { } else { L = null; }\r\n        if ( (R.y >= pt.y && R.y <= prevPt.y) || (R.y >= prevPt.y && R.y <= pt.y) ) { } else { R = null; }\r\n        console.log(\"intersect pt2:\", {T, B, L, R});\r\n        function closestmix(pt: GraphPoint, closest: GraphPoint, segStart: GraphPoint, segEnd: GraphPoint, mode: \"TB\" | \"LR\"): void {\r\n            // changes pt\r\n            pt.x = closest.x; pt.y = closest.y; return;\r\n            let main: \"x\" | \"y\", sub: \"x\" | \"y\";\r\n            if (mode === \"TB\") { main = \"y\"; sub = \"x\"; } else { main = \"x\"; sub = \"y\"; }\r\n            pt[main] = closest[main];\r\n            // if T[sub] is inside the top segment, take T[sub], otherwise closest between size.tl[sub] and size.tr[sub]\r\n            // pt[sub] = Math.max(segStart[sub], Math.min(segStart[sub], closest[sub]));\r\n            if (closest[sub] <= segEnd[sub] && closest[sub] >= segStart[sub]) pt[sub] = closest[sub];\r\n            else if (Math.abs(closest[sub]-segEnd[sub]) < Math.abs(closest[sub]-segStart[sub])) pt[sub] = segEnd[sub];\r\n            else pt[sub] = segStart[sub];\r\n        }\r\n        function closestmix2(pt: GraphPoint, closest: GraphPoint, segStart: GraphPoint, segEnd: GraphPoint, mode: \"TB\" | \"LR\"): void {\r\n            // changes closest\r\n            let main: \"x\" | \"y\", sub: \"x\" | \"y\";\r\n            if (mode === \"TB\") { main = \"y\"; sub = \"x\"; } else { main = \"x\"; sub = \"y\"; }\r\n            // closest[main] = pt[main];\r\n            // if T[sub] is inside the top segment, take T[sub], otherwise closest between size.tl[sub] and size.tr[sub]\r\n            // pt[sub] = Math.max(segStart[sub], Math.min(segStart[sub], closest[sub]));\r\n            if (closest[sub] <= segEnd[sub] && closest[sub] >= segStart[sub]) {/*no-op*/}\r\n            else if (Math.abs(closest[sub]-segEnd[sub]) < Math.abs(closest[sub]-segStart[sub])) closest[sub] = segEnd[sub];\r\n            else closest[sub] = segStart[sub];\r\n        }\r\n        console.log(\"intersect pt2.5:\");\r\n        try{\r\n            if(T) closestmix2(pt, T, vertexGSize.tl(), vertexGSize.tr(), \"TB\");\r\n            if(B) closestmix2(pt, B, vertexGSize.bl(), vertexGSize.br(), \"TB\");\r\n            if(R) closestmix2(pt, R, vertexGSize.tr(), vertexGSize.br(), \"LR\");\r\n            if(L) closestmix2(pt, L, vertexGSize.tl(), vertexGSize.bl(), \"LR\");\r\n        } catch(e){ console.error(\"intersect error\",e)}\r\n        // console.log('superstiti step1: (LTBR):', L, T, B, R);\r\n        console.log(\"intersect pt2.9:\");\r\n        const vicinanzaT = !T ? Number.POSITIVE_INFINITY : ((T.x - pt.x) * (T.x - pt.x)) + ((T.y - pt.y) * (T.y - pt.y));\r\n        const vicinanzaB = !B ? Number.POSITIVE_INFINITY : ((B.x - pt.x) * (B.x - pt.x)) + ((B.y - pt.y) * (B.y - pt.y));\r\n        const vicinanzaL = !L ? Number.POSITIVE_INFINITY : ((L.x - pt.x) * (L.x - pt.x)) + ((L.y - pt.y) * (L.y - pt.y));\r\n        const vicinanzaR = !R ? Number.POSITIVE_INFINITY : ((R.x - pt.x) * (R.x - pt.x)) + ((R.y - pt.y) * (R.y - pt.y));\r\n        const closest = Math.min(vicinanzaT, vicinanzaB, vicinanzaL, vicinanzaR);\r\n        console.log(\"intersect pt3:\", {vicinanzaT, vicinanzaB, vicinanzaL, vicinanzaR, closest});\r\n\r\n        // console.log( 'closest:', closest);\r\n        // succede quando pt e prevPt sono entrambi all'interno del rettangolo del vertice.\r\n        // L'edge non è visibile e il valore ritornato è irrilevante.\r\n\r\n        if (closest === Number.POSITIVE_INFINITY) {\r\n            /* top center */\r\n            pt = vertexGSize.tl();\r\n            pt.x += vertexGSize.w / 2; } else\r\n        if (closest === Number.POSITIVE_INFINITY) {\r\n            /* bottom center */\r\n            pt = vertexGSize.br();\r\n            pt.x -= vertexGSize.w / 2; } else\r\n        if (closest === vicinanzaT && T) {\r\n            closestmix(pt, T as any, vertexGSize.tl(), vertexGSize.tr(), \"TB\");\r\n            /*pt.y = T.y;\r\n            // if T.x is inside the top segment, take T.x, otherwise closest between size.tl.x and size.tr.x\r\n            if ((T.x <= tr.x && T.x >= tl.x)) pt.x = T.x;\r\n            else if (Math.abs(T.x-tr.x) < Math.abs(T.x-tl.x)) pt.x = tr.x;\r\n            else pt.x = tl.x;*/\r\n        }\r\n        if (closest === vicinanzaB) { closestmix(pt, B as any, vertexGSize.bl(), vertexGSize.br(), \"TB\"); } else\r\n        if (closest === vicinanzaR) { closestmix(pt, R as any, vertexGSize.tr(), vertexGSize.br(), \"LR\"); } else\r\n        if (closest === vicinanzaL) { closestmix(pt, L as any, vertexGSize.tl(), vertexGSize.bl(), \"LR\"); }\r\n\r\n        if (!gridAlign) { return pt; }\r\n        if (!pt) return null;\r\n        if (gridAlign.x && (pt === T || pt === B || isNaN(closest))) {\r\n            const floorX: number = Math.floor(pt.x / gridAlign.x) * gridAlign.x;\r\n            const ceilX: number = Math.ceil(pt.x / gridAlign.x) * gridAlign.x;\r\n            let closestX;\r\n            let farthestX;\r\n            if (Math.abs(floorX - pt.x) < Math.abs(ceilX - pt.x)) {\r\n                closestX = floorX; farthestX = ceilX;\r\n            } else { closestX = ceilX; farthestX = floorX; }\r\n\r\n            // todo: possibile causa del bug che non allinea punti fake a punti reali. nel calcolo realPT questo non viene fatto.\r\n            // if closest grid intersection is inside the vertex.\r\n            if (closestX >= vertexGSize.x && closestX <= vertexGSize.x + vertexGSize.w) { pt.x = closestX; } else\r\n                // if 2° closer grid intersection is inside the vertex.\r\n            if (closestX >= vertexGSize.x && closestX <= vertexGSize.x + vertexGSize.w) { pt.x = farthestX;\r\n                // if no intersection are inside the vertex (ignore grid)\r\n            } else { /* do nothing */ }\r\n        } else if (gridAlign.y && (pt === L || pt === R)) {\r\n            const floorY: number = Math.floor(pt.y / gridAlign.y) * gridAlign.y;\r\n            const ceilY: number = Math.ceil(pt.y / gridAlign.y) * gridAlign.y;\r\n            let closestY;\r\n            let farthestY;\r\n            if (Math.abs(floorY - pt.y) < Math.abs(ceilY - pt.y)) {\r\n                closestY = floorY; farthestY = ceilY;\r\n            } else { closestY = ceilY; farthestY = floorY; }\r\n\r\n            // if closest grid intersection is inside the vertex.\r\n            if (closestY >= vertexGSize.y && closestY <= vertexGSize.y + vertexGSize.h) { pt.y = closestY; } else\r\n                // if 2° closer grid intersection is inside the vertex.\r\n            if (closestY >= vertexGSize.y && closestY <= vertexGSize.y + vertexGSize.h) { pt.y = farthestY;\r\n                // if no intersection are inside the vertex (ignore grid)\r\n            } else { /* do nothing */ }\r\n        }\r\n        return pt; }\r\n\r\n\r\n    protected new(...args: any): this { return new GraphSize(...args) as this; }\r\n    protected makePoint(x: number, y: number): GraphPoint { return new GraphPoint(x, y) as GraphPoint; }\r\n\r\n    closestPoint(pt: GraphPoint): GraphPoint { return Geom.closestPoint(this, pt); }\r\n}\r\n\r\nRuntimeAccessibleClass.set_extend(RuntimeAccessibleClass, ISize);\r\nRuntimeAccessibleClass.set_extend(ISize, Size);\r\nRuntimeAccessibleClass.set_extend(ISize, GraphSize);\r\n\r\n\r\n\r\nexport type PositionStrTypes =\r\n    \"top\" | \"bottom\" | \"left\" | \"right\" | \"\" | // '' = x&y center, undefined = top\r\n    \"top right\" | \"top left\" | \"bottom left\" | \"bottom right\" |\r\n    \"right top\" | \"left top\" | \"left bottom\" | \"right bottom\" |\r\n    \"t\" | \"b\" | \"l\" | \"r\" |\r\n    \"tl\" | \"tr\" | \"bl\" | \"br\" |\r\n    \"lt\" | \"rt\" | \"lb\" | \"rb\";\r\n\r\n@RuntimeAccessible('PositionStr')\r\nexport class PositionStr{\r\n    public static cname = 'PositionStr';\r\n\r\n    x: -1 | 0 | 1; // left, centered, right\r\n    y: -1 | 0 | 1;\r\n    constructor(x?: PositionStr['x'], y? :PositionStr['y']){\r\n        this.x = x ?? 0;\r\n        this.y = y ?? -1;\r\n    }\r\n    toString(): PositionStrTypes{\r\n        return PositionStr.toPosString(this);\r\n    }\r\n    invert(x = true, y = true): this {\r\n        if (x) this.x = -this.x as 1|0|-1;\r\n        if (y) this.y = -this.y as 1|0|-1;\r\n        return this;\r\n    }\r\n    public static toPosString(o: PositionStr): PositionStrTypes{\r\n        let s: string;\r\n        if (o.y === -1) s = 't';\r\n        else if (o.y === 1) s = 'b';\r\n        else s = '';\r\n\r\n        if (o.x === -1) s += 'l';\r\n        else if (o.x === 1) s += 'r';\r\n        // else s = +'';\r\n        // if (!s) return \"c\";\r\n        return s as PositionStrTypes;\r\n    }\r\n    public static fromPosString(position?: PositionStrTypes): PositionStr{\r\n        let ret = new PositionStr(0, 0);\r\n        let posarr = (position ?? 't').split(' '); // .map(s=>s[0]);\r\n        for (let p of posarr)\r\n            switch (p) {\r\n                default:\r\n                case \"t\": case \"top\":                       ret.y = -1; break;\r\n                case \"b\": case \"bottom\":                    ret.y =  1; break;\r\n                case \"l\": case \"left\":                      ret.x = -1; break;\r\n                case \"r\": case \"right\":                     ret.x =  1; break;\r\n                case \"tl\": case \"lt\": case \"top left\":      ret.y = -1; ret.x = -1; break;\r\n                case \"tr\": case \"rt\": case \"top right\":     ret.y = -1; ret.x =  1; break;\r\n                case '': case 'c':                          ret.x =  0; ret.y =  0; break;\r\n                case \"bl\": case \"lb\": case \"bottom left\":   ret.y =  1; ret.x = -1; break;\r\n                case \"br\": case \"rb\": case \"bottom right\":  ret.y =  1; ret.x =  1; break;\r\n            }\r\n        return ret;\r\n    }\r\n    public static invertPosStr(pos?: PositionStrTypes): PositionStrTypes{\r\n        return PositionStr.fromPosString(pos).invert().toString() as any;\r\n    }\r\n\r\n    private static toFullLabelSingle(position: string | \"\" | \"c\" | \"t\" | \"b\" | \"l\" | \"r\"): \"top\" | \"bottom\" | \"left\" | \"right\" | \"center\" {\r\n        switch (position?.trim()[0]){\r\n            case 'c': case '': return 'center';\r\n            case 't': return 'top';\r\n            default: if (position.trim() === '') return 'center'; return 'bottom';\r\n            case 'b': return 'bottom';\r\n            case 'l': return 'left';\r\n            case 'r': return 'right';\r\n        }\r\n    }\r\n    // tl -> top left\r\n    static toSeparateFullLabels(position?: PositionStrTypes): string {\r\n        let pos = (position ?? 'b').trim();\r\n\r\n        if (pos.length === 2) {\r\n            return PositionStr.toFullLabelSingle(pos[0]) + ' ' + PositionStr.toFullLabelSingle(pos[1]);\r\n        } else if (pos.indexOf(' ')) { return pos.split(' ').map(s => PositionStr.toFullLabelSingle(s as any)).join(' '); }\r\n        else return PositionStr.toFullLabelSingle(pos[0]);\r\n        return \"\";\r\n    }\r\n}\r\n\r\n@RuntimeAccessible('Geom')\r\nexport class Geom extends RuntimeAccessibleClass {\r\n\r\n    static markings: Dictionary<string, HTMLElement> = {};\r\n    static unmark(key: string): boolean{\r\n        if (!Geom.markings[key]) return false;\r\n        let e = Geom.markings[key];\r\n        U.removeFromDom(e);\r\n        delete Geom.markings[key];\r\n        return true;\r\n    }\r\n    static markPt(key: string, pt: Point, color?: string, label?: string): HTMLElement{ return Geom.mark(key, pt.x, pt.y, 1, 1, color, label); }\r\n    static markSize(key: string, pt: Size, color?: string, label?: string): HTMLElement{ return Geom.mark(key, pt.x, pt.y, pt.w??1, pt.h??1, color, label); }\r\n    static mark(key: string, x: number, y: number, w: number=1, h: number=1, color: string='red', label: string=''): HTMLElement{\r\n        if (Geom.markings[key]) Geom.unmark(key);\r\n        let e: HTMLElement;\r\n        let pre = '<div class=\"debug-mark\" data-key=\"'+key+'\" data-label=\"'+label+'\" style=\"position: absolute; z-index:99999; left:'+x+'px; top:'+y+'px; width: '+w+'px; height: '+h+'px;';\r\n        let post = '\"/>';\r\n        if (w + h > 2) {\r\n            e = U.toHtml(pre+'border-radius:0; background: transparent;'+post) as HTMLElement;\r\n        }\r\n        else {\r\n            e = U.toHtml(pre+'border-radius:100%; background: '+color+'; outline: 1px solid '+color+'; outline-offset: 5px;'+post) as HTMLElement;\r\n        }\r\n        document.body.append(e);\r\n        Geom.markings[key] = e;\r\n        return e;\r\n    }\r\n    // warning: nodes from other iframes will say are not instance from Element of the current frame, in that case need duck typing.\r\n    public static isHtmlNode(element: any): element is Element {\r\n        return element instanceof Element || element instanceof HTMLDocument || element instanceof SVGElement;\r\n    }\r\n\r\n\r\n    static isPositiveZero(m: number): boolean {\r\n        if (!!Object.is) { return Object.is(m, +0); }\r\n        return (1 / m === Number.POSITIVE_INFINITY); }\r\n\r\n    static isNegativeZero(m: number): boolean {\r\n        if (!!Object.is) { return Object.is(m, -0); }\r\n        return (1 / m === Number.NEGATIVE_INFINITY); }\r\n\r\n    static TanToRadian(n: number): number { return Geom.DegreeToRad(Geom.TanToDegree(n)); }\r\n    static TanToDegree(n: number): number {\r\n        if (Geom.isPositiveZero(n)) { return 0; }\r\n        if (n === Number.POSITIVE_INFINITY) { return 90; }\r\n        if (Geom.isNegativeZero(n)) { return 180; }\r\n        if (n === Number.POSITIVE_INFINITY) { return 270; }\r\n        return Geom.RadToDegree((window as any).Math.atan(n)); }\r\n\r\n    static RadToDegree(radians: number): number { return Geom.radToDeg(radians); }\r\n    static DegreeToRad(degree: number): number { return Geom.degToRad(degree); }\r\n    static radToDeg(radians: number): number { return radians * (180 / Math.PI); }\r\n    static degToRad(degree: number): number { return degree * (Math.PI / 180); }\r\n\r\n\r\n\r\n    private static GeomTolerance = 0; // 0.001;\r\n    static isOnEdge(pt: GraphPoint, shape: GraphSize, tolerance: number = Geom.GeomTolerance): boolean {\r\n        return Geom.isOnHorizontalEdges(pt, shape, tolerance) || Geom.isOnVerticalEdges(pt, shape, tolerance); }\r\n\r\n    static isOnVerticalEdges(pt: GraphPoint, shape: GraphSize, tolerance: number = Geom.GeomTolerance): boolean {\r\n        return Geom.isOnLeftEdge(pt, shape, tolerance) || Geom.isOnRightEdge(pt, shape, tolerance); }\r\n\r\n    static isOnHorizontalEdges(pt: GraphPoint, shape: GraphSize, tolerance: number = Geom.GeomTolerance): boolean {\r\n        return Geom.isOnTopEdge(pt, shape, tolerance) || Geom.isOnBottomEdge(pt, shape, tolerance); }\r\n\r\n    static isOnRightEdge(pt: GraphPoint, shape: GraphSize, tolerance: number = Geom.GeomTolerance): boolean {\r\n        if (!pt || !shape) { return false; }\r\n        if (tolerance) return Math.abs(pt.x - (shape.x + shape.w)) < tolerance\r\n            && ( pt.y - shape.y > tolerance && pt.y - (shape.y + shape.h) < tolerance);\r\n        return (pt.x === shape.x + shape.w) && (pt.y >= shape.y && pt.y <= shape.y + shape.h);\r\n    }\r\n\r\n    static isOnLeftEdge(pt: GraphPoint, shape: GraphSize, tolerance: number = Geom.GeomTolerance): boolean {\r\n        if (!pt || !shape) { return false; }\r\n        if (tolerance) return Math.abs(pt.x - shape.x) < tolerance\r\n            && (pt.y - shape.y > tolerance && pt.y - (shape.y + shape.h) < tolerance);\r\n        return (pt.x === shape.x) && (pt.y >= shape.y && pt.y <= shape.y + shape.h);\r\n    }\r\n\r\n    static isOnTopEdge(pt: GraphPoint, shape: GraphSize, tolerance: number = Geom.GeomTolerance): boolean {\r\n        if (!pt || !shape) { return false; }\r\n        if (tolerance) return Math.abs(pt.y - shape.y) < tolerance\r\n            && (pt.x - shape.x > tolerance && pt.x - (shape.x + shape.w) < tolerance);\r\n        return (pt.y === shape.y) && (pt.x >= shape.x && pt.x <= shape.x + shape.w);\r\n    }\r\n\r\n    static isOnBottomEdge(pt: GraphPoint, shape: GraphSize, tolerance?: number): boolean {\r\n        if (!pt || !shape) { return false; }\r\n        if (tolerance) return Math.abs(pt.y - shape.y + shape.h) < tolerance\r\n            && (pt.x - shape.x > tolerance && pt.x - (shape.x + shape.w) < tolerance);\r\n        return (pt.y === shape.y + shape.h) && (pt.x >= shape.x && pt.x <= shape.x + shape.w);\r\n    }\r\n\r\n    static closestPoint(size: GraphSize, pt: GraphPoint): GraphPoint {\r\n        let top_closest = Geom.closestPointToSegment(size.tl(), size.tr(), pt);\r\n        let bot_closest = Geom.closestPointToSegment(size.bl(), size.br(), pt);\r\n        let left_closest = Geom.closestPointToSegment(size.tl(), size.bl(), pt);\r\n        let right_closest = Geom.closestPointToSegment(size.tr(), size.br(), pt);\r\n\r\n        let top_distance = top_closest.distanceFromPoint(pt, false);\r\n        let bot_distance = bot_closest.distanceFromPoint(pt, false);\r\n        let left_distance = left_closest.distanceFromPoint(pt, false);\r\n        let right_distance = right_closest.distanceFromPoint(pt, false);\r\n\r\n        let min_distance = Math.min(top_distance, bot_distance, left_distance, right_distance);\r\n        if (min_distance === top_distance) return top_closest;\r\n        if (min_distance === bot_distance) return bot_closest;\r\n        if (min_distance === left_distance) return left_closest;\r\n        return right_closest;\r\n    }\r\n    static isMinusZero(number: number) {return 1/number == -Infinity;}\r\n    static closestPointToSegment(segStart: GraphPoint, segEnd:GraphPoint, pt: GraphPoint): GraphPoint{\r\n        // 1) find equation of line passing for start, end.\r\n        // 2) then find all perpendicular lines, then the perpendicular line that pass through pt\r\n        // 3) find intersection between Line(s,e) and line of point 2.\r\n        // 4A) IF intersection is part of segment(s,e) that is closest.\r\n        // 4B) ELSE, one of the 2 extremes of the segment is closest.\r\n\r\n        let x_intersect: number, y_intersect: number;\r\n        let s = segStart;\r\n        let e = segEnd;\r\n        let mse = (e.y - s.y) / (e.x - s.x);\r\n        if (mse === Number.POSITIVE_INFINITY || mse === Number.NEGATIVE_INFINITY) {\r\n            // s and e are both on the same y vertical line (same x)      // new GraphPoint(segStart.x, pt.y);\r\n            x_intersect = segStart.x;\r\n            y_intersect = pt.y;\r\n            // 1), 2), 3) all done shortcut\r\n        } else if (mse === 0 || Geom.isNegativeZero(mse)) {\r\n            // s and e are both on the same x horizontal line (same y)    // new GraphPoint(pt.x, segStart.y);\r\n            x_intersect = pt.x;\r\n            y_intersect = segStart.y\r\n            // 1), 2), 3) all done shortcut\r\n        }\r\n        else {\r\n            let q = s.y - mse*s.x; // y = mx + q           q = y-mx\r\n            // 1) done\r\n            let pmse = -1/mse; // perpendicular to mse\r\n            let pq = pt.y - pmse*pt.x;\r\n            // 2) done\r\n            //  m1 * x + q1 = y    -->   m1 * x + q1 = m2 * x + q2    -->    (m1-m2)x = q2-q1      -->     x=(q2-q1)/(m1-m2)\r\n            x_intersect = (pq-q)/(mse-pmse);\r\n            y_intersect = mse*(x_intersect) + q; //  y = mx +q\r\n            // 3) done\r\n        }\r\n\r\n        let maxX: number, minX: number;\r\n        let maxY: number, minY: number;\r\n        if (s.x > e.x) { maxX = s.x; minX = e.x; } else {  maxX = e.x; minX = s.x; }\r\n        if (s.y > e.y) { maxY = s.y; minY = e.y; } else {  maxY = e.y; minY = s.y; }\r\n        if (x_intersect >= minX && x_intersect <= maxX && y_intersect >= minY && y_intersect <= maxY) return new GraphPoint(x_intersect, y_intersect);\r\n        // 4A) IF done\r\n\r\n        let sdist = (s.x - x_intersect)**2 + (s.y - y_intersect)**2;  // actual distance is sqrt() of this, but i just need to find closest, not correct distance.\r\n        let edist = (e.x - x_intersect)**2 + (e.y - y_intersect)**2;\r\n        return (sdist < edist) ? new GraphPoint(s.x, s.y) : new GraphPoint(e.x, e.y);\r\n        // 4B) ELSE done\r\n    }\r\n\r\n    static lineToSegmentIntersection(segStart: GraphPoint, segEnd: GraphPoint, q: number, m: number): GraphPoint | undefined {\r\n        if (segStart.x === segEnd.x){\r\n            let y = m*segStart.x + q;\r\n            if (Geom.isNumberBetween(y, segStart.y, segEnd.y)) return new GraphPoint(segStart.x, y);\r\n            else return undefined;\r\n        }\r\n        else if (segStart.y === segEnd.y) {\r\n            let x = (segStart.y-q)/m;\r\n            if (Geom.isNumberBetween(x, segStart.x, segEnd.x)) return new GraphPoint(x, segStart.y);\r\n            else return undefined;\r\n            //\r\n        }\r\n\r\n        let m2 = segStart.getM(segEnd);\r\n        let q2 = IPoint.getQ(segStart, segEnd);\r\n        if (m === m2) {\r\n            if (q2 === q) return segStart; // line and segment coincident\r\n            return undefined; // parallel\r\n        }\r\n        let intersect = Geom.lineToLineIntersection(m, q, m2, q2);\r\n        if (intersect && Geom.isNumberBetween(intersect.x, segStart.x, segEnd.x) && Geom.isNumberBetween(intersect.y, segStart.y, segEnd.y)) return intersect;\r\n        else return undefined;\r\n    }\r\n\r\n    static isNumberBetween(target: number, s: number, e: number): boolean {\r\n        let max = Math.max(s, e);\r\n        let min = Math.min(s, e);\r\n        return target >= min && target <= max; }\r\n\r\n    private static lineToLineIntersection(m: number, q: number, m2: number, q2: number, retIfParallel: any = undefined, retIfCoincident: any = undefined): undefined | GraphPoint {\r\n        if (m === m2) {\r\n            if (q === q2) return retIfCoincident;\r\n            return retIfParallel;\r\n        }\r\n        if (m === Number.POSITIVE_INFINITY || m === Number.NEGATIVE_INFINITY || m2 === Number.POSITIVE_INFINITY || m2 === Number.NEGATIVE_INFINITY) {\r\n            // m or m2 are a vertical line, Q must be invalid too and i don't have a single point of the line.\r\n            // it's actually infinite possible vertical parallel lines.\r\n            return undefined;\r\n        }\r\n        /*\r\n            y = mx + q\r\n            y = nx + w\r\n            -->\r\n            mx + q = nx + w\r\n            -->\r\n            mx - nx = w - q\r\n            -->\r\n            x (m - n) = w - q\r\n            -->\r\n            x = (w - q)/(m - n)\r\n        */\r\n        let x = (q2-q)/(m-m2);\r\n        return new GraphPoint(x, m*x+q); }\r\n    // @param start, end: are for determining direction. every m is a line that can be seen in 2 direction\r\n    static mToRad(m: number, start: GraphPoint, end: GraphPoint): number {\r\n        let rad: number;\r\n        if (start.x === end.x) {\r\n            rad = (start.y < end.y) ? Math.PI * 3/2 :  Math.PI / 2;\r\n        } else {\r\n            // console.log(\"rad diagonal\", {base:  Math.atan(m), add: start.x > end.x, sx: start.x, ex: end.x});\r\n            rad = Math.atan(m) + (start.x > end.x ? 0 : Math.PI);\r\n        }\r\n        return rad; }\r\n\r\n    // intersect a rectangle with a line or segment (if end parameter is specified)\r\n    // @return: [0, 2] intersections\r\n    static lineToSizeIntersection_TODO(size: GraphSize, m: number, startLine: GraphPoint, endIfSegment?: GraphPoint): [] | [GraphPoint] | [GraphPoint, GraphPoint] {\r\n         // todo: use GraphSize.closestIntersection which is close. it is size-segment returning only the closest intersection\r\n        return [];\r\n    }\r\n}\r\n\r\nRuntimeAccessibleClass.set_extend(RuntimeAccessibleClass, Geom);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}