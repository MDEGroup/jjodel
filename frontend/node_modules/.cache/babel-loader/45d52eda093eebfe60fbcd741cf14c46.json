{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DefExpression = void 0;\nvar Expression_1 = require(\"./Expression\");\n/**\n * @oclSpecification\n * The Let expression allows a variable to be used in one OCL expression.\n * To enable reuse of variables/operations over multiple OCL expressions one can use a Constraint with the stereotype «definition», in which helper variables/operations are defined.\n * This «definition» Constraint must be attached to a Classifier and may only contain variable and/or operation definitions, nothing else.\n * All variables and operations defined in the «definition» constraint are known in the same context as where any property of the Classifier can be used.\n * Such variables and operations are attributes and operations with stereotype «OclHelper» of the classifier.\n * They are used in an OCL expression in exactly the same way as normal attributes or operations are used.\n * The syntax of the attribute or operation definitions is similar to the Let expression, but each attribute and operation definition is prefixed with the keyword ‘def’ as shown below.\n *\n * @oclExample context Person def:\n *     income : Integer = self.job.salary->sum()\n */\nvar DefExpression = /** @class */function (_super) {\n  __extends(DefExpression, _super);\n  function DefExpression(key, value) {\n    var _this = _super.call(this) || this;\n    _this.key = key;\n    _this.value = value;\n    return _this;\n  }\n  DefExpression.prototype.getKey = function () {\n    return this.key;\n  };\n  DefExpression.prototype.getValue = function () {\n    return this.value;\n  };\n  DefExpression.prototype.evaluate = function (visitor, localVariables) {\n    visitor.getObjectToEvaluate()[this.getKey()] = this.getValue().evaluate(visitor, localVariables);\n  };\n  return DefExpression;\n}(Expression_1.Expression);\nexports.DefExpression = DefExpression;","map":{"version":3,"names":["Expression_1","require","DefExpression","_super","__extends","key","value","_this","call","prototype","getKey","getValue","evaluate","visitor","localVariables","getObjectToEvaluate","Expression","exports"],"sources":["../../../lib/components/expressions/DefExpression.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAAA,YAAA,GAAAC,OAAA;AAEA;;;;;;;;;;;;;AAaA,IAAAC,aAAA,0BAAAC,MAAA;EAAmCC,SAAA,CAAAF,aAAA,EAAAC,MAAA;EAI/B,SAAAD,cAAYG,GAAG,EAAEC,KAAK;IAAtB,IAAAC,KAAA,GACIJ,MAAA,CAAAK,IAAA,MAAO;IACPD,KAAI,CAACF,GAAG,GAAGA,GAAG;IACdE,KAAI,CAACD,KAAK,GAAGA,KAAK;;EACtB;EAEAJ,aAAA,CAAAO,SAAA,CAAAC,MAAM,GAAN;IACI,OAAO,IAAI,CAACL,GAAG;EACnB,CAAC;EAEDH,aAAA,CAAAO,SAAA,CAAAE,QAAQ,GAAR;IACI,OAAO,IAAI,CAACL,KAAK;EACrB,CAAC;EAEDJ,aAAA,CAAAO,SAAA,CAAAG,QAAQ,GAAR,UAASC,OAA4B,EAAEC,cAAoB;IACvDD,OAAO,CAACE,mBAAmB,EAAE,CAAC,IAAI,CAACL,MAAM,EAAE,CAAC,GAAG,IAAI,CAACC,QAAQ,EAAE,CACzDC,QAAQ,CAACC,OAAO,EAAEC,cAAc,CAAC;EAC1C,CAAC;EACL,OAAAZ,aAAC;AAAD,CAAC,CAtBkCF,YAAA,CAAAgB,UAAU;AAAhCC,OAAA,CAAAf,aAAA,GAAAA,aAAA"},"metadata":{},"sourceType":"script"}