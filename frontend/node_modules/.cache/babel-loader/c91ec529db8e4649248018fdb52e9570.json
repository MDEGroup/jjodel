{"ast":null,"code":"var _dec, _class, _class2, _dec2, _class3, _dec3, _class5, _dec4, _class7, _class8;\nimport { Asterisk, BEGIN, Circle, Constructors, CoordinateMode, CreateElementAction, Cross, DAttribute, DClass, Decagon, DecoratedStar, Defaults, DEnumerator, DEnumLiteral, DModel, DObject, DOperation, DPackage, DPointerTargetable, DReference, DValue, DViewElement, DViewPoint, DVoidEdge, Edge, EdgeBendingMode, EdgeHead, EdgePoint, Ellipse, END, Enneagon, Field, Graph, GraphPoint, GraphSize, GraphVertex, Heptagon, Hexagon, Log, LPointerTargetable, Octagon, packageDefaultSize, Pentagon, Pointers, Polygon, Rectangle, RuntimeAccessible, RuntimeAccessibleClass, SetRootFieldAction, ShortAttribETypes, SimpleStar, Square, store, Trapezoid, Triangle, U, Vertex } from '../joiner';\nimport { DV } from \"../common/DV\";\n//import {Selected} from \"../joiner/types\";\nimport { DefaultEClasses, ShortDefaultEClasses } from \"../common/U\";\nimport { GraphElements } from '../joiner/components';\nconsole.warn('ts loading store');\n\n// @RuntimeAccessible\n// NB: le voci che iniziano con '_' sono personali e non condivise\n\n// export const statehistory_obsoleteidea: {past: IStore[], current: IStore, future: IStore[]} = { past:[], current: null, future:[] } as any;\nexport const statehistory = {\n  globalcanundostate: false\n};\nwindow.statehistory = statehistory;\nexport let DState = (_dec = RuntimeAccessible('DState'), _dec(_class = (_class2 = class DState extends DPointerTargetable {\n  constructor() {\n    super(...arguments);\n    this.env = process.env;\n    this.debug = false;\n    this.logs = [];\n    this.models = [];\n    this.viewelements = [];\n    this.stackViews = [];\n    this.idlookup = {};\n    this.graphs = [];\n    this.voidvertexs = [];\n    this.vertexs = [];\n    this.graphvertexs = [];\n    this.edgepoints = [];\n    this.extEdges = [];\n    this.refEdges = [];\n    this.classifiers = [];\n    this.enumerators = [];\n    this.packages = [];\n    this.primitiveTypes = [];\n    this.attributes = [];\n    this.enumliterals = [];\n    this.references = [];\n    this.classs = [];\n    this.operations = [];\n    this.parameters = [];\n    this.ecoreClasses = [];\n    this.returnTypes = [];\n    this.isEdgePending = {\n      user: '',\n      source: ''\n    };\n    this.contextMenu = {\n      display: false,\n      x: 0,\n      y: 0,\n      nodeid: ''\n    };\n    this.objects = [];\n    this.values = [];\n    this._lastSelected = void 0;\n    this.users = [];\n    this.viewpoint = '';\n    this.viewpoints = [];\n    this.m2models = [];\n    this.m1models = [];\n    this.isLoading = false;\n    this.projects = [];\n    this.collaborativeSession = false;\n  }\n  static new() {\n    return new Constructors(new DState('dwc'), undefined, false, undefined).DPointerTargetable().DState().end();\n  }\n\n  //damiano: this might make problems on load\n\n  // Pointer<DModel, 0, 'N'>[] = [];\n\n  // users: Dictionary<DocString<Pointer<DUser>>, UserState> = {};\n  // collaborators: UserState[];\n\n  //// DClass section to fill\n\n  //my addon\n\n  /// DClass section end\n\n  // private, non-shared fields\n\n  static init(store) {\n    BEGIN();\n\n    // const viewpoint = DViewPoint.new('Default', '', undefined, '', '', '', [], '', 0, false);\n    const viewpoint = DViewPoint.new2('Default', '', () => {}, true, Defaults.viewpoints[0]);\n    Log.exDev(viewpoint.id !== Defaults.viewpoints[0], \"wrong vp id initialization\", {\n      viewpoint,\n      def: Defaults.viewpoints\n    });\n    const views = makeDefaultGraphViews(viewpoint.id);\n    console.log('vvviewsss', views);\n    for (let view of views) {\n      CreateElementAction.new(view);\n    }\n    for (let primitiveType of Object.values(ShortAttribETypes)) {\n      let dPrimitiveType;\n      if (primitiveType === ShortAttribETypes.EVoid) continue; // or make void too without primitiveType = true, but with returnType = true?\n      dPrimitiveType = DClass.new(primitiveType, false, false, true, false, '', undefined, true, 'Pointer_' + primitiveType.toUpperCase());\n      SetRootFieldAction.new('primitiveTypes', dPrimitiveType.id, '+=', true);\n    }\n\n    /// creating m3 \"Object\" metaclass\n    let dObject = DClass.new(ShortDefaultEClasses.EObject, false, false, false, false, '', undefined, true, 'Pointer_' + ShortDefaultEClasses.EObject.toUpperCase());\n    SetRootFieldAction.new('ecoreClasses', dObject.id, '+=', true);\n    for (let defaultEcoreClass of Object.values(DefaultEClasses)) {\n      // todo: creat everyone and not just object, make the whole m3 populated.\n    }\n    let Graphs = {\n      Graph: Graph,\n      GraphVertex: GraphVertex\n    };\n    let Edges = {\n      Edge: Edge,\n      EdgePoint: EdgePoint\n    };\n    let Fields = {\n      Field: Field\n      // GraphElement: GraphElement,\n    };\n    let Vertexes = {\n      Vertex: Vertex,\n      // VoidVertex: VoidVertex,\n      Circle: Circle,\n      Polygon: Polygon,\n      Cross: Cross,\n      Asterisk: Asterisk,\n      //Star: Star,\n      SimpleStar: SimpleStar,\n      DecoratedStar: DecoratedStar,\n      Triangle: Triangle,\n      Square: Square,\n      Pentagon: Pentagon,\n      Hexagon: Hexagon,\n      Heptagon: Heptagon,\n      Octagon: Octagon,\n      Enneagon: Enneagon,\n      Decagon: Decagon,\n      // Nonagon: Nonagon, Septagon: Septagon,\n      // Diamond: Diamond, Rhombus: Rhombus,\n      Ellipse: Ellipse,\n      Rectangle: Rectangle,\n      Trapezoid: Trapezoid\n    };\n    U.objectMergeInPlace(GraphElements, Graphs, Edges, Vertexes, Fields, {\n      Graphs,\n      Edges,\n      Vertexes,\n      Fields\n    });\n    let tmp = Object.values(GraphElements);\n    for (let k in tmp) {\n      let v = tmp[k];\n      Log.exDev(!v, 'wrong import order', {\n        k,\n        v,\n        GraphElements,\n        tmp\n      });\n      if (!v.cname) continue; // it is a subdictionary\n      GraphElements[v.cname] = GraphElements[k] = v;\n    }\n    setTimeout(() => {}, 1);\n    END();\n  }\n}, _class2.subclasses = [], _class2._extends = [], _class2)) || _class);\nfunction makeDefaultGraphViews(vp) {\n  let modelView = DViewElement.new('Model', DV.modelView(), undefined, '', '', '', [DModel.cname], '', 1, false, true, vp);\n  modelView.draggable = false;\n  modelView.resizable = false;\n  modelView.oclCondition = 'context DModel inv: true';\n  modelView.usageDeclarations = \"(ret)=>{\\n\" + \"// ** preparations and default behaviour here ** //\\n\" + \"//ret.data = data\\n\" + \"ret.node = node\\n\" + \"ret.view = view\\n\" + \"// custom preparations:\\n\" + \"let packages = data && data.isMetamodel ? data.packages : [];\\n\" + \"let suggestedEdges = data?.suggestedEdges || {};\\n\" + \"// data, node, view are dependencies by default. delete them above if you want to remove them.\\n\" + \"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\" + \"// ** declarations here ** //\\n\" + \"ret.firstPackage = packages[0]\\n\" + \"ret.otherPackages = packages.slice(1)\\n\" + \"ret.m1Objects = data && !data.isMetamodel ? data.allSubObjects : []\\n\" + \"ret.refEdges = (suggestedEdges.reference || []).filter(e => !e.vertexOverlaps)\\n\" + \"ret.extendEdges = (suggestedEdges.extend || []).filter(e => !e.vertexOverlaps)\\n\" + \"}\";\n  let packageView = DViewElement.new('Package', DV.packageView(), undefined, '', '', '', [DPackage.cname], '', 1, false, true, vp);\n  packageView.defaultVSize = packageDefaultSize;\n  packageView.oclCondition = `context DPackage inv: true`;\n\n  /*\r\n      const defaultPackage: DViewElement = DViewElement.new('DefaultPackage', DV.defaultPackage(), undefined, '', '', '', [], '', 1, false);\r\n      defaultPackage.defaultVSize = new GraphSize(0, 0);\r\n      defaultPackage.explicitApplicationPriority = 2;\r\n      defaultPackage.oclCondition = `context DPackage inv: self.name = 'default'`;\r\n      defaultPackage.draggable = false; defaultPackage.resizable = false;*/\n\n  let classView = DViewElement.new('Class', DV.classView(), undefined, '', '', '', [DClass.cname], '', 1, false, true, vp);\n  classView.adaptWidth = true;\n  classView.adaptHeight = true;\n  classView.oclCondition = 'context DClass inv: true';\n  let enumView = DViewElement.new('Enum', DV.enumeratorView(), undefined, '', '', '', [DEnumerator.cname], '', 1, false, true, vp);\n  enumView.adaptWidth = true;\n  enumView.adaptHeight = true;\n  enumView.oclCondition = 'context DEnumerator inv: true';\n  let attributeView = DViewElement.new('Attribute', DV.attributeView(), undefined, '', '', '', [DAttribute.cname], '', 1, false, true, vp);\n  attributeView.oclCondition = 'context DAttribute inv: true';\n  let referenceView = DViewElement.new('Reference', DV.referenceView(), undefined, '', '', '', [DReference.cname], '', 1, false, true, vp);\n  referenceView.oclCondition = 'context DReference inv: true';\n  let operationView = DViewElement.new('Operation', DV.operationView(), undefined, '', '', '', [DOperation.cname], '', 1, false, true, vp);\n  operationView.oclCondition = 'context DOperation inv: true';\n  let literalView = DViewElement.new('Literal', DV.literalView(), undefined, '', '', '', [DEnumLiteral.cname], '', 1, false, true, vp);\n  literalView.oclCondition = 'context DEnumLiteral inv: true';\n  let objectView = DViewElement.new('Object', DV.objectView(), undefined, '', '', '', [DObject.cname], '', 1, false, true, vp);\n  objectView.adaptWidth = true;\n  objectView.adaptHeight = true;\n  objectView.oclCondition = 'context DObject inv: true';\n  objectView.usageDeclarations = \"(ret)=>{\\n\" + \"// ** preparations and default behaviour here ** //\\n\" + \"ret.data = data\\n\" + \"ret.node = node\\n\" + \"ret.view = view\\n\" + \"// data, node, view are dependencies by default. delete them above if you want to remove them.\\n\" + \"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\" + \"// ** declarations here ** //\\n\" + \"ret.metaclassName = data.instanceof?.name || \\\"Object\\\"\\n\" + \"ret.features = data.features\\n\" + \"}\";\n  let valuecolormap = {};\n  valuecolormap[ShortAttribETypes.EBoolean] = \"orange\";\n  valuecolormap[ShortAttribETypes.EByte] = \"orange\";\n  valuecolormap[ShortAttribETypes.EShort] = \"orange\";\n  valuecolormap[ShortAttribETypes.EInt] = \"orange\";\n  valuecolormap[ShortAttribETypes.ELong] = \"orange\";\n  valuecolormap[ShortAttribETypes.EFloat] = \"orange\";\n  valuecolormap[ShortAttribETypes.EDouble] = \"orange\";\n  valuecolormap[ShortAttribETypes.EDate] = \"green\";\n  valuecolormap[ShortAttribETypes.EString] = \"green\";\n  valuecolormap[ShortAttribETypes.EChar] = \"green\";\n  valuecolormap[ShortAttribETypes.EVoid] = \"gray\";\n  let valueView = DViewElement.new('Value', DV.valueView(), undefined, '', '', '', [DValue.cname], '', 1, false, true, vp);\n  valueView.oclCondition = 'context DValue inv: true';\n  valueView.usageDeclarations = \"(ret)=>{ // scope: data, node, view, state, \\n\" + \"// ** preparations and default behaviour here ** //\\n\" + \"// ret.data = data // object does not need it because it displays only: features (listed individually) and name input being a subcomponent\\n\" + \"ret.node = node\\n\" + \"ret.view = view\\n\" + \"// todo: put only first N values as dependency and show only those.\\n\" + \"// data, node, view are dependencies by default. delete them above if you want to remove them.\\n\" + \"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\" + \"// ** declarations here ** //\\n\" + \"ret.instanceofname = data.instanceof?.name\\n\" + \"ret.valuesString = data.valuesString()\\n\" + \"ret.typeString = data.typeString\\n\" + \"}\";\n  let voidView = DViewElement.new('Void', DV.voidView(), undefined, '', '', '', [DObject.cname], '', 1, false, true, vp);\n  voidView.appliableToClasses = [\"VoidVertex\"];\n  voidView.explicitApplicationPriority = 2;\n  voidView.adaptWidth = true;\n  voidView.adaptHeight = true;\n  let edgePointView = DViewElement.new('EdgePoint', DV.edgePointView(), new GraphSize(0, 0, 25, 25), '', '', '', [], '', 1, false, true, vp);\n  edgePointView.appliableTo = 'edgePoint';\n  edgePointView.resizable = false;\n  // edgePointView.edgePointCoordMode = CoordinateMode.relativePercent;\n  edgePointView.edgePointCoordMode = CoordinateMode.absolute;\n  let edgeViews = [];\n  let size0 = new GraphPoint(0, 0),\n    size1 = new GraphPoint(20, 20),\n    size2 = new GraphPoint(20, 20); // todo: riportalo in 40,20\n  let edgeConstants = \"(ret)=>{\\n\" + \"// ** preparations and default behaviour here ** //\\n\" + \"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\" + \"// ** declarations here ** //\\n\" + \"   ret.strokeColor = 'gray'\\n\" + \"   ret.strokeWidth = '2px'\\n\" + \"   ret.strokeColorHover = 'black'\\n\" + \"   ret.strokeColorLong = 'gray'\\n\" + \"   ret.strokeLengthLimit = 300\\n\" + \"   ret.strokeWidthHover = '4px'\\n\" + \"}\";\n  let edgePrerenderFunc = \"(ret)=>{\\n\" + \"// ** preparations and default behaviour here ** //\\n\" + \"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\" + \"// ** declarations here ** //\\n\" + \"ret.segments = edge.segments\\n\" + \"}\";\n  let edgeUsageDeclarations = \"(ret)=>{\\n\" + \"// ** preparations and default behaviour here ** //\\n\" + \"// ret.data = data\\n\" + \"ret.edgeview = edge.view.id\\n\" + \"ret.view = view\\n\" + \"// data, edge, view are dependencies by default. delete them above if you want to remove them.\\n\" + \"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\" + \"// ** declarations here ** //\\n\" + \"ret.start = edge.start\\n\" + \"ret.end = edge.end\\n\" + \"}\";\n  function makeEdgeView(name, type, headSize, tailSize, dashing) {\n    let ev = DViewElement.new2(\"Edge\" + name, DV.edgeView(type, headSize ? DV.svgHeadTail(\"Head\", type) : \"\", tailSize ? DV.svgHeadTail(\"Tail\", type) : \"\", dashing ? \"10.5,9,0,0\" : undefined), v => {\n      v.explicitApplicationPriority = 2;\n      v.bendingMode = EdgeBendingMode.Line;\n      v.appliableToClasses = [DVoidEdge.cname];\n      v.edgeHeadSize = headSize || size0;\n      v.edgeTailSize = tailSize || size0;\n      v.constants = edgeConstants;\n      v.usageDeclarations = edgeUsageDeclarations;\n      v.preRenderFunc = edgePrerenderFunc;\n      v.appliableTo = 'edge'; // todo: remove the entire property?\n    }, false, vp, 'Pointer_ViewEdge' + name);\n    edgeViews.push(ev);\n    return ev;\n  }\n  makeEdgeView(\"Association\", EdgeHead.reference, size1, undefined, false);\n  makeEdgeView(\"Dependency\", EdgeHead.reference, size1, undefined, true);\n  makeEdgeView(\"Inheritance\", EdgeHead.extend, size1, undefined, false);\n  makeEdgeView(\"Aggregation\", EdgeHead.aggregation, undefined, size2, false);\n  makeEdgeView(\"Composition\", EdgeHead.composition, undefined, size2, false);\n\n  // edgeView.forceNodeType=\"Edge\"\n\n  /*\r\n  for (let ev of edgeViews){\r\n      ev.explicitApplicationPriority = 2;\r\n      ev.bendingMode = EdgeBendingMode.Line;\r\n      ev.subViews = [edgePointView.id];\r\n  }*/\n  // nb: Error is not a view, just jsx. transform it in a view so users can edit it\n\n  return [modelView, packageView,\n  //defaultPackage,\n  classView, enumView, attributeView, referenceView, operationView, literalView, objectView, valueView, voidView, ...edgeViews, edgePointView];\n}\nexport let ViewPointState = (_dec2 = RuntimeAccessible('ViewPointState'), _dec2(_class3 = class ViewPointState extends DPointerTargetable {\n  constructor() {\n    super(...arguments);\n    this.name = '';\n  }\n}) || _class3);\n\n// to delete?\nexport let ModelStore = (_dec3 = RuntimeAccessible('ModelStore'), _dec3(_class5 = class ModelStore {\n  constructor() {\n    this._meta = void 0;\n    this.instances = void 0;\n  }\n  // getter e setter senza proxy\n  get meta() {\n    return this._meta;\n  }\n  set meta(value) {\n    this._meta = value;\n  }\n}) || _class5);\nexport let LState = (_dec4 = RuntimeAccessible('LState'), _dec4(_class7 = (_class8 = class LState extends LPointerTargetable {\n  constructor() {\n    super(...arguments);\n    this.__raw = void 0;\n    this.contextMenu = void 0;\n    this.user = void 0;\n    this.debug = void 0;\n    this.room = void 0;\n    this._lastSelected = void 0;\n    this.idlookup = void 0;\n  }\n  // return type is wrong, but have to extend the static method of RuntimeAccessibleClass which is completely different and returns a class constructor.\n  static get() {\n    return LState.wrap(store.getState());\n  }\n  get_contextMenu(c) {\n    return c.data.contextMenu;\n  }\n  // get_user(c: Context): this[\"user\"] { return LState.wrap(c.data.user) as LUser; }\n  get_debug(c) {\n    return c.data.debug;\n  }\n  get_idlookup(c) {\n    return c.data.idlookup;\n  }\n  get__lastSelected(c) {\n    let ls = c.data._lastSelected;\n    return ls && {\n      modelElement: LState.wrap(ls.modelElement),\n      node: LState.wrap(ls.node),\n      view: LState.wrap(ls.view)\n    };\n  }\n  _defaultCollectionGetter(c, k) {\n    return LPointerTargetable.fromPointer(c.data[k]);\n  }\n  _defaultGetter(c, k) {\n    //console.log(\"default Getter\");\n    let v = c.data[k];\n    if (Array.isArray(v)) {\n      if (v.length === 0) return [];else if (Pointers.isPointer(v[0])) return this._defaultCollectionGetter(c, k);\n      return v;\n    }\n    return v;\n  }\n}, _class8.subclasses = [], _class8._extends = [], _class8.structure = void 0, _class8.singleton = void 0, _class8)) || _class7);\nRuntimeAccessibleClass.set_extend(DPointerTargetable, DState);\nRuntimeAccessibleClass.set_extend(LPointerTargetable, LState);","map":{"version":3,"names":["Asterisk","BEGIN","Circle","Constructors","CoordinateMode","CreateElementAction","Cross","DAttribute","DClass","Decagon","DecoratedStar","Defaults","DEnumerator","DEnumLiteral","DModel","DObject","DOperation","DPackage","DPointerTargetable","DReference","DValue","DViewElement","DViewPoint","DVoidEdge","Edge","EdgeBendingMode","EdgeHead","EdgePoint","Ellipse","END","Enneagon","Field","Graph","GraphPoint","GraphSize","GraphVertex","Heptagon","Hexagon","Log","LPointerTargetable","Octagon","packageDefaultSize","Pentagon","Pointers","Polygon","Rectangle","RuntimeAccessible","RuntimeAccessibleClass","SetRootFieldAction","ShortAttribETypes","SimpleStar","Square","store","Trapezoid","Triangle","U","Vertex","DV","DefaultEClasses","ShortDefaultEClasses","GraphElements","console","warn","statehistory","globalcanundostate","window","DState","_dec","_class","_class2","constructor","arguments","env","process","debug","logs","models","viewelements","stackViews","idlookup","graphs","voidvertexs","vertexs","graphvertexs","edgepoints","extEdges","refEdges","classifiers","enumerators","packages","primitiveTypes","attributes","enumliterals","references","classs","operations","parameters","ecoreClasses","returnTypes","isEdgePending","user","source","contextMenu","display","x","y","nodeid","objects","values","_lastSelected","users","viewpoint","viewpoints","m2models","m1models","isLoading","projects","collaborativeSession","new","undefined","end","init","new2","exDev","id","def","views","makeDefaultGraphViews","log","view","primitiveType","Object","dPrimitiveType","EVoid","toUpperCase","dObject","EObject","defaultEcoreClass","Graphs","Edges","Fields","Vertexes","objectMergeInPlace","tmp","k","v","cname","setTimeout","subclasses","_extends","vp","modelView","draggable","resizable","oclCondition","usageDeclarations","packageView","defaultVSize","classView","adaptWidth","adaptHeight","enumView","enumeratorView","attributeView","referenceView","operationView","literalView","objectView","valuecolormap","EBoolean","EByte","EShort","EInt","ELong","EFloat","EDouble","EDate","EString","EChar","valueView","voidView","appliableToClasses","explicitApplicationPriority","edgePointView","appliableTo","edgePointCoordMode","absolute","edgeViews","size0","size1","size2","edgeConstants","edgePrerenderFunc","edgeUsageDeclarations","makeEdgeView","name","type","headSize","tailSize","dashing","ev","edgeView","svgHeadTail","bendingMode","Line","edgeHeadSize","edgeTailSize","constants","preRenderFunc","push","reference","extend","aggregation","composition","ViewPointState","_dec2","_class3","ModelStore","_dec3","_class5","_meta","instances","meta","value","LState","_dec4","_class7","_class8","__raw","room","get","wrap","getState","get_contextMenu","c","data","get_debug","get_idlookup","get__lastSelected","ls","modelElement","node","_defaultCollectionGetter","fromPointer","_defaultGetter","Array","isArray","length","isPointer","structure","singleton","set_extend"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/src/redux/store.tsx"],"sourcesContent":["import {\r\n    Asterisk,\r\n    BEGIN, Circle,\r\n    Constructors,\r\n    CoordinateMode,\r\n    CreateElementAction, Cross,\r\n    DAttribute,\r\n    DClass,\r\n    DClassifier, Decagon, DecoratedStar,\r\n    DEdgePoint,\r\n    Defaults,\r\n    DEnumerator,\r\n    DEnumLiteral,\r\n    DExtEdge,\r\n    DGraph,\r\n    DGraphElement,\r\n    DGraphVertex,\r\n    Dictionary,\r\n    DLog,\r\n    DModel,\r\n    DModelElement,\r\n    DObject,\r\n    DOperation,\r\n    DPackage,\r\n    DParameter,\r\n    DPointerTargetable,\r\n    DProject,\r\n    DRefEdge,\r\n    DReference,\r\n    DUser,\r\n    DValue,\r\n    DVertex,\r\n    DViewElement,\r\n    DViewPoint,\r\n    DVoidEdge, Edge,\r\n    EdgeBendingMode,\r\n    EdgeHead, EdgePoint, Ellipse,\r\n    END, Enneagon, Field,\r\n    GObject, Graph, GraphElement,\r\n    GraphPoint,\r\n    GraphSize, GraphVertex, Heptagon, Hexagon,\r\n    LGraphElement,\r\n    LModelElement,\r\n    LObject, Log,\r\n    LogicContext,\r\n    LOperation,\r\n    LPackage,\r\n    LParameter,\r\n    LPointerTargetable, LProject,\r\n    LRefEdge,\r\n    LReference,\r\n    LUser,\r\n    LValue,\r\n    LViewElement,\r\n    LViewPoint, Nonagon, Octagon,\r\n    packageDefaultSize, Pentagon,\r\n    Pointer,\r\n    Pointers, Polygon, Rectangle,\r\n    RuntimeAccessible,\r\n    RuntimeAccessibleClass, Septagon,\r\n    SetRootFieldAction,\r\n    ShortAttribETypes, SimpleStar, Square, Star,\r\n    store, Trapezoid, Triangle, U, Vertex, VoidVertex,\r\n} from '../joiner';\r\nimport {DV} from \"../common/DV\";\r\n//import {Selected} from \"../joiner/types\";\r\nimport {DefaultEClasses, ShortDefaultEClasses} from \"../common/U\";\r\nimport { GraphElements } from '../joiner/components';\r\n\r\nconsole.warn('ts loading store');\r\n\r\n// @RuntimeAccessible\r\n// NB: le voci che iniziano con '_' sono personali e non condivise\r\n\r\n// export const statehistory_obsoleteidea: {past: IStore[], current: IStore, future: IStore[]} = { past:[], current: null, future:[] } as any;\r\nexport const statehistory: {\r\n        [userpointer:Pointer<DUser>]: {undoable:GObject<\"delta\">[], redoable: GObject<\"delta\">[]}\r\n} & {\r\n    globalcanundostate: boolean // set to true at first user click }\r\n} = { globalcanundostate: false} as any;\r\n(window as any).statehistory = statehistory;\r\n\r\n@RuntimeAccessible('DState')\r\nexport class DState extends DPointerTargetable{\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static new(): DState {\r\n        return new Constructors(new DState('dwc'), undefined, false, undefined).DPointerTargetable().DState().end();\r\n    }\r\n\r\n    env: Dictionary = process.env;  //damiano: this might make problems on load\r\n    debug: boolean = false;\r\n    logs: Pointer<DLog>[] = [];\r\n    models: Pointer<DModel, 0, 'N'> = []; // Pointer<DModel, 0, 'N'>[] = [];\r\n\r\n\r\n    viewelements: Pointer<DViewElement, 0, 'N'> = [];\r\n    stackViews: Pointer<DViewElement, 0, 'N'> = [];\r\n\r\n    // users: Dictionary<DocString<Pointer<DUser>>, UserState> = {};\r\n    // collaborators: UserState[];\r\n    idlookup: Record<Pointer<DPointerTargetable>, DPointerTargetable> = {};\r\n\r\n    //// DClass section to fill\r\n    graphs: Pointer<DGraph, 0, 'N'> = [];\r\n    voidvertexs: Pointer<DGraphVertex, 0, 'N'> = [];\r\n    vertexs: Pointer<DVertex, 0, 'N'> = [];\r\n    graphvertexs: Pointer<DGraphVertex, 0, 'N'> = [];\r\n\r\n    edgepoints: Pointer<DEdgePoint, 0, 'N'> = [];\r\n    //my addon\r\n    extEdges: Pointer<DExtEdge, 0, \"N\"> = [];\r\n    refEdges: Pointer<DRefEdge, 0, \"N\"> = [];\r\n\r\n    classifiers: Pointer<DClassifier, 0, 'N'> = [];\r\n    enumerators: Pointer<DEnumerator, 0, 'N'> = [];\r\n    packages: Pointer<DPackage, 0, 'N'> = [];\r\n    primitiveTypes: Pointer<DClass, 0, \"N\"> = [];\r\n    attributes: Pointer<DAttribute, 0, \"N\"> = [];\r\n    enumliterals: Pointer<DEnumLiteral, 0, \"N\"> = [];\r\n    references: Pointer<DReference, 0, \"N\"> = [];\r\n    classs: Pointer<DClass, 0, \"N\"> = [];\r\n    operations: Pointer<DOperation, 0, \"N\"> = [];\r\n    parameters: Pointer<DParameter, 0, \"N\"> = [];\r\n    ecoreClasses: Pointer<DClass, 0, \"N\"> = [];\r\n    returnTypes: Pointer<DClass, 0, \"N\"> = [];\r\n    /// DClass section end\r\n\r\n    isEdgePending: {user: Pointer<DUser>, source: Pointer<DClass>} = {user: '', source: ''};\r\n\r\n    contextMenu: { display: boolean, x: number, y: number, nodeid: Pointer} = {display: false, x: 0, y: 0, nodeid:''};\r\n\r\n    objects: Pointer<DObject, 0, 'N', LObject> = [];\r\n    values: Pointer<DValue, 0, 'N', LValue> = [];\r\n\r\n    // private, non-shared fields\r\n    _lastSelected?: {\r\n        node: Pointer<DGraphElement, 1, 1>,\r\n        view: Pointer<DViewElement, 1, 1>,\r\n        modelElement: Pointer<DModelElement, 0, 1> // if a node is clicked: a node and a view are present, a modelElement might be. a node can exist without a modelElement counterpart.\r\n    };\r\n\r\n    users: Pointer<DUser, 0, 'N', LUser> = [];\r\n\r\n    viewpoint: Pointer<DViewPoint> = '';\r\n    viewpoints: Pointer<DViewPoint, 0, 'N'> = [];\r\n\r\n    m2models: Pointer<DModel, 0, 'N'> = [];\r\n    m1models: Pointer<DModel, 0, 'N'> = [];\r\n\r\n    isLoading: boolean = false;\r\n\r\n    projects: Pointer<DProject, 0, 'N'> = [];\r\n    collaborativeSession: boolean = false;\r\n\r\n    static init(store?: DState): void {\r\n        BEGIN()\r\n\r\n        // const viewpoint = DViewPoint.new('Default', '', undefined, '', '', '', [], '', 0, false);\r\n        const viewpoint = DViewPoint.new2('Default', '', ()=>{}, true, Defaults.viewpoints[0]);\r\n        Log.exDev(viewpoint.id !== Defaults.viewpoints[0], \"wrong vp id initialization\", {viewpoint, def:Defaults.viewpoints});\r\n        const views: DViewElement[] = makeDefaultGraphViews(viewpoint.id);\r\n        console.log('vvviewsss', views);\r\n        for (let view of views) { CreateElementAction.new(view); }\r\n\r\n        for (let primitiveType of Object.values(ShortAttribETypes)) {\r\n            let dPrimitiveType;\r\n            if (primitiveType === ShortAttribETypes.EVoid) continue; // or make void too without primitiveType = true, but with returnType = true?\r\n            dPrimitiveType = DClass.new(primitiveType, false, false, true, false, '', undefined, true, 'Pointer_' + primitiveType.toUpperCase());\r\n            SetRootFieldAction.new('primitiveTypes', dPrimitiveType.id, '+=', true);\r\n        }\r\n\r\n        /// creating m3 \"Object\" metaclass\r\n        let dObject = DClass.new(ShortDefaultEClasses.EObject, false, false, false, false,\r\n            '', undefined, true, 'Pointer_' + ShortDefaultEClasses.EObject.toUpperCase());\r\n        SetRootFieldAction.new('ecoreClasses', dObject.id, '+=', true);\r\n        for (let defaultEcoreClass of Object.values(DefaultEClasses)){\r\n            // todo: creat everyone and not just object, make the whole m3 populated.\r\n        }\r\n\r\n        let Graphs: any = {\r\n            Graph: Graph, GraphVertex: GraphVertex,\r\n        }\r\n        let Edges: any = {\r\n            Edge: Edge,\r\n            EdgePoint: EdgePoint,\r\n        }\r\n        let Fields: any = {\r\n            Field: Field,\r\n            // GraphElement: GraphElement,\r\n        }\r\n        let Vertexes: any = {\r\n            Vertex: Vertex,\r\n            // VoidVertex: VoidVertex,\r\n            Circle: Circle,\r\n            Polygon: Polygon,\r\n            Cross: Cross,\r\n            Asterisk: Asterisk,\r\n            //Star: Star,\r\n            SimpleStar: SimpleStar, DecoratedStar: DecoratedStar,\r\n            Triangle: Triangle, Square: Square, Pentagon: Pentagon,\r\n            Hexagon: Hexagon, Heptagon: Heptagon, Octagon: Octagon,\r\n            Enneagon: Enneagon, Decagon: Decagon,\r\n            // Nonagon: Nonagon, Septagon: Septagon,\r\n            // Diamond: Diamond, Rhombus: Rhombus,\r\n            Ellipse: Ellipse,\r\n            Rectangle: Rectangle,\r\n            Trapezoid: Trapezoid\r\n        }\r\n        U.objectMergeInPlace(GraphElements, Graphs, Edges, Vertexes, Fields, {Graphs, Edges, Vertexes, Fields});\r\n        let tmp = Object.values(GraphElements);\r\n        for (let k in tmp) {\r\n            let v: any = tmp[k];\r\n            Log.exDev(!v, 'wrong import order', {k, v, GraphElements, tmp});\r\n            if (!v.cname) continue; // it is a subdictionary\r\n            GraphElements[(v.cname as string)] = GraphElements[k] = v;\r\n        }\r\n        setTimeout(()=>{\r\n            }, 1);\r\n        END();\r\n    }\r\n}\r\n\r\n\r\nfunction makeDefaultGraphViews(vp: Pointer<DViewPoint>): DViewElement[] {\r\n    let modelView: DViewElement = DViewElement.new('Model', DV.modelView(), undefined, '',\r\n        '', '', [DModel.cname], '', 1, false, true, vp);\r\n    modelView.draggable = false; modelView.resizable = false;\r\n    modelView.oclCondition = 'context DModel inv: true';\r\n    modelView.usageDeclarations = \"(ret)=>{\\n\" +\r\n        \"// ** preparations and default behaviour here ** //\\n\" +\r\n        \"//ret.data = data\\n\" +\r\n        \"ret.node = node\\n\" +\r\n        \"ret.view = view\\n\" +\r\n        \"// custom preparations:\\n\" +\r\n        \"let packages = data && data.isMetamodel ? data.packages : [];\\n\" +\r\n        \"let suggestedEdges = data?.suggestedEdges || {};\\n\" +\r\n        \"// data, node, view are dependencies by default. delete them above if you want to remove them.\\n\" +\r\n        \"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\" +\r\n        \"// ** declarations here ** //\\n\" +\r\n        \"ret.firstPackage = packages[0]\\n\"+\r\n        \"ret.otherPackages = packages.slice(1)\\n\"+\r\n        \"ret.m1Objects = data && !data.isMetamodel ? data.allSubObjects : []\\n\"+\r\n        \"ret.refEdges = (suggestedEdges.reference || []).filter(e => !e.vertexOverlaps)\\n\"+\r\n        \"ret.extendEdges = (suggestedEdges.extend || []).filter(e => !e.vertexOverlaps)\\n\"+\r\n        \"}\";\r\n\r\n    let packageView: DViewElement = DViewElement.new('Package', DV.packageView(), undefined, '', '', '', [DPackage.cname], '', 1, false, true, vp);\r\n    packageView.defaultVSize = packageDefaultSize;\r\n    packageView.oclCondition = `context DPackage inv: true`;\r\n\r\n/*\r\n    const defaultPackage: DViewElement = DViewElement.new('DefaultPackage', DV.defaultPackage(), undefined, '', '', '', [], '', 1, false);\r\n    defaultPackage.defaultVSize = new GraphSize(0, 0);\r\n    defaultPackage.explicitApplicationPriority = 2;\r\n    defaultPackage.oclCondition = `context DPackage inv: self.name = 'default'`;\r\n    defaultPackage.draggable = false; defaultPackage.resizable = false;*/\r\n\r\n    let classView: DViewElement = DViewElement.new('Class', DV.classView(), undefined, '', '', '', [DClass.cname], '', 1, false, true, vp);\r\n    classView.adaptWidth = true; classView.adaptHeight = true;\r\n    classView.oclCondition = 'context DClass inv: true';\r\n\r\n    let enumView: DViewElement = DViewElement.new('Enum', DV.enumeratorView(), undefined, '', '', '', [DEnumerator.cname], '', 1, false, true, vp);\r\n    enumView.adaptWidth = true; enumView.adaptHeight = true;\r\n    enumView.oclCondition = 'context DEnumerator inv: true';\r\n\r\n    let attributeView: DViewElement = DViewElement.new('Attribute', DV.attributeView(), undefined, '', '', '', [DAttribute.cname], '', 1, false, true, vp);\r\n    attributeView.oclCondition = 'context DAttribute inv: true';\r\n\r\n    let referenceView: DViewElement = DViewElement.new('Reference', DV.referenceView(), undefined, '', '', '', [DReference.cname], '', 1, false, true, vp);\r\n    referenceView.oclCondition = 'context DReference inv: true';\r\n\r\n    let operationView: DViewElement = DViewElement.new('Operation', DV.operationView(), undefined, '', '', '', [DOperation.cname], '', 1, false, true, vp);\r\n    operationView.oclCondition = 'context DOperation inv: true';\r\n\r\n    let literalView: DViewElement = DViewElement.new('Literal', DV.literalView(), undefined, '', '', '', [DEnumLiteral.cname], '', 1, false, true, vp);\r\n    literalView.oclCondition = 'context DEnumLiteral inv: true';\r\n\r\n    let objectView: DViewElement = DViewElement.new('Object', DV.objectView(), undefined, '', '', '', [DObject.cname], '', 1, false, true, vp);\r\n    objectView.adaptWidth = true; objectView.adaptHeight = true;\r\n    objectView.oclCondition = 'context DObject inv: true';\r\n    objectView.usageDeclarations = \"(ret)=>{\\n\" +\r\n        \"// ** preparations and default behaviour here ** //\\n\" +\r\n        \"ret.data = data\\n\" +\r\n        \"ret.node = node\\n\" +\r\n        \"ret.view = view\\n\" +\r\n        \"// data, node, view are dependencies by default. delete them above if you want to remove them.\\n\" +\r\n        \"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\" +\r\n        \"// ** declarations here ** //\\n\" +\r\n        \"ret.metaclassName = data.instanceof?.name || \\\"Object\\\"\\n\" +\r\n        \"ret.features = data.features\\n\" +\r\n        \"}\";\r\n\r\n    let valuecolormap: GObject = {};\r\n    valuecolormap[ShortAttribETypes.EBoolean] = \"orange\";\r\n    valuecolormap[ShortAttribETypes.EByte] = \"orange\";\r\n    valuecolormap[ShortAttribETypes.EShort] = \"orange\";\r\n    valuecolormap[ShortAttribETypes.EInt] = \"orange\";\r\n    valuecolormap[ShortAttribETypes.ELong] = \"orange\";\r\n    valuecolormap[ShortAttribETypes.EFloat] = \"orange\";\r\n    valuecolormap[ShortAttribETypes.EDouble] = \"orange\";\r\n    valuecolormap[ShortAttribETypes.EDate] = \"green\";\r\n    valuecolormap[ShortAttribETypes.EString] = \"green\";\r\n    valuecolormap[ShortAttribETypes.EChar] = \"green\";\r\n    valuecolormap[ShortAttribETypes.EVoid] = \"gray\";\r\n    let valueView: DViewElement = DViewElement.new('Value', DV.valueView(), undefined, '', '', '', [DValue.cname], '', 1, false, true, vp);\r\n    valueView.oclCondition = 'context DValue inv: true';\r\n\r\n    valueView.usageDeclarations = \"(ret)=>{ // scope: data, node, view, state, \\n\" +\r\n        \"// ** preparations and default behaviour here ** //\\n\" +\r\n        \"// ret.data = data // object does not need it because it displays only: features (listed individually) and name input being a subcomponent\\n\" +\r\n        \"ret.node = node\\n\" +\r\n        \"ret.view = view\\n\" +\r\n        \"// todo: put only first N values as dependency and show only those.\\n\" +\r\n        \"// data, node, view are dependencies by default. delete them above if you want to remove them.\\n\" +\r\n        \"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\" +\r\n        \"// ** declarations here ** //\\n\" +\r\n        \"ret.instanceofname = data.instanceof?.name\\n\" +\r\n        \"ret.valuesString = data.valuesString()\\n\" +\r\n        \"ret.typeString = data.typeString\\n\" +\r\n        \"}\";\r\n\r\n    let voidView: DViewElement = DViewElement.new('Void', DV.voidView(), undefined, '', '', '', [DObject.cname], '', 1, false, true, vp);\r\n    voidView.appliableToClasses=[\"VoidVertex\"];\r\n    voidView.explicitApplicationPriority = 2;\r\n    voidView.adaptWidth = true; voidView.adaptHeight = true;\r\n\r\n    let edgePointView: DViewElement = DViewElement.new('EdgePoint', DV.edgePointView(), new GraphSize(0, 0, 25, 25), '', '', '', [], '', 1, false, true, vp);\r\n    edgePointView.appliableTo = 'edgePoint'; edgePointView.resizable = false;\r\n    // edgePointView.edgePointCoordMode = CoordinateMode.relativePercent;\r\n    edgePointView.edgePointCoordMode = CoordinateMode.absolute;\r\n\r\n    let edgeViews: DViewElement[] = [];\r\n    let size0: GraphPoint = new GraphPoint(0, 0), size1: GraphPoint = new GraphPoint(20, 20), size2: GraphPoint = new GraphPoint(20, 20); // todo: riportalo in 40,20\r\n    let edgeConstants: string = \"(ret)=>{\\n\" +\r\n        \"// ** preparations and default behaviour here ** //\\n\" +\r\n        \"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\" +\r\n        \"// ** declarations here ** //\\n\" +\r\n        \"   ret.strokeColor = 'gray'\\n\"+\r\n        \"   ret.strokeWidth = '2px'\\n\"+\r\n        \"   ret.strokeColorHover = 'black'\\n\"+\r\n        \"   ret.strokeColorLong = 'gray'\\n\"+\r\n        \"   ret.strokeLengthLimit = 300\\n\"+\r\n        \"   ret.strokeWidthHover = '4px'\\n\"+\r\n        \"}\";\r\n    let edgePrerenderFunc: string = \"(ret)=>{\\n\" +\r\n        \"// ** preparations and default behaviour here ** //\\n\" +\r\n        \"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\" +\r\n        \"// ** declarations here ** //\\n\" +\r\n        \"ret.segments = edge.segments\\n\"+\r\n        \"}\";\r\n\r\n    let edgeUsageDeclarations = \"(ret)=>{\\n\" +\r\n        \"// ** preparations and default behaviour here ** //\\n\" +\r\n        \"// ret.data = data\\n\" +\r\n        \"ret.edgeview = edge.view.id\\n\" +\r\n        \"ret.view = view\\n\" +\r\n        \"// data, edge, view are dependencies by default. delete them above if you want to remove them.\\n\" +\r\n        \"// add preparation code here (like for loops to count something), then list the dependencies below.\\n\" +\r\n        \"// ** declarations here ** //\\n\" +\r\n        \"ret.start = edge.start\\n\"+\r\n        \"ret.end = edge.end\\n\"+\r\n        \"}\";\r\n\r\n    function makeEdgeView(name: string, type: EdgeHead, headSize: GraphPoint | undefined, tailSize: GraphPoint | undefined, dashing: boolean): DViewElement{\r\n        let ev = DViewElement.new2(\"Edge\"+name,\r\n            DV.edgeView(type, headSize ? DV.svgHeadTail(\"Head\", type) : \"\", tailSize ? DV.svgHeadTail(\"Tail\", type) : \"\", dashing ? \"10.5,9,0,0\" : undefined),\r\n            (v: DViewElement) => {\r\n                v.explicitApplicationPriority = 2;\r\n                v.bendingMode = EdgeBendingMode.Line;\r\n                v.appliableToClasses = [DVoidEdge.cname];\r\n                v.edgeHeadSize = headSize || size0;\r\n                v.edgeTailSize = tailSize || size0;\r\n                v.constants = edgeConstants;\r\n                v.usageDeclarations = edgeUsageDeclarations;\r\n                v.preRenderFunc = edgePrerenderFunc;\r\n                v.appliableTo = 'edge'; // todo: remove the entire property?\r\n        }, false, vp, 'Pointer_ViewEdge' + name);\r\n        edgeViews.push(ev);\r\n        return ev;\r\n    }\r\n\r\n    makeEdgeView(\"Association\", EdgeHead.reference,             size1,   undefined,  false);\r\n    makeEdgeView(\"Dependency\",  EdgeHead.reference,             size1,   undefined,  true);\r\n    makeEdgeView(\"Inheritance\", EdgeHead.extend,                size1,   undefined,  false);\r\n    makeEdgeView(\"Aggregation\", EdgeHead.aggregation,   undefined,      size2,      false);\r\n    makeEdgeView(\"Composition\", EdgeHead.composition,   undefined,      size2,      false);\r\n\r\n    // edgeView.forceNodeType=\"Edge\"\r\n\r\n    /*\r\n    for (let ev of edgeViews){\r\n        ev.explicitApplicationPriority = 2;\r\n        ev.bendingMode = EdgeBendingMode.Line;\r\n        ev.subViews = [edgePointView.id];\r\n    }*/\r\n    // nb: Error is not a view, just jsx. transform it in a view so users can edit it\r\n\r\n    return [modelView, packageView, //defaultPackage,\r\n        classView, enumView, attributeView, referenceView, operationView,\r\n        literalView, objectView, valueView, voidView, ...edgeViews, edgePointView];\r\n}\r\n\r\n@RuntimeAccessible('ViewPointState')\r\nexport class ViewPointState extends DPointerTargetable{\r\n    name: string = '';\r\n}\r\n\r\n// to delete?\r\n@RuntimeAccessible('ModelStore')\r\nexport class ModelStore {\r\n    private _meta!: ModelStore | string;\r\n    instances!: (ModelStore | string)[];\r\n\r\n    // getter e setter senza proxy\r\n    get meta(): ModelStore | string {\r\n        return this._meta;\r\n    }\r\n\r\n    set meta(value: ModelStore | string) {\r\n        this._meta = value;\r\n    }\r\n}\r\n\r\n\r\n\r\n@RuntimeAccessible('LState')\r\nexport class LState<Context extends LogicContext<DState> = any, C extends Context = Context, D extends DState = DState> extends LPointerTargetable {\r\n    static subclasses: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    static _extends: (typeof RuntimeAccessibleClass | string)[] = [];\r\n    public __raw!: DPointerTargetable & DState;\r\n    public static structure: typeof DPointerTargetable;\r\n    public static singleton: LPointerTargetable;\r\n    // return type is wrong, but have to extend the static method of RuntimeAccessibleClass which is completely different and returns a class constructor.\r\n    static get<T2 extends typeof RuntimeAccessibleClass & { logic?: typeof LPointerTargetable | undefined; }>(): T2 & LState { return LState.wrap(store.getState() as any) as any; }\r\n    contextMenu!: {display: boolean, x: number, y: number};\r\n    user!: LUser;\r\n    debug!: boolean;\r\n    room!: string;\r\n    _lastSelected?: {modelElement?: LModelElement, node?: LGraphElement, view?: LViewElement};\r\n    idlookup!:Dictionary<Pointer, DPointerTargetable>;\r\n\r\n    get_contextMenu(c: Context): this[\"contextMenu\"] { return c.data.contextMenu; }\r\n    // get_user(c: Context): this[\"user\"] { return LState.wrap(c.data.user) as LUser; }\r\n    get_debug(c: Context): this[\"debug\"] { return c.data.debug; }\r\n    get_idlookup(c: Context): this[\"idlookup\"] { return c.data.idlookup; }\r\n    get__lastSelected(c: Context): this[\"_lastSelected\"] {\r\n        let ls = c.data._lastSelected;\r\n        return ls && {modelElement: LState.wrap(ls.modelElement), node: LState.wrap(ls.node), view: LState.wrap(ls.view)}; }\r\n\r\n    _defaultCollectionGetter(c: Context, k: keyof DState): LPointerTargetable[] { return LPointerTargetable.fromPointer(c.data[k] as any); }\r\n    _defaultGetter(c: Context, k: keyof DState) {\r\n        //console.log(\"default Getter\");\r\n        let v = c.data[k];\r\n        if (Array.isArray(v)) {\r\n            if (v.length === 0) return [];\r\n            else if (Pointers.isPointer(v[0] as any)) return this._defaultCollectionGetter(c, k);\r\n            return v;\r\n        }\r\n        return v;\r\n    }\r\n}\r\n\r\nRuntimeAccessibleClass.set_extend(DPointerTargetable, DState);\r\nRuntimeAccessibleClass.set_extend(LPointerTargetable, LState);\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}