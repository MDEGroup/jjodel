{"ast":null,"code":"import { AttribETypes, CoordinateMode, EdgeBendingMode, EdgeHead, EGraphElements, EModelElements, stateInitializer, ShortAttribETypes, windoww, AccessModifier, EdgeGapMode } from \"../joiner\";\nimport * as Componentss from '../joiner/components';\n\n/*\r\nlet pairs = [\r\n    [DAnnotation, LAnnotation],\r\n    [DModelElement, LModelElement],\r\n    [DAttribute, LAttribute],\r\n    [DClass, LClass],\r\n    [DClassifier, LClassifier],\r\n    [DEnumerator, LEnumerator],\r\n    [DEnumLiteral, LEnumLiteral],\r\n    [DModel, LModel],\r\n    [DObject, LObject],\r\n    [DOperation, LOperation],\r\n    [DPackage, LPackage],\r\n    [DParameter, LParameter],\r\n    [DReference, LReference],\r\n    [DStructuralFeature, LStructuralFeature],\r\n    [DValue, LValue],\r\n    [DModelElementTransientProperties, LModelElementTransientProperties],\r\n    [DViewTransientProperties, LViewTransientProperties],\r\n    [DViewPrivateTransientProperties, LViewPrivateTransientProperties],\r\n    [DViewElement, LViewElement],\r\n    [DVoidVertex, LVoidVertex]\r\n    // [DMap, LMap],\r\n];\r\n*/\n\n/*for (let pair of pairs as any[]) {\r\n    pair[0].logic = pair[1];\r\n    pair[1].singleton = new pair[1]();\r\n    pair[1].structure = pair[0];\r\n    windoww[pair[0].name] = pair[0];\r\n    windoww[pair[1].name] = pair[1];\r\n}*/\n\n/*\r\nDAnnotation.logic = LAnnotation;\r\nLAnnotation.singleton = new LAnnotation();\r\n\r\nDModelElement.logic = LModelElement;\r\nLModelElement.singleton = new LModelElement();\r\nDAttribute.logic = LAttribute;\r\nLAttribute.singleton = new LAttribute();\r\nDClass.logic = LClass;\r\nDClassifier.logic = LClassifier;\r\nDEnumerator.logic = LEnumerator;\r\nDEnumLiteral.logic = LEnumLiteral;\r\nDModel.logic = LModel;\r\nDOBject.logic = LObject;\r\nDOperation.logic = LOperation;\r\nDPackage.logic = LPackage;\r\nDParameter.logic = LParameter;\r\nDReference.logic = LReference;\r\nDStructuralFeature.logic = LStructuralFeature;\r\nDValue.logic = LValue;\r\nDModelElementTransientProperties.logic = LModelElementTransientProperties;\r\n\r\nLClass.singleton = new LClass();\r\nLClassifier.singleton = new LClassifier();\r\nLEnumerator.singleton = new LEnumerator();\r\nLEnumLiteral.singleton = new LEnumLiteral();\r\nLOperation.singleton = new LOperation();\r\nLPackage.singleton = new LPackage();\r\nLParameter.singleton = new LParameter();\r\nLReference.singleton = new LReference();\r\nLStructuralFeature.singleton = new LStructuralFeature();\r\nLValue.singleton = new LValue();\r\nLModel.singleton = new LModel();\r\nLObject.singleton = new LObject();\r\nLModelElementTransientProperties.singleton = new LModelElementTransientProperties();\r\n*/\nexport const fakeExport = {}; // just to import-execute this file\n// DState.fakeinit();\n// Symbol.prototype.toString = function(): string { alert('symbol to string'); return String(this); }\n\nlet Components = Componentss;\n/*\r\nComponents.map(C=> {\r\n    if (typeof C === 'object') return\r\n})\r\nfor (let Comp of Components) {\r\n\r\n}*/\nlet wComponents = {\n  ...Components\n};\nfor (let key in wComponents) {\n  let index = key.indexOf(\"Component\");\n  if (index === -1) continue;\n  let newkey = key.substring(0, index);\n  if (Components[newkey]) continue;\n  wComponents[newkey] = Components[key];\n}\n\n// (Components as any)[\"input\"] = Components[\"InputComponent\"];\nwindoww.Components = wComponents;\nwindoww.enumerators = {};\nwindow.ShortAttribETypes = ShortAttribETypes;\nwindow.enumerators.ShortAttribETypes = ShortAttribETypes;\nwindow.AccessModifier = AccessModifier;\nwindow.enumerators.AccessModifier = AccessModifier;\nwindow.AttribETypes = AttribETypes;\nwindow.enumerators.AttribETypes = AttribETypes;\nwindow.CoordinateMode = CoordinateMode;\nwindow.enumerators.CoordinateMode = CoordinateMode;\nwindow.EdgeHead = EdgeHead;\nwindow.enumerators.EdgeHead = EdgeHead;\nwindow.EGraphElements = EGraphElements;\nwindow.enumerators.EGraphElements = EGraphElements;\nwindow.EModelElements = EModelElements;\nwindow.enumerators.EModelElements = EModelElements;\nwindow.EdgeGapMode = EdgeGapMode;\nwindow.enumerators.EdgeGapMode = EdgeGapMode;\nwindow.EdgeBendingMode = EdgeBendingMode;\nwindow.enumerators.EdgeBendingMode = EdgeBendingMode;\nfunction afterStoreLoad() {\n  stateInitializer();\n}\n\n// afterStoreLoad();\n// setTimeout( afterStoreLoad, 0);","map":{"version":3,"names":["AttribETypes","CoordinateMode","EdgeBendingMode","EdgeHead","EGraphElements","EModelElements","stateInitializer","ShortAttribETypes","windoww","AccessModifier","EdgeGapMode","Componentss","fakeExport","Components","wComponents","key","index","indexOf","newkey","substring","enumerators","window","afterStoreLoad"],"sources":["C:/0Programmi/Dev/projects/frontend/jjodel/src/joiner/ExecuteOnRead.ts"],"sourcesContent":["import {\r\n    AttribETypes,\r\n    CoordinateMode,\r\n    EdgeBendingMode,\r\n    EdgeHead,\r\n    EGraphElements,\r\n    EModelElements,\r\n    stateInitializer,\r\n    ShortAttribETypes,\r\n    windoww,\r\n    AccessModifier,\r\n    EdgeGapMode\r\n} from \"../joiner\";\r\nimport * as Componentss from '../joiner/components';\r\n\r\n\r\n/*\r\nlet pairs = [\r\n    [DAnnotation, LAnnotation],\r\n    [DModelElement, LModelElement],\r\n    [DAttribute, LAttribute],\r\n    [DClass, LClass],\r\n    [DClassifier, LClassifier],\r\n    [DEnumerator, LEnumerator],\r\n    [DEnumLiteral, LEnumLiteral],\r\n    [DModel, LModel],\r\n    [DObject, LObject],\r\n    [DOperation, LOperation],\r\n    [DPackage, LPackage],\r\n    [DParameter, LParameter],\r\n    [DReference, LReference],\r\n    [DStructuralFeature, LStructuralFeature],\r\n    [DValue, LValue],\r\n    [DModelElementTransientProperties, LModelElementTransientProperties],\r\n    [DViewTransientProperties, LViewTransientProperties],\r\n    [DViewPrivateTransientProperties, LViewPrivateTransientProperties],\r\n    [DViewElement, LViewElement],\r\n    [DVoidVertex, LVoidVertex]\r\n    // [DMap, LMap],\r\n];\r\n*/\r\n\r\n/*for (let pair of pairs as any[]) {\r\n    pair[0].logic = pair[1];\r\n    pair[1].singleton = new pair[1]();\r\n    pair[1].structure = pair[0];\r\n    windoww[pair[0].name] = pair[0];\r\n    windoww[pair[1].name] = pair[1];\r\n}*/\r\n\r\n/*\r\nDAnnotation.logic = LAnnotation;\r\nLAnnotation.singleton = new LAnnotation();\r\n\r\nDModelElement.logic = LModelElement;\r\nLModelElement.singleton = new LModelElement();\r\nDAttribute.logic = LAttribute;\r\nLAttribute.singleton = new LAttribute();\r\nDClass.logic = LClass;\r\nDClassifier.logic = LClassifier;\r\nDEnumerator.logic = LEnumerator;\r\nDEnumLiteral.logic = LEnumLiteral;\r\nDModel.logic = LModel;\r\nDOBject.logic = LObject;\r\nDOperation.logic = LOperation;\r\nDPackage.logic = LPackage;\r\nDParameter.logic = LParameter;\r\nDReference.logic = LReference;\r\nDStructuralFeature.logic = LStructuralFeature;\r\nDValue.logic = LValue;\r\nDModelElementTransientProperties.logic = LModelElementTransientProperties;\r\n\r\nLClass.singleton = new LClass();\r\nLClassifier.singleton = new LClassifier();\r\nLEnumerator.singleton = new LEnumerator();\r\nLEnumLiteral.singleton = new LEnumLiteral();\r\nLOperation.singleton = new LOperation();\r\nLPackage.singleton = new LPackage();\r\nLParameter.singleton = new LParameter();\r\nLReference.singleton = new LReference();\r\nLStructuralFeature.singleton = new LStructuralFeature();\r\nLValue.singleton = new LValue();\r\nLModel.singleton = new LModel();\r\nLObject.singleton = new LObject();\r\nLModelElementTransientProperties.singleton = new LModelElementTransientProperties();\r\n*/\r\nexport const fakeExport = {}; // just to import-execute this file\r\n// DState.fakeinit();\r\n// Symbol.prototype.toString = function(): string { alert('symbol to string'); return String(this); }\r\n\r\nlet Components = Componentss;\r\n/*\r\nComponents.map(C=> {\r\n    if (typeof C === 'object') return\r\n})\r\nfor (let Comp of Components) {\r\n\r\n}*/\r\nlet wComponents = {...Components}\r\nfor (let key in wComponents) {\r\n    let index = key.indexOf(\"Component\")\r\n    if (index === -1) continue;\r\n    let newkey = key.substring(0, index);\r\n    if ((Components as any)[newkey]) continue;\r\n    (wComponents as any)[newkey] = (Components as any)[key];\r\n}\r\n\r\n// (Components as any)[\"input\"] = Components[\"InputComponent\"];\r\nwindoww.Components = wComponents;\r\nwindoww.enumerators = {};\r\n\r\n\r\n(window as any).ShortAttribETypes = ShortAttribETypes;\r\n(window as any).enumerators.ShortAttribETypes = ShortAttribETypes;\r\n(window as any).AccessModifier = AccessModifier;\r\n(window as any).enumerators.AccessModifier = AccessModifier;\r\n(window as any).AttribETypes = AttribETypes;\r\n(window as any).enumerators.AttribETypes = AttribETypes;\r\n(window as any).CoordinateMode = CoordinateMode;\r\n(window as any).enumerators.CoordinateMode = CoordinateMode;\r\n(window as any).EdgeHead = EdgeHead;\r\n(window as any).enumerators.EdgeHead = EdgeHead;\r\n(window as any).EGraphElements = EGraphElements;\r\n(window as any).enumerators.EGraphElements = EGraphElements;\r\n(window as any).EModelElements = EModelElements;\r\n(window as any).enumerators.EModelElements = EModelElements;\r\n(window as any).EdgeGapMode = EdgeGapMode;\r\n(window as any).enumerators.EdgeGapMode = EdgeGapMode;\r\n(window as any).EdgeBendingMode = EdgeBendingMode;\r\n(window as any).enumerators.EdgeBendingMode = EdgeBendingMode;\r\n\r\nfunction afterStoreLoad() {\r\n    stateInitializer();\r\n}\r\n\r\n// afterStoreLoad();\r\n// setTimeout( afterStoreLoad, 0);\r\n"],"mappings":"AAAA,SACIA,YAAY,EACZC,cAAc,EACdC,eAAe,EACfC,QAAQ,EACRC,cAAc,EACdC,cAAc,EACdC,gBAAgB,EAChBC,iBAAiB,EACjBC,OAAO,EACPC,cAAc,EACdC,WAAW,QACR,WAAW;AAClB,OAAO,KAAKC,WAAW,MAAM,sBAAsB;;AAGnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;AAC9B;AACA;;AAEA,IAAIC,UAAU,GAAGF,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIG,WAAW,GAAG;EAAC,GAAGD;AAAU,CAAC;AACjC,KAAK,IAAIE,GAAG,IAAID,WAAW,EAAE;EACzB,IAAIE,KAAK,GAAGD,GAAG,CAACE,OAAO,CAAC,WAAW,CAAC;EACpC,IAAID,KAAK,KAAK,CAAC,CAAC,EAAE;EAClB,IAAIE,MAAM,GAAGH,GAAG,CAACI,SAAS,CAAC,CAAC,EAAEH,KAAK,CAAC;EACpC,IAAKH,UAAU,CAASK,MAAM,CAAC,EAAE;EAChCJ,WAAW,CAASI,MAAM,CAAC,GAAIL,UAAU,CAASE,GAAG,CAAC;AAC3D;;AAEA;AACAP,OAAO,CAACK,UAAU,GAAGC,WAAW;AAChCN,OAAO,CAACY,WAAW,GAAG,CAAC,CAAC;AAGvBC,MAAM,CAASd,iBAAiB,GAAGA,iBAAiB;AACpDc,MAAM,CAASD,WAAW,CAACb,iBAAiB,GAAGA,iBAAiB;AAChEc,MAAM,CAASZ,cAAc,GAAGA,cAAc;AAC9CY,MAAM,CAASD,WAAW,CAACX,cAAc,GAAGA,cAAc;AAC1DY,MAAM,CAASrB,YAAY,GAAGA,YAAY;AAC1CqB,MAAM,CAASD,WAAW,CAACpB,YAAY,GAAGA,YAAY;AACtDqB,MAAM,CAASpB,cAAc,GAAGA,cAAc;AAC9CoB,MAAM,CAASD,WAAW,CAACnB,cAAc,GAAGA,cAAc;AAC1DoB,MAAM,CAASlB,QAAQ,GAAGA,QAAQ;AAClCkB,MAAM,CAASD,WAAW,CAACjB,QAAQ,GAAGA,QAAQ;AAC9CkB,MAAM,CAASjB,cAAc,GAAGA,cAAc;AAC9CiB,MAAM,CAASD,WAAW,CAAChB,cAAc,GAAGA,cAAc;AAC1DiB,MAAM,CAAShB,cAAc,GAAGA,cAAc;AAC9CgB,MAAM,CAASD,WAAW,CAACf,cAAc,GAAGA,cAAc;AAC1DgB,MAAM,CAASX,WAAW,GAAGA,WAAW;AACxCW,MAAM,CAASD,WAAW,CAACV,WAAW,GAAGA,WAAW;AACpDW,MAAM,CAASnB,eAAe,GAAGA,eAAe;AAChDmB,MAAM,CAASD,WAAW,CAAClB,eAAe,GAAGA,eAAe;AAE7D,SAASoB,cAAcA,CAAA,EAAG;EACtBhB,gBAAgB,CAAC,CAAC;AACtB;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module"}