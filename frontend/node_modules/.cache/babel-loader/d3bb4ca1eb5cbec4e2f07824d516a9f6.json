{"ast":null,"code":"var _jsxFileName = \"C:\\\\d\\\\Programming\\\\web\\\\jodel-mde\\\\src\\\\components\\\\forEndUser\\\\Input.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Defaults, Keystrokes, LPointerTargetable, U } from '../../joiner';\nimport { useStateIfMounted } from 'use-state-if-mounted';\nimport './style.scss';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nfunction InputComponent(props) {\n  _s();\n  var _data;\n  const data = props.data;\n\n  /*  Uncomment this when we have user authentication: if a user is on a ME, it cannot be edited.\r\n              damiano: ok, ma se data non è ModelElement crasha perchè non ha \"father\"\r\n              mettici prima un\r\n              if (RuntimeAccessibleClass.extends(data, DModelElement.cname))\r\n    const fathers = U.fatherChain(data as LModelElement);\r\n  for(let father of fathers) {\r\n      const user = Object.keys(selected).find(key => selected[key]?.id === father);\r\n      if(user && user !== DUser.current) editable = false;\r\n      if(!editable) break;\r\n  }\r\n  */\n\n  const getter = props.getter;\n  const setter = props.setter;\n  const field = props.field;\n  const oldValue = !data ? undefined : getter ? getter(data) : data[field]; // !== undefined); ? data[field] : 'undefined'\n  const [value, setValue] = useStateIfMounted(oldValue);\n  const [isTouched, setIsTouched] = useStateIfMounted(false);\n  const [showTooltip, setShowTooltip] = useStateIfMounted(false);\n\n  // I check if the value that I have in my local state is being edited by other <Input />\n  if (value !== oldValue && !isTouched) {\n    setValue(oldValue);\n    setIsTouched(false);\n  }\n  if (!(data || getter && setter)) return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"Either props.data or both getter & setter are required.\"\n  }, void 0, false);\n  const readOnly = props.readonly !== undefined ? props.readonly : props.debugmodee !== 'true' && Defaults.check(data === null || data === void 0 ? void 0 : data.id);\n  const type = props.type ? props.type : 'text';\n  const label = props.label;\n  const jsxLabel = props.jsxLabel;\n  let tooltip = (props.tooltip === true ? data === null || data === void 0 ? void 0 : (_data = data['__info_of__' + field]) === null || _data === void 0 ? void 0 : _data.txt : props.tooltip) || '';\n  let css = 'my-auto input ';\n  css += jsxLabel ? 'ms-1' : label ? 'ms-auto' : '';\n  css += props.hidden ? ' hidden-input' : '';\n  let autosize = props.autosize === undefined ? false : props.autosize; // props.type==='text'\n  css += autosize ? ' autosize-input' : '';\n  const isBoolean = ['checkbox', 'radio'].includes(type);\n  const change = evt => {\n    if (isBoolean) {\n      if (readOnly) return;\n      const target = evt.target.checked;\n      if (setter) setter(target);else data[field] = target;\n    } else {\n      setValue(evt.target.value);\n      setIsTouched(true); // I'm editing the element in my local state.\n    }\n  };\n\n  const keyDown = evt => {\n    if (evt.key === Keystrokes.enter) blur(evt);\n    if (evt.key === Keystrokes.escape) {\n      const oldValue = getter ? getter(data) : data[field];\n      evt.target.value = oldValue;\n      setValue(oldValue);\n      setIsTouched(false);\n      evt.target.blur();\n      // to optimize: probably can remove a large part of this function because this should trigger blur event as well. or move \"change\" event contents here\n      // optimize 2: memoize the whole component, so it won't update unless the displayed value changed. this would also fix cursor going to input end when pressing enter.\n    }\n  };\n\n  const blur = evt => {\n    if (readOnly || isBoolean) return;\n    const newValue = evt.target.value;\n    const oldValue = getter ? getter(data) : data[field];\n    if (newValue !== oldValue) {\n      if (setter) setter(newValue);else data[field] = newValue;\n    }\n    // I terminate my editing, so I communicate it to other <Input /> that render the same field.\n    setIsTouched(false);\n  };\n  const otherprops = {\n    ...props\n  };\n  delete otherprops.data;\n  delete otherprops.field;\n  delete otherprops.getter;\n  delete otherprops.setter;\n  delete otherprops.label;\n  delete otherprops.jsxLabel;\n  delete otherprops.tooltip;\n  delete otherprops.hidden;\n  delete otherprops.inputStyle;\n  delete otherprops.children;\n  delete otherprops.autosize; // because react complains is bool in dom attribute or unknown attrib name\n\n  let checked = undefined;\n  if (isBoolean) checked = typeof value === \"boolean\" ? value : typeof value === \"string\" ? U.fromBoolString(value) : !!value;\n  let cursor;\n  if (tooltip) cursor = 'help';else if (readOnly) cursor = 'not-allowed';else if (isBoolean) cursor = 'pointer';else cursor = 'auto';\n  let inputStyle = props.inputStyle || {};\n  if (!inputStyle.cursor && cursor === 'not-allowed') {\n    inputStyle.cursor = cursor;\n  }\n  let rootStyle = {\n    display: jsxLabel || label ? 'flex' : 'block',\n    cursor,\n    ...(props.style || {})\n  };\n  if (readOnly && !(\"color\" in rootStyle)) rootStyle.color = \"gray\";\n  let input = /*#__PURE__*/_createElement(\"input\", {\n    ...otherprops,\n    key: `${field}.${data === null || data === void 0 ? void 0 : data.id}`,\n    className: props.inputClassName || css,\n    style: inputStyle,\n    spellCheck: false,\n    readOnly: readOnly,\n    type: type,\n    value: value,\n    onChange: change,\n    onBlur: blur,\n    onKeyDown: keyDown,\n    checked: checked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  });\n  return input;\n  /*\r\n      return(<label className={'p-1'} {...otherprops}\r\n                    style={rootStyle}>\r\n  \r\n          {label && <span className={'my-auto'} onMouseEnter={e => setShowTooltip(true)}\r\n                          onMouseLeave={e => setShowTooltip(false)}>{label}\r\n          </span>}\r\n  \r\n          {jsxLabel && <span onMouseEnter={e => setShowTooltip(true)}\r\n                             onMouseLeave={e => setShowTooltip(false)} style={{width: '100%'}}>{jsxLabel}\r\n          </span>}\r\n  \r\n          {(tooltip && showTooltip) && <div className={'my-tooltip'}>\r\n              <b className={'text-center text-capitalize'}>{field}</b>\r\n              <br />\r\n              <label>{tooltip}</label>\r\n          </div>}\r\n  \r\n          {autosize ? <div className={(autosize ? 'autosize-input-container' : '') + (props.asLabel ? ' labelstyle' : '')}\r\n                           data-value={value}>{input}\r\n          </div> : input}\r\n      </label>);}*/\n}\n_s(InputComponent, \"9ozUTWaLJTktvX9x66LwpsnOFRw=\", false, function () {\n  return [useStateIfMounted, useStateIfMounted, useStateIfMounted];\n});\n_c = InputComponent;\nInputComponent.cname = 'InputComponent';\nfunction mapStateToProps(state, ownProps) {\n  var _ownProps$data;\n  const ret = {};\n  const pointer = typeof ownProps.data === 'string' ? ownProps.data : (_ownProps$data = ownProps.data) === null || _ownProps$data === void 0 ? void 0 : _ownProps$data.id;\n  ret.debugmodee = state.debug ? 'true' : 'false';\n  if (pointer) ret.data = LPointerTargetable.fromPointer(pointer);\n  /*\r\n  const selected = state.selected;\r\n  ret.selected = {};\r\n  for(let user of Object.keys(selected)) {\r\n      const pointer = selected[user];\r\n      if(pointer) ret.selected[user] = LModelElement.fromPointer(pointer);\r\n      else ret.selected[user] = null;\r\n  }\r\n    */\n  return ret;\n}\nfunction mapDispatchToProps(dispatch) {\n  const ret = {};\n  return ret;\n}\nexport const InputConnected = connect(mapStateToProps, mapDispatchToProps)(InputComponent);\nexport function Input(props) {\n  let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return /*#__PURE__*/_jsxDEV(InputConnected, {\n    ...props,\n    children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 12\n  }, this);\n}\n_c2 = Input;\nexport const Edit = Input;\nInputComponent.cname = 'InputComponent';\nInputConnected.cname = 'InputConnected';\nInput.cname = 'Input';\nEdit.cname = 'Edit';\nvar _c, _c2;\n$RefreshReg$(_c, \"InputComponent\");\n$RefreshReg$(_c2, \"Input\");","map":{"version":3,"names":["React","connect","Defaults","Keystrokes","LPointerTargetable","U","useStateIfMounted","Fragment","_Fragment","jsxDEV","_jsxDEV","createElement","_createElement","InputComponent","props","_s","_data","data","getter","setter","field","oldValue","undefined","value","setValue","isTouched","setIsTouched","showTooltip","setShowTooltip","children","readOnly","readonly","debugmodee","check","id","type","label","jsxLabel","tooltip","txt","css","hidden","autosize","isBoolean","includes","change","evt","target","checked","keyDown","key","enter","blur","escape","newValue","otherprops","inputStyle","fromBoolString","cursor","rootStyle","display","style","color","input","className","inputClassName","spellCheck","onChange","onBlur","onKeyDown","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_c","cname","mapStateToProps","state","ownProps","_ownProps$data","ret","pointer","debug","fromPointer","mapDispatchToProps","dispatch","InputConnected","Input","arguments","length","_c2","Edit","$RefreshReg$"],"sources":["C:/d/Programming/web/jodel-mde/src/components/forEndUser/Input.tsx"],"sourcesContent":["import React, {Dispatch, KeyboardEvent, ReactElement, ReactNode} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {DState} from '../../redux/store';\r\nimport {Defaults, DPointerTargetable, GObject, Keystrokes, LPointerTargetable, Overlap, Pointer, U} from '../../joiner';\r\nimport {useStateIfMounted} from 'use-state-if-mounted';\r\nimport './style.scss';\r\n\r\n\r\nfunction InputComponent(props: AllProps) {\r\n    const data = props.data;\r\n\r\n    /*  Uncomment this when we have user authentication: if a user is on a ME, it cannot be edited.\r\n                damiano: ok, ma se data non è ModelElement crasha perchè non ha \"father\"\r\n                mettici prima un\r\n                if (RuntimeAccessibleClass.extends(data, DModelElement.cname))\r\n\r\n    const fathers = U.fatherChain(data as LModelElement);\r\n    for(let father of fathers) {\r\n        const user = Object.keys(selected).find(key => selected[key]?.id === father);\r\n        if(user && user !== DUser.current) editable = false;\r\n        if(!editable) break;\r\n    }\r\n    */\r\n\r\n    const getter = props.getter;\r\n    const setter = props.setter;\r\n    const field: string = props.field as string;\r\n    const oldValue = (!data) ? undefined : (getter) ? getter(data) : data[field]; // !== undefined); ? data[field] : 'undefined'\r\n    const [value, setValue] = useStateIfMounted(oldValue);\r\n    const [isTouched, setIsTouched] = useStateIfMounted(false);\r\n    const [showTooltip, setShowTooltip] = useStateIfMounted(false);\r\n\r\n    // I check if the value that I have in my local state is being edited by other <Input />\r\n    if (value !== oldValue && !isTouched){\r\n        setValue(oldValue);\r\n        setIsTouched(false);\r\n    }\r\n\r\n\r\n    if (!(data || (getter && setter))) return(<>Either props.data or both getter & setter are required.</>);\r\n    const readOnly = (props.readonly !== undefined) ? props.readonly : props.debugmodee !== 'true' && Defaults.check(data?.id);\r\n    const type = (props.type) ? props.type : 'text';\r\n    const label: ReactNode|string|undefined = props.label;\r\n    const jsxLabel: ReactNode|undefined = props.jsxLabel;\r\n    let tooltip: ReactNode|string|undefined = ((props.tooltip === true) ? data?.['__info_of__' + field]?.txt : props.tooltip) || '';\r\n\r\n    let css = 'my-auto input ';\r\n    css += (jsxLabel) ? 'ms-1' : (label) ? 'ms-auto' : '';\r\n    css += (props.hidden) ? ' hidden-input' : '';\r\n    let autosize: boolean = props.autosize === undefined ? false : props.autosize; // props.type==='text'\r\n    css += autosize ? ' autosize-input' : '';\r\n    const isBoolean = (['checkbox', 'radio'].includes(type));\r\n\r\n    const change = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (isBoolean) {\r\n            if (readOnly) return;\r\n            const target = evt.target.checked;\r\n            if (setter) setter(target);\r\n            else data[field] = target;\r\n        } else {\r\n            setValue(evt.target.value);\r\n            setIsTouched(true);     // I'm editing the element in my local state.\r\n        }\r\n    }\r\n    const keyDown = (evt: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (evt.key === Keystrokes.enter) blur(evt as any);\r\n        if (evt.key === Keystrokes.escape) {\r\n            const oldValue = getter ? getter(data) : data[field];\r\n            (evt.target as HTMLInputElement).value = oldValue;\r\n            setValue(oldValue);\r\n            setIsTouched(false);\r\n            (evt.target as HTMLInputElement).blur();\r\n            // to optimize: probably can remove a large part of this function because this should trigger blur event as well. or move \"change\" event contents here\r\n            // optimize 2: memoize the whole component, so it won't update unless the displayed value changed. this would also fix cursor going to input end when pressing enter.\r\n        }\r\n    }\r\n\r\n    const blur = (evt: React.FocusEvent<HTMLInputElement>) => {\r\n        if (readOnly || isBoolean) return;\r\n        const newValue = evt.target.value;\r\n        const oldValue = getter ? getter(data) : data[field];\r\n        if (newValue !== oldValue) {\r\n            if (setter) setter(newValue);\r\n            else data[field] = newValue;\r\n        }\r\n        // I terminate my editing, so I communicate it to other <Input /> that render the same field.\r\n        setIsTouched(false);\r\n    }\r\n\r\n    const otherprops: GObject = {...props};\r\n    delete otherprops.data;\r\n    delete otherprops.field;\r\n    delete otherprops.getter;\r\n    delete otherprops.setter;\r\n    delete otherprops.label;\r\n    delete otherprops.jsxLabel;\r\n    delete otherprops.tooltip;\r\n    delete otherprops.hidden;\r\n    delete otherprops.inputStyle;\r\n    delete otherprops.children;\r\n    delete otherprops.autosize; // because react complains is bool in dom attribute or unknown attrib name\r\n\r\n    let checked: boolean | undefined = undefined;\r\n    if (isBoolean) checked = typeof value === \"boolean\" ? value : (typeof value === \"string\" ? U.fromBoolString(value) : !!value);\r\n\r\n    let cursor: string;\r\n    if (tooltip) cursor = 'help';\r\n    else if (readOnly) cursor = 'not-allowed';\r\n    else if (isBoolean) cursor = 'pointer';\r\n    else cursor = 'auto';\r\n    let inputStyle = props.inputStyle || {};\r\n    if (!inputStyle.cursor && cursor === 'not-allowed') { inputStyle.cursor = cursor; }\r\n    let rootStyle = {display: (jsxLabel || label) ? 'flex' : 'block', cursor, ...((props as any).style || {})};\r\n    if (readOnly && !(\"color\" in rootStyle)) rootStyle.color = \"gray\";\r\n    let input = <input {...otherprops}\r\n                       key={`${field}.${data?.id}`}\r\n                       className={props.inputClassName || css}\r\n                       style={inputStyle}\r\n                       spellCheck={false}\r\n                       readOnly={readOnly}\r\n                       type={type} value={value} onChange={change} onBlur={blur} onKeyDown={keyDown}\r\n                       checked={checked} />;\r\n    return input;\r\n/*\r\n    return(<label className={'p-1'} {...otherprops}\r\n                  style={rootStyle}>\r\n\r\n        {label && <span className={'my-auto'} onMouseEnter={e => setShowTooltip(true)}\r\n                        onMouseLeave={e => setShowTooltip(false)}>{label}\r\n        </span>}\r\n\r\n        {jsxLabel && <span onMouseEnter={e => setShowTooltip(true)}\r\n                           onMouseLeave={e => setShowTooltip(false)} style={{width: '100%'}}>{jsxLabel}\r\n        </span>}\r\n\r\n        {(tooltip && showTooltip) && <div className={'my-tooltip'}>\r\n            <b className={'text-center text-capitalize'}>{field}</b>\r\n            <br />\r\n            <label>{tooltip}</label>\r\n        </div>}\r\n\r\n        {autosize ? <div className={(autosize ? 'autosize-input-container' : '') + (props.asLabel ? ' labelstyle' : '')}\r\n                         data-value={value}>{input}\r\n        </div> : input}\r\n    </label>);}*/\r\n\r\n}\r\n\r\nInputComponent.cname = 'InputComponent';\r\nexport interface InputOwnProps {\r\n    data?: LPointerTargetable | DPointerTargetable | Pointer<DPointerTargetable, 1, 1, LPointerTargetable>;\r\n    field?: string;\r\n    getter?: (data: any/*LPointerTargetable*/) => string | boolean | undefined;\r\n    setter?: (value: string|boolean) => void;\r\n    label?: string | ReactNode;\r\n    jsxLabel?: ReactNode;\r\n    type?: 'checkbox'|'color'|'date'|'datetime-local'|'email'|'file'|'image'|'month'|\r\n    'number'|'password'|'radio'|'range'|'tel'|'text'|'time'|'url'|'week';\r\n    className?: string;\r\n    style?: GObject;\r\n    readonly?: boolean;\r\n    tooltip?: string | boolean | ReactElement;\r\n    hidden?: boolean;\r\n    autosize?: boolean;\r\n    inputClassName?: string;\r\n    inputStyle?: GObject;\r\n    asLabel?: boolean;\r\n    key?: React.Key | null;\r\n    placeholder?: string;\r\n}\r\ninterface StateProps {\r\n    debugmodee: string;\r\n    data: LPointerTargetable & GObject;\r\n    // selected: Dictionary<Pointer<DUser>, LModelElement | null>;\r\n}\r\ninterface DispatchProps { }\r\ntype AllProps = Overlap<InputOwnProps, Overlap<StateProps, DispatchProps>>;\r\n\r\n\r\nfunction mapStateToProps(state: DState, ownProps: InputOwnProps): StateProps {\r\n    const ret: StateProps = {} as any;\r\n    const pointer: Pointer | undefined = typeof ownProps.data === 'string' ? ownProps.data : ownProps.data?.id;\r\n    ret.debugmodee = state.debug ? 'true' : 'false';\r\n    if (pointer) ret.data = LPointerTargetable.fromPointer(pointer);\r\n    /*\r\n    const selected = state.selected;\r\n    ret.selected = {};\r\n    for(let user of Object.keys(selected)) {\r\n        const pointer = selected[user];\r\n        if(pointer) ret.selected[user] = LModelElement.fromPointer(pointer);\r\n        else ret.selected[user] = null;\r\n    }\r\n\r\n    */\r\n    return ret;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<any>): DispatchProps {\r\n    const ret: DispatchProps = {};\r\n    return ret;\r\n}\r\n\r\nexport const InputConnected =\r\n    connect<StateProps, DispatchProps, InputOwnProps, DState>(mapStateToProps, mapDispatchToProps)(InputComponent);\r\n\r\n\r\nexport function Input(props: InputOwnProps, children: (string | React.Component)[] = []): ReactElement {\r\n    return <InputConnected {...{...props, children}} />;\r\n}\r\nexport const Edit = Input;\r\n\r\nInputComponent.cname = 'InputComponent';\r\nInputConnected.cname = 'InputConnected';\r\nInput.cname = 'Input';\r\nEdit.cname = 'Edit';\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}